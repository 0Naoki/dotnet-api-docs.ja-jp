<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Console.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5493e36b1a7f90051fb8a40e338875db53b19f390.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">493e36b1a7f90051fb8a40e338875db53b19f390</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Console">
          <source>Represents the standard input, output, and error streams for console applications.</source>
          <target state="translated">コンソール アプリケーションの標準入力ストリーム、標準出力ストリーム、および標準エラー ストリームを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Console">
          <source>This class cannot be inherited.</source>
          <target state="translated">このクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The console is an operating system window where users interact with the operating system or with a text-based console application by entering text input through the computer keyboard, and by reading text output from the computer terminal.</source>
          <target state="translated">コンソールは、インターフェイスを提供する、テキスト ベースのコンソール アプリケーションやオペレーティング システムで、コンピューターのキーボードから入力されたテキストを入力して、コンピューターの端末からのテキストの出力を読み取ることで、オペレーティング システムのウィンドウです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>For example, in the Windows operating system, the console is called the Command Prompt window and accepts MS-DOS commands.</source>
          <target state="translated">たとえば、Windows オペレーティング システムで、コンソール、コマンド プロンプト ウィンドウと呼びます MS-DOS のコマンドを受け付けます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The <ph id="ph1">&lt;xref:System.Console&gt;</ph> class provides basic support for applications that read characters from, and write characters to, the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console&gt;</ph>クラスから文字を読み取るし、コンソールに文字を書き込むアプリケーションの基本的なサポートを提供します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>For information about developing with the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class, see the following sections:</source>
          <target state="translated">開発については、<ph id="ph1">&lt;xref:System.Console&gt;</ph>クラスの次のセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source><bpt id="p1">[</bpt>Console I/O Streams<ept id="p1">](#Streams)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>コンソール I/O ストリーム<ept id="p1">](#Streams)</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source><bpt id="p1">[</bpt>Screen Buffer and Console Window<ept id="p1">](#Buffer)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>画面バッファーのサイズとコンソール ウィンドウ<ept id="p1">](#Buffer)</ept></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source><bpt id="p1">[</bpt>Unicode Support for the Console<ept id="p1">](#Unicode)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>コンソールの Unicode のサポート<ept id="p1">](#Unicode)</ept></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source><bpt id="p1">[</bpt>Common Operations<ept id="p1">](#Operations)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>一般的な操作<ept id="p1">](#Operations)</ept></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source><bpt id="p1">[</bpt>.NET Core Notes<ept id="p1">](#Core)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>.NET core の注意事項<ept id="p1">](#Core)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Console I/O Streams</source>
          <target state="translated">コンソール I/O ストリーム</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>When a console application starts, the operating system automatically associates three I/O streams with the console: standard input stream, standard output stream, and standard error output stream.</source>
          <target state="translated">コンソール アプリケーションの起動時、オペレーティング システムに自動的に関連付けます 3 つの I/O ストリーム コンソール: 標準入力ストリーム、標準出力ストリームと標準エラー出力ストリーム。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Your application can read user input from the standard input stream; write normal data to the standard output stream; and write error data to the standard error output stream.</source>
          <target state="translated">アプリケーションがユーザー入力を標準入力ストリームから読み取ることができます。通常のデータの標準出力ストリームに書き込むです。エラー データを標準エラー出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>These streams are presented to your application as the values of the <ph id="ph1">&lt;xref:System.Console.In%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Console.Error%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">これらのストリームがの値として、アプリケーションに提示、 <ph id="ph1">&lt;xref:System.Console.In%2A?displayProperty=nameWithType&gt;</ph>、 <ph id="ph2">&lt;xref:System.Console.Out%2A?displayProperty=nameWithType&gt;</ph>、および<ph id="ph3">&lt;xref:System.Console.Error%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>By default, the value of the <ph id="ph1">&lt;xref:System.Console.In%2A&gt;</ph> property is a <ph id="ph2">&lt;xref:System.IO.TextReader?displayProperty=nameWithType&gt;</ph> object that represents the keyboard, and the values of the <ph id="ph3">&lt;xref:System.Console.Out%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Console.Error%2A&gt;</ph> properties are <ph id="ph5">&lt;xref:System.IO.TextWriter?displayProperty=nameWithType&gt;</ph> objects that represent a console window.</source>
          <target state="translated">既定では、値、<ph id="ph1">&lt;xref:System.Console.In%2A&gt;</ph>プロパティは、 <ph id="ph2">&lt;xref:System.IO.TextReader?displayProperty=nameWithType&gt;</ph> 、キーボード、およびの値を表すオブジェクト、<ph id="ph3">&lt;xref:System.Console.Out%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Console.Error%2A&gt;</ph>プロパティは、<ph id="ph5">&lt;xref:System.IO.TextWriter?displayProperty=nameWithType&gt;</ph>をコンソール ウィンドウを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>However, you can set these properties to streams that do not represent the console window or keyboard; for example, you can set these properties to streams that represent files.</source>
          <target state="translated">ただし、コンソール ウィンドウまたはキーボードを表さないストリームにこれらのプロパティを設定することができます。たとえば、ファイルを表すストリームにこれらのプロパティを設定できます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>To redirect the standard input, standard output, or standard error stream, call the <ph id="ph1">&lt;xref:System.Console.SetIn%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Console.SetOut%2A?displayProperty=nameWithType&gt;</ph>, or <ph id="ph3">&lt;xref:System.Console.SetError%2A?displayProperty=nameWithType&gt;</ph> method, respectively.</source>
          <target state="translated">標準入力、標準出力、または標準エラー ストリームをリダイレクトするには、呼び出し、 <ph id="ph1">&lt;xref:System.Console.SetIn%2A?displayProperty=nameWithType&gt;</ph>、 <ph id="ph2">&lt;xref:System.Console.SetOut%2A?displayProperty=nameWithType&gt;</ph>、または<ph id="ph3">&lt;xref:System.Console.SetError%2A?displayProperty=nameWithType&gt;</ph>メソッド、それぞれします。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>I/O operations that use these streams are synchronized, which means that multiple threads can read from, or write to, the streams.</source>
          <target state="translated">これらのストリームを使用する I/O 操作が同期されますが、つまり、複数のスレッドがデータの読み取りまたはストリームに書き込むことができます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>This means that methods that are ordinarily asynchronous, such as <ph id="ph1">&lt;xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType&gt;</ph>, execute synchronously if the object represents a console stream.</source>
          <target state="translated">つまり、メソッドなど、通常は非同期である<ph id="ph1">&lt;xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType&gt;</ph>場合は、コンソールのストリームを表すオブジェクトを同期的に実行します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Do not use the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class to display output in unattended applications, such as server applications.</source>
          <target state="translated">使用しないで、<ph id="ph1">&lt;xref:System.Console&gt;</ph>サーバー アプリケーションなど、自動アプリケーションで出力を表示するクラス。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Calls to methods such as <ph id="ph1">&lt;xref:System.Console.Write%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> have no effect in GUI applications.</source>
          <target state="translated">などのメソッドを呼び出し<ph id="ph1">&lt;xref:System.Console.Write%2A?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph>GUI アプリケーションに影響を与えるありません。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source><ph id="ph1">&lt;xref:System.Console&gt;</ph> class members that work normally when the underlying stream is directed to a console might throw an exception if the stream is redirected, for example, to a file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console&gt;</ph> ストリームがリダイレクトされる場合、たとえば、ファイルに、基になるストリームがコンソールに送られるときに正常に動作するクラスのメンバーは例外をスロー可能性があります。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Program your application to catch <ph id="ph1">&lt;xref:System.IO.IOException?displayProperty=nameWithType&gt;</ph> exceptions if you redirect a standard stream.</source>
          <target state="translated">アプリケーションをキャッチする<ph id="ph1">&lt;xref:System.IO.IOException?displayProperty=nameWithType&gt;</ph>標準ストリームをリダイレクトする場合は例外です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Console.IsOutputRedirected%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Console.IsInputRedirected%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Console.IsErrorRedirected%2A&gt;</ph> properties to determine whether a standard stream is redirected before performing an operation that throws an <ph id="ph4">&lt;xref:System.IO.IOException?displayProperty=nameWithType&gt;</ph> exception.</source>
          <target state="translated">使用することも、 <ph id="ph1">&lt;xref:System.Console.IsOutputRedirected%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Console.IsInputRedirected%2A&gt;</ph>、および<ph id="ph3">&lt;xref:System.Console.IsErrorRedirected%2A&gt;</ph>をスローする操作を実行する前に、標準的なストリームをリダイレクトするかどうかを判断するプロパティ、<ph id="ph4">&lt;xref:System.IO.IOException?displayProperty=nameWithType&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>It is sometimes useful to explicitly call the members of the stream objects represented by the <ph id="ph1">&lt;xref:System.Console.In%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Console.Out%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Console.Error%2A&gt;</ph> properties.</source>
          <target state="translated">によって表されるストリーム オブジェクトのメンバーを明示的に呼び出しが便利な場合があります、 <ph id="ph1">&lt;xref:System.Console.In%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Console.Out%2A&gt;</ph>、および<ph id="ph3">&lt;xref:System.Console.Error%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>For example, by default, the <ph id="ph1">&lt;xref:System.Console.ReadLine%2A?displayProperty=nameWithType&gt;</ph> method reads input from the standard input stream.</source>
          <target state="translated">たとえば、既定では、<ph id="ph1">&lt;xref:System.Console.ReadLine%2A?displayProperty=nameWithType&gt;</ph>メソッド入力、標準入力ストリームから読み取ります。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Similarly, the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> method writes data to the standard output stream, and the data is followed by the default line termination string, which is  a carriage return and line feed ("\r\n").</source>
          <target state="translated">同様に、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph>メソッドは、標準出力ストリームにデータを書き込みますとデータの既定の行終端文字列は、キャリッジ リターンが続くし、ライン フィード ("\r\n") です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>However, the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class does not provide a corresponding method to write data to the standard error output stream, or a property to change the line termination string for data written to that stream.</source>
          <target state="translated">ただし、<ph id="ph1">&lt;xref:System.Console&gt;</ph>クラスは、標準エラー出力ストリーム、またはそのストリームに書き込まれたデータの行終端文字列を変更するプロパティにデータを書き込むに対応するメソッドを提供しません。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>You can solve this problem by setting the <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Console.Out%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Console.Error%2A&gt;</ph> property to another line termination string.</source>
          <target state="translated">この問題を解決するには、設定、<ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Console.Out%2A&gt;</ph>または<ph id="ph3">&lt;xref:System.Console.Error%2A&gt;</ph>プロパティを別の行終端文字列。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>For example, the following C# statement sets the line termination string for the standard error output stream to two carriage return and line feed sequences:</source>
          <target state="translated">たとえば、次の c# ステートメントでは、次の 2 つのキャリッジ リターンとライン フィードのシーケンスに標準エラー出力ストリームの行終端文字列を設定します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>You can then explicitly call the <ph id="ph1">&lt;xref:System.IO.TextWriter.WriteLine%2A&gt;</ph> method of the error output stream object, as in the following C# statement:</source>
          <target state="translated">明示的に呼び出すことができますし、<ph id="ph1">&lt;xref:System.IO.TextWriter.WriteLine%2A&gt;</ph>次の c# ステートメントと同様に、エラー出力ストリーム オブジェクトのメソッド。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Screen Buffer and Console Window</source>
          <target state="translated">画面バッファーのサイズとコンソール ウィンドウ</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Two closely related features of the console are the screen buffer and the console window.</source>
          <target state="translated">コンソールの 2 つの密接に関連する機能は、画面バッファーとコンソール ウィンドウを示します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Text is actually read from or written to streams owned by the console, but appear to be read from or written to an area owned by the console called the screen buffer.</source>
          <target state="translated">テキストが実際にから読み取られたか、コンソールが所有するストリームに書き込まれますからの読み取りまたは書き込み画面バッファーと呼ばれるコンソールによって所有されている領域に表示されます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The screen buffer is an attribute of the console, and is organized as a rectangular grid of rows and columns where each grid intersection, or character cell, can contain a character.</source>
          <target state="translated">画面バッファーは、コンソールの属性でありは、四角形グリッドの行と列の各グリッドの積集合、または文字セルが文字を使用する場所として構成されています。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Each character has its own foreground color, and each character cell has its own background color.</source>
          <target state="translated">各文字には、独自の前景の色と、各文字セルが、独自の背景色。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The screen buffer is viewed through a rectangular region called the console window.</source>
          <target state="translated">画面バッファーは、コンソール ウィンドウと呼ばれる四角形の領域で表示されます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The console window is another attribute of the console; it is not the console itself, which is an operating system window.</source>
          <target state="translated">コンソール ウィンドウは、コンソールの別の属性コンソール自体はオペレーティング システムのウィンドウではありません。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The console window is arranged in rows and columns, is less than or equal to the size of the screen buffer, and can be moved to view different areas of the underlying screen buffer.</source>
          <target state="translated">コンソール ウィンドウは、行と列に配置されているより小さいか、画面バッファーのサイズに等しいと、基になる画面バッファーのさまざまな領域の表示に移動することができます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>If the screen buffer is larger than the console window, the console automatically displays scroll bars so the console window can be repositioned over the screen buffer area.</source>
          <target state="translated">画面バッファーがコンソール ウィンドウよりも大きい場合は、コンソールで、コンソール ウィンドウは画面バッファー領域の上位置を変更できるように、スクロール バーが自動的に表示されます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>A cursor indicates the screen buffer position where text is currently read or written.</source>
          <target state="translated">カーソルでは、画面バッファーの位置でテキストが現在の読み取りまたは書き込まれるを示します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The cursor can be hidden or made visible, and its height can be changed.</source>
          <target state="translated">カーソル非表示にしたり、表示し、高さを変更することができます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>If the cursor is visible, the console window position is moved automatically so the cursor is always in view.</source>
          <target state="translated">カーソルが表示されている場合は、コンソール ウィンドウの位置は自動的に移動ため、カーソルがビューでは常にします。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The origin for character cell coordinates in the screen buffer is the upper left corner, and the positions of the cursor and the console window are measured relative to that origin.</source>
          <target state="translated">画面バッファー内の文字セル座標の原点は左上隅およびその原点に対する、カーソルや、コンソール ウィンドウの位置は測定されます。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Use zero-based indexes to specify positions; that is, specify the topmost row as row 0, and the leftmost column as column 0.</source>
          <target state="translated">0 から始まるインデックスを使用して、位置です。つまり、0、行と列 0 として左端の列として、最上位の行を指定します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The maximum value for the row and column indexes is <ph id="ph1">&lt;xref:System.Int16.MaxValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">行と列のインデックスの最大値は<ph id="ph1">&lt;xref:System.Int16.MaxValue?displayProperty=nameWithType&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Unicode Support for the Console</source>
          <target state="translated">コンソールの Unicode のサポート</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>In general, the console reads input and writes output by using the current console code page, which the system locale defines by default.</source>
          <target state="translated">一般に、コンソールは、入力を読み取るし、既定では、システムのロケールを定義する、現在のコンソールのコード ページを使用して、出力を書き込みます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>A code page can handle only a subset of available Unicode characters, so if you try to display characters that are not mapped by a particular code page, the console won't be able to display all characters or represent them accurately.</source>
          <target state="translated">しようとする場合、コンソール、特定のコード ページにマップされていない文字を表示できませんのすべての文字を表示またはそれらを正確に表してので、コード ページは、使用可能な Unicode 文字のサブセットのみを処理できます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The following example illustrates this problem.</source>
          <target state="translated">この問題を説明する例を次に示します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>It tries to display the characters of the Cyrillic alphabet from U+0410 to U+044F to the console.</source>
          <target state="translated">U +0 044F にキリル文字 U + 0410 からの文字をコンソールに表示しようとします。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>If you run the example on a system that uses console code page 437, each character is replaced by a question mark (?), because Cyrillic characters do not map to the characters in code page 437.</source>
          <target state="translated">コンソールのコード ページ 437 を使用するシステムで例を実行する場合は、キリル文字はコード ページ 437 の文字にマップされていないため、疑問符 (?) での各文字が置き換えられます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>In addition to supporting code pages, the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class supports UTF-8 encoding with the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph> class.</source>
          <target state="translated">コード ページをサポートするだけでなく、<ph id="ph1">&lt;xref:System.Console&gt;</ph>クラスは、utf-8 でエンコードをサポートしている、<ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Beginning with the .NET Framework 4.5, the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class also supports UTF-16 encoding with the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> class.</source>
          <target state="translated">.NET Framework 4.5 以降では、<ph id="ph1">&lt;xref:System.Console&gt;</ph>クラスには、utf-16 エンコードでもサポートしています、<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>To display Unicode characters to the console.</source>
          <target state="translated">コンソールには、Unicode 文字を表示します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>you set the <ph id="ph1">&lt;xref:System.Console.OutputEncoding%2A&gt;</ph> property to either <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph> or  <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>.</source>
          <target state="translated">設定する、<ph id="ph1">&lt;xref:System.Console.OutputEncoding%2A&gt;</ph>プロパティを<ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph>または<ph id="ph3">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Support for Unicode characters requires the encoder to recognize a particular Unicode character, and also requires a font that has the glyphs needed to render that character.</source>
          <target state="translated">Unicode 文字のサポート、特定の Unicode 文字を認識するように、エンコーダーとも はその文字を表示するために必要なグリフ含まれているフォントが必要です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>To successfully display Unicode characters to the console, the console font must be set to a non-raster or TrueType font such as Consolas or Lucida Console.</source>
          <target state="translated">正常に Unicode 文字をコンソールに表示するには、コンソールのフォントをラスター以外または Consolas など Lucida Console TrueType フォントを設定しなければなりません。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The following example shows how you can programmatically change the font from a raster font to Lucida Console.</source>
          <target state="translated">次の例では、プログラムを変更する方法、フォント ラスター フォントから Lucida Console を示します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>However, TrueType fonts can display only a subset of glyphs.</source>
          <target state="translated">ただし、TrueType フォントは、グリフのサブセットのみを表示できます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>For example, the Lucida Console font displays only 643 of the approximately 64,000 available characters from U+0021 to U+FB02.</source>
          <target state="translated">たとえば、Lucida Console フォントには、約 64,000 使用可能な文字 U + 0021 U + FB02 に 643 のみが表示されます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>To see which characters a particular font supports, open the <bpt id="p1">**</bpt>Fonts<ept id="p1">**</ept> applet in Control Panel, choose the <bpt id="p2">**</bpt>Find a character<ept id="p2">**</ept> option, and choose the font whose character set you'd like to examine in the <bpt id="p3">**</bpt>Font<ept id="p3">**</ept> list of the <bpt id="p4">**</bpt>Character Map<ept id="p4">**</ept> window.</source>
          <target state="translated">サポートする特定のフォントの文字を表示する、開く、<bpt id="p1">**</bpt>フォント<ept id="p1">**</ept>コントロール パネルのアプレットを選択して、<bpt id="p2">**</bpt>文字を検索<ept id="p2">**</ept>オンにしてを選択して、フォントの文字セットを調べる、<bpt id="p3">**</bpt>フォント<ept id="p3">**</ept>の一覧、<bpt id="p4">**</bpt>文字コード表<ept id="p4">**</ept>ウィンドウです。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Windows uses font linking to display glyphs that are not available in a particular font.</source>
          <target state="translated">Windows は、フォント リンクを使用して、特定のフォントでは使用できないグリフを表示します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>For information about font linking to display additional character sets, see <bpt id="p1">[</bpt>Globalization Step-by-Step: Fonts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=229111)</ept>.</source>
          <target state="translated">フォントの追加の文字セットを表示するリンクについては、次を参照してください。<bpt id="p1">[</bpt>グローバリゼーション ステップ バイ ステップ: フォント<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=229111)</ept>です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Linked fonts are defined in the HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink subkey of the registry.</source>
          <target state="translated">リンクのフォントは、レジストリの hkey_local_machine NT\CurrentVersion\FontLink\SystemLink サブキーで定義されます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Each entry associated with this subkey corresponds to the name of a base font, and its value is a string array that defines the font files and the fonts that are linked to the base font.</source>
          <target state="translated">このサブキーに関連付けられている各エントリは、基本のフォントの名前に対応し、その値はフォント ファイルを定義する文字列配列であり、基本のフォントにリンクされているフォント。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Each member of the array defines a linked font and takes the form <bpt id="p1">*</bpt>font-file-name<ept id="p1">*</ept>,<bpt id="p2">*</bpt>font-name<ept id="p2">*</ept>.</source>
          <target state="translated">配列の各メンバーがリンクされているフォントを定義し、形式の<bpt id="p1">*</bpt>フォント ファイル名<ept id="p1">*</ept>、<bpt id="p2">*</bpt>フォント名<ept id="p2">*</ept>です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The following example illustrates how you can programmatically define a linked font named SimSun found in a font file named simsun.ttc that displays Simplified Han characters.</source>
          <target state="translated">次の例では、簡略化のハングル文字を表示する simsun.ttc をという名前のフォント ファイルで見つかった SimSun をというリンクのフォントをプログラムで定義する方法を示しています。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Unicode support for the console has the following limitations:</source>
          <target state="translated">コンソールの Unicode のサポートには、次の制限があります。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>UTF-32 encoding is not supported.</source>
          <target state="translated">Utf-32 エンコーディングはサポートされていません。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The only supported Unicode encodings are UTF-8 and UTF-16, which are represented by the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> classes, respectively.</source>
          <target state="translated">サポートされる唯一の Unicode エンコーディングは utf-8 および utf-16 は、によって表される、<ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph>と<ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>クラス、それぞれします。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Bidirectional output is not supported.</source>
          <target state="translated">双方向の出力はサポートされていません。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Display of characters outside the Basic Multilingual Plane (that is, of surrogate pairs) is not supported, even if they are defined in a linked font file.</source>
          <target state="translated">基本多言語面以外の文字の表示 (つまり、サロゲート ペアの) はサポートされていません、リンクのフォント ファイルで定義されている場合でもです。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Display of characters in complex scripts is not supported.</source>
          <target state="translated">複雑なスクリプト内の文字の表示がサポートされていません。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Combining character sequences (that is, characters that consist of a base character and one or more combining characters) are displayed as separate characters.</source>
          <target state="translated">別の文字としては、組み合わせ文字シーケンス (つまり、基本文字と 1 つまたは複数の結合文字で構成される文字) が表示されます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>To work around this limitation, you can normalize the string to be displayed by calling the <ph id="ph1">&lt;xref:System.String.Normalize%2A?displayProperty=nameWithType&gt;</ph> method before sending output to the console.</source>
          <target state="translated">この制限を回避するには、呼び出すことによって表示される文字列を正規化することができます、<ph id="ph1">&lt;xref:System.String.Normalize%2A?displayProperty=nameWithType&gt;</ph>コンソールに出力を送信する前にメソッドです。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>In the following example, a string that contains the combining character sequence U+0061 U+0308 is displayed to the console as two characters before the output string is normalized, and as a single character after the <ph id="ph1">&lt;xref:System.String.Normalize%2A?displayProperty=nameWithType&gt;</ph> method is called.</source>
          <target state="translated">次の例では、組み合わせ文字を表す文字列は U +0 0061 をシーケンスの後に 1 つの文字と、出力文字列を正規化すると、前に、2 つの文字として、u+0308 がコンソールに表示される、<ph id="ph1">&lt;xref:System.String.Normalize%2A?displayProperty=nameWithType&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Note that normalization is a viable solution only if the Unicode standard for the character includes a pre-composed form that corresponds to a particular combining character sequence.</source>
          <target state="translated">正規化は、文字には combining 特定に対応する事前構成済みのフォームが含まれています、標準の Unicode 文字のシーケンスの場合にのみ実用的なソリューションを注意してください。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>If a font provides a glyph for a code point in the private use area, that glyph will be displayed.</source>
          <target state="translated">フォントは、秘密の使用領域のコード ポイントのグリフを提供する場合は、その記号が表示されます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>However, because characters in the private use area are application-specific, this may not be the expected glyph.</source>
          <target state="translated">ただし、プライベートの使用領域内の文字はアプリケーション固有であるため、このされません、予期されたグリフします。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The following example displays a range of Unicode characters to the console.</source>
          <target state="translated">次の例では、コンソールに、Unicode 文字の範囲を表示します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The example accepts three command-line parameters: the start of the range to display, the end of the range to display, and whether to use the current console encoding (<ph id="ph1">`false`</ph>) or UTF-16 encoding (<ph id="ph2">`true`</ph>).</source>
          <target state="translated">例では、次の 3 つのコマンド ライン パラメーターを受け入れる: 表示するには、および表示する現在のコンソールのエンコーディングを使用するかどうかの範囲の末尾の範囲の開始 (<ph id="ph1">`false`</ph>) または utf-16 エンコード (<ph id="ph2">`true`</ph>)。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>It assumes that the console is using a TrueType font.</source>
          <target state="translated">これは、コンソールが TrueType フォントを使用するいると仮定します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Common Operations</source>
          <target state="translated">一般的な操作</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The <ph id="ph1">&lt;xref:System.Console&gt;</ph> class contains the following methods for reading console input and writing console output:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console&gt;</ph>クラスには、コンソールの入力を読み取りやコンソール出力の書き込みは、次のメソッドが含まれています。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The overloads of the <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method read an individual character.</source>
          <target state="translated">オーバー ロード、<ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッドは、個々 の文字を読み取る。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method reads an entire line of input.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph>メソッドは入力の行全体を読み取ります。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The <ph id="ph1">&lt;xref:System.Console.Write%2A&gt;</ph> method overloads convert an instance of a value type, an array of characters, or a set of objects to a formatted or unformatted string, and then write that string to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.Write%2A&gt;</ph>メソッドのオーバー ロードが値型、文字の配列またはオブジェクトのセットのインスタンスをまたは書式設定されていない書式設定文字列に変換し、し、その文字列をコンソールに書き込みます。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>A parallel set of <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method overloads output the same string as the <ph id="ph2">&lt;xref:System.Console.Write%2A&gt;</ph> overloads but also add a line termination string.</source>
          <target state="translated">セットを並列<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>メソッドとして同じ文字列の出力はオーバー ロード、<ph id="ph2">&lt;xref:System.Console.Write%2A&gt;</ph>オーバー ロードがも行終端文字列を追加します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The <ph id="ph1">&lt;xref:System.Console&gt;</ph> class also contains methods and properties to perform the following operations:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console&gt;</ph>クラスは、次の操作を実行するメソッドとプロパティにも含まれます。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Get or set the size of the screen buffer.</source>
          <target state="translated">取得または画面バッファーのサイズを設定します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The <ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph> properties let you get or set the buffer height and width, respectively, and the <ph id="ph3">&lt;xref:System.Console.SetBufferSize%2A&gt;</ph> method lets you set the buffer size in a single method call.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph>プロパティを使用するバッファーの高さと幅がそれぞれ、設定を取得またはと<ph id="ph3">&lt;xref:System.Console.SetBufferSize%2A&gt;</ph>メソッドを使用して、1 つのメソッドの呼び出しで、バッファーのサイズを設定できます。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Get or set the size of the console window.</source>
          <target state="translated">取得またはコンソール ウィンドウのサイズを設定します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The <ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph> properties let you get or set the window height and width, respectively, and the <ph id="ph3">&lt;xref:System.Console.SetWindowSize%2A&gt;</ph> method lets you set the window size in a single method call.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>プロパティを使用すると、ウィンドウの高さと幅がそれぞれ、設定を取得またはと<ph id="ph3">&lt;xref:System.Console.SetWindowSize%2A&gt;</ph>メソッドを使用して、1 つのメソッドの呼び出しで、ウィンドウのサイズを設定できます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Get or set the size of the cursor.</source>
          <target state="translated">取得またはカーソルのサイズを設定します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The <ph id="ph1">&lt;xref:System.Console.CursorSize%2A&gt;</ph> property specifies the height of the cursor in a character cell.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.CursorSize%2A&gt;</ph>プロパティは、文字セルで、カーソルの高さを指定します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Get or set the position of the console window relative to the screen buffer.</source>
          <target state="translated">取得またはコンソール ウィンドウ、画面バッファーに対する相対の位置を設定します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The <ph id="ph1">&lt;xref:System.Console.WindowTop%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> properties let you get or set the top row and leftmost column of the screen buffer that appears in the console window, and the <ph id="ph3">&lt;xref:System.Console.SetWindowPosition%2A&gt;</ph> method lets you set these values in a single method call.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.WindowTop%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>プロパティを使用すると、取得または設定の先頭の行と、コンソール ウィンドウに表示される画面バッファーの左端の列と<ph id="ph3">&lt;xref:System.Console.SetWindowPosition%2A&gt;</ph>メソッドを使用して、1 つのメソッドの呼び出しでこれらの値を設定できます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Get or set the position of the cursor by getting or setting the <ph id="ph1">&lt;xref:System.Console.CursorTop%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.CursorLeft%2A&gt;</ph> properties, or set the position of the cursor by calling the <ph id="ph3">&lt;xref:System.Console.SetCursorPosition%2A&gt;</ph> method.</source>
          <target state="translated">によって取得または設定、カーソルの位置を取得または設定、<ph id="ph1">&lt;xref:System.Console.CursorTop%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.CursorLeft%2A&gt;</ph>プロパティ、またはセットを呼び出して、カーソルの位置、<ph id="ph3">&lt;xref:System.Console.SetCursorPosition%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Move or clear data in the screen buffer by calling the <ph id="ph1">&lt;xref:System.Console.MoveBufferArea%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Console.Clear%2A&gt;</ph> method.</source>
          <target state="translated">移動または呼び出すことによって、画面バッファー内のデータを消去、<ph id="ph1">&lt;xref:System.Console.MoveBufferArea%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Console.Clear%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Get or set the foreground and background colors by using the <ph id="ph1">&lt;xref:System.Console.ForegroundColor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph> properties, or reset the background and foreground to their default colors by calling the <ph id="ph3">&lt;xref:System.Console.ResetColor%2A&gt;</ph> method.</source>
          <target state="translated">Get またはを使用して、前景色と背景色を設定、<ph id="ph1">&lt;xref:System.Console.ForegroundColor%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph>プロパティ、または前景色および背景を呼び出すことによって、既定の色にリセット、<ph id="ph3">&lt;xref:System.Console.ResetColor%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Play the sound of a beep through the console speaker by calling the <ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> method.</source>
          <target state="translated">呼び出すことによってコンソールのスピーカーからビープ音を鳴らす、<ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source><ph id="ph1">[!INCLUDE[net_core](~/includes/net-core-md.md)]</ph> Notes</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_core](~/includes/net-core-md.md)]</ph> 注意事項</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>In the .NET Framework on the desktop, the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class uses the encoding returned by <ph id="ph2">`GetConsoleCP`</ph> and <ph id="ph3">`GetConsoleOutputCP`</ph>, which typically is a code page encoding.</source>
          <target state="translated">デスクトップで、.NET Framework で、<ph id="ph1">&lt;xref:System.Console&gt;</ph>エンコーディングによって返されるクラスを使用して<ph id="ph2">`GetConsoleCP`</ph>と<ph id="ph3">`GetConsoleOutputCP`</ph>、通常は、コード ページ エンコーディングします。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>For example code, on systems whose culture is English (United States), code page 437 is the encoding that is used by default.</source>
          <target state="translated">たとえば、システムのカルチャが英語 (米国) コード ページ 437 コードでは既定で使用されるエンコーディングです。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>However, <ph id="ph1">[!INCLUDE[net_core](~/includes/net-core-md.md)]</ph> may make only a limited subset of these encodings available.</source>
          <target state="translated">ただし、<ph id="ph1">[!INCLUDE[net_core](~/includes/net-core-md.md)]</ph>これらのエンコーディングの限定されたサブセットのみを使用できるようにします。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Where this is the case, <ph id="ph1">&lt;xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType&gt;</ph> is used as the default encoding for the console.</source>
          <target state="translated">この場合、これが<ph id="ph1">&lt;xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType&gt;</ph>コンソールの既定のエンコーディングとして使用されます。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>If your app depends on specific code page encodings, you can still make them available by doing the following <bpt id="p1">*</bpt>before<ept id="p1">*</ept> you call any <ph id="ph1">&lt;xref:System.Console&gt;</ph> methods:</source>
          <target state="translated">場合は、アプリは、特定のコード ページ エンコーディングに依存させることができますも使用可能な次の手順を実行して<bpt id="p1">*</bpt>する前に<ept id="p1">*</ept>を呼び出す<ph id="ph1">&lt;xref:System.Console&gt;</ph>メソッド。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.</source>
          <target state="translated">System.Text.Encoding.CodePages.dll アセンブリへの参照をプロジェクトに追加します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Retrieve the <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> object from the <ph id="ph2">&lt;xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">取得、<ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph>オブジェクトから、<ph id="ph2">&lt;xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Pass the <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> object to the <ph id="ph2">&lt;xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType&gt;</ph> method to make the additional encodings supported by the encoding provider available.</source>
          <target state="translated">渡す、<ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph>オブジェクトを<ph id="ph2">&lt;xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType&gt;</ph>を利用可能なエンコーディング プロバイダーでサポートされている追加のエンコーディングを作成するメソッド。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The <ph id="ph1">&lt;xref:System.Console&gt;</ph> class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any <ph id="ph2">&lt;xref:System.Console&gt;</ph> output methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console&gt;</ph>クラスがし、自動的に使用する、UTF8 ではなく既定のシステム エンコーディングを呼び出す前にエンコーディング プロバイダーを登録した提供<ph id="ph2">&lt;xref:System.Console&gt;</ph>メソッドを出力します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The following example demonstrates how to read data from, and write data to, the standard input and output streams.</source>
          <target state="translated">次の例では、標準入力と出力ストリームからのデータを読み書きする方法を示します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>Note that these streams can be redirected by using the <ph id="ph1">&lt;xref:System.Console.SetIn%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.SetOut%2A&gt;</ph> methods.</source>
          <target state="translated">使用してこれらのストリームをリダイレクトすることができますに注意してください、<ph id="ph1">&lt;xref:System.Console.SetIn%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.SetOut%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>This type is thread safe.</source>
          <target state="translated">この型はスレッド セーフです。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="P:System.Console.BackgroundColor">
          <source>Gets or sets the background color of the console.</source>
          <target state="translated">コンソールの背景色を取得または設定します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BackgroundColor">
          <source>A value that specifies the background color of the console; that is, the color that appears behind each character.</source>
          <target state="translated">コンソールの背景色、つまり、各文字の背後に表示される色を指定する値。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BackgroundColor">
          <source>The default is black.</source>
          <target state="translated">既定値は黒です。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BackgroundColor">
          <source>A change to the <ph id="ph1">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph> property affects only output that is written to individual character cells after the background color is changed.</source>
          <target state="translated">変更、<ph id="ph1">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph>プロパティは、背景色を変更した後、個々 の文字のセルに書き込まれた出力のみに影響します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BackgroundColor">
          <source>To change the background color of the console window as a whole, set the <ph id="ph1">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph> property and call the <ph id="ph2">&lt;xref:System.Console.Clear%2A&gt;</ph> method.</source>
          <target state="translated">全体として、コンソール ウィンドウの背景色を変更するには設定、<ph id="ph1">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph>プロパティと呼び出し、<ph id="ph2">&lt;xref:System.Console.Clear%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BackgroundColor">
          <source>The following example provides an illustration.</source>
          <target state="translated">具体的な例を次に示します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BackgroundColor">
          <source>A get operation for a Windows-based application, in which a console does not exist, returns <ph id="ph1">&lt;xref:System.ConsoleColor.Black?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">これは、コンソールに存在しません、Windows ベース アプリケーションの取得操作を返します<ph id="ph1">&lt;xref:System.ConsoleColor.Black?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BackgroundColor">
          <source>The following example saves the values of the <ph id="ph1">&lt;xref:System.ConsoleColor&gt;</ph> enumeration to an array and stores the current values of the <ph id="ph2">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Console.ForegroundColor%2A&gt;</ph> properties to variables.</source>
          <target state="translated">次の例の値を保存する、<ph id="ph1">&lt;xref:System.ConsoleColor&gt;</ph>配列を列挙の現在の値を格納し、<ph id="ph2">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Console.ForegroundColor%2A&gt;</ph>変数のプロパティです。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BackgroundColor">
          <source>It then changes the foreground color to each color in the <ph id="ph1">&lt;xref:System.ConsoleColor&gt;</ph> enumeration except to the color that matches the current background, and it changes the background color to each color in the <ph id="ph2">&lt;xref:System.ConsoleColor&gt;</ph> enumeration except to the color that matches the current foreground.</source>
          <target state="translated">内の各色を前景の色が変更され、<ph id="ph1">&lt;xref:System.ConsoleColor&gt;</ph>列挙色に現在の背景に一致して、それぞれの色に背景色を変更点を除いて、<ph id="ph2">&lt;xref:System.ConsoleColor&gt;</ph>以外の列挙型と一致する色を現在の前景色。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BackgroundColor">
          <source>(If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <ph id="ph1">&lt;xref:System.Console.ResetColor%2A&gt;</ph> method to restore the original console colors.</source>
          <target state="translated">(前景の色、背景色と同じである場合、テキストは表示されません。)最後に、呼び出し、<ph id="ph1">&lt;xref:System.Console.ResetColor%2A&gt;</ph>を元のコンソールの色を復元します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="P:System.Console.BackgroundColor">
          <source>The color specified in a set operation is not a valid member of <ph id="ph1">&lt;see cref="T:System.ConsoleColor" /&gt;</ph>.</source>
          <target state="translated">設定操作で指定された色は、<ph id="ph1">&lt;see cref="T:System.ConsoleColor" /&gt;</ph> の有効なメンバーではありません。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="P:System.Console.BackgroundColor">
          <source>The user does not have permission to perform this action.</source>
          <target state="translated">ユーザーにこの操作を実行するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Console.BackgroundColor">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BackgroundColor">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BackgroundColor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="T:System.Console">
          <source>Plays the sound of a beep through the console speaker.</source>
          <target state="translated">コンソールのスピーカーからビープ音を出します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Console.Beep">
          <source>Plays the sound of a beep through the console speaker.</source>
          <target state="translated">コンソールのスピーカーからビープ音を出します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Beep">
          <source>By default, the beep plays at a frequency of 800 hertz for a duration of 200 milliseconds.</source>
          <target state="translated">既定では、200 ミリ秒の期間に 800 ヘルツの頻度でビープ音を再生します。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Beep">
          <source>The <ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> method is not supported on the 64-bit editions of Windows Vista and Windows XP.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph>メソッドが Windows Vista および Windows XP の 64 ビット エディションでサポートされていません。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Beep">
          <source><ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> wraps a call to the Windows <bpt id="p1">[</bpt>Beep function<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> Windows への呼び出しをラップ<bpt id="p1">[</bpt>関数ビープ音を鳴らす<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)</ept>です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Beep">
          <source>Whether <ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip.</source>
          <target state="translated">かどうか<ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph>Windows 7 が 8254 programmable interval timer チップの存在に依存する前に、バージョンの Windows でサウンドを生成します。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Beep">
          <source>Starting with Windows 7, it depends on the default sound device.</source>
          <target state="translated">Windows 7 以降では、依存の既定のサウンド デバイス。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Beep">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> method.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Beep">
          <source>The example accepts a number from 1 through 9 as a command line argument, and plays the beep that number of times.</source>
          <target state="translated">この例では、コマンドラインの引数として 1 ~ 9 の数を受け付けるし、その回数ビープ音を再生します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Console.Beep">
          <source>This method was executed on a server, such as SQL Server, that does not permit access to a user interface.</source>
          <target state="translated">このメソッドは、SQL Server などのユーザー インターフェイスへのアクセスを許可しないサーバーで実行されました。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Console.Beep(System.Int32,System.Int32)">
          <source>The frequency of the beep, ranging from 37 to 32767 hertz.</source>
          <target state="translated">ビープ音の周波数。37 Hz から 32767 Hz の範囲で指定できます。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Console.Beep(System.Int32,System.Int32)">
          <source>The duration of the beep measured in milliseconds.</source>
          <target state="translated">ビープ音の再生時間。ミリ秒単位で指定します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Console.Beep(System.Int32,System.Int32)">
          <source>Plays the sound of a beep of a specified frequency and duration through the console speaker.</source>
          <target state="translated">周波数と時間を指定して、コンソールのスピーカーからビープ音を出します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Beep(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> wraps a call to the Windows <bpt id="p1">[</bpt>Beep function<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> Windows への呼び出しをラップ<bpt id="p1">[</bpt>関数ビープ音を鳴らす<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)</ept>です。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Beep(System.Int32,System.Int32)">
          <source>Whether <ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip.</source>
          <target state="translated">かどうか<ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph>Windows 7 が 8254 programmable interval timer チップの存在に依存する前に、バージョンの Windows でサウンドを生成します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Beep(System.Int32,System.Int32)">
          <source>Starting with Windows 7, it depends on the default sound device.</source>
          <target state="translated">Windows 7 以降では、依存の既定のサウンド デバイス。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Beep(System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> method is not supported on the 64-bit editions of Windows Vista and Windows XP.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph>メソッドが Windows Vista および Windows XP の 64 ビット エディションでサポートされていません。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Beep(System.Int32,System.Int32)">
          <source>This example demonstrates the <ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph> method by playing the first few notes of a song through the console speaker.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Console.Beep%2A&gt;</ph>コンソールのスピーカーからの曲の最初のいくつかメモを再生してメソッドです。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Console.Beep(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="frequency" /&gt;</ph> is less than 37 or more than 32767 hertz.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="frequency" /&gt;</ph> は 37 ヘルツ未満または 32767 ヘルツを超えます。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Console.Beep(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Console.Beep(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="duration" /&gt;</ph> is less than or equal to zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="duration" /&gt;</ph> が 0 以下です。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Console.Beep(System.Int32,System.Int32)">
          <source>This method was executed on a server, such as SQL Server, that does not permit access to the console.</source>
          <target state="translated">このメソッドは、SQL Server などのコンソールへのアクセスを許可しないサーバーで実行されました。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="P:System.Console.BufferHeight">
          <source>Gets or sets the height of the buffer area.</source>
          <target state="translated">バッファー領域の高さを取得または設定します。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferHeight">
          <source>The current height, in rows, of the buffer area.</source>
          <target state="translated">バッファー領域の現在の高さを示す行数。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferHeight">
          <source>This property defines the number of rows (or lines) stored in the buffer that is accessed by a console mode window.</source>
          <target state="translated">このプロパティは、コンソール モード ウィンドウによってアクセスされるバッファーに格納されている行 (または行) の数を定義します。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferHeight">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> property defines the number of rows that are actually displayed in the console window at any particular time.</source>
          <target state="translated">これに対し、<ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>プロパティが実際には、特定の時点に、コンソール ウィンドウに表示されている行の数を定義します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferHeight">
          <source>If the number of rows actually written to the buffer exceeds the number of rows defined by the <ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> property, the window can be scrolled vertically so that it displays a contiguous number of rows that are equal to the <ph id="ph2">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> property and are located anywhere in the buffer.</source>
          <target state="translated">バッファーに実際に書き込まれた行の数がによって定義された行の数を超えた場合、<ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>プロパティと等しい行の連続する数値を表示するように、ウィンドウを縦方向にスクロールすることができます、<ph id="ph2">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>プロパティでありは、バッファー内の任意の場所にあります。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferHeight">
          <source>If a set operation decreases the value of the <ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph> property, the uppermost lines are removed.</source>
          <target state="translated">設定操作の値が減少した場合、<ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph>プロパティ、最上位の行が削除されます。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferHeight">
          <source>For example, if the number of lines is reduced from 300 to 250, lines 0 through 49 are removed, and the existing lines 50 through 299 become lines 0 through 249.</source>
          <target state="translated">たとえば、250 に 300 から行の数を減らす場合は、0 ~ 49 の行が削除されると、既存の行を 50 ~ 299 になる線の 0 から 249 を実行します。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferHeight">
          <source>This example demonstrates the <ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph> properties.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferHeight">
          <source>The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.</source>
          <target state="translated">例では、300 行と 85 列のバッファー サイズに設定するオペレーティング システムのウィンドウのサイズを報告します。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:System.Console.BufferHeight">
          <source>The value in a set operation is less than or equal to zero.</source>
          <target state="translated">セット操作の値が 0 以下です。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="P:System.Console.BufferHeight">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="P:System.Console.BufferHeight">
          <source>The value in a set operation is greater than or equal to <ph id="ph1">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated">セット操作の値が <ph id="ph1">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="P:System.Console.BufferHeight">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="P:System.Console.BufferHeight">
          <source>The value in a set operation is less than <ph id="ph1">&lt;see cref="P:System.Console.WindowTop" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph>.</source>
          <target state="translated">セット操作の値が <ph id="ph1">&lt;see cref="P:System.Console.WindowTop" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> 未満です。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="P:System.Console.BufferHeight">
          <source>The user does not have permission to perform this action.</source>
          <target state="translated">ユーザーにこの操作を実行するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="P:System.Console.BufferHeight">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferHeight">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferHeight">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="P:System.Console.BufferWidth">
          <source>Gets or sets the width of the buffer area.</source>
          <target state="translated">バッファー領域の幅を取得または設定します。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferWidth">
          <source>The current width, in columns, of the buffer area.</source>
          <target state="translated">バッファー領域の現在の幅を示す列数。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferWidth">
          <source>If a set operation decreases the value of the <ph id="ph1">&lt;xref:System.Console.BufferWidth%2A&gt;</ph> property, the rightmost columns are removed.</source>
          <target state="translated">設定操作の値が減少した場合、<ph id="ph1">&lt;xref:System.Console.BufferWidth%2A&gt;</ph>プロパティ、右端の列が削除されます。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferWidth">
          <source>For example, if the number of columns is reduced from 80 to 60, columns 60 through 79 of each row are removed.</source>
          <target state="translated">たとえば、列の数は 60、80 から縮小した場合、60 ~ 79 各行の列は削除されます。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferWidth">
          <source>This example demonstrates the <ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph> properties.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferWidth">
          <source>The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.</source>
          <target state="translated">例では、300 行と 85 列のバッファー サイズに設定するオペレーティング システムのウィンドウのサイズを報告します。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.Console.BufferWidth">
          <source>The value in a set operation is less than or equal to zero.</source>
          <target state="translated">セット操作の値が 0 以下です。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="P:System.Console.BufferWidth">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="P:System.Console.BufferWidth">
          <source>The value in a set operation is greater than or equal to <ph id="ph1">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated">セット操作の値が <ph id="ph1">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="P:System.Console.BufferWidth">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="P:System.Console.BufferWidth">
          <source>The value in a set operation is less than <ph id="ph1">&lt;see cref="P:System.Console.WindowLeft" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph>.</source>
          <target state="translated">セット操作の値が <ph id="ph1">&lt;see cref="P:System.Console.WindowLeft" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph> 未満です。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="P:System.Console.BufferWidth">
          <source>The user does not have permission to perform this action.</source>
          <target state="translated">ユーザーにこの操作を実行するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="P:System.Console.BufferWidth">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferWidth">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.BufferWidth">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="E:System.Console.CancelKeyPress">
          <source>Occurs when the <ph id="ph1">&lt;see cref="F:System.ConsoleModifiers.Control" /&gt;</ph> modifier key (Ctrl) and either the <ph id="ph2">&lt;see cref="F:System.ConsoleKey.C" /&gt;</ph> console key (C) or the Break key are pressed simultaneously (Ctrl+C or Ctrl+Break).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.ConsoleModifiers.Control" /&gt;</ph> の修飾子キー (Ctrl) と <ph id="ph2">&lt;see cref="F:System.ConsoleKey.C" /&gt;</ph> コンソール キー (c) または中断キーが同時にプッシュされた場合 (Ctrl + C または Ctrl + Break) に発生します。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>This event is used in conjunction with <ph id="ph1">&lt;xref:System.ConsoleCancelEventHandler?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.ConsoleCancelEventArgs?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">このイベントと組み合わせて使用<ph id="ph1">&lt;xref:System.ConsoleCancelEventHandler?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:System.ConsoleCancelEventArgs?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>The <ph id="ph1">&lt;xref:System.Console.CancelKeyPress&gt;</ph> event enables a console application to intercept the Ctrl+C signal so the event handler can decide whether to continue executing or terminate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.CancelKeyPress&gt;</ph>イベントをイベント ハンドラーが実行を続行するか終了するかどうかを決定するために CTRL + C シグナルをインターセプトするコンソール アプリケーションを有効にします。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
          <target state="translated">イベント処理の詳細については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>です。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>When the user presses either Ctrl+C or Ctrl+Break, the <ph id="ph1">&lt;xref:System.Console.CancelKeyPress&gt;</ph> event is fired and the application's <ph id="ph2">&lt;xref:System.ConsoleCancelEventHandler&gt;</ph> event handler is executed.</source>
          <target state="translated">CTRL + C または Ctrl + break のいずれかを押したときに、<ph id="ph1">&lt;xref:System.Console.CancelKeyPress&gt;</ph>イベントが発生し、アプリケーションの<ph id="ph2">&lt;xref:System.ConsoleCancelEventHandler&gt;</ph>イベント ハンドラーが実行します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>The event handler is passed a <ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs&gt;</ph> object that has two useful properties:</source>
          <target state="translated">イベント ハンドラーに渡されます、<ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs&gt;</ph>を 2 つの便利なプロパティを持つオブジェクト。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source><ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs.SpecialKey%2A&gt;</ph>, which allows you to determine whether the handler was invoked as a result of the user pressing Ctrl+C (the property value is <ph id="ph2">&lt;xref:System.ConsoleSpecialKey.ControlC?displayProperty=nameWithType&gt;</ph>) or Ctrl+Break (the property value is <ph id="ph3">&lt;xref:System.ConsoleSpecialKey.ControlBreak?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs.SpecialKey%2A&gt;</ph>、ctrl キーを押しながら C キーを押して、ユーザーの結果として、ハンドラーが呼び出されたかどうかを判断することができます (プロパティの値が<ph id="ph2">&lt;xref:System.ConsoleSpecialKey.ControlC?displayProperty=nameWithType&gt;</ph>) または Ctrl + Break (プロパティの値が<ph id="ph3">&lt;xref:System.ConsoleSpecialKey.ControlBreak?displayProperty=nameWithType&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source><ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs.Cancel%2A&gt;</ph>, which allows you to determine how to your application should respond to the user pressing Ctrl+C or Ctrl+Break.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs.Cancel%2A&gt;</ph>、どのアプリケーションにする必要がありますをユーザーには、応答を押すと CTRL + C または Ctrl + break を判断できます。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>By default, the <ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs.Cancel%2A&gt;</ph> property is <ph id="ph2">`false`</ph>, which causes program execution to terminate when the event handler exits.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs.Cancel%2A&gt;</ph>プロパティは<ph id="ph2">`false`</ph>、原因プログラムの終了イベント ハンドラーの終了時に実行します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>Changing its property to <ph id="ph1">`true`</ph> specifies that the application should continue to execute.</source>
          <target state="translated">そのプロパティを変更する<ph id="ph1">`true`</ph>を実行するアプリケーションを続行するかを指定します。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>If your application has simple requirements, you can use the <ph id="ph1">&lt;xref:System.Console.TreatControlCAsInput%2A&gt;</ph> property instead of this event.</source>
          <target state="translated">使用することができます、アプリケーションに単純な要件がある場合、<ph id="ph1">&lt;xref:System.Console.TreatControlCAsInput%2A&gt;</ph>このイベントではなくプロパティです。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>By setting this property to <ph id="ph1">`false`</ph>, you can ensure that your application always exits if the user presses Ctrl+C.</source>
          <target state="translated">このプロパティを設定して<ph id="ph1">`false`</ph>、ctrl キーを押しながら C キーを押した場合に常にアプリケーションを終了することを確認できます。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>By setting it to <ph id="ph1">`true`</ph>, you can ensure that pressing Ctrl+C will not terminate the application.</source>
          <target state="translated">設定することによって<ph id="ph1">`true`</ph>、こと、ctrl キーを押しながら C キーを押しても、アプリケーションは終了しないことを確認できます。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>The event handler for this event is executed on a thread pool thread.</source>
          <target state="translated">このイベントのイベント ハンドラーは、スレッド プールのスレッドで実行されます。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Console.CancelKeyPress&gt;</ph> event is used.</source>
          <target state="translated">次の例でどのように<ph id="ph1">&lt;xref:System.Console.CancelKeyPress&gt;</ph>イベントは、使用します。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>When you press Ctrl+C, the read operation is interrupted and the <ph id="ph1">`myHandler`</ph> event handler is invoked.</source>
          <target state="translated">Ctrl キーを押しながら C キーを押したときに、読み取り操作が中断されると、<ph id="ph1">`myHandler`</ph>イベント ハンドラーが呼び出されます。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>Upon entry to the event handler, the <ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType&gt;</ph> property is <ph id="ph2">`false`</ph>, which means that the current process will terminate when the event handler terminates.</source>
          <target state="translated">イベント ハンドラーに入ったときに、<ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType&gt;</ph>プロパティは<ph id="ph2">`false`</ph>、イベント ハンドラーが終了するときに、現在のプロセスは終了ことを意味します。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>However, the event handler sets the <ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType&gt;</ph> property to <ph id="ph2">`true`</ph>, which means that the process will not terminate and the read operation will resume.</source>
          <target state="translated">ただし、イベント ハンドラーを設定、<ph id="ph1">&lt;xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType&gt;</ph>プロパティを<ph id="ph2">`true`</ph>つまり、プロセスは終了しないと、読み取り操作が再開されます。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Console.CancelKeyPress">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="P:System.Console.CapsLock">
          <source>Gets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.</source>
          <target state="translated">CapsLock がオンかオフかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CapsLock">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if CAPS LOCK is turned on; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if CAPS LOCK is turned off.</source>
          <target state="translated">CapsLock がオンの場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>、CapsLock がオフの場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Console.Clear">
          <source>Clears the console buffer and corresponding console window of display information.</source>
          <target state="translated">コンソール バッファーおよび対応するコンソール ウィンドウをクリアします。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Clear">
          <source>Using the <ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph> method is equivalent invoking the MS-DOS <ph id="ph2">`cls`</ph> command in the command prompt window.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph>メソッドは、MS-DOS の呼び出しと同じ<ph id="ph2">`cls`</ph>コマンド プロンプト ウィンドウでコマンド。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Clear">
          <source>When the <ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph> method is called, the cursor automatically scrolls to the top-left corner of the window and the contents of the screen buffer are set to blanks using the current foreground background colors.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph>メソッドが呼び出される、ウィンドウの左上隅にカーソルが自動的にスクロールおよび画面バッファーの内容は、現在の前景の背景色を使用した空白に設定されます。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Clear">
          <source>Attempting to call the <ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph> method when a console application's output is redirected to a file throws a <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">呼び出そうとすると、<ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph>コンソール アプリケーションの出力がファイルにリダイレクトされたときのメソッドをスロー、<ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Clear">
          <source>To prevent this, always wrap a call to the <ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph> method in a <ph id="ph2">`try`</ph>…<ph id="ph3">`catch`</ph></source>
          <target state="translated">これを回避するには、常にへの呼び出しをラップ、<ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph>メソッドで、<ph id="ph2">`try`</ph>しています.<ph id="ph3">`catch`</ph></target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Clear">
          <source>block.</source>
          <target state="translated">ブロックです。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Clear">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph> method to clear the console before it executes a loop, prompts the user to select a foreground and background color and to enter a string to display.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph>ループを実行する前に、コンソールを消去するメソッドを求めるメッセージが前景色と背景色を選択して、表示する文字列を入力します。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Clear">
          <source>If the user chooses not to exit the program, the console's original foreground and background colors are restored and the <ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph> method is called again before re-executing the loop.</source>
          <target state="translated">コンソールの元の前景色と背景色を復元する場合は、ユーザーはいないプログラムを終了しますが、および<ph id="ph1">&lt;xref:System.Console.Clear%2A&gt;</ph>メソッドは、ループを再実行する前にもう一度呼び出されます。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Clear">
          <source>The example relies on a <ph id="ph1">`GetKeyPress`</ph> method to validate the user's selection of a foreground and background color.</source>
          <target state="translated">例では、依存、<ph id="ph1">`GetKeyPress`</ph>前景色と背景色のユーザーの選択を検証するメソッド。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Clear">
          <source>This example demonstrates the <ph id="ph1">&lt;xref:System.Console.CursorLeft%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.CursorTop%2A&gt;</ph> properties, and the <ph id="ph3">&lt;xref:System.Console.SetCursorPosition%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Console.Clear%2A&gt;</ph> methods.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Console.CursorLeft%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.CursorTop%2A&gt;</ph>プロパティ、および<ph id="ph3">&lt;xref:System.Console.SetCursorPosition%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Console.Clear%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Clear">
          <source>The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "&amp;#124;", and "-" strings.</source>
          <target state="translated">例では、カーソルの組み合わせを使用して 5 つの文字の四角形で 5 文字を描画し、次の書き込みが行われる場所を決定する「+」、"&amp;#124;"、および"-"の文字列。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Clear">
          <source>Note that the rectangle could be drawn with fewer steps using a combination of other strings.</source>
          <target state="translated">その他の文字列の組み合わせを使用して、少ない手順で四角形を描画するだったことに注意してください。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Console.Clear">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="P:System.Console.CursorLeft">
          <source>Gets or sets the column position of the cursor within the buffer area.</source>
          <target state="translated">バッファー領域におけるカーソルの列位置を取得または設定します。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorLeft">
          <source>The current position, in columns, of the cursor.</source>
          <target state="translated">カーソルの現在位置 (列)。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorLeft">
          <source>This example demonstrates the <ph id="ph1">&lt;xref:System.Console.CursorLeft%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.CursorTop%2A&gt;</ph> properties, and the <ph id="ph3">&lt;xref:System.Console.SetCursorPosition%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Console.Clear%2A&gt;</ph> methods.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Console.CursorLeft%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.CursorTop%2A&gt;</ph>プロパティ、および<ph id="ph3">&lt;xref:System.Console.SetCursorPosition%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Console.Clear%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorLeft">
          <source>The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "&amp;#124;", and "-" strings.</source>
          <target state="translated">例では、カーソルの組み合わせを使用して 5 つの文字の四角形で 5 文字を描画し、次の書き込みが行われる場所を決定する「+」、"&amp;#124;"、および"-"の文字列。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorLeft">
          <source>Note that the rectangle could be drawn with fewer steps using a combination of other strings.</source>
          <target state="translated">その他の文字列の組み合わせを使用して、少ない手順で四角形を描画するだったことに注意してください。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="P:System.Console.CursorLeft">
          <source>The value in a set operation is less than zero.</source>
          <target state="translated">設定操作の値が 0 より小さい値です。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="P:System.Console.CursorLeft">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="P:System.Console.CursorLeft">
          <source>The value in a set operation is greater than or equal to <ph id="ph1">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph>.</source>
          <target state="translated">設定操作の値が <ph id="ph1">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="P:System.Console.CursorLeft">
          <source>The user does not have permission to perform this action.</source>
          <target state="translated">ユーザーにこの操作を実行するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="P:System.Console.CursorLeft">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorLeft">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorLeft">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="P:System.Console.CursorSize">
          <source>Gets or sets the height of the cursor within a character cell.</source>
          <target state="translated">文字セル内のカーソルの高さを取得または設定します。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorSize">
          <source>The size of the cursor expressed as a percentage of the height of a character cell.</source>
          <target state="translated">文字セルの高さに対する割合で表されたカーソルのサイズ。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorSize">
          <source>The property value ranges from 1 to 100.</source>
          <target state="translated">プロパティ値の範囲は、1 ～ 100 です。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorSize">
          <source>The cursor appearance varies, ranging from a horizontal line at the bottom of the cell when the property value is 1, to completely filling the cell when the property value is 100.</source>
          <target state="translated">プロパティの値が完全にいっぱいになるセル プロパティ値が 100 の場合に、1 の場合、セルの下部にある水平行の範囲、カーソルの外観が異なります。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorSize">
          <source>This example demonstrates the <ph id="ph1">&lt;xref:System.Console.CursorSize%2A&gt;</ph> property.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Console.CursorSize%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorSize">
          <source>The example increases the size of the cursor each time any console key is pressed, then restores the cursor to its original size before terminating.</source>
          <target state="translated">この例では、たびに、コンソール キーを押すと、し、復元しますカーソル、元のサイズを終了する前に、カーソルのサイズを増やします。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="P:System.Console.CursorSize">
          <source>The value specified in a set operation is less than 1 or greater than 100.</source>
          <target state="translated">設定操作で指定された値は、1 より小さい値か、100 より大きい値になります。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="P:System.Console.CursorSize">
          <source>The user does not have permission to perform this action.</source>
          <target state="translated">ユーザーにこの操作を実行するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Console.CursorSize">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorSize">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorSize">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="P:System.Console.CursorTop">
          <source>Gets or sets the row position of the cursor within the buffer area.</source>
          <target state="translated">バッファー領域におけるカーソルの行位置を取得または設定します。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorTop">
          <source>The current position, in rows, of the cursor.</source>
          <target state="translated">カーソルの現在位置 (行)。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorTop">
          <source>This example demonstrates the <ph id="ph1">&lt;xref:System.Console.CursorLeft%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.CursorTop%2A&gt;</ph> properties, and the <ph id="ph3">&lt;xref:System.Console.SetCursorPosition%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Console.Clear%2A&gt;</ph> methods.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Console.CursorLeft%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.CursorTop%2A&gt;</ph>プロパティ、および<ph id="ph3">&lt;xref:System.Console.SetCursorPosition%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Console.Clear%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorTop">
          <source>The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "&amp;#124;", and "-" strings.</source>
          <target state="translated">例では、カーソルの組み合わせを使用して 5 つの文字の四角形で 5 文字を描画し、次の書き込みが行われる場所を決定する「+」、"&amp;#124;"、および"-"の文字列。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorTop">
          <source>Note that the rectangle could be drawn with fewer steps using a combination of other strings.</source>
          <target state="translated">その他の文字列の組み合わせを使用して、少ない手順で四角形を描画するだったことに注意してください。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="P:System.Console.CursorTop">
          <source>The value in a set operation is less than zero.</source>
          <target state="translated">設定操作の値が 0 より小さい値です。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="P:System.Console.CursorTop">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="P:System.Console.CursorTop">
          <source>The value in a set operation is greater than or equal to <ph id="ph1">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph>.</source>
          <target state="translated">設定操作の値が <ph id="ph1">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="P:System.Console.CursorTop">
          <source>The user does not have permission to perform this action.</source>
          <target state="translated">ユーザーにこの操作を実行するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="P:System.Console.CursorTop">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorTop">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorTop">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="P:System.Console.CursorVisible">
          <source>Gets or sets a value indicating whether the cursor is visible.</source>
          <target state="translated">カーソルを表示するかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorVisible">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the cursor is visible; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">カーソルを表示する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorVisible">
          <source>This example demonstrates the <ph id="ph1">&lt;xref:System.Console.CursorVisible%2A&gt;</ph> property.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Console.CursorVisible%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorVisible">
          <source>The example makes the cursor visible if the first column of input is a '+' character or invisible if the input is a '-' character.</source>
          <target state="translated">例は、入力の最初の列が文字の場合、'+' は、表示または非表示は、入力がの場合に、カーソルは、'-' 文字です。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="P:System.Console.CursorVisible">
          <source>The user does not have permission to perform this action.</source>
          <target state="translated">ユーザーにこの操作を実行するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="P:System.Console.CursorVisible">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorVisible">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.CursorVisible">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="P:System.Console.Error">
          <source>Gets the standard error output stream.</source>
          <target state="translated">標準エラー出力ストリームを取得します。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Error">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that represents the standard error output stream.</source>
          <target state="translated">標準エラー出力ストリームを表す <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Error">
          <source>This standard error stream is set to the console by default.</source>
          <target state="translated">この標準エラー ストリームは、既定では、コンソールに設定されます。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Error">
          <source>It can be set to another stream with the <ph id="ph1">&lt;xref:System.Console.SetError%2A&gt;</ph> method.</source>
          <target state="translated">別のストリームに設定することができます、<ph id="ph1">&lt;xref:System.Console.SetError%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Error">
          <source>After the standard error stream is redirected, it can be reacquired by calling the <ph id="ph1">&lt;xref:System.Console.OpenStandardError%2A&gt;</ph> method.</source>
          <target state="translated">標準エラー ストリームをリダイレクトすると、そのことができます再取得するを呼び出して、<ph id="ph1">&lt;xref:System.Console.OpenStandardError%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Error">
          <source>In console applications whose informational output is often redirected to a file, the standard error stream available through the <ph id="ph1">&lt;xref:System.Console.Error%2A&gt;</ph> property can be used to display information to the console even if output is redirected.</source>
          <target state="translated">コンソール アプリケーションでの情報の出力がファイルにリダイレクト多くの場合、標準エラー ストリームで使用できる、<ph id="ph1">&lt;xref:System.Console.Error%2A&gt;</ph>プロパティは、情報を表示するコンソールに出力がリダイレクトされる場合でも使用できます。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Error">
          <source>The following example displays product tables for 10 numbers at a time starting with 1.</source>
          <target state="translated">次の例では、1 から始まる一度に 10 個の番号の製品テーブルが表示されます。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Error">
          <source>After every set of 10 numbers, the <ph id="ph1">&lt;xref:System.Console.Error%2A&gt;</ph> property is used to ask the user whether to display the next set.</source>
          <target state="translated">10 個の番号を設定するたびに、<ph id="ph1">&lt;xref:System.Console.Error%2A&gt;</ph>プロパティは、次のセットを表示するかどうかをユーザーの要求に使用します。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Error">
          <source>If the standard output is redirected to a file, the user is still asked whether the routine should generate the next set of products.</source>
          <target state="translated">場合は、標準の出力は、ファイルにリダイレクトは、ルーチンが次の製品のセットを生成するかどうか、ユーザーがまだ求められます。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Error">
          <source>The following example is a command line utility named ExpandTabs that replaces tab characters in a text file with four spaces, the value defined by the <ph id="ph1">`tabSize`</ph> variable.</source>
          <target state="translated">次の例は、テキスト ファイル内のタブ文字を 4 つのスペース、によって定義された値に置き換え ExpandTabs をという名前のコマンド ライン ユーティリティ、<ph id="ph1">`tabSize`</ph>変数。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Error">
          <source>It redirects the standard input and output streams to files, but uses the <ph id="ph1">&lt;xref:System.Console.Error%2A&gt;</ph> property to write the standard error stream to the console.</source>
          <target state="translated">リダイレクトされ、標準入力と出力ファイルにストリーミングしますが、使用して、<ph id="ph1">&lt;xref:System.Console.Error%2A&gt;</ph>プロパティを標準エラー ストリームをコンソールに書き込みます。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Error">
          <source>It can be launched from the command line by supplying the name of the file that contains tab characters and the name of the output file.</source>
          <target state="translated">タブ文字を含むファイルの名前と、出力ファイルの名前を指定することにより、コマンドラインから起動することができます。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Error">
          <source>The following example is a simple text file viewer that displays the contents of one or more text files to the console.</source>
          <target state="translated">次の例は、1 つまたは複数のテキスト ファイルの内容をコンソールに表示する単純なテキスト ファイル ビューアーです。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Error">
          <source>If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <ph id="ph1">&lt;xref:System.Console.SetError%2A&gt;</ph> method to redirect error information to a file, calls the <ph id="ph2">&lt;xref:System.Console.OpenStandardError%2A&gt;</ph> method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.</source>
          <target state="translated">コマンドライン引数がないか、コマンドライン引数として渡されるすべてのファイルが存在しない場合の例を呼び出す場合、<ph id="ph1">&lt;xref:System.Console.SetError%2A&gt;</ph>エラー情報をファイルにリダイレクトするメソッドを呼び出す、<ph id="ph2">&lt;xref:System.Console.OpenStandardError%2A&gt;</ph>標準エラーを再取得する処理を行ってメソッドストリームし、エラー情報がファイルに書き込まれたことを示します。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Error">
          <source>Note that the <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType&gt;</ph> property is set to <ph id="ph2">`true`</ph> before reacquiring the error stream.</source>
          <target state="translated">なお、<ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType&gt;</ph>プロパティに設定されている<ph id="ph2">`true`</ph>エラー ストリームを再取得する前にします。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Error">
          <source>This ensures that output will be sent to the console immediately rather than buffered.</source>
          <target state="translated">これにより、出力をバッファーに格納するのではなく、コンソールに直ちに送信するされます。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="P:System.Console.ForegroundColor">
          <source>Gets or sets the foreground color of the console.</source>
          <target state="translated">コンソールの前景色を取得または設定します。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.ForegroundColor">
          <source>A <ph id="ph1">&lt;see cref="T:System.ConsoleColor" /&gt;</ph> that specifies the foreground color of the console; that is, the color of each character that is displayed.</source>
          <target state="translated">コンソールの前景色、つまり、表示される各文字の色を指定する <ph id="ph1">&lt;see cref="T:System.ConsoleColor" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.ForegroundColor">
          <source>The default is gray.</source>
          <target state="translated">既定値は灰色です。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.ForegroundColor">
          <source>A get operation for a Windows-based application, in which a console does not exist, returns <ph id="ph1">&lt;xref:System.ConsoleColor.Gray&gt;</ph>.</source>
          <target state="translated">これは、コンソールに存在しません、Windows ベース アプリケーションの取得操作を返します<ph id="ph1">&lt;xref:System.ConsoleColor.Gray&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.ForegroundColor">
          <source>The following example checks whether the console's background color is black and, if it is, it changes the background color to red and the foreground color to black.</source>
          <target state="translated">次の例では、コンソールの背景色は黒と、背景色を変更、赤と前景の色を黒にした場合は、かどうかを確認します。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.ForegroundColor">
          <source>The following example saves the values of the <ph id="ph1">&lt;xref:System.ConsoleColor&gt;</ph> enumeration to an array and stores the current values of the <ph id="ph2">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Console.ForegroundColor%2A&gt;</ph> properties to variables.</source>
          <target state="translated">次の例の値を保存する、<ph id="ph1">&lt;xref:System.ConsoleColor&gt;</ph>配列を列挙の現在の値を格納し、<ph id="ph2">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Console.ForegroundColor%2A&gt;</ph>変数のプロパティです。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.ForegroundColor">
          <source>It then changes the foreground color to each color in the <ph id="ph1">&lt;xref:System.ConsoleColor&gt;</ph> enumeration except to the color that matches the current background, and it changes the background color to each color in the <ph id="ph2">&lt;xref:System.ConsoleColor&gt;</ph> enumeration except to the color that matches the current foreground.</source>
          <target state="translated">内の各色を前景の色が変更され、<ph id="ph1">&lt;xref:System.ConsoleColor&gt;</ph>列挙色に現在の背景に一致して、それぞれの色に背景色を変更点を除いて、<ph id="ph2">&lt;xref:System.ConsoleColor&gt;</ph>以外の列挙型と一致する色を現在の前景色。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.ForegroundColor">
          <source>(If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <ph id="ph1">&lt;xref:System.Console.ResetColor%2A&gt;</ph> method to restore the original console colors.</source>
          <target state="translated">(前景の色、背景色と同じである場合、テキストは表示されません。)最後に、呼び出し、<ph id="ph1">&lt;xref:System.Console.ResetColor%2A&gt;</ph>を元のコンソールの色を復元します。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="P:System.Console.ForegroundColor">
          <source>The color specified in a set operation is not a valid member of <ph id="ph1">&lt;see cref="T:System.ConsoleColor" /&gt;</ph>.</source>
          <target state="translated">設定操作で指定された色は、<ph id="ph1">&lt;see cref="T:System.ConsoleColor" /&gt;</ph> の有効なメンバーではありません。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="P:System.Console.ForegroundColor">
          <source>The user does not have permission to perform this action.</source>
          <target state="translated">ユーザーにこの操作を実行するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="P:System.Console.ForegroundColor">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.ForegroundColor">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.ForegroundColor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="P:System.Console.In">
          <source>Gets the standard input stream.</source>
          <target state="translated">標準入力ストリームを取得します。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.In">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> that represents the standard input stream.</source>
          <target state="translated">標準入力ストリームを表す <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.In">
          <source>This property is set to the standard input stream by default.</source>
          <target state="translated">このプロパティが既定で標準入力ストリームに設定します。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.In">
          <source>This property can be set to another stream with the <ph id="ph1">&lt;xref:System.Console.SetIn%2A&gt;</ph> method.</source>
          <target state="translated">別のストリームにこのプロパティを設定することができます、<ph id="ph1">&lt;xref:System.Console.SetIn%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.In">
          <source>Read operations on the standard input stream execute synchronously.</source>
          <target state="translated">標準入力ストリームに対して読み取り操作が同期的に実行します。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.In">
          <source>That is, they block until the specified read operation has completed.</source>
          <target state="translated">つまり、指定された読み取り操作が完了するまで、ブロックします。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.In">
          <source>This is true even if an asynchronous method, such as <ph id="ph1">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph>, is called on the <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> object returned by the <ph id="ph3">&lt;xref:System.Console.In%2A&gt;</ph> property.</source>
          <target state="translated">でもは true。 これは場合、非同期メソッドなど<ph id="ph1">&lt;xref:System.IO.TextReader.ReadLineAsync%2A&gt;</ph>、で呼び出されると、<ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>によって返されるオブジェクト、<ph id="ph3">&lt;xref:System.Console.In%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.In">
          <source>The following sample illustrates the use of the <ph id="ph1">`In`</ph> property.</source>
          <target state="translated">次の例は、の使用方法を示します、<ph id="ph1">`In`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="P:System.Console.InputEncoding">
          <source>Gets or sets the encoding the console uses to read input.</source>
          <target state="translated">コンソールが入力内容の読み取り時に使用するエンコーディングを取得または設定します。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.InputEncoding">
          <source>The encoding used to read console input.</source>
          <target state="translated">コンソールが入力内容の読み取りに使用するエンコーディング。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.InputEncoding">
          <source>The console uses the input encoding to translate keyboard input into a corresponding character.</source>
          <target state="translated">コンソールでは、入力に対応する文字にキーボード入力を変換するエンコーディングを使用します。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.InputEncoding">
          <source>The input encoding incorporates a code page that maps 256 keyboard character codes to individual characters.</source>
          <target state="translated">入力のエンコードには、256 個のキーボード文字コードを個々 の文字にマップされているコード ページが組み込まれています。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.InputEncoding">
          <source>Different code pages include different special characters, typically customized for a language or a group of languages.</source>
          <target state="translated">異なるコード ページには異なる特殊文字が含まれ、それらは通常は 1 つの言語または言語グループ用にカスタマイズされています。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.InputEncoding">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, a property get operation may return a cached value instead of the console's current input encoding.</source>
          <target state="translated">以降で、<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>プロパティの get 操作は、コンソールの現在入力エンコーディングの代わりにキャッシュされた値を返す可能性があります。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.InputEncoding">
          <source>This can occur if the value of the <ph id="ph1">&lt;xref:System.Console.InputEncoding%2A&gt;</ph> property is modified by some means other than an assignment to the <ph id="ph2">&lt;xref:System.Console.InputEncoding%2A&gt;</ph> property, such as calling the Windows <ph id="ph3">`SetConsoleCP`</ph> function or using the <ph id="ph4">`chcp`</ph> command from a PowerShell script.</source>
          <target state="translated">これは、場合に発生することができますの値、<ph id="ph1">&lt;xref:System.Console.InputEncoding%2A&gt;</ph>への代入以外のいくつかの方法でプロパティが変更された、 <ph id="ph2">&lt;xref:System.Console.InputEncoding%2A&gt;</ph> 、Windows の呼び出しなどのプロパティ<ph id="ph3">`SetConsoleCP`</ph>関数またはを使用して、 <ph id="ph4">`chcp`</ph> PowerShell スクリプトからコマンド。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="P:System.Console.InputEncoding">
          <source>The property value in a set operation is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">設定操作でのプロパティ値は <ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="P:System.Console.InputEncoding">
          <source>An error occurred during the execution of this operation.</source>
          <target state="translated">この操作の実行中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="P:System.Console.InputEncoding">
          <source>Your application does not have permission to perform this operation.</source>
          <target state="translated">アプリケーションに、この操作を実行するための権限がありません。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.InputEncoding">
          <source>for reading and writing to top-level windows and subwindows.</source>
          <target state="translated">読み取りと書き込みトップレベル ウィンドウとサブウィンドウをします。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.InputEncoding">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="P:System.Console.IsErrorRedirected">
          <source>Gets a value that indicates whether the error output stream has been redirected from the standard error stream.</source>
          <target state="translated">エラー出力ストリームが標準エラー ストリームからリダイレクトされているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.IsErrorRedirected">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if error output is redirected; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">エラー出力がリダイレクトされる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="P:System.Console.IsInputRedirected">
          <source>Gets a value that indicates whether input has been redirected from the standard input stream.</source>
          <target state="translated">入力が標準入力ストリームからリダイレクトされているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.IsInputRedirected">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if input is redirected; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">入力がリダイレクトされる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="P:System.Console.IsOutputRedirected">
          <source>Gets a value that indicates whether output has been redirected from the standard output stream.</source>
          <target state="translated">出力が標準出力ストリームからリダイレクトされているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.IsOutputRedirected">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if output is redirected; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">出力がリダイレクトされる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="P:System.Console.KeyAvailable">
          <source>Gets a value indicating whether a key press is available in the input stream.</source>
          <target state="translated">キーが押されたかどうか、つまり、押されたキーが入力ストリームに存在するかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.KeyAvailable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a key press is available; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">押されたキーが入力ストリームに存在する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.KeyAvailable">
          <source>The property value is returned immediately; that is, the <ph id="ph1">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph> property does not block input until a key press is available.</source>
          <target state="translated">プロパティの値が直ちに返されますつまり、<ph id="ph1">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph>キーを押すが利用可能になるまでに、プロパティで入力がブロックされません。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.KeyAvailable">
          <source>Use the <ph id="ph1">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph> property in conjunction with only the <ph id="ph2">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method, not the <ph id="ph3">&lt;xref:System.Console.Read%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Console.ReadLine%2A&gt;</ph> methods.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph>プロパティのみと組み合わせて、<ph id="ph2">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッド、されません、<ph id="ph3">&lt;xref:System.Console.Read%2A&gt;</ph>または<ph id="ph4">&lt;xref:System.Console.ReadLine%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.KeyAvailable">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph> property to create a loop that runs until a key is pressed.</source>
          <target state="translated">次の例で使用する方法、<ph id="ph1">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph>するキーが押されるまで実行されるループを作成するプロパティです。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="P:System.Console.KeyAvailable">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="P:System.Console.KeyAvailable">
          <source>Standard input is redirected to a file instead of the keyboard.</source>
          <target state="translated">標準入力は、キーボードではなくファイルにリダイレクトされています。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="P:System.Console.LargestWindowHeight">
          <source>Gets the largest possible number of console window rows, based on the current font and screen resolution.</source>
          <target state="translated">現在のフォントおよび画面解像度に基づいて、コンソール ウィンドウの最大行数を取得します。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.LargestWindowHeight">
          <source>The height of the largest possible console window measured in rows.</source>
          <target state="translated">コンソール ウィンドウの高さの最大値 (行数)。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="P:System.Console.LargestWindowWidth">
          <source>Gets the largest possible number of console window columns, based on the current font and screen resolution.</source>
          <target state="translated">現在のフォントおよび画面解像度に基づいて、コンソール ウィンドウの最大列数を取得します。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.LargestWindowWidth">
          <source>The width of the largest possible console window measured in columns.</source>
          <target state="translated">コンソール ウィンドウの幅の最大値 (列数)。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="T:System.Console">
          <source>Copies a specified source area of the screen buffer to a specified destination area.</source>
          <target state="translated">画面バッファーの特定の領域を、指定した領域にコピーします。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The leftmost column of the source area.</source>
          <target state="translated">コピー元領域の左端の列。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The topmost row of the source area.</source>
          <target state="translated">コピー元領域の最上行。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The number of columns in the source area.</source>
          <target state="translated">コピー元領域内の列数。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The number of rows in the source area.</source>
          <target state="translated">コピー元領域内の行数。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The leftmost column of the destination area.</source>
          <target state="translated">コピー先領域の左端の列。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The topmost row of the destination area.</source>
          <target state="translated">コピー先領域の最上行。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Copies a specified source area of the screen buffer to a specified destination area.</source>
          <target state="translated">画面バッファーの特定の領域を、指定した領域にコピーします。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If the destination and source parameters specify a position located outside the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied.</source>
          <target state="translated">送信先と送信元のパラメーターは、現在の画面バッファーの境界の外にある位置を指定する場合は、コピー先領域に適合するコピー元領域の部分だけがコピーされます。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>That is, the source area is clipped to fit the current screen buffer.</source>
          <target state="translated">つまり、コピー元領域は、現在の画面バッファーに合わせてクリッピングされます。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Console.MoveBufferArea%2A&gt;</ph> method copies the source area to the destination area.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.MoveBufferArea%2A&gt;</ph>メソッドは、コピー先領域にコピー元領域をコピーします。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If the destination area does not intersect the source area, the source area is filled with blanks using the current foreground and background colors.</source>
          <target state="translated">コピー元領域をコピー先領域から共通部分がない場合、コピー元領域は、現在の前景色と背景色を使用して空白で埋められます。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Otherwise, the intersected portion of the source area is not filled.</source>
          <target state="translated">それ以外の場合、コピー元領域の交差部分が指定されていません。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>One or more of the parameters is less than zero.</source>
          <target state="translated">1 つ以上のパラメーターが 0 未満です。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="sourceLeft" /&gt;</ph> or <ph id="ph2">&lt;paramref name="targetLeft" /&gt;</ph> is greater than or equal to <ph id="ph3">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceLeft" /&gt;</ph> または <ph id="ph2">&lt;paramref name="targetLeft" /&gt;</ph> が <ph id="ph3">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="sourceTop" /&gt;</ph> or <ph id="ph2">&lt;paramref name="targetTop" /&gt;</ph> is greater than or equal to <ph id="ph3">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceTop" /&gt;</ph> または <ph id="ph2">&lt;paramref name="targetTop" /&gt;</ph> が <ph id="ph3">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="sourceTop" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="sourceHeight" /&gt;</ph> is greater than or equal to <ph id="ph4">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceTop" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="sourceHeight" /&gt;</ph> が <ph id="ph4">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="sourceLeft" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="sourceWidth" /&gt;</ph> is greater than or equal to <ph id="ph4">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceLeft" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="sourceWidth" /&gt;</ph> が <ph id="ph4">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The user does not have permission to perform this action.</source>
          <target state="translated">ユーザーにこの操作を実行するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>The leftmost column of the source area.</source>
          <target state="translated">コピー元領域の左端の列。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>The topmost row of the source area.</source>
          <target state="translated">コピー元領域の最上行。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>The number of columns in the source area.</source>
          <target state="translated">コピー元領域内の列数。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>The number of rows in the source area.</source>
          <target state="translated">コピー元領域内の行数。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>The leftmost column of the destination area.</source>
          <target state="translated">コピー先領域の左端の列。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>The topmost row of the destination area.</source>
          <target state="translated">コピー先領域の最上行。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>The character used to fill the source area.</source>
          <target state="translated">コピー元領域に挿入する文字。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>The foreground color used to fill the source area.</source>
          <target state="translated">コピー元領域を上書きするときに使用する前景色。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>The background color used to fill the source area.</source>
          <target state="translated">コピー元領域を上書きするときに使用する背景色。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>Copies a specified source area of the screen buffer to a specified destination area.</source>
          <target state="translated">画面バッファーの特定の領域を、指定した領域にコピーします。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>If the destination and source parameters specify a position located beyond the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied.</source>
          <target state="translated">送信先と送信元のパラメーターは、現在の画面バッファーの境界を越える位置を指定する場合は、コピー先領域に適合するコピー元領域の部分のみがコピーされます。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>That is, the source area is clipped to fit the current screen buffer.</source>
          <target state="translated">つまり、コピー元領域は、現在の画面バッファーに合わせてクリッピングされます。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>The <ph id="ph1">&lt;xref:System.Console.MoveBufferArea%2A&gt;</ph> method copies the source area to the destination area.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.MoveBufferArea%2A&gt;</ph>メソッドは、コピー先領域にコピー元領域をコピーします。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>If the destination area does not intersect the source area, the source area is filled with the character specified by <ph id="ph1">`sourceChar`</ph>, using the colors specified by <ph id="ph2">`sourceForeColor`</ph> and <ph id="ph3">`sourceBackColor`</ph>.</source>
          <target state="translated">コピー元領域をコピー先領域から共通部分がない場合で指定された文字でコピー元領域が塗りつぶされます。 <ph id="ph1">`sourceChar`</ph>、で指定された色を使用して<ph id="ph2">`sourceForeColor`</ph>と<ph id="ph3">`sourceBackColor`</ph>です。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>Otherwise, the intersected portion of the source area is not filled.</source>
          <target state="translated">それ以外の場合、コピー元領域の交差部分が指定されていません。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>The <ph id="ph1">&lt;xref:System.Console.MoveBufferArea%2A&gt;</ph> method performs no operation if <ph id="ph2">`sourceWidth`</ph> or <ph id="ph3">`sourceHeight`</ph> is zero.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.MoveBufferArea%2A&gt;</ph>メソッド操作も行いません場合<ph id="ph2">`sourceWidth`</ph>または<ph id="ph3">`sourceHeight`</ph>ゼロです。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>One or more of the parameters is less than zero.</source>
          <target state="translated">1 つ以上のパラメーターが 0 未満です。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source><ph id="ph1">&lt;paramref name="sourceLeft" /&gt;</ph> or <ph id="ph2">&lt;paramref name="targetLeft" /&gt;</ph> is greater than or equal to <ph id="ph3">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceLeft" /&gt;</ph> または <ph id="ph2">&lt;paramref name="targetLeft" /&gt;</ph> が <ph id="ph3">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source><ph id="ph1">&lt;paramref name="sourceTop" /&gt;</ph> or <ph id="ph2">&lt;paramref name="targetTop" /&gt;</ph> is greater than or equal to <ph id="ph3">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceTop" /&gt;</ph> または <ph id="ph2">&lt;paramref name="targetTop" /&gt;</ph> が <ph id="ph3">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source><ph id="ph1">&lt;paramref name="sourceTop" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="sourceHeight" /&gt;</ph> is greater than or equal to <ph id="ph4">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceTop" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="sourceHeight" /&gt;</ph> が <ph id="ph4">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source><ph id="ph1">&lt;paramref name="sourceLeft" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="sourceWidth" /&gt;</ph> is greater than or equal to <ph id="ph4">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceLeft" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="sourceWidth" /&gt;</ph> が <ph id="ph4">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>One or both of the color parameters is not a member of the <ph id="ph1">&lt;see cref="T:System.ConsoleColor" /&gt;</ph> enumeration.</source>
          <target state="translated">一方または両方の色パラメーターが <ph id="ph1">&lt;see cref="T:System.ConsoleColor" /&gt;</ph> 列挙のメンバーではありません。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>The user does not have permission to perform this action.</source>
          <target state="translated">ユーザーにこの操作を実行するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="P:System.Console.NumberLock">
          <source>Gets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.</source>
          <target state="translated">NumLock がオンかオフかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.NumberLock">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if NUM LOCK is turned on; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if NUM LOCK is turned off.</source>
          <target state="translated">NumLock がオンの場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>、NumLock がオフの場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="T:System.Console">
          <source>Acquires the standard error stream.</source>
          <target state="translated">標準エラー ストリームを取得します。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardError">
          <source>Acquires the standard error stream.</source>
          <target state="translated">標準エラー ストリームを取得します。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardError">
          <source>The standard error stream.</source>
          <target state="translated">標準エラー ストリーム。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardError">
          <source>This method can be used to reacquire the standard error stream after it has been changed by the <ph id="ph1">&lt;xref:System.Console.SetError%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドは、によって変更された後に標準エラー ストリームを再取得に使用できます、<ph id="ph1">&lt;xref:System.Console.SetError%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardError">
          <source>The following example is a simple text file viewer that displays the contents of one or more text files to the console.</source>
          <target state="translated">次の例は、1 つまたは複数のテキスト ファイルの内容をコンソールに表示する単純なテキスト ファイル ビューアーです。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardError">
          <source>If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <ph id="ph1">&lt;xref:System.Console.SetError%2A&gt;</ph> method to redirect error information to a file, calls the <ph id="ph2">&lt;xref:System.Console.OpenStandardError%2A&gt;</ph> method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.</source>
          <target state="translated">コマンドライン引数がないか、コマンドライン引数として渡されるすべてのファイルが存在しない場合の例を呼び出す場合、<ph id="ph1">&lt;xref:System.Console.SetError%2A&gt;</ph>エラー情報をファイルにリダイレクトするメソッドを呼び出す、<ph id="ph2">&lt;xref:System.Console.OpenStandardError%2A&gt;</ph>標準エラーを再取得する処理を行ってメソッドストリームし、エラー情報がファイルに書き込まれたことを示します。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardError">
          <source>Note that the <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType&gt;</ph> property is set to <ph id="ph2">`true`</ph> before reacquiring the error stream.</source>
          <target state="translated">なお、<ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType&gt;</ph>プロパティに設定されている<ph id="ph2">`true`</ph>エラー ストリームを再取得する前にします。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardError">
          <source>This ensures that output will be sent to the console immediately rather than buffered.</source>
          <target state="translated">これにより、出力をバッファーに格納するのではなく、コンソールに直ちに送信するされます。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardError(System.Int32)">
          <source>The internal stream buffer size.</source>
          <target state="translated">内部ストリーム バッファー サイズ。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardError(System.Int32)">
          <source>Acquires the standard error stream, which is set to a specified buffer size.</source>
          <target state="translated">指定したバッファー サイズに設定された標準エラー ストリームを取得します。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardError(System.Int32)">
          <source>The standard error stream.</source>
          <target state="translated">標準エラー ストリーム。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardError(System.Int32)">
          <source>This method can be used to reacquire the standard error stream after it has been changed by the <ph id="ph1">&lt;xref:System.Console.SetError%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドは、によって変更された後に標準エラー ストリームを再取得に使用できます、<ph id="ph1">&lt;xref:System.Console.SetError%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardError(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is less than or equal to zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> が 0 以下です。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="T:System.Console">
          <source>Acquires the standard input stream.</source>
          <target state="translated">標準入力ストリームを取得します。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardInput">
          <source>Acquires the standard input stream.</source>
          <target state="translated">標準入力ストリームを取得します。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardInput">
          <source>The standard input stream.</source>
          <target state="translated">標準入力ストリーム。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardInput">
          <source>This method can be used to reacquire the standard input stream after it has been changed by the <ph id="ph1">&lt;xref:System.Console.SetIn%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドは、によって変更された後は、標準入力ストリームを再取得に使用できます、<ph id="ph1">&lt;xref:System.Console.SetIn%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardInput">
          <source>The following example illustrates the use of the <ph id="ph1">`OpenStandardInput`</ph> property.</source>
          <target state="translated">次の例では、使用、<ph id="ph1">`OpenStandardInput`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardInput(System.Int32)">
          <source>The internal stream buffer size.</source>
          <target state="translated">内部ストリーム バッファー サイズ。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardInput(System.Int32)">
          <source>Acquires the standard input stream, which is set to a specified buffer size.</source>
          <target state="translated">指定したバッファー サイズに設定された標準入力ストリームを取得します。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardInput(System.Int32)">
          <source>The standard input stream.</source>
          <target state="translated">標準入力ストリーム。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardInput(System.Int32)">
          <source>This method can be used to reacquire the standard output stream after it has been changed by the <ph id="ph1">&lt;xref:System.Console.SetIn%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドは、によって変更された後は、標準出力ストリームを再取得に使用できます、<ph id="ph1">&lt;xref:System.Console.SetIn%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardInput(System.Int32)">
          <source>The following example illustrates the use of the <ph id="ph1">`OpenStandardInput`</ph> property.</source>
          <target state="translated">次の例では、使用、<ph id="ph1">`OpenStandardInput`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardInput(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is less than or equal to zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> が 0 以下です。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="T:System.Console">
          <source>Acquires the standard output stream.</source>
          <target state="translated">標準出力ストリームを取得します。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardOutput">
          <source>Acquires the standard output stream.</source>
          <target state="translated">標準出力ストリームを取得します。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardOutput">
          <source>The standard output stream.</source>
          <target state="translated">標準出力ストリーム。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput">
          <source>This method can be used to reacquire the standard output stream after it has been changed by the <ph id="ph1">&lt;xref:System.Console.SetOut%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドは、によって変更された後は、標準出力ストリームを再取得に使用できます、<ph id="ph1">&lt;xref:System.Console.SetOut%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Console.OpenStandardOutput%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.OpenStandardOutput%2A&gt;</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput">
          <source>It replaces four consecutive space characters in a string with a tab character.</source>
          <target state="translated">これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput">
          <source>To run it, you must supply two command-line arguments.</source>
          <target state="translated">これを実行するには、次の 2 つのコマンドライン引数を指定してください。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput">
          <source>The first is the name of an existing text file to redirect the standard input stream to.</source>
          <target state="translated">1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput">
          <source>The second is the name of a file to redirect the standard output stream to.</source>
          <target state="translated">2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput">
          <source>This file need not exist.</source>
          <target state="translated">このファイルは存在する必要はありません。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput">
          <source>If it does, its contents will be overwritten.</source>
          <target state="translated">ファイルが存在する場合は、その内容が上書きされます。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardOutput(System.Int32)">
          <source>The internal stream buffer size.</source>
          <target state="translated">内部ストリーム バッファー サイズ。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardOutput(System.Int32)">
          <source>Acquires the standard output stream, which is set to a specified buffer size.</source>
          <target state="translated">指定したバッファー サイズに設定された標準出力ストリームを取得します。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardOutput(System.Int32)">
          <source>The standard output stream.</source>
          <target state="translated">標準出力ストリーム。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput(System.Int32)">
          <source>This method can be used to reacquire the standard output stream after it has been changed by the <ph id="ph1">&lt;xref:System.Console.SetOut%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドは、によって変更された後は、標準出力ストリームを再取得に使用できます、<ph id="ph1">&lt;xref:System.Console.SetOut%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput(System.Int32)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Console.OpenStandardOutput%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.OpenStandardOutput%2A&gt;</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput(System.Int32)">
          <source>It replaces four consecutive space characters in a string with a tab character.</source>
          <target state="translated">これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput(System.Int32)">
          <source>To run it, you must supply two command line arguments.</source>
          <target state="translated">これを実行するには、2 つのコマンドライン引数を指定してください。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput(System.Int32)">
          <source>The first is the name of an existing text file to redirect the standard input stream to.</source>
          <target state="translated">1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput(System.Int32)">
          <source>The second is the name of a file to redirect the standard output stream to.</source>
          <target state="translated">2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput(System.Int32)">
          <source>This file need not exist.</source>
          <target state="translated">このファイルは存在する必要はありません。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.OpenStandardOutput(System.Int32)">
          <source>If it does, its contents will be overwritten.</source>
          <target state="translated">ファイルが存在する場合は、その内容が上書きされます。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Console.OpenStandardOutput(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is less than or equal to zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> が 0 以下です。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" uid="P:System.Console.Out">
          <source>Gets the standard output stream.</source>
          <target state="translated">標準出力ストリームを取得します。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Out">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that represents the standard output stream.</source>
          <target state="translated">標準出力ストリームを表す <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Out">
          <source>This property is set to the standard output stream by default.</source>
          <target state="translated">このプロパティが既定では標準出力ストリームに設定します。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Out">
          <source>This property can be set to another stream with the <ph id="ph1">&lt;xref:System.Console.SetOut%2A&gt;</ph> method.</source>
          <target state="translated">別のストリームにこのプロパティを設定することができます、<ph id="ph1">&lt;xref:System.Console.SetOut%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Out">
          <source>Note that calls to <ph id="ph1">`Console.Out.WriteLine`</ph> methods are equivalent to calls to the corresponding <ph id="ph2">&lt;xref:System.Console.WriteLine%2A&gt;</ph> methods.</source>
          <target state="translated">呼び出す<ph id="ph1">`Console.Out.WriteLine`</ph>メソッドは、対応する呼び出しに相当する<ph id="ph2">&lt;xref:System.Console.WriteLine%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Out">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Console.Out%2A&gt;</ph> property to display an array containing the names of files in the application's current directory to the standard output device.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Console.Out%2A&gt;</ph>プロパティを標準出力デバイスにアプリケーションの現在のディレクトリ内のファイル名を格納する配列を表示します。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Out">
          <source>It then sets the standard output to a file named Files.txt and lists the array elements to the file.</source>
          <target state="translated">Files.txt をという名前のファイルを標準出力に設定し、ファイルに配列の要素を一覧表示します。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Out">
          <source>Finally, it sets the output to the standard output stream and again displays the array elements to the standard output device.</source>
          <target state="translated">最後に、出力を標準出力ストリームに設定し、もう一度を標準出力デバイスに配列の要素が表示されます。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="P:System.Console.OutputEncoding">
          <source>Gets or sets the encoding the console uses to write output.</source>
          <target state="translated">コンソールが出力内容の書き込み時に使用するエンコーディングを取得または設定します。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.OutputEncoding">
          <source>The encoding used to write console output.</source>
          <target state="translated">コンソールが出力内容の書き込みに使用するエンコーディング。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.OutputEncoding">
          <source>The console uses the output encoding to translate characters written by an application into corresponding console display characters.</source>
          <target state="translated">コンソールは、出力のエンコードを使用に対応する文字のコンソール表示にアプリケーションによって書き込まれた文字を変換します。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.OutputEncoding">
          <source>The default code page that the console uses is determined by the system locale.</source>
          <target state="translated">コンソールを使用する既定のコード ページは、システムのロケールによって決まります。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.OutputEncoding">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, a property get operation may return a cached value instead of the console's current output encoding.</source>
          <target state="translated">以降で、<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>プロパティの get 操作は、現在の出力エンコードをコンソールの代わりにキャッシュされた値を返す可能性があります。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.OutputEncoding">
          <source>This can occur if the value of the <ph id="ph1">&lt;xref:System.Console.OutputEncoding%2A&gt;</ph> property is modified by some means other than an assignment to the <ph id="ph2">&lt;xref:System.Console.OutputEncoding%2A&gt;</ph> property, such as calling the Windows <ph id="ph3">`SetConsoleOutputCP`</ph> function.</source>
          <target state="translated">これは、場合に発生することができますの値、<ph id="ph1">&lt;xref:System.Console.OutputEncoding%2A&gt;</ph>への代入以外のいくつかの方法でプロパティが変更された、 <ph id="ph2">&lt;xref:System.Console.OutputEncoding%2A&gt;</ph> 、Windows の呼び出しなどのプロパティ<ph id="ph3">`SetConsoleOutputCP`</ph>関数。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="P:System.Console.OutputEncoding">
          <source>The property value in a set operation is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">設定操作でのプロパティ値は <ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="P:System.Console.OutputEncoding">
          <source>An error occurred during the execution of this operation.</source>
          <target state="translated">この操作の実行中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="P:System.Console.OutputEncoding">
          <source>Your application does not have permission to perform this operation.</source>
          <target state="translated">アプリケーションに、この操作を実行するための権限がありません。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.OutputEncoding">
          <source>for reading and writing to top-level windows and subwindows.</source>
          <target state="translated">読み取りと書き込みトップレベル ウィンドウとサブウィンドウをします。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.OutputEncoding">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.OutputEncoding">
          <source>Of the Unicode encodings, the <ph id="ph1">&lt;see cref="T:System.Console" /&gt;</ph> class supports UTF-8 encoding with the <ph id="ph2">&lt;see cref="T:System.Text.UTF8Encoding" /&gt;</ph> class and, starting with the <ph id="ph3">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, it supports UTF-16 encoding with the <ph id="ph4">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> class.</source>
          <target state="translated">Unicode エンコーディングの<ph id="ph1">&lt;see cref="T:System.Console" /&gt;</ph>クラスは、utf-8 でエンコードをサポートしている、<ph id="ph2">&lt;see cref="T:System.Text.UTF8Encoding" /&gt;</ph>クラスと、以降で、 <ph id="ph3">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>、utf-16 エンコードをサポートする、<ph id="ph4">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.OutputEncoding">
          <source>UTF-32 encoding with the <ph id="ph1">&lt;see cref="T:System.Text.UTF32Encoding" /&gt;</ph> class is not supported.</source>
          <target state="translated">Utf-32 エンコーディング、<ph id="ph1">&lt;see cref="T:System.Text.UTF32Encoding" /&gt;</ph>クラスはサポートされていません。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.OutputEncoding">
          <source>Attempting to set the output encoding to UTF-32 throws an <ph id="ph1">&lt;see cref="T:System.IO.IOException" /&gt;</ph>.</source>
          <target state="translated">Utf-32 をスローする出力エンコードを設定すると、<ph id="ph1">&lt;see cref="T:System.IO.IOException" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.OutputEncoding">
          <source>Note that successfully displaying Unicode characters to the console requires the following:</source>
          <target state="translated">正常にコンソールを Unicode 文字を表示することが必要である、次に注意してください。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.OutputEncoding">
          <source>The console must use a TrueType font, such as Lucida Console or Consolas, to display characters.</source>
          <target state="translated">コンソールは、Lucida Console や、Consolas などの TrueType フォントを使用して、文字を表示する必要があります。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.OutputEncoding">
          <source>A font used by the console must define the particular glyph or glyphs to be displayed.</source>
          <target state="translated">コンソールを使用するフォントには、特定のグリフまたは表示するグリフを定義する必要があります。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.OutputEncoding">
          <source>The console can take advantage of font linking to display glyphs from linked fonts if the base font does not contain a definition for that glyph.</source>
          <target state="translated">コンソールでは、フォントの基本のフォントにそのグリフの定義が含まれていない場合は、リンクのフォントからのグリフを表示するリンクを利用できます。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.OutputEncoding">
          <source>For more information about support for Unicode encoding by the console, see the "Unicode Support for the Console" section in the <ph id="ph1">&lt;see cref="T:System.Console" /&gt;</ph> class.</source>
          <target state="translated">Unicode のサポートの詳細については、コンソールではエンコード セクションを参照して、」Unicode サポートの「コンソール」、<ph id="ph1">&lt;see cref="T:System.Console" /&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Console.Read">
          <source>Reads the next character from the standard input stream.</source>
          <target state="translated">標準入力ストリームから次の文字を読み取ります。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Console.Read">
          <source>The next character from the input stream, or negative one (-1) if there are currently no more characters to be read.</source>
          <target state="translated">入力ストリームの次の文字。または次の文字がない場合は -1。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Read">
          <source>The <ph id="ph1">&lt;xref:System.Console.Read%2A&gt;</ph> method blocks its return while you type input characters; it terminates when you press the <ph id="ph2">&lt;xref:System.ConsoleKey.Enter&gt;</ph> key.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.Read%2A&gt;</ph>入力文字を入力するときに、メソッドは、戻り値をブロックです。 キーを押すと終了、<ph id="ph2">&lt;xref:System.ConsoleKey.Enter&gt;</ph>キー。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Read">
          <source>Pressing Enter appends a platform-dependent line termination sequence to your input (for example, Windows appends a carriage return-linefeed sequence).</source>
          <target state="translated">プラットフォームに依存する行の終了シーケンスを入力に追加 Enter キーを押して (たとえば、Windows がキャリッジ リターンとライン フィードのシーケンスを追加する)。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Read">
          <source>Subsequent calls to the <ph id="ph1">&lt;xref:System.Console.Read%2A&gt;</ph> method retrieve your input one character at a time.</source>
          <target state="translated">後続の呼び出し、<ph id="ph1">&lt;xref:System.Console.Read%2A&gt;</ph>メソッドは、一度に、入力の 1 つの文字を取得します。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Read">
          <source>After the final character is retrieved, <ph id="ph1">&lt;xref:System.Console.Read%2A&gt;</ph> blocks its return again and the cycle repeats.</source>
          <target state="translated">最後の文字が取得された後<ph id="ph1">&lt;xref:System.Console.Read%2A&gt;</ph>戻り値をブロック再度とサイクルを繰り返します。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Read">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method, or the <ph id="ph2">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph> property and <ph id="ph3">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method are preferable to using the <ph id="ph4">&lt;xref:System.Console.Read%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph>メソッド、または<ph id="ph2">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph>プロパティおよび<ph id="ph3">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッドが使用することをお勧め、<ph id="ph4">&lt;xref:System.Console.Read%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Read">
          <source>Note that the method does not return -1 unless you perform one of the following actions:</source>
          <target state="translated">エントリの次の操作のいずれかを実行しない限り、メソッドは-1 が返されませんに注意してください。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Read">
          <source>Simultaneously press the <ph id="ph1">&lt;xref:System.ConsoleModifiers.Control&gt;</ph> modifier key and <ph id="ph2">&lt;xref:System.ConsoleKey.Z&gt;</ph> console key (Ctrl+Z), which signals the end-of-file condition.</source>
          <target state="translated">同時にキーを押して、<ph id="ph1">&lt;xref:System.ConsoleModifiers.Control&gt;</ph>修飾子キーと<ph id="ph2">&lt;xref:System.ConsoleKey.Z&gt;</ph>コンソール キー (Ctrl + Z)、ファイル末尾の条件に通知します。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Read">
          <source>Press an equivalent key that signals the end-of-file condition, such as the F6 function key in Windows.</source>
          <target state="translated">Windows で F6 キーなど、ファイル末尾の条件のことを通知する、同じキーを押します。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Read">
          <source>Redirect the input stream to a source, such as a text file, that has an actual end-of-file character.</source>
          <target state="translated">実際のファイルの終端文字が含まれるテキスト ファイルなどのソースには、入力ストリームをリダイレクトします。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Read">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Console.Read%2A&gt;</ph> method.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Console.Read%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Console.Read">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="T:System.Console">
          <source>Obtains the next character or function key pressed by the user.</source>
          <target state="translated">ユーザーによって押された次の文字キーまたはファンクション キーを取得します。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Console.ReadKey">
          <source>Obtains the next character or function key pressed by the user.</source>
          <target state="translated">ユーザーによって押された次の文字キーまたはファンクション キーを取得します。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Console.ReadKey">
          <source>The pressed key is displayed in the console window.</source>
          <target state="translated">押されたキーは、コンソール ウィンドウに表示されます。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Console.ReadKey">
          <source>An object that describes the <ph id="ph1">&lt;see cref="T:System.ConsoleKey" /&gt;</ph> constant and Unicode character, if any, that correspond to the pressed console key.</source>
          <target state="translated">押されたコンソール キーに対応する <ph id="ph1">&lt;see cref="T:System.ConsoleKey" /&gt;</ph> 定数と Unicode 文字 (存在する場合) を記述するオブジェクト。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Console.ReadKey">
          <source>The <ph id="ph1">&lt;see cref="T:System.ConsoleKeyInfo" /&gt;</ph> object also describes, in a bitwise combination of <ph id="ph2">&lt;see cref="T:System.ConsoleModifiers" /&gt;</ph> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</source>
          <target state="translated">また、<ph id="ph1">&lt;see cref="T:System.ConsoleKeyInfo" /&gt;</ph> オブジェクトは、1 つ以上の Shift、Alt、Ctrl の各修飾子キーがコンソール キーと同時に押されたかどうかを <ph id="ph2">&lt;see cref="T:System.ConsoleModifiers" /&gt;</ph> 値のビットごとの組み合わせで記述します。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method waits, that is, blocks on the thread issuing the <ph id="ph2">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method, until a character or function key is pressed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッドは、待機、つまり、発行元のスレッド上のメモリ ブロック、<ph id="ph2">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッドを文字キーまたはファンクション キーが押下されるまでです。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey">
          <source>A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys.</source>
          <target state="translated">1 つまたは複数の alt キーを押し、ctrl キーまたは shift キーを押し修飾子キーの組み合わせで、文字キーまたはファンクション キーを押すこともできます。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey">
          <source>However, pressing a modifier key by itself will not cause the <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method to return.</source>
          <target state="translated">ただし、修飾子キーを押すと、それ自体では発生しません、<ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph>を返すメソッド。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey">
          <source>Depending on your application, you might want to use the <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method in conjunction with the <ph id="ph2">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph> property.</source>
          <target state="translated">アプリケーションによっては、使用する場合があります、<ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッドと組み合わせて、<ph id="ph2">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method reads from the keyboard even if the standard input is redirected to a file with the <ph id="ph2">&lt;xref:System.Console.SetIn%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッドを持つファイルに標準の入力がリダイレクトされる場合でも、キーボードから読み取り、<ph id="ph2">&lt;xref:System.Console.SetIn%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey">
          <source>One of the most common uses of the <ph id="ph1">&lt;xref:System.Console.ReadKey&gt;</ph> method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information.</source>
          <target state="translated">最も一般的なのいずれかを使用して、<ph id="ph1">&lt;xref:System.Console.ReadKey&gt;</ph>方法は、ユーザーがキーを押すと、アプリが終了またはのいずれかについての他のウィンドウを表示するまで、プログラムの実行を停止します。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey">
          <source>The following example uses the  <ph id="ph1">&lt;xref:System.Console.ReadKey&gt;</ph> method to wait for the user to press the Enter key before terminating the app.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Console.ReadKey&gt;</ph>メソッドをユーザーにアプリを終了する前に、Enter キーを押すを待機します。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey">
          <source>Note that this overload of the <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method by default echoes any displayable keys that the user presses to the console.</source>
          <target state="translated">このオーバー ロードを<ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッドは既定で表示可能なした任意のキーをコンソールに押すがエコーされます。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey">
          <source>To suppress them, call the  <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method with an <ph id="ph2">`intercept`</ph> argument of <ph id="ph3">`true`</ph>.</source>
          <target state="translated">非表示にしたりを呼び出して、<ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッドを<ph id="ph2">`intercept`</ph>の引数<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Console.ReadKey&gt;</ph> method to display information about which key the user pressed..</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Console.ReadKey&gt;</ph>メソッド、ユーザーが押されたキーに関する情報を表示する.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Console.ReadKey">
          <source>The <ph id="ph1">&lt;see cref="P:System.Console.In" /&gt;</ph> property is redirected from some stream other than the console.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Console.In" /&gt;</ph> プロパティは、コンソール以外のストリームからリダイレクトされます。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>Determines whether to display the pressed key in the console window.</source>
          <target state="translated">押されたキーをコンソール ウィンドウに表示するかどうかを決定します。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="M:System.Console.ReadKey(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to not display the pressed key; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">押されたキーを表示しない場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>Obtains the next character or function key pressed by the user.</source>
          <target state="translated">ユーザーによって押された次の文字キーまたはファンクション キーを取得します。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>The pressed key is optionally displayed in the console window.</source>
          <target state="translated">押されたキーは、オプションでコンソール ウィンドウに表示されます。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>An object that describes the <ph id="ph1">&lt;see cref="T:System.ConsoleKey" /&gt;</ph> constant and Unicode character, if any, that correspond to the pressed console key.</source>
          <target state="translated">押されたコンソール キーに対応する <ph id="ph1">&lt;see cref="T:System.ConsoleKey" /&gt;</ph> 定数と Unicode 文字 (存在する場合) を記述するオブジェクト。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ConsoleKeyInfo" /&gt;</ph> object also describes, in a bitwise combination of <ph id="ph2">&lt;see cref="T:System.ConsoleModifiers" /&gt;</ph> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</source>
          <target state="translated">また、<ph id="ph1">&lt;see cref="T:System.ConsoleKeyInfo" /&gt;</ph> オブジェクトは、1 つ以上の Shift、Alt、Ctrl の各修飾子キーがコンソール キーと同時に押されたかどうかを <ph id="ph2">&lt;see cref="T:System.ConsoleModifiers" /&gt;</ph> 値のビットごとの組み合わせで記述します。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method waits, that is, blocks on the thread issuing the <ph id="ph2">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method, until a character or function key is pressed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッドは、待機、つまり、発行元のスレッド上のメモリ ブロック、<ph id="ph2">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッドを文字キーまたはファンクション キーが押下されるまでです。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys.</source>
          <target state="translated">1 つまたは複数の alt キーを押し、ctrl キーまたは shift キーを押し修飾子キーの組み合わせで、文字キーまたはファンクション キーを押すこともできます。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>However, pressing a modifier key by itself will not cause the <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method to return.</source>
          <target state="translated">ただし、修飾子キーを押すと、それ自体では発生しません、<ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph>を返すメソッド。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>If the <ph id="ph1">`intercept`</ph> parameter is <ph id="ph2">`true`</ph>, the pressed key is intercepted and not displayed in the console window; otherwise, the pressed key is displayed.</source>
          <target state="translated">場合、<ph id="ph1">`intercept`</ph>パラメーターは<ph id="ph2">`true`</ph>、押されたキーが傍受および押されたキーが表示されていない、コンソール ウィンドウに表示されている以外の場合はそれ以外の場合、します。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>Depending on your application, you might want to use the <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method in conjunction with the <ph id="ph2">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph> property.</source>
          <target state="translated">アプリケーションによっては、使用する場合があります、<ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッドと組み合わせて、<ph id="ph2">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method reads from the keyboard even if the standard input is redirected to a file with the <ph id="ph2">&lt;xref:System.Console.SetIn%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッドを持つファイルに標準の入力がリダイレクトされる場合でも、キーボードから読み取り、<ph id="ph2">&lt;xref:System.Console.SetIn%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>One of the most common uses of the <ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information.</source>
          <target state="translated">最も一般的なのいずれかを使用して、<ph id="ph1">&lt;xref:System.Console.ReadKey%2A&gt;</ph>方法は、ユーザーがキーを押すと、アプリが終了またはのいずれかについての他のウィンドウを表示するまで、プログラムの実行を停止します。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>The following example uses the  <ph id="ph1">&lt;xref:System.Console.ReadKey%28System.Boolean%29&gt;</ph> method to wait for the user to press the Enter key before terminating the app.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Console.ReadKey%28System.Boolean%29&gt;</ph>メソッドをユーザーにアプリを終了する前に、Enter キーを押すを待機します。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>Note that, if the user presses any other key, it is not echoed to the console.</source>
          <target state="translated">ユーザーは、その他の任意のキーを押すと、ことはできません、コンソールにエコーに注意してください。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Console.ReadKey%28System.Boolean%29&gt;</ph> method to display information about the key pressed by a user without echoing that key to the console.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Console.ReadKey%28System.Boolean%29&gt;</ph>コンソールにそのキーをエコーすることがなく、ユーザーによって押されたキーに関する情報を表示するメソッド。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:System.Console.ReadKey(System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Console.In" /&gt;</ph> property is redirected from some stream other than the console.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Console.In" /&gt;</ph> プロパティは、コンソール以外のストリームからリダイレクトされます。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Console.ReadLine">
          <source>Reads the next line of characters from the standard input stream.</source>
          <target state="translated">標準入力ストリームから次の 1 行分の文字を読み取ります。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Console.ReadLine">
          <source>The next line of characters from the input stream, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no more lines are available.</source>
          <target state="translated">入力ストリームの次の行。または次の行がない場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method reads a line from the standard input stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph>メソッドは、標準入力ストリームから行を読み取ります。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>(For the definition of a line, see the paragraph after the following list.) This means that:</source>
          <target state="translated">(行の定義、次のリストの後に、段落を参照してください)。これによって、次のことが起こります。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>If the standard input device is the keyboard, the <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method blocks until the user presses the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key.</source>
          <target state="translated">標準入力デバイスが、キーボードの場合、<ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph>メソッドはユーザーがまで、ブロック、 <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept>キー。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>One of the most common uses of the <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method is to pause program execution before clearing the console and displaying new information to it, or to prompt the user to press the Enter key before terminating the application.</source>
          <target state="translated">最も一般的なのいずれかを使用して、<ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph>メソッドは、コンソールをクリアして、新しい情報を表示する前に、プログラム実行を一時停止するか、またはアプリケーションを終了する前に、Enter キーを押すようにユーザーに促すです。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>The following example illustrates this.</source>
          <target state="translated">次に例を示します。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>If standard input is redirected to a file, the <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method reads a line of text from a file.</source>
          <target state="translated">標準入力がファイルにリダイレクトされる場合、<ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph>メソッドは、行のテキストをファイルから読み取ります。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>For example, the following is a text file named ReadLine1.txt:</source>
          <target state="translated">たとえば、ReadLine1.txt をという名前のテキスト ファイルは、次のように。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method to read input that is redirected from a file.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph>ファイルからリダイレクトされている入力を読み取ります。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>The read operation terminates when the  method returns <ph id="ph1">`null`</ph>, which indicates that no lines remain to be read.</source>
          <target state="translated">メソッドが戻るときに、読み取り操作が終了する<ph id="ph1">`null`</ph>、読み取られる行が残っていないことを示します。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>After compiling the example to an executable named ReadLine1.exe, you can run it from the command line with the syntax</source>
          <target state="translated">実行可能ファイルの名前付き ReadLine1.exe する例をコンパイルすた後には、実行できます構文を使用してコマンドラインから</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>to read the contents of the file and display them to the console.</source>
          <target state="translated">ファイルの内容を読み取るし、それらをコンソールに表示します。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>A line is defined as a sequence of characters followed by a carriage return (hexadecimal 0x000d), a line feed (hexadecimal 0x000a), or the value of the <ph id="ph1">&lt;xref:System.Environment.NewLine%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">行が文字の後にキャリッジ リターン (16 進 0x000d)、ライン フィード (16 進 0x000a)、またはの値のシーケンスとして定義されている、<ph id="ph1">&lt;xref:System.Environment.NewLine%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>The returned string does not contain the terminating character(s).</source>
          <target state="translated">返される文字列に終端文字が含まれていません。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>By default, the method reads input from a 256-character input buffer.</source>
          <target state="translated">既定では、このメソッドは、256 文字の入力バッファーからの入力を読み取ります。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>Because this includes the <ph id="ph1">&lt;xref:System.Environment.NewLine%2A?displayProperty=nameWithType&gt;</ph> character(s), the method can read lines that contain up to 254 characters.</source>
          <target state="translated">これに含まれているため、<ph id="ph1">&lt;xref:System.Environment.NewLine%2A?displayProperty=nameWithType&gt;</ph>文字、このメソッドは最大 254 文字を含む行を読み取ることができます。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>To read longer lines, call the <ph id="ph1">&lt;xref:System.Console.OpenStandardInput%28System.Int32%29&gt;</ph> method.</source>
          <target state="translated">長い行を読み取りを呼び出して、<ph id="ph1">&lt;xref:System.Console.OpenStandardInput%28System.Int32%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>The <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method executes synchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph>メソッドが同期的に実行します。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>That is, it blocks until a line is read or the Ctrl+Z keyboard combination is pressed.</source>
          <target state="translated">つまり、行が読み取られるか、ctrl キーを押しながら Z キーの組み合わせが押されるまでブロックします。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>The <ph id="ph1">&lt;xref:System.Console.In%2A&gt;</ph> property returns a <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph> object that represents the standard input stream and that has both a synchronous <ph id="ph3">&lt;xref:System.IO.TextReader.ReadLine%2A?displayProperty=nameWithType&gt;</ph> method and an asynchronous <ph id="ph4">&lt;xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.In%2A&gt;</ph>プロパティから返される、<ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>オブジェクトを表す標準入力ストリームとを両方同期<ph id="ph3">&lt;xref:System.IO.TextReader.ReadLine%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび非同期<ph id="ph4">&lt;xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>However, when used as the console's standard input stream, the <ph id="ph1">&lt;xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType&gt;</ph> executes synchronously rather than asynchronously and returns a <ph id="ph2">`Task&lt;String&gt;`</ph> only after the read operation has completed.</source>
          <target state="translated">ただし、コンソールの標準入力ストリームとして使用すると、<ph id="ph1">&lt;xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType&gt;</ph>非同期的にではなく同期的に処理を実行し、返します、<ph id="ph2">`Task&lt;String&gt;`</ph>読み取り操作が完了した後のみです。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>If this method throws an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception, the reader's position in the underlying <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object is advanced by the number of characters the method was able to read, but the characters already read into the internal <ph id="ph3">&lt;xref:System.Console.ReadLine%2A&gt;</ph> buffer are discarded.</source>
          <target state="translated">このメソッドがスローされた場合、<ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph>例外、基になるリーダーの位置<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>オブジェクトがこのメソッドは、読み込むことが文字が、内部に既に読み取られた文字の数で高度な<ph id="ph3">&lt;xref:System.Console.ReadLine%2A&gt;</ph>バッファーは破棄されます。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>Since the position of the reader in the stream cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>.</source>
          <target state="translated">既に読み取られた文字が回復することはできませんし、再初期化してのみアクセスできるストリーム内のリーダーの位置を変更できないため、<ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>If the initial position within the stream is unknown or the stream does not support seeking, the underlying <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> also needs to be reinitialized.</source>
          <target state="translated">ストリーム内の最初の位置が不明か、ストリームがシークを基になるをサポートしていない場合<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>も再初期化する必要があります。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>To avoid such a situation and to produce robust code, you should use the <ph id="ph1">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph> property and <ph id="ph2">&lt;xref:System.Console.ReadKey%2A&gt;</ph> method and store the read characters in a pre-allocated buffer.</source>
          <target state="translated">このような状況を回避し、堅牢なコードを生成するには、する必要がありますを使用する、<ph id="ph1">&lt;xref:System.Console.KeyAvailable%2A&gt;</ph>プロパティおよび<ph id="ph2">&lt;xref:System.Console.ReadKey%2A&gt;</ph>読み取りが事前に割り当てられたバッファーの文字メソッドとストアです。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>If the Ctrl+Z character is pressed when the method is reading input from the console, the method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">このメソッドを返しますのかどうか、ctrl キーを押しながら Z キーを押すと、メソッドは、コンソールからの入力を読み取るときに、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>This enables the user to prevent further keyboard input when the <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> method is called in a loop.</source>
          <target state="translated">これにより、さらにキーボードを防ぐためにユーザー入力時に、<ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph>ループ内でメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>The following example illustrates this scenario.</source>
          <target state="translated">次の例では、このシナリオを示します。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>The following example requires two command line arguments: the name of an existing text file, and the name of a file to write the output to.</source>
          <target state="translated">次の例には、次の 2 つのコマンドライン引数が必要です。 既存のテキスト ファイルの名前と、出力を書き込むファイルの名前。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>It opens the existing text file and redirects the standard input from the keyboard to that file.</source>
          <target state="translated">既存のテキスト ファイルを開くし、標準キーボードによる入力をそのファイルをリダイレクトします。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>It also redirects the standard output from the console to the output file.</source>
          <target state="translated">また、出力ファイルに、コンソールから、標準出力をリダイレクトします。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ReadLine">
          <source>It then uses the <ph id="ph1">&lt;xref:System.Console.ReadLine%2A?displayProperty=nameWithType&gt;</ph> method to read each line in the file, replaces every sequence of four spaces with a tab character, and uses the <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> method to write the result to the output file.</source>
          <target state="translated">次を使用して、<ph id="ph1">&lt;xref:System.Console.ReadLine%2A?displayProperty=nameWithType&gt;</ph>をファイルの各行を読み取るメソッドが 4 つのスペースのすべてのシーケンスをタブ文字で置き換えますを使用して、<ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph>に結果を出力ファイルに書き込みます。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="M:System.Console.ReadLine">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" uid="M:System.Console.ReadLine">
          <source>There is insufficient memory to allocate a buffer for the returned string.</source>
          <target state="translated">返却された文字列にバッファーを割り当てるには、メモリが不足しています。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="M:System.Console.ReadLine">
          <source>The number of characters in the next line of characters is greater than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">次の文字行の文字数が <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" uid="M:System.Console.ResetColor">
          <source>Sets the foreground and background console colors to their defaults.</source>
          <target state="translated">コンソールの前景色および背景色を既定値に設定します。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ResetColor">
          <source>The foreground and background colors are restored to the colors that existed when the current process began.</source>
          <target state="translated">前景色と背景色は、現在のプロセスを開始したときに存在していた色に復元されます。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ResetColor">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Console.ForegroundColor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph> properties.</source>
          <target state="translated">詳細については、次を参照してください。、<ph id="ph1">&lt;xref:System.Console.ForegroundColor%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ResetColor">
          <source>The following example saves the values of the <ph id="ph1">&lt;xref:System.ConsoleColor&gt;</ph> enumeration to an array and stores the current values of the <ph id="ph2">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Console.ForegroundColor%2A&gt;</ph> properties to variables.</source>
          <target state="translated">次の例の値を保存する、<ph id="ph1">&lt;xref:System.ConsoleColor&gt;</ph>配列を列挙の現在の値を格納し、<ph id="ph2">&lt;xref:System.Console.BackgroundColor%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Console.ForegroundColor%2A&gt;</ph>変数のプロパティです。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ResetColor">
          <source>It then changes the foreground color to each color in the <ph id="ph1">&lt;xref:System.ConsoleColor&gt;</ph> enumeration except to the color that matches the current background, and it changes the background color to each color in the <ph id="ph2">&lt;xref:System.ConsoleColor&gt;</ph> enumeration except to the color that matches the current foreground.</source>
          <target state="translated">内の各色を前景の色が変更され、<ph id="ph1">&lt;xref:System.ConsoleColor&gt;</ph>列挙色に現在の背景に一致して、それぞれの色に背景色を変更点を除いて、<ph id="ph2">&lt;xref:System.ConsoleColor&gt;</ph>以外の列挙型と一致する色を現在の前景色。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ResetColor">
          <source>(If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <ph id="ph1">&lt;xref:System.Console.ResetColor%2A&gt;</ph> method to restore the original console colors.</source>
          <target state="translated">(前景の色、背景色と同じである場合、テキストは表示されません。)最後に、呼び出し、<ph id="ph1">&lt;xref:System.Console.ResetColor%2A&gt;</ph>を元のコンソールの色を復元します。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" uid="M:System.Console.ResetColor">
          <source>The user does not have permission to perform this action.</source>
          <target state="translated">ユーザーにこの操作を実行するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" uid="M:System.Console.ResetColor">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ResetColor">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.ResetColor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source>The width of the buffer area measured in columns.</source>
          <target state="translated">列数で指定されたバッファー領域の幅。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source>The height of the buffer area measured in rows.</source>
          <target state="translated">行数で指定されたバッファー領域の高さ。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source>Sets the height and width of the screen buffer area to the specified values.</source>
          <target state="translated">画面バッファー領域の高さと幅を指定された値に設定します。</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Console.WindowTop%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Console.BufferWidth%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Console.BufferHeight%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Console.CursorVisible%2A&gt;</ph> properties; and the <ph id="ph8">&lt;xref:System.Console.SetWindowPosition%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Console.SetBufferSize%2A&gt;</ph>, and <ph id="ph10">&lt;xref:System.Console.ReadKey%2A&gt;</ph> methods.</source>
          <target state="translated">次の例で、 <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Console.WindowTop%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>、 <ph id="ph5">&lt;xref:System.Console.BufferWidth%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.Console.BufferHeight%2A&gt;</ph>、および<ph id="ph7">&lt;xref:System.Console.CursorVisible%2A&gt;</ph>プロパティおよび<ph id="ph8">&lt;xref:System.Console.SetWindowPosition%2A&gt;</ph>、 <ph id="ph9">&lt;xref:System.Console.SetBufferSize%2A&gt;</ph>、および<ph id="ph10">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッド。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source>The example draws a grid pattern in the screen buffer based on the screen buffer width.</source>
          <target state="translated">この例では、画面バッファーの幅に基づく画面バッファー内をグリッド パターンを描画します。</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source>Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed.</source>
          <target state="translated">下矢印、左矢印または右矢印のコンソール キーが押された上向きの矢印のうち、応答で、コンソール ウィンドウを移動します。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source>The grid pattern helps you see the movement of the console window relative to the screen buffer.</source>
          <target state="translated">グリッド パターンでは、画面バッファーに対するコンソール ウィンドウの移動を確認できます。</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="height" /&gt;</ph> or <ph id="ph2">&lt;paramref name="width" /&gt;</ph> is less than or equal to zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="height" /&gt;</ph> または <ph id="ph2">&lt;paramref name="width" /&gt;</ph> が 0 以下です。</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="height" /&gt;</ph> or <ph id="ph2">&lt;paramref name="width" /&gt;</ph> is greater than or equal to <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="height" /&gt;</ph> または <ph id="ph2">&lt;paramref name="width" /&gt;</ph> が <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="width" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="P:System.Console.WindowLeft" /&gt;</ph><ph id="ph3"> + </ph><ph id="ph4">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="width" /&gt;</ph> は <ph id="ph2">&lt;see cref="P:System.Console.WindowLeft" /&gt;</ph><ph id="ph3"> + </ph><ph id="ph4">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph> より小さい値です。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="height" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="P:System.Console.WindowTop" /&gt;</ph><ph id="ph3"> + </ph><ph id="ph4">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="height" /&gt;</ph> は <ph id="ph2">&lt;see cref="P:System.Console.WindowTop" /&gt;</ph><ph id="ph3"> + </ph><ph id="ph4">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> より小さい値です。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source>The user does not have permission to perform this action.</source>
          <target state="translated">ユーザーにこの操作を実行するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetBufferSize(System.Int32,System.Int32)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>The column position of the cursor.</source>
          <target state="translated">カーソルを置く列の位置。</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>Columns are numbered from left to right starting at 0.</source>
          <target state="translated">列には、左から右に向かって 0 から始まる番号が付けられます。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>The row position of the cursor.</source>
          <target state="translated">カーソルを置く行の位置。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>Rows are numbered from top to bottom starting at 0.</source>
          <target state="translated">行には、上から下に向かって 0 から始まる番号が付けられます。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>Sets the position of the cursor.</source>
          <target state="translated">カーソルの位置を設定します。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.Console.SetCursorPosition%2A&gt;</ph> method to specify where the next write operation in the console window is to begin.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Console.SetCursorPosition%2A&gt;</ph>コンソール ウィンドウに次の書き込み操作の開始を指定します。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>If the specified cursor position is outside the area that is currently visible in the console window, the window origin changes automatically to make the cursor visible.</source>
          <target state="translated">指定したカーソル位置が、コンソール ウィンドウに現在表示されている領域の外側にある場合は、カーソルを表示するウィンドウの原点を自動的に変更します。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>The cursor automatically moves to the next character position each time a character is written to the console window.</source>
          <target state="translated">カーソルは自動的に毎回、文字は、コンソール ウィンドウに書き込まれます。 次の文字位置に移動します。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>If the cursor is at the bottom right character position of the console window, the next write operation causes the console window to scroll so the cursor remains visible.</source>
          <target state="translated">カーソルが、コンソール ウィンドウの下部にある右の文字位置にある場合は、次への書き込み操作時、コンソール ウィンドウをスクロール カーソルが表示されるようにします。</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>If you want to write a character to the bottom right character position without causing the console window to scroll, use the <ph id="ph1">&lt;xref:System.Console.MoveBufferArea%2A&gt;</ph> method to move a character to that position.</source>
          <target state="translated">させずにスクロールして、使用するには、コンソール ウィンドウの下部右の文字位置に文字を書き込む場合、<ph id="ph1">&lt;xref:System.Console.MoveBufferArea%2A&gt;</ph>文字をその位置に移動します。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>This example demonstrates the <ph id="ph1">&lt;xref:System.Console.CursorLeft%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.CursorTop%2A&gt;</ph> properties, and the <ph id="ph3">&lt;xref:System.Console.SetCursorPosition%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Console.Clear%2A&gt;</ph> methods.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Console.CursorLeft%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.CursorTop%2A&gt;</ph>プロパティ、および<ph id="ph3">&lt;xref:System.Console.SetCursorPosition%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Console.Clear%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of "+", "&amp;#124;", and "-" strings.</source>
          <target state="translated">例では、カーソルの組み合わせを使用して 5 つの文字の四角形で 5 文字を描画し、次の書き込みが行われる場所を決定する「+」、"&amp;#124;"、および"-"の文字列。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>Note that the rectangle could be drawn with fewer steps using a combination of other strings.</source>
          <target state="translated">その他の文字列の組み合わせを使用して、少ない手順で四角形を描画するだったことに注意してください。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="top" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> または <ph id="ph2">&lt;paramref name="top" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> is greater than or equal to <ph id="ph2">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> が <ph id="ph2">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="top" /&gt;</ph> is greater than or equal to <ph id="ph2">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="top" /&gt;</ph> が <ph id="ph2">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>The user does not have permission to perform this action.</source>
          <target state="translated">ユーザーにこの操作を実行するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetCursorPosition(System.Int32,System.Int32)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="M:System.Console.SetError(System.IO.TextWriter)">
          <source>A stream that is the new standard error output.</source>
          <target state="translated">新しい標準エラー出力であるストリーム。</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="M:System.Console.SetError(System.IO.TextWriter)">
          <source>Sets the <ph id="ph1">&lt;see cref="P:System.Console.Error" /&gt;</ph> property to the specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Console.Error" /&gt;</ph> プロパティを、指定した <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> オブジェクトに設定します。</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetError(System.IO.TextWriter)">
          <source>By default, the <ph id="ph1">&lt;xref:System.Console.Error%2A&gt;</ph> property is set to the standard error output stream.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.Console.Error%2A&gt;</ph>プロパティが標準エラー出力ストリームに設定します。</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetError(System.IO.TextWriter)">
          <source>A <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> that encapsulates a <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> can be used to send error messages to a file.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>をカプセル化する、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>をファイルにエラー メッセージを送信に使用することができます。</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetError(System.IO.TextWriter)">
          <source>The following example shows how to redirect the standard error stream to a file.</source>
          <target state="translated">次の例では、ファイルに標準エラー ストリームをリダイレクトする方法を示します。</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="M:System.Console.SetError(System.IO.TextWriter)">
          <source><ph id="ph1">&lt;paramref name="newError" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newError" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Console.SetError(System.IO.TextWriter)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetError(System.IO.TextWriter)">
          <source>for calling unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出す。</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetError(System.IO.TextWriter)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" uid="M:System.Console.SetIn(System.IO.TextReader)">
          <source>A stream that is the new standard input.</source>
          <target state="translated">新しい標準入力であるストリーム。</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" uid="M:System.Console.SetIn(System.IO.TextReader)">
          <source>Sets the <ph id="ph1">&lt;see cref="P:System.Console.In" /&gt;</ph> property to the specified <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Console.In" /&gt;</ph> プロパティを、指定した <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> オブジェクトに設定します。</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetIn(System.IO.TextReader)">
          <source>By default, the <ph id="ph1">&lt;xref:System.Console.In%2A&gt;</ph> property is set to the standard input stream.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.Console.In%2A&gt;</ph>プロパティが標準入力ストリームに設定します。</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetIn(System.IO.TextReader)">
          <source>A <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> that encapsulates a <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> can be used to receive input from a file.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph>をカプセル化する、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>ファイルからの入力を受信するために使用できます。</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetIn(System.IO.TextReader)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Console.SetIn%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.SetIn%2A&gt;</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetIn(System.IO.TextReader)">
          <source>It replaces four consecutive space characters in a string with a tab character.</source>
          <target state="translated">これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetIn(System.IO.TextReader)">
          <source>To run it, you must supply two command line arguments.</source>
          <target state="translated">これを実行するには、2 つのコマンドライン引数を指定してください。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetIn(System.IO.TextReader)">
          <source>The first is the name of an existing text file to redirect the standard input stream to.</source>
          <target state="translated">1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetIn(System.IO.TextReader)">
          <source>The second is the name of a file to redirect the standard output stream to.</source>
          <target state="translated">2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetIn(System.IO.TextReader)">
          <source>This file need not exist.</source>
          <target state="translated">このファイルは存在する必要はありません。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetIn(System.IO.TextReader)">
          <source>If it does, its contents will be overwritten.</source>
          <target state="translated">ファイルが存在する場合は、その内容が上書きされます。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" uid="M:System.Console.SetIn(System.IO.TextReader)">
          <source><ph id="ph1">&lt;paramref name="newIn" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newIn" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" uid="M:System.Console.SetIn(System.IO.TextReader)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetIn(System.IO.TextReader)">
          <source>for calling unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出す。</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetIn(System.IO.TextReader)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source>A stream that is the new standard output.</source>
          <target state="translated">新しい標準出力であるストリーム。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source>Sets the <ph id="ph1">&lt;see cref="P:System.Console.Out" /&gt;</ph> property to the specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Console.Out" /&gt;</ph> プロパティを、指定した <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> オブジェクトに設定します。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source>By default, the <ph id="ph1">&lt;xref:System.Console.Out%2A&gt;</ph> property is set to the standard output stream.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.Console.Out%2A&gt;</ph>プロパティが標準出力ストリームに設定します。</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source>A <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> that encapsulates a <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> can be used to send output to a file.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph>をカプセル化する、<ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>をファイルに出力を送信に使用することができます。</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source>For example:</source>
          <target state="translated">例:</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Console.SetOut%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.SetOut%2A&gt;</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source>It replaces four consecutive space characters in a string with a tab character.</source>
          <target state="translated">これにより、文字列内の 4 個の連続する空白文字がタブ文字に置き換えられます。</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source>To run it, you must supply two command line arguments.</source>
          <target state="translated">これを実行するには、2 つのコマンドライン引数を指定してください。</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source>The first is the name of an existing text file to redirect the standard input stream to.</source>
          <target state="translated">1 つ目は、標準入力ストリームのリダイレクト先となる既存のテキスト ファイルの名前です。</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source>The second is the name of a file to redirect the standard output stream to.</source>
          <target state="translated">2 つ目は、標準出力ストリームのリダイレクト先となるファイルの名前です。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source>This file need not exist.</source>
          <target state="translated">このファイルは存在する必要はありません。</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source>If it does, its contents will be overwritten.</source>
          <target state="translated">ファイルが存在する場合は、その内容が上書きされます。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source><ph id="ph1">&lt;paramref name="newOut" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newOut" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source>for calling unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出す。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetOut(System.IO.TextWriter)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>The column position of the upper left  corner of the console window.</source>
          <target state="translated">コンソール ウィンドウの左上隅の列位置。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>The row position of the upper left corner of the console window.</source>
          <target state="translated">コンソール ウィンドウの左上隅の行位置。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>Sets the position of the console window relative to the screen buffer.</source>
          <target state="translated">画面バッファーに対するコンソール ウィンドウの相対位置を設定します。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>The operating system window displays the console window, and the console window displays a portion of the screen buffer.</source>
          <target state="translated">オペレーティング システム ウィンドウ、コンソール ウィンドウを表示し、コンソール ウィンドウは、画面バッファーの一部を表示します。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Console.SetWindowPosition%2A&gt;</ph> method affects the position of the console window relative to the screen buffer, but does not affect the position of the operating system window relative to the desktop.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.SetWindowPosition%2A&gt;</ph>メソッドは、コンソール ウィンドウ、画面バッファーに対する相対の位置に影響しますが、デスクトップの基準としたオペレーティング システムのウィンドウの位置には影響しません。</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>The console and operating system windows generally do not affect each other.</source>
          <target state="translated">コンソールとオペレーティング システムの windows、通常は互いに影響しません。</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>However, if the screen buffer cannot be displayed in the current boundaries of the console window, the operating system automatically appends scroll bars to the operating system window.</source>
          <target state="translated">ただし、画面バッファーをコンソール ウィンドウの境界の現在表示できない場合、オペレーティング システムに自動的にスクロール バーを追加オペレーティング システムのウィンドウします。</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>In that case, moving the operating system window scroll bars affects the position of the console window, and moving the console window with the <ph id="ph1">&lt;xref:System.Console.SetWindowPosition%2A&gt;</ph> method affects the position of the operating system window scroll bars.</source>
          <target state="translated">その場合は、コンソール ウィンドウの位置に影響を与えるオペレーティング システムのウィンドウのスクロール バーを移動し、コンソール ウィンドウに移動、<ph id="ph1">&lt;xref:System.Console.SetWindowPosition%2A&gt;</ph>メソッドは、オペレーティング システム ウィンドウのスクロール バーの位置に影響します。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Console.WindowTop%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Console.BufferWidth%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Console.BufferHeight%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Console.CursorVisible%2A&gt;</ph> properties; and the <ph id="ph8">&lt;xref:System.Console.SetWindowPosition%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Console.SetBufferSize%2A&gt;</ph>, and <ph id="ph10">&lt;xref:System.Console.ReadKey%2A&gt;</ph> methods.</source>
          <target state="translated">次の例で、 <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Console.WindowTop%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>、 <ph id="ph5">&lt;xref:System.Console.BufferWidth%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.Console.BufferHeight%2A&gt;</ph>、および<ph id="ph7">&lt;xref:System.Console.CursorVisible%2A&gt;</ph>プロパティおよび<ph id="ph8">&lt;xref:System.Console.SetWindowPosition%2A&gt;</ph>、 <ph id="ph9">&lt;xref:System.Console.SetBufferSize%2A&gt;</ph>、および<ph id="ph10">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッド。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>The example draws a grid pattern in the screen buffer based on the screen buffer width.</source>
          <target state="translated">この例では、画面バッファーの幅に基づく画面バッファー内をグリッド パターンを描画します。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed.</source>
          <target state="translated">下矢印、左矢印または右矢印のコンソール キーが押された上向きの矢印のうち、応答で、コンソール ウィンドウを移動します。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>The grid pattern helps you see the movement of the console window relative to the screen buffer.</source>
          <target state="translated">グリッド パターンでは、画面バッファーに対するコンソール ウィンドウの移動を確認できます。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph> or <ph id="ph2">&lt;paramref name="top" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph> または <ph id="ph2">&lt;paramref name="top" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="left" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph> is greater than <ph id="ph4">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="left" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph> は <ph id="ph4">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph> より大きくなっています。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="top" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> is greater than <ph id="ph4">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="top" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> は <ph id="ph4">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph> より大きくなっています。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>The user does not have permission to perform this action.</source>
          <target state="translated">ユーザーにこの操作を実行するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowPosition(System.Int32,System.Int32)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source>The width of the console window measured in columns.</source>
          <target state="translated">列数で指定されたコンソール ウィンドウの幅。</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source>The height of the console window measured in rows.</source>
          <target state="translated">行数で指定されたコンソール ウィンドウの高さ。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source>Sets the height and width of the console window to the specified values.</source>
          <target state="translated">コンソール ウィンドウの高さと幅を指定された値に設定します。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source>This example demonstrates the <ph id="ph1">&lt;xref:System.Console.SetWindowSize%2A&gt;</ph> method, and the <ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> properties.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Console.SetWindowSize%2A&gt;</ph>メソッド、および<ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source>You must run the example to see the full effect of changing the console window size.</source>
          <target state="translated">コンソール ウィンドウのサイズを変更した場合の効果を確認する例を実行する必要があります。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source>The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key to be pressed.</source>
          <target state="translated">例では、85 列 43、や行をコンソール ウィンドウのサイズを報告し、キーが押されるを待機します。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source>When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press.</source>
          <target state="translated">任意のキーが押されたときにコンソール ウィンドウのサイズが半分に、新しいディメンションが報告されると、および、例別のキーを押すを待機します。</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source>Finally, when any key is pressed, the console window is restored to its original dimensions and the example terminates.</source>
          <target state="translated">最後に、任意のキーが押されたときに、コンソール ウィンドウが元の寸法に復元し、例では、終了します。</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="width" /&gt;</ph> or <ph id="ph2">&lt;paramref name="height" /&gt;</ph> is less than or equal to zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="width" /&gt;</ph> または <ph id="ph2">&lt;paramref name="height" /&gt;</ph> が 0 以下です。</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="width" /&gt;</ph> plus <ph id="ph2">&lt;see cref="P:System.Console.WindowLeft" /&gt;</ph> or <ph id="ph3">&lt;paramref name="height" /&gt;</ph> plus <ph id="ph4">&lt;see cref="P:System.Console.WindowTop" /&gt;</ph> is greater than or equal to <ph id="ph5">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="width" /&gt;</ph> に <ph id="ph2">&lt;see cref="P:System.Console.WindowLeft" /&gt;</ph> を加算した値、または <ph id="ph3">&lt;paramref name="height" /&gt;</ph> に <ph id="ph4">&lt;see cref="P:System.Console.WindowTop" /&gt;</ph> を加算した値が <ph id="ph5">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="width" /&gt;</ph> or <ph id="ph2">&lt;paramref name="height" /&gt;</ph> is greater than the largest possible window width or height for the current screen resolution and console font.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="width" /&gt;</ph> または <ph id="ph2">&lt;paramref name="height" /&gt;</ph> が、現在の画面解像度とコンソールのフォントで利用可能なウィンドウの最大幅または高さを超えています。</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source>The user does not have permission to perform this action.</source>
          <target state="translated">ユーザーにこの操作を実行するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.SetWindowSize(System.Int32,System.Int32)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="P:System.Console.Title">
          <source>Gets or sets the title to display in the console title bar.</source>
          <target state="translated">コンソールのタイトル バーに表示するタイトルを取得または設定します。</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Title">
          <source>The string to be displayed in the title bar of the console.</source>
          <target state="translated">コンソールのタイトル バーに表示される文字列。</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Title">
          <source>The maximum length of the title string is 24500 characters.</source>
          <target state="translated">タイトル文字列の最大長は 24500 文字です。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Title">
          <source>This example demonstrates the <ph id="ph1">&lt;xref:System.Console.Title%2A&gt;</ph> property.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Console.Title%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Title">
          <source>The example displays the current title of the operating system window, waits for a key press, then displays a new title.</source>
          <target state="translated">例では、現在のオペレーティング システム ウィンドウのタイトルを表示するには、キーを押すを待機し、新しいタイトルを表示します。</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" uid="P:System.Console.Title">
          <source>In a get operation, the retrieved title is longer than 24500 characters.</source>
          <target state="translated">取得操作において、取得したタイトルが 24500 文字を超えています。</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" uid="P:System.Console.Title">
          <source>In a set operation, the specified title is longer than 24500 characters.</source>
          <target state="translated">設定操作において、指定されたしたタイトルが 24500 文字を超えています。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" uid="P:System.Console.Title">
          <source>In a set operation, the specified title is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">設定操作で、指定されたタイトルが <ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" uid="P:System.Console.Title">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Title">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.Title">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" uid="P:System.Console.TreatControlCAsInput">
          <source>Gets or sets a value indicating whether the combination of the <ph id="ph1">&lt;see cref="F:System.ConsoleModifiers.Control" /&gt;</ph> modifier key and <ph id="ph2">&lt;see cref="F:System.ConsoleKey.C" /&gt;</ph> console key (Ctrl+C) is treated as ordinary input or as an interruption that is handled by the operating system.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.ConsoleModifiers.Control" /&gt;</ph> 修飾キーと <ph id="ph2">&lt;see cref="F:System.ConsoleKey.C" /&gt;</ph> コンソール キーの組み合わせ (Ctrl + C) を、通常の入力として扱うか、オペレーティング システムにより処理される割り込みとして扱うかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.TreatControlCAsInput">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if Ctrl+C is treated as ordinary input; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Ctrl + C を通常の入力として扱う場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.TreatControlCAsInput">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Console.TreatControlCAsInput%2A&gt;</ph> property is <ph id="ph2">`false`</ph> and Ctrl+C is pressed, the pressed keys are not stored in the input buffer and the operating system terminates the currently executing process.</source>
          <target state="translated">場合の値、<ph id="ph1">&lt;xref:System.Console.TreatControlCAsInput%2A&gt;</ph>プロパティは<ph id="ph2">`false`</ph>Ctrl + C キーを押すと、押されたキーが入力バッファーに格納されませんし、オペレーティング システムが現在実行中のプロセスを終了します。</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.TreatControlCAsInput">
          <source>This is the default value.</source>
          <target state="translated">これが既定値です。</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.TreatControlCAsInput">
          <source>Use this property judiciously because setting it to <ph id="ph1">`true`</ph> has such a dramatic effect.</source>
          <target state="translated">設定するために、このプロパティを注意深く使用<ph id="ph1">`true`</ph>大幅このような影響を与えます。</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.TreatControlCAsInput">
          <source>Most users expect Ctrl+C to terminate a console application.</source>
          <target state="translated">ほとんどのユーザーは、コンソール アプリケーションを終了するには、Ctrl + C を期待します。</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.TreatControlCAsInput">
          <source>If you disable the effect of Ctrl+C, the user must remember to use Ctrl+Break to terminate the application, which is a less familiar key combination.</source>
          <target state="translated">Ctrl + C の効果を無効にした場合、ユーザーはあまり知られていないキーの組み合わせであると、アプリケーションを終了する Ctrl + Break を使用することを忘れないでください。</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.TreatControlCAsInput">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Console.TreatControlCAsInput%2A&gt;</ph> property.</source>
          <target state="translated">次の例で、<ph id="ph1">&lt;xref:System.Console.TreatControlCAsInput%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="P:System.Console.TreatControlCAsInput">
          <source>Unable to get or set the input mode of the console input buffer.</source>
          <target state="translated">コンソールの入力バッファーの入力モードを取得または設定できません。</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.TreatControlCAsInput">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.TreatControlCAsInput">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="P:System.Console.WindowHeight">
          <source>Gets or sets the height of the console window area.</source>
          <target state="translated">コンソール ウィンドウ領域の高さを取得または設定します。</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowHeight">
          <source>The height of the console window measured in rows.</source>
          <target state="translated">行数で指定されたコンソール ウィンドウの高さ。</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowHeight">
          <source>Attempting to set the value of the <ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> property when output is redirected throws either an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> or an <ph id="ph3">&lt;xref:System.IO.IOException&gt;</ph> exception.</source>
          <target state="translated">値を設定しようとすると、<ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>出力がリダイレクトされたときにプロパティをスローするか、<ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>または<ph id="ph3">&lt;xref:System.IO.IOException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowHeight">
          <source>To prevent an exception, you can set the value of this property only if the <ph id="ph1">&lt;xref:System.Console.IsOutputRedirected%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">例外を防ぐためには、場合にのみ、このプロパティの値を設定することができます、<ph id="ph1">&lt;xref:System.Console.IsOutputRedirected%2A&gt;</ph>プロパティから返される<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowHeight">
          <source>This example demonstrates the <ph id="ph1">&lt;xref:System.Console.SetWindowSize%2A&gt;</ph> method, and the <ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> properties.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Console.SetWindowSize%2A&gt;</ph>メソッド、および<ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowHeight">
          <source>You must run the example to see the full effect of changing the console window size.</source>
          <target state="translated">コンソール ウィンドウのサイズを変更した場合の効果を確認する例を実行する必要があります。</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowHeight">
          <source>The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press.</source>
          <target state="translated">例では、85 列 43、や行をコンソール ウィンドウのサイズを報告し、キーを押すを待機します。</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowHeight">
          <source>When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press.</source>
          <target state="translated">任意のキーが押されたときにコンソール ウィンドウのサイズが半分に、新しいディメンションが報告されると、および、例別のキーを押すを待機します。</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowHeight">
          <source>Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.</source>
          <target state="translated">最後に、任意のキーが押されたときに、コンソール ウィンドウが元の寸法に復元し、例では、終了します。</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="P:System.Console.WindowHeight">
          <source>The value of the <ph id="ph1">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph> property or the value of the <ph id="ph2">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> property is less than or equal to 0.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph> プロパティの値または <ph id="ph2">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> プロパティの値が 0 以下です。</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" uid="P:System.Console.WindowHeight">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" uid="P:System.Console.WindowHeight">
          <source>The value of the <ph id="ph1">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> property plus the value of the <ph id="ph2">&lt;see cref="P:System.Console.WindowTop" /&gt;</ph> property is greater than or equal to <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> プロパティの値と <ph id="ph2">&lt;see cref="P:System.Console.WindowTop" /&gt;</ph> プロパティの値を加算した値が <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" uid="P:System.Console.WindowHeight">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" uid="P:System.Console.WindowHeight">
          <source>The value of the <ph id="ph1">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph> property or the value of the <ph id="ph2">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> property is greater than the largest possible window width or height for the current screen resolution and console font.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph> プロパティの値または <ph id="ph2">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> プロパティの値が、現在の画面の解像度およびコンソールのフォントで利用可能なウィンドウの最大幅か最大の高さを超えています。</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" uid="P:System.Console.WindowHeight">
          <source>Error reading or writing information.</source>
          <target state="translated">読み取りまたは書き込み情報エラー。</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" uid="P:System.Console.WindowLeft">
          <source>Gets or sets the leftmost position of the console window area relative to the screen buffer.</source>
          <target state="translated">コンソール ウィンドウ領域の左端の位置を、画面バッファーの相対位置として取得または設定します。</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>The leftmost console window position measured in columns.</source>
          <target state="translated">列で測定されるコンソール ウィンドウの左端の位置。</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>The console represents a rectangular window into a larger rectangular buffer area.</source>
          <target state="translated">コンソールより大きな四角形のバッファー領域に四角形のウィンドウを表します。</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns.</source>
          <target state="translated">行の数、および水平方向に列の番号では、ウィンドウと、バッファーの両方が垂直方向に測定されます。</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>The dimensions of the buffer area are defined by the <ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph> properties.</source>
          <target state="translated">バッファー領域の大きさがによって定義された、<ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>The dimensions of the console area are defined by the <ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph> properties.</source>
          <target state="translated">コンソールの領域の大きさがによって定義された、<ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>The <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> property determines which column of the buffer area is displayed in the first column of the console window.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>プロパティ バッファー領域の列は、コンソール ウィンドウの最初の列の表示を決定します。</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>The value of the <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> property can range from 0 to <ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph><ph id="ph3"> - </ph><ph id="ph4">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>.</source>
          <target state="translated">値、<ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>プロパティの範囲は 0 ~ <ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph> <ph id="ph3"> - </ph><ph id="ph4">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>Attempting to set it to a value outside that range throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
          <target state="translated">それ以外の値に設定しようとしています。 範囲はがスローされます、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>When a console window first opens, the default value of the <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> property is zero, which indicates that the first column shown by the console corresponds to the first column (the column at position zero) in the buffer area.</source>
          <target state="translated">ときに、コンソール ウィンドウを初めて開いたの既定値、<ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>プロパティが 0 で、コンソールで表示される最初の列がバッファー領域の最初の列 (ゼロの位置にある列) に対応していることを示します。</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>The default width of both the console window and the buffer area is 80 columns.</source>
          <target state="translated">コンソール ウィンドウとバッファー領域の両方の既定の幅は、80 列です。</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>This means that the <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> property can be modified only if the console window is made narrower or the buffer area is made wider.</source>
          <target state="translated">つまり、<ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>プロパティは、コンソール ウィンドウの幅の狭いが行われたか、バッファー領域を広く場合にのみ変更できます。</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>Note that if the width of the buffer area exceeds the width of the console window, the value of the <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> property is automatically adjusted when the user uses the horizontal scroll bar to define the window's relationship to the buffer area.</source>
          <target state="translated">バッファー領域の幅が、コンソール ウィンドウの値の幅を超える場合、<ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>プロパティは、ユーザーでは、水平スクロール バーを使用して、バッファー領域をウィンドウのリレーションシップを定義するときに自動的に調整します。</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>Attempting to set the value of the <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> property when output is redirected throws an <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph> exception.</source>
          <target state="translated">値を設定しようとすると、<ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>プロパティ出力がリダイレクトがスローされます、<ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>To prevent the exception, you can set the value of this property only if the <ph id="ph1">&lt;xref:System.Console.IsOutputRedirected%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">例外を防ぐためには、場合にのみ、このプロパティの値を設定することができます、<ph id="ph1">&lt;xref:System.Console.IsOutputRedirected%2A&gt;</ph>プロパティから返される<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>The following example opens an 80-column console window and defines a buffer area that is 120 columns wide.</source>
          <target state="translated">次の例では、80 列のコンソール ウィンドウを開きます。 し、120 列の幅であるバッファー領域を定義します。</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>It displays information on window and buffer size, and then waits for the user to press either the LEFT ARROW key or the RIGHT ARROW key.</source>
          <target state="translated">ウィンドウとバッファーのサイズに関する情報を表示し、ユーザーに、左方向キーまたは右方向キーを押すを待機します。</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>In the former case, it decrements the value of the <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> property by one if the result is a legal value.</source>
          <target state="translated">前者の場合、デクリメントの値、<ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>プロパティを 1 の場合は、結果は、有効な値です。</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>In the latter case, it increases the value of the <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> property by one if the result would be legal.</source>
          <target state="translated">値を増加している後者の場合、<ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>プロパティを 1 の場合は、結果は有効になります。</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowLeft">
          <source>Note that the example does not have to handle an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>, because it checks that the value to be assigned to the <ph id="ph2">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> property is not negative and does not cause the sum of the <ph id="ph3">&lt;xref:System.Console.WindowLeft%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Console.WindowWidth%2A&gt;</ph> properties to exceed the <ph id="ph5">&lt;xref:System.Console.BufferWidth%2A&gt;</ph> property value.</source>
          <target state="translated">例を処理する必要はありません、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>をチェックするために割り当てられる値、<ph id="ph2">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>プロパティが負の値との合計は行われません、<ph id="ph3">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>プロパティを超える、 <ph id="ph5">&lt;xref:System.Console.BufferWidth%2A&gt;</ph>プロパティ値です。</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" uid="P:System.Console.WindowLeft">
          <source>In a set operation, the value to be assigned is less than zero.</source>
          <target state="translated">設定操作で、割り当てられる値が 0 未満です。</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" uid="P:System.Console.WindowLeft">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="P:System.Console.WindowLeft">
          <source>As a result of the assignment, <ph id="ph1">&lt;see cref="P:System.Console.WindowLeft" /&gt;</ph> plus <ph id="ph2">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph> would exceed <ph id="ph3">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph>.</source>
          <target state="translated">代入結果として、<ph id="ph1">&lt;see cref="P:System.Console.WindowLeft" /&gt;</ph> に <ph id="ph2">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph> を加算すると <ph id="ph3">&lt;see cref="P:System.Console.BufferWidth" /&gt;</ph> より大きくなります。</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="P:System.Console.WindowLeft">
          <source>Error reading or writing information.</source>
          <target state="translated">読み取りまたは書き込み情報エラー。</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" uid="P:System.Console.WindowTop">
          <source>Gets or sets the top position of the console window area relative to the screen buffer.</source>
          <target state="translated">コンソール ウィンドウ領域の上端の位置を、画面バッファーに対する相対位置として取得または設定します。</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowTop">
          <source>The uppermost console window position measured in rows.</source>
          <target state="translated">コンソール ウィンドウの上端の位置 (行)。</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowTop">
          <source>The console represents a rectangular window into a larger rectangular buffer area.</source>
          <target state="translated">コンソールより大きな四角形のバッファー領域に四角形のウィンドウを表します。</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowTop">
          <source>Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns.</source>
          <target state="translated">行の数、および水平方向に列の番号では、ウィンドウと、バッファーの両方が垂直方向に測定されます。</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowTop">
          <source>The dimensions of the buffer area are defined by the <ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph> properties.</source>
          <target state="translated">バッファー領域の大きさがによって定義された、<ph id="ph1">&lt;xref:System.Console.BufferHeight%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.BufferWidth%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowTop">
          <source>The dimensions of the console area are defined by the <ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph> properties.</source>
          <target state="translated">コンソールの領域の大きさがによって定義された、<ph id="ph1">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowTop">
          <source>The <ph id="ph1">&lt;xref:System.Console.WindowTop%2A&gt;</ph> property determines which row of the buffer area is displayed in the first column of the console window.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.WindowTop%2A&gt;</ph>プロパティ バッファー領域の行は、コンソール ウィンドウの最初の列の表示を決定します。</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowTop">
          <source>The value of the <ph id="ph1">&lt;xref:System.Console.WindowTop%2A&gt;</ph> property can range from 0 to <ph id="ph2">&lt;xref:System.Console.BufferHeight%2A&gt;</ph><ph id="ph3"> - </ph><ph id="ph4">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>.</source>
          <target state="translated">値、<ph id="ph1">&lt;xref:System.Console.WindowTop%2A&gt;</ph>プロパティの範囲は 0 ~ <ph id="ph2">&lt;xref:System.Console.BufferHeight%2A&gt;</ph> <ph id="ph3"> - </ph><ph id="ph4">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowTop">
          <source>Attempting to set it to a value outside that range throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
          <target state="translated">それ以外の値に設定しようとしています。 範囲はがスローされます、<ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowTop">
          <source>Attempting to set the value of the <ph id="ph1">&lt;xref:System.Console.WindowTop%2A&gt;</ph> property when output is redirected throws an <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph> exception.</source>
          <target state="translated">値を設定しようとすると、<ph id="ph1">&lt;xref:System.Console.WindowTop%2A&gt;</ph>プロパティ出力がリダイレクトがスローされます、<ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowTop">
          <source>To prevent the exception, you can set the value of this property only if the <ph id="ph1">&lt;xref:System.Console.IsOutputRedirected%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">例外を防ぐためには、場合にのみ、このプロパティの値を設定することができます、<ph id="ph1">&lt;xref:System.Console.IsOutputRedirected%2A&gt;</ph>プロパティから返される<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowTop">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Console.WindowTop%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Console.BufferWidth%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Console.BufferHeight%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Console.CursorVisible%2A&gt;</ph> properties; and the <ph id="ph8">&lt;xref:System.Console.SetWindowPosition%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Console.SetBufferSize%2A&gt;</ph>, and <ph id="ph10">&lt;xref:System.Console.ReadKey%2A&gt;</ph> methods.</source>
          <target state="translated">次の例で、 <ph id="ph1">&lt;xref:System.Console.WindowLeft%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Console.WindowTop%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>、 <ph id="ph5">&lt;xref:System.Console.BufferWidth%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.Console.BufferHeight%2A&gt;</ph>、および<ph id="ph7">&lt;xref:System.Console.CursorVisible%2A&gt;</ph>プロパティおよび<ph id="ph8">&lt;xref:System.Console.SetWindowPosition%2A&gt;</ph>、 <ph id="ph9">&lt;xref:System.Console.SetBufferSize%2A&gt;</ph>、および<ph id="ph10">&lt;xref:System.Console.ReadKey%2A&gt;</ph>メソッド。</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowTop">
          <source>The example draws a grid pattern in the screen buffer based on the screen buffer width.</source>
          <target state="translated">この例では、画面バッファーの幅に基づく画面バッファー内をグリッド パターンを描画します。</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowTop">
          <source>Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed.</source>
          <target state="translated">下矢印、左矢印または右矢印のコンソール キーが押された上向きの矢印のうち、応答で、コンソール ウィンドウを移動します。</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowTop">
          <source>The grid pattern helps you see the movement of the console window relative to the screen buffer.</source>
          <target state="translated">グリッド パターンでは、画面バッファーに対するコンソール ウィンドウの移動を確認できます。</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" uid="P:System.Console.WindowTop">
          <source>In a set operation, the value to be assigned is less than zero.</source>
          <target state="translated">設定操作で、割り当てられる値が 0 未満です。</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="P:System.Console.WindowTop">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" uid="P:System.Console.WindowTop">
          <source>As a result of the assignment, <ph id="ph1">&lt;see cref="P:System.Console.WindowTop" /&gt;</ph> plus <ph id="ph2">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> would exceed <ph id="ph3">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph>.</source>
          <target state="translated">代入結果として、<ph id="ph1">&lt;see cref="P:System.Console.WindowTop" /&gt;</ph> に <ph id="ph2">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> を加算すると <ph id="ph3">&lt;see cref="P:System.Console.BufferHeight" /&gt;</ph> より大きくなります。</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" uid="P:System.Console.WindowTop">
          <source>Error reading or writing information.</source>
          <target state="translated">読み取りまたは書き込み情報エラー。</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" uid="P:System.Console.WindowWidth">
          <source>Gets or sets the width of the console window.</source>
          <target state="translated">コンソール ウィンドウの幅を取得または設定します。</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowWidth">
          <source>The width of the console window measured in columns.</source>
          <target state="translated">列数で指定されたコンソール ウィンドウの幅。</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowWidth">
          <source>Attempting to set the value of the <ph id="ph1">&lt;xref:System.Console.WindowWidth%2A&gt;</ph> property when output is redirected throws either an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> or an <ph id="ph3">&lt;xref:System.IO.IOException&gt;</ph> exception.</source>
          <target state="translated">値を設定しようとすると、<ph id="ph1">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>出力がリダイレクトされたときにプロパティをスローするか、<ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>または<ph id="ph3">&lt;xref:System.IO.IOException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowWidth">
          <source>To prevent an exception, you can set the value of this property only if the <ph id="ph1">&lt;xref:System.Console.IsOutputRedirected%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">例外を防ぐためには、場合にのみ、このプロパティの値を設定することができます、<ph id="ph1">&lt;xref:System.Console.IsOutputRedirected%2A&gt;</ph>プロパティから返される<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowWidth">
          <source>This example demonstrates the <ph id="ph1">&lt;xref:System.Console.SetWindowSize%2A&gt;</ph> method, and the <ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Console.WindowHeight%2A&gt;</ph> properties.</source>
          <target state="translated">この例で、<ph id="ph1">&lt;xref:System.Console.SetWindowSize%2A&gt;</ph>メソッド、および<ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Console.WindowHeight%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowWidth">
          <source>You must run the example to see the full effect of changing the console window size.</source>
          <target state="translated">コンソール ウィンドウのサイズを変更した場合の効果を確認する例を実行する必要があります。</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowWidth">
          <source>The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press.</source>
          <target state="translated">例では、85 列 43、や行をコンソール ウィンドウのサイズを報告し、キーを押すを待機します。</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowWidth">
          <source>When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press.</source>
          <target state="translated">任意のキーが押されたときにコンソール ウィンドウのサイズが半分に、新しいディメンションが報告されると、および、例別のキーを押すを待機します。</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Console.WindowWidth">
          <source>Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.</source>
          <target state="translated">最後に、任意のキーが押されたときに、コンソール ウィンドウが元の寸法に復元し、例では、終了します。</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="P:System.Console.WindowWidth">
          <source>The value of the <ph id="ph1">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph> property or the value of the <ph id="ph2">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> property is less than or equal to 0.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph> プロパティの値または <ph id="ph2">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> プロパティの値が 0 以下です。</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" uid="P:System.Console.WindowWidth">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" uid="P:System.Console.WindowWidth">
          <source>The value of the <ph id="ph1">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> property plus the value of the <ph id="ph2">&lt;see cref="P:System.Console.WindowTop" /&gt;</ph> property is greater than or equal to <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> プロパティの値と <ph id="ph2">&lt;see cref="P:System.Console.WindowTop" /&gt;</ph> プロパティの値を加算した値が <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> 以上です。</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="P:System.Console.WindowWidth">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="P:System.Console.WindowWidth">
          <source>The value of the <ph id="ph1">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph> property or the value of the <ph id="ph2">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> property is greater than the largest possible window width or height for the current screen resolution and console font.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Console.WindowWidth" /&gt;</ph> プロパティの値または <ph id="ph2">&lt;see cref="P:System.Console.WindowHeight" /&gt;</ph> プロパティの値が、現在の画面の解像度およびコンソールのフォントで利用可能なウィンドウの最大幅か最大の高さを超えています。</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="P:System.Console.WindowWidth">
          <source>Error reading or writing information.</source>
          <target state="translated">読み取りまたは書き込み情報エラー。</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" uid="T:System.Console">
          <source>Writes the text representation of the specified value or values to the standard output stream.</source>
          <target state="translated">指定した値のテキスト形式を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Boolean)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Boolean)">
          <source>Writes the text representation of the specified Boolean value to the standard output stream.</source>
          <target state="translated">指定した Boolean 値のテキスト形式を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Boolean)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling <ph id="ph2">&lt;xref:System.Boolean.ToString%2A?displayProperty=nameWithType&gt;</ph>, which outputs either <ph id="ph3">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> or <ph id="ph4">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された<ph id="ph2">&lt;xref:System.Boolean.ToString%2A?displayProperty=nameWithType&gt;</ph>、いずれかが出力される<ph id="ph3">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph>または<ph id="ph4">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Boolean)">
          <source>The following example illustrates the use of the <ph id="ph1">`Write`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Write`</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Boolean)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Boolean)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Char)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Char)">
          <source>Writes the specified Unicode character value to the standard output stream.</source>
          <target state="translated">指定した Unicode 文字値を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Char)">
          <source>The following example illustrates the use of the <ph id="ph1">`Write`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Write`</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Char)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Char)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Char)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Char[])">
          <source>A Unicode character array.</source>
          <target state="translated">Unicode 文字配列。</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Char[])">
          <source>Writes the specified array of Unicode characters to the standard output stream.</source>
          <target state="translated">指定した Unicode 文字配列を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Char[])">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Char[])">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Char[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Decimal)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Decimal)">
          <source>Writes the text representation of the specified <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value to the standard output stream.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 値のテキスト形式を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Decimal)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling <ph id="ph2">&lt;xref:System.Decimal.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された<ph id="ph2">&lt;xref:System.Decimal.ToString%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Decimal)">
          <source>The following example illustrates the use of the <ph id="ph1">`Write`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Write`</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Decimal)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Decimal)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Decimal)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Double)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Double)">
          <source>Writes the text representation of the specified double-precision floating-point value to the standard output stream.</source>
          <target state="translated">指定した倍精度浮動小数点値のテキスト形式を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Double)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された、<ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Double)">
          <source>The following example illustrates the use of the <ph id="ph1">`Write`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Write`</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Double)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Double)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Double)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Int32)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Int32)">
          <source>Writes the text representation of the specified 32-bit signed integer value to the standard output stream.</source>
          <target state="translated">指定した 32 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Int32)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Int32.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された、<ph id="ph2">&lt;xref:System.Int32.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Int32)">
          <source>The following example illustrates the use of the <ph id="ph1">`Write`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Write`</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Int32)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Int32)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Int64)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Int64)">
          <source>Writes the text representation of the specified 64-bit signed integer value to the standard output stream.</source>
          <target state="translated">指定した 64 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Int64)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Int64.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された、<ph id="ph2">&lt;xref:System.Int64.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Int64)">
          <source>The following example illustrates the use of the <ph id="ph1">`Write`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Write`</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Int64)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Int64)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Int64)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Object)">
          <source>The value to write, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">書き込む値または <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Object)">
          <source>Writes the text representation of the specified object to the standard output stream.</source>
          <target state="translated">指定したオブジェクトのテキスト形式を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, nothing is written and no exception is thrown.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>は<ph id="ph2">`null`</ph>、何が書き込まれ、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Object)">
          <source>Otherwise, the <ph id="ph1">`ToString`</ph> method of <ph id="ph2">`value`</ph> is called to produce its string representation, and the resulting string is written to the standard output stream.</source>
          <target state="translated">それ以外の場合、<ph id="ph1">`ToString`</ph>メソッドの<ph id="ph2">`value`</ph>は、文字列形式を生成するために呼び出され、結果の文字列が標準出力ストリームに書き込まれます。</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Object)">
          <source>The following example illustrates the use of the <ph id="ph1">`Write`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Write`</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Object)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Object)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Single)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Single)">
          <source>Writes the text representation of the specified single-precision floating-point value to the standard output stream.</source>
          <target state="translated">指定した単精度浮動小数点値のテキスト形式を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Single)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Single.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された、<ph id="ph2">&lt;xref:System.Single.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Single)">
          <source>The following example illustrates the use of the <ph id="ph1">`Write`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Write`</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Single)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Single)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Single)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String)">
          <source>Writes the specified string value to the standard output stream.</source>
          <target state="translated">指定した文字列値を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String)">
          <source>If value is <ph id="ph1">`null`</ph>, nothing is written to the standard output stream.</source>
          <target state="translated">値が場合<ph id="ph1">`null`</ph>、標準出力ストリームに何も書き込まれません。</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String)">
          <source>The following example illustrates the use of the <ph id="ph1">`Write`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Write`</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.UInt32)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.UInt32)">
          <source>Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.</source>
          <target state="translated">指定した 32 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.UInt32)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.UInt32.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された、<ph id="ph2">&lt;xref:System.UInt32.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.UInt32)">
          <source>The following example illustrates the use of the <ph id="ph1">`Write`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Write`</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.UInt32)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.UInt32)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.UInt32)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.UInt64)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.UInt64)">
          <source>Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.</source>
          <target state="translated">指定した 64 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.UInt64)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.UInt64.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された、<ph id="ph2">&lt;xref:System.UInt64.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.UInt64)">
          <source>The following example illustrates the use of the <ph id="ph1">`Write`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Write`</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.UInt64)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.UInt64)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.UInt64)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object)">
          <source>A composite format string.</source>
          <target state="translated">複合書式設定文字列。</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object)">
          <source>An object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込むオブジェクト。</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object)">
          <source>Writes the text representation of the specified object to the standard output stream using the specified format information.</source>
          <target state="translated">指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object)">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
          <target state="translated">このメソッドを使用して、<bpt id="p1">[</bpt>複合書式指定機能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object)">
          <source>The resulting string is written to the output stream.</source>
          <target state="translated">結果の文字列は、出力ストリームに書き込まれます。</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object)">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
          <target state="translated"><ph id="ph1">`format`</ph>パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object)">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
          <target state="translated">書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object)">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
          <target state="translated">書式指定項目の構文は<ph id="ph1">`{`</ph><bpt id="p1">*</bpt>インデックス<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>配置<ept id="p2">*</ept>] [<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object)">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
          <target state="translated">.NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object)">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated">などのメソッドでサポートされている複合書式指定機能の詳細については<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>、および一部のオーバー ロードの<ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>を参照してください<bpt id="p1">[</bpt>複合書式指定<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object)">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">数値書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の数値書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタム数値書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object)">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
          <target state="translated">についての日付と時刻の書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の日付と時刻の書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタムの日付と時刻の書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object)">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">列挙型書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>列挙型書式指定文字列<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object)">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">書式設定に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>型の書式設定<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object)">
          <source>The following example uses the <ph id="ph1">`WriteLine`</ph> method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.</source>
          <target state="translated">次の例では、<ph id="ph1">`WriteLine`</ph> メソッドを使用して、数値、日付、および列挙体の標準的な書式指定子を示します。</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Console.Write%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Console.Write%2A&gt;</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object)">
          <source>The format specification in <ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> の書式指定が正しくありません。</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>A composite format string.</source>
          <target state="translated">複合書式設定文字列。</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>An array of objects to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込むオブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>Writes the text representation of the specified array of objects to the standard output stream using the specified format information.</source>
          <target state="translated">指定された書式情報を使用して、指定したオブジェクト配列のテキスト表現を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>This method uses the  <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
          <target state="translated">このメソッドを使用して、<bpt id="p1">[</bpt>複合書式指定機能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>The resulting string is written to the output stream.</source>
          <target state="translated">結果の文字列は、出力ストリームに書き込まれます。</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
          <target state="translated"><ph id="ph1">`format`</ph>パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
          <target state="translated">書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
          <target state="translated">書式指定項目の構文は<ph id="ph1">`{`</ph><bpt id="p1">*</bpt>インデックス<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>配置<ept id="p2">*</ept>] [<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
          <target state="translated">.NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated">などのメソッドでサポートされている複合書式指定機能の詳細については<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>、および一部のオーバー ロードの<ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>を参照してください<bpt id="p1">[</bpt>複合書式指定<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">数値書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の数値書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタム数値書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
          <target state="translated">についての日付と時刻の書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の日付と時刻の書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタムの日付と時刻の書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">列挙型書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>列挙型書式指定文字列<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">書式設定に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>型の書式設定<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>The <ph id="ph1">`arg`</ph> parameter is a parameter array.</source>
          <target state="translated"><ph id="ph1">`arg`</ph>パラメーターはパラメーターの配列。</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>Arguments  can be passed to the method either as an array or as list of five or more items.</source>
          <target state="translated">引数は、配列、または 5 つまたは複数の項目の一覧としてメソッドに渡すことができます。</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>The examples illustrate both forms of method call.</source>
          <target state="translated">例では、メソッドの呼び出しの両方の形式を示します。</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>The following example defines a <ph id="ph1">`Person`</ph> class with a number of properties that provide information about a person.</source>
          <target state="translated">次の例では定義、<ph id="ph1">`Person`</ph>多数のユーザーに関する情報を提供するプロパティを持つクラス。</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>Its <ph id="ph1">`GetDescription`</ph> method returns an array that contains all of the property values except one.</source>
          <target state="translated">その<ph id="ph1">`GetDescription`</ph>メソッド、プロパティの値を 1 つを除くのすべてを含む配列を返します。</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>The example then uses the array returned by the  <ph id="ph1">`GetDescription`</ph> method  to display the values of the Person object.</source>
          <target state="translated">によって返される配列を使用して、 <ph id="ph1">`GetDescription`</ph> Person オブジェクトの値を表示するメソッド。</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>Note that the example calls the <ph id="ph1">&lt;xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29&gt;</ph> method rather than the <ph id="ph2">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29&gt;</ph> method because it attempts to display the value of the <ph id="ph3">`Person.Remarks`</ph> property on the same line.</source>
          <target state="translated">例では、呼び出す、<ph id="ph1">&lt;xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29&gt;</ph>メソッドではなく、<ph id="ph2">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29&gt;</ph>メソッドの値を表示しようとするため、<ph id="ph3">`Person.Remarks`</ph>プロパティが同じ行にします。</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>To do this, it examines the value of the <ph id="ph1">&lt;xref:System.Console.CursorLeft%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph> properties to determine whether there is enough space for the remark to fit.</source>
          <target state="translated">これを行うには、値が調べられます、<ph id="ph1">&lt;xref:System.Console.CursorLeft%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.WindowWidth%2A&gt;</ph>に合わせて注釈に必要な領域があるかどうかを判断するプロパティです。</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>If there is, it displays the line.</source>
          <target state="translated">ある場合、行が表示されます。</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>If not, it writes a line, indents three spaces, and displays the remark.</source>
          <target state="translated">存在しない場合、その行を書き込む、3 つのスペースのインデントを設定、注釈が表示されます。</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>The following example is identical to the first, except that it supplies a five-item list as the <ph id="ph1">`arg`</ph> argument instead of a parameter array.</source>
          <target state="translated">として 5 項目一覧を提供する点を除いて、次の例は、最初と同じ、<ph id="ph1">`arg`</ph>引数パラメーター配列の代わりにします。</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> or <ph id="ph2">&lt;paramref name="arg" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> または <ph id="ph2">&lt;paramref name="arg" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>The format specification in <ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> の書式指定が正しくありません。</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>This method is not called by C++ code.</source>
          <target state="translated">このメソッドは、C++ コードでは呼び出されません。</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>The C++ compiler resolves calls to <bpt id="p1">[</bpt>System.Console.Write<ept id="p1">](xref:System.Console.Write*)</ept> that include a string and a list of four or more object parameters as a call to <ph id="ph1">&lt;see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" /&gt;</ph>.</source>
          <target state="translated">C++ コンパイラへの呼び出しを解決する<bpt id="p1">[</bpt>System.Console.Write<ept id="p1">](xref:System.Console.Write*)</ept>への呼び出しとして文字列と 4 つ以上のオブジェクト パラメーターの一覧を含む<ph id="ph1">&lt;see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object[])">
          <source>It resolves calls to <bpt id="p1">[</bpt>System.Console.Write<ept id="p1">](xref:System.Console.Write*)</ept> that include a string and an object array as a call to <ph id="ph1">&lt;see cref="M:System.Console.Write(System.String,System.Object)" /&gt;</ph>.</source>
          <target state="translated">呼び出しを解決<bpt id="p1">[</bpt>System.Console.Write<ept id="p1">](xref:System.Console.Write*)</ept>を含む文字列とオブジェクトの配列への呼び出しとして<ph id="ph1">&lt;see cref="M:System.Console.Write(System.String,System.Object)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
          <source>An array of Unicode characters.</source>
          <target state="translated">Unicode 文字の配列。</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
          <source>The starting position in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内の開始位置。</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to write.</source>
          <target state="translated">書き込む文字数。</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
          <source>Writes the specified subarray of Unicode characters to the standard output stream.</source>
          <target state="translated">指定した Unicode 文字の部分配列を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
          <source>This method writes <ph id="ph1">`count`</ph> characters starting at position <ph id="ph2">`index`</ph> of <ph id="ph3">`buffer`</ph> to the standard output stream.</source>
          <target state="translated">このメソッドは書き込みます<ph id="ph1">`count`</ph>位置から始まる文字<ph id="ph2">`index`</ph>の<ph id="ph3">`buffer`</ph>を標準出力ストリームにします。</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="count" /&gt;</ph> specify a position that is not within <ph id="ph3">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> と <ph id="ph2">&lt;paramref name="count" /&gt;</ph> の合計が指定する位置は、<ph id="ph3">&lt;paramref name="buffer" /&gt;</ph> 内ではありません。</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>A composite format string.</source>
          <target state="translated">複合書式設定文字列。</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>The first object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む最初のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>The second object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む 2 番目のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>Writes the text representation of the specified objects to the standard output stream using the specified format information.</source>
          <target state="translated">指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
          <target state="translated">このメソッドを使用して、<bpt id="p1">[</bpt>複合書式指定機能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>The resulting string is written to the output stream.</source>
          <target state="translated">結果の文字列は、出力ストリームに書き込まれます。</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
          <target state="translated"><ph id="ph1">`format`</ph>パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
          <target state="translated">書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
          <target state="translated">書式指定項目の構文は<ph id="ph1">`{`</ph><bpt id="p1">*</bpt>インデックス<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>配置<ept id="p2">*</ept>] [<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
          <target state="translated">.NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated">などのメソッドでサポートされている複合書式指定機能の詳細については<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>、および一部のオーバー ロードの<ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>を参照してください<bpt id="p1">[</bpt>複合書式指定<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">数値書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の数値書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタム数値書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
          <target state="translated">についての日付と時刻の書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の日付と時刻の書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタムの日付と時刻の書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">列挙型書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>列挙型書式指定文字列<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">書式設定に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>型の書式設定<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>The following example uses the <ph id="ph1">`WriteLine`</ph> method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.</source>
          <target state="translated">次の例では、<ph id="ph1">`WriteLine`</ph> メソッドを使用して、数値、日付、および列挙体の標準的な書式指定子を示します。</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>The following example illustrates the use of the <ph id="ph1">`Write`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Write`</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>The format specification in <ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> の書式指定が正しくありません。</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>A composite format string.</source>
          <target state="translated">複合書式設定文字列。</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>The first object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む最初のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>The second object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む 2 番目のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>The third object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む 3 番目のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>Writes the text representation of the specified objects to the standard output stream using the specified format information.</source>
          <target state="translated">指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
          <target state="translated">このメソッドを使用して、<bpt id="p1">[</bpt>複合書式指定機能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>The resulting string is written to the output stream.</source>
          <target state="translated">結果の文字列は、出力ストリームに書き込まれます。</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
          <target state="translated"><ph id="ph1">`format`</ph>パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
          <target state="translated">書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
          <target state="translated">書式指定項目の構文は<ph id="ph1">`{`</ph><bpt id="p1">*</bpt>インデックス<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>配置<ept id="p2">*</ept>] [<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
          <target state="translated">.NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated">などのメソッドでサポートされている複合書式指定機能の詳細については<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>、および一部のオーバー ロードの<ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>を参照してください<bpt id="p1">[</bpt>複合書式指定<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">数値書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の数値書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタム数値書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
          <target state="translated">についての日付と時刻の書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の日付と時刻の書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタムの日付と時刻の書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">列挙型書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>列挙型書式指定文字列<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">書式設定に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>型の書式設定<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>The following example uses the <ph id="ph1">`WriteLine`</ph> method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.</source>
          <target state="translated">次の例では、<ph id="ph1">`WriteLine`</ph> メソッドを使用して、数値、日付、および列挙体の標準的な書式指定子を示します。</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>The following example illustrates the use of the <ph id="ph1">`Write`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Write`</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>The format specification in <ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> の書式指定が正しくありません。</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>A composite format string.</source>
          <target state="translated">複合書式設定文字列。</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The first object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む最初のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The second object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む 2 番目のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The third object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む 3 番目のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The fourth object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む 4 番目のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>Writes the text representation of the specified objects and variable-length parameter list to the standard output stream using the specified format information.</source>
          <target state="translated">指定した書式情報を使用して、指定したオブジェクトのテキスト表現と可変長パラメーター リストを標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>This API is not CLS-compliant.</source>
          <target state="translated">この API は、CLS に準拠していません。</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The CLS-compliant alternative is <ph id="ph1">&lt;xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">CLS 準拠の代わりとして <ph id="ph1">&lt;xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> を使用できます。</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The C# and Visual Basic compilers automatically resolve a call to this method as a call to <ph id="ph1">&lt;xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">C# および Visual Basic コンパイラへの呼び出しとして、このメソッドの呼び出しを自動的に解決<ph id="ph1">&lt;xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
          <target state="translated">このメソッドを使用して、<bpt id="p1">[</bpt>複合書式指定機能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The resulting string is written to the output stream.</source>
          <target state="translated">結果の文字列は、出力ストリームに書き込まれます。</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
          <target state="translated"><ph id="ph1">`format`</ph>パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
          <target state="translated">書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
          <target state="translated">書式指定項目の構文は<ph id="ph1">`{`</ph><bpt id="p1">*</bpt>インデックス<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>配置<ept id="p2">*</ept>] [<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
          <target state="translated">.NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated">などのメソッドでサポートされている複合書式指定機能の詳細については<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>、および一部のオーバー ロードの<ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>を参照してください<bpt id="p1">[</bpt>複合書式指定<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">数値書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の数値書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタム数値書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
          <target state="translated">についての日付と時刻の書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の日付と時刻の書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタムの日付と時刻の書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">列挙型書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>列挙型書式指定文字列<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">書式設定に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>型の書式設定<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The following example illustrates the use of variable parameters with the <ph id="ph1">&lt;xref:System.Console.Write%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">次の例では、変数パラメーターの使用、<ph id="ph1">&lt;xref:System.Console.Write%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The method is called with a composite format string and five format items.</source>
          <target state="translated">メソッドは、複合書式指定文字列と 5 つの書式指定項目で呼び出されます。</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The format specification in <ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> の書式指定が正しくありません。</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>This method is marked with the <ph id="ph1">&lt;see langword="vararg" /&gt;</ph> keyword, which means that it supports a variable number of parameters.</source>
          <target state="translated">このメソッドが付いて、<ph id="ph1">&lt;see langword="vararg" /&gt;</ph>キーワードで、可変個のパラメーターをサポートしていることを意味します。</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The method can be called from Visual C++, but it cannot be called from C# or Visual Basic code.</source>
          <target state="translated">メソッドは、Visual C から呼び出すことができますが、c# または Visual Basic コードから呼び出すことができません。</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The C# and Visual Basic compilers resolve calls to <ph id="ph1">&lt;see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" /&gt;</ph> as calls to <ph id="ph2">&lt;see cref="M:System.Console.Write(System.String,System.Object[])" /&gt;</ph>.</source>
          <target state="translated">C# および Visual Basic コンパイラへの呼び出しを解決する<ph id="ph1">&lt;see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" /&gt;</ph>呼び出しとして<ph id="ph2">&lt;see cref="M:System.Console.Write(System.String,System.Object[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="T:System.Console">
          <source>Writes the specified data, followed by the current line terminator, to the standard output stream.</source>
          <target state="translated">指定したデータを標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>The default line terminator is a string whose value is a carriage return followed by a line feed ("\r\n" in C#, or <ph id="ph1">`vbCrLf`</ph> in Visual Basic).</source>
          <target state="translated">既定の行終端記号がキャリッジ リターンとライン フィードの値の文字列 ("\r\n"(C#)、または<ph id="ph1">`vbCrLf`</ph>Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Console">
          <source>You can change the line terminator by setting the <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Console.Out%2A&gt;</ph> property to another string.</source>
          <target state="translated">設定して、行終端記号を変更することができます、<ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Console.Out%2A&gt;</ph>を別の文字列プロパティです。</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine">
          <source>Writes the current line terminator to the standard output stream.</source>
          <target state="translated">現在の行終端記号を標準出力ストリームに書き込みます。</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine">
          <source>The default line terminator is a string whose value is a carriage return followed by a line feed ("\r\n" in C#, or <ph id="ph1">`vbCrLf`</ph> in Visual Basic).</source>
          <target state="translated">既定の行終端記号がキャリッジ リターンとライン フィードの値の文字列 ("\r\n"(C#)、または<ph id="ph1">`vbCrLf`</ph>Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine">
          <source>You can change the line terminator by setting the <ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Console.Out%2A&gt;</ph> property to another string.</source>
          <target state="translated">設定して、行終端記号を変更することができます、<ph id="ph1">&lt;xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Console.Out%2A&gt;</ph>を別の文字列プロパティです。</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine">
          <source>The example provides an illustration.</source>
          <target state="translated">具体的な例を次に示します。</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine">
          <source>The example changes the line terminator from its default value of "\r\n" or <ph id="ph1">`vbCrLf`</ph> to "\r\n\r\n" or <ph id="ph2">`vbCrLf`</ph><ph id="ph3"> + </ph><ph id="ph4">`vbCrLf`</ph>.</source>
          <target state="translated">例では、"\r\n"の既定値から、行終端記号を変更または<ph id="ph1">`vbCrLf`</ph>"\r\n\r\n"にまたは<ph id="ph2">`vbCrLf`</ph> <ph id="ph3"> + </ph><ph id="ph4">`vbCrLf`</ph>です。</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Console.WriteLine&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.WriteLine%28System.String%29&gt;</ph> methods to display output to the console.</source>
          <target state="translated">呼び出して、<ph id="ph1">&lt;xref:System.Console.WriteLine&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.WriteLine%28System.String%29&gt;</ph>コンソールに出力を表示する方法です。</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Boolean)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Boolean)">
          <source>Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.</source>
          <target state="translated">指定した Boolean 値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Boolean)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Boolean.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された、<ph id="ph2">&lt;xref:System.Boolean.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Boolean)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Boolean)">
          <source>The following example generates ten random integers and uses the <ph id="ph1">&lt;xref:System.Console.WriteLine%28System.Boolean%29?displayProperty=nameWithType&gt;</ph> method to indicate whether they are even.</source>
          <target state="translated">次の例は、10 個の整数の乱数を生成しを使用して、<ph id="ph1">&lt;xref:System.Console.WriteLine%28System.Boolean%29?displayProperty=nameWithType&gt;</ph>メソッドでもがあるかどうかを示します。</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Boolean)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Boolean)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Char)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Char)">
          <source>Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.</source>
          <target state="translated">指定した Unicode 文字を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Char)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Char)">
          <source>The following example is a tip calculator that calculates an 18% tip and uses the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method to display the amount of the original charge, the amount of the tip, and the total amount.</source>
          <target state="translated">次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>元費用の金額、ヒント、量合計金額を表示するメソッド。</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Char)">
          <source>The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</source>
          <target state="translated">この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Char)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Char)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Char)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Char[])">
          <source>A Unicode character array.</source>
          <target state="translated">Unicode 文字配列。</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Char[])">
          <source>Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.</source>
          <target state="translated">指定した Unicode 文字配列を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Char[])">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Char[])">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Char[])">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Char[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Decimal)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Decimal)">
          <source>Writes the text representation of the specified <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value, followed by the current line terminator, to the standard output stream.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Decimal)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Decimal.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された、<ph id="ph2">&lt;xref:System.Decimal.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Decimal)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Decimal)">
          <source>The following example is a tip calculator that calculates an 18% tip and uses the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method to display the amount of the original charge, the amount of the tip, and the total amount.</source>
          <target state="translated">次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>元費用の金額、ヒント、量合計金額を表示するメソッド。</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Decimal)">
          <source>The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</source>
          <target state="translated">この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Decimal)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Decimal)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Decimal)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Double)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Double)">
          <source>Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.</source>
          <target state="translated">指定した倍精度浮動小数点値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Double)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された、<ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Double)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Double)">
          <source>The following example is a tip calculator that calculates an 18% tip and uses the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method to display the amount of the original charge, the amount of the tip, and the total amount.</source>
          <target state="translated">次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>元費用の金額、ヒント、量合計金額を表示するメソッド。</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Double)">
          <source>The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</source>
          <target state="translated">この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Double)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Double)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Double)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Int32)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Int32)">
          <source>Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.</source>
          <target state="translated">指定した 32 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Int32)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Int32.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された、<ph id="ph2">&lt;xref:System.Int32.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Int32)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Int32)">
          <source>The following example is a tip calculator that calculates an 18% tip and uses the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method to display the amount of the original charge, the amount of the tip, and the total amount.</source>
          <target state="translated">次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>元費用の金額、ヒント、量合計金額を表示するメソッド。</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Int32)">
          <source>The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</source>
          <target state="translated">この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Int32)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Int32)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Int64)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Int64)">
          <source>Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.</source>
          <target state="translated">指定した 64 ビット符号付き整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Int64)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Int64.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された、<ph id="ph2">&lt;xref:System.Int64.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Int64)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Int64)">
          <source>The following example is a tip calculator that calculates an 18% tip and uses the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method to display the amount of the original charge, the amount of the tip, and the total amount.</source>
          <target state="translated">次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>元費用の金額、ヒント、量合計金額を表示するメソッド。</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Int64)">
          <source>The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</source>
          <target state="translated">この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Int64)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Int64)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Int64)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Object)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Object)">
          <source>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.</source>
          <target state="translated">指定したオブジェクトのテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, only the line terminator is written.</source>
          <target state="translated"><ph id="ph1">`value`</ph> が <ph id="ph2">`null`</ph> の場合は、行終端記号だけを書き込みます。</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Object)">
          <source>Otherwise, the <ph id="ph1">`ToString`</ph> method of <ph id="ph2">`value`</ph> is called to produce its string representation, and the resulting string is written to the standard output stream.</source>
          <target state="translated">それ以外の場合、<ph id="ph1">`ToString`</ph>メソッドの<ph id="ph2">`value`</ph>は、文字列形式を生成するために呼び出され、結果の文字列が標準出力ストリームに書き込まれます。</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Object)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Object)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Console.WriteLine%28System.Object%29&gt;</ph> method to display each value in an object array to the console.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Console.WriteLine%28System.Object%29&gt;</ph>メソッドをコンソールにオブジェクトの配列の各値を表示します。</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Object)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Object)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Single)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Single)">
          <source>Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.</source>
          <target state="translated">指定した単精度浮動小数点値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Single)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.Single.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された、<ph id="ph2">&lt;xref:System.Single.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Single)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Single)">
          <source>The following example is a tip calculator that calculates an 18% tip and uses the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method to display the amount of the original charge, the amount of the tip, and the total amount.</source>
          <target state="translated">次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>元費用の金額、ヒント、量合計金額を表示するメソッド。</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Single)">
          <source>The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</source>
          <target state="translated">この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Single)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Single)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Single)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String)">
          <source>Writes the specified string value, followed by the current line terminator, to the standard output stream.</source>
          <target state="translated">指定した文字列値を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String)">
          <source>If value is <ph id="ph1">`null`</ph>, only the line terminator is written to the standard output stream.</source>
          <target state="translated">値が場合<ph id="ph1">`null`</ph>、行終端記号だけが標準出力ストリームに書き込まれます。</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine&gt;</ph> method.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String)">
          <source>The example changes the line terminator from its default value of "\r\n" or <ph id="ph1">`vbCrLf`</ph> to "\r\n\r\n" or <ph id="ph2">`vbCrLf`</ph><ph id="ph3"> + </ph><ph id="ph4">`vbCrLf`</ph>.</source>
          <target state="translated">例では、"\r\n"の既定値から、行終端記号を変更または<ph id="ph1">`vbCrLf`</ph>"\r\n\r\n"にまたは<ph id="ph2">`vbCrLf`</ph> <ph id="ph3"> + </ph><ph id="ph4">`vbCrLf`</ph>です。</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Console.WriteLine&gt;</ph> and <ph id="ph2">&lt;xref:System.Console.WriteLine%28System.String%29&gt;</ph> methods to display output to the console.</source>
          <target state="translated">呼び出して、<ph id="ph1">&lt;xref:System.Console.WriteLine&gt;</ph>と<ph id="ph2">&lt;xref:System.Console.WriteLine%28System.String%29&gt;</ph>コンソールに出力を表示する方法です。</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.UInt32)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.UInt32)">
          <source>Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</source>
          <target state="translated">指定した 32 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.UInt32)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.UInt32.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された、<ph id="ph2">&lt;xref:System.UInt32.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.UInt32)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.UInt32)">
          <source>The following example is a tip calculator that calculates an 18% tip and uses the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method to display the amount of the original charge, the amount of the tip, and the total amount.</source>
          <target state="translated">次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>元費用の金額、ヒント、量合計金額を表示するメソッド。</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.UInt32)">
          <source>The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</source>
          <target state="translated">この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.UInt32)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.UInt32)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.UInt32)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.UInt64)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.UInt64)">
          <source>Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</source>
          <target state="translated">指定した 64 ビット符号なし整数値のテキスト形式を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.UInt64)">
          <source>The text representation of <ph id="ph1">`value`</ph> is produced by calling the <ph id="ph2">&lt;xref:System.UInt64.ToString%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">テキスト表現<ph id="ph1">`value`</ph>呼び出しによって生成された、<ph id="ph2">&lt;xref:System.UInt64.ToString%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.UInt64)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.UInt64)">
          <source>The following example is a tip calculator that calculates an 18% tip and uses the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method to display the amount of the original charge, the amount of the tip, and the total amount.</source>
          <target state="translated">次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>元費用の金額、ヒント、量合計金額を表示するメソッド。</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.UInt64)">
          <source>The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</source>
          <target state="translated">この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.UInt64)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.UInt64)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.UInt64)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>A composite format string.</source>
          <target state="translated">複合書式設定文字列。</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>An object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込むオブジェクト。</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.</source>
          <target state="translated">指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
          <target state="translated">このメソッドを使用して、<bpt id="p1">[</bpt>複合書式指定機能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>The resulting string is written to the output stream.</source>
          <target state="translated">結果の文字列は、出力ストリームに書き込まれます。</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
          <target state="translated"><ph id="ph1">`format`</ph>パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
          <target state="translated">書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
          <target state="translated">書式指定項目の構文は<ph id="ph1">`{`</ph><bpt id="p1">*</bpt>インデックス<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>配置<ept id="p2">*</ept>] [<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
          <target state="translated">.NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated">などのメソッドでサポートされている複合書式指定機能の詳細については<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>、および一部のオーバー ロードの<ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>を参照してください<bpt id="p1">[</bpt>複合書式指定<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">数値書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の数値書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタム数値書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
          <target state="translated">についての日付と時刻の書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の日付と時刻の書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタムの日付と時刻の書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">列挙型書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>列挙型書式指定文字列<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">書式設定に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>型の書式設定<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%29&gt;</ph> method to display five randomly generated <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%29&gt;</ph>ランダムに生成される 5 を表示するメソッドを<ph id="ph2">&lt;xref:System.Boolean&gt;</ph>値。</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%29&gt;</ph> method to display the current date.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%29&gt;</ph>メソッドを現在の日付を表示します。</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>Note that the format item in the <ph id="ph1">`format`</ph> argument uses the "D" <bpt id="p1">[</bpt>standard date and time format string<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> to display the date in the long date format of the current culture.</source>
          <target state="translated">書式項目を<ph id="ph1">`format`</ph>引数は、"D"を使用して<bpt id="p1">[</bpt>標準の日時書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>現在のカルチャの長い日付形式で日付を表示します。</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>The format specification in <ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> の書式指定が正しくありません。</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>A composite format string.</source>
          <target state="translated">複合書式設定文字列。</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>An array of objects to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込むオブジェクトの配列。</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.</source>
          <target state="translated">指定した書式情報を使用して、指定したオブジェクト配列のテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>This method uses the  <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
          <target state="translated">このメソッドを使用して、<bpt id="p1">[</bpt>複合書式指定機能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>The resulting string is written to the output stream.</source>
          <target state="translated">結果の文字列は、出力ストリームに書き込まれます。</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
          <target state="translated"><ph id="ph1">`format`</ph>パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
          <target state="translated">書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
          <target state="translated">書式指定項目の構文は<ph id="ph1">`{`</ph><bpt id="p1">*</bpt>インデックス<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>配置<ept id="p2">*</ept>] [<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
          <target state="translated">.NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated">などのメソッドでサポートされている複合書式指定機能の詳細については<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>、および一部のオーバー ロードの<ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>を参照してください<bpt id="p1">[</bpt>複合書式指定<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">数値書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の数値書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタム数値書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
          <target state="translated">についての日付と時刻の書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の日付と時刻の書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタムの日付と時刻の書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">列挙型書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>列挙型書式指定文字列<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">書式設定に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>型の書式設定<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</source>
          <target state="translated">次の例では、数値、日付、および列挙体の標準的な書式指定子を示します。</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>The following example is a tip calculator that calculates an 18% tip and uses the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method to display the amount of the original charge, the amount of the tip, and the total amount.</source>
          <target state="translated">次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>元費用の金額、ヒント、量合計金額を表示するメソッド。</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</source>
          <target state="translated">この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> or <ph id="ph2">&lt;paramref name="arg" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> または <ph id="ph2">&lt;paramref name="arg" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>The format specification in <ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> の書式指定が正しくありません。</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>This method is not called by C++ code.</source>
          <target state="translated">このメソッドは、C++ コードでは呼び出されません。</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>The C++ compiler resolves calls to <bpt id="p1">[</bpt>System.Console.WriteLine<ept id="p1">](xref:System.Console.WriteLine*)</ept> that include a string and a list of four or more object parameters as a call to <ph id="ph1">&lt;see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" /&gt;</ph>.</source>
          <target state="translated">C++ コンパイラへの呼び出しを解決する<bpt id="p1">[</bpt>System.Console.WriteLine<ept id="p1">](xref:System.Console.WriteLine*)</ept>への呼び出しとして文字列と 4 つ以上のオブジェクト パラメーターの一覧を含む<ph id="ph1">&lt;see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object[])">
          <source>It resolves calls to <bpt id="p1">[</bpt>System.Console.WriteLine<ept id="p1">](xref:System.Console.WriteLine*)</ept> that include a string and an object array as a call to <ph id="ph1">&lt;see cref="M:System.Console.WriteLine(System.String,System.Object)" /&gt;</ph>.</source>
          <target state="translated">呼び出しを解決<bpt id="p1">[</bpt>System.Console.WriteLine<ept id="p1">](xref:System.Console.WriteLine*)</ept>を含む文字列とオブジェクトの配列への呼び出しとして<ph id="ph1">&lt;see cref="M:System.Console.WriteLine(System.String,System.Object)" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
          <source>An array of Unicode characters.</source>
          <target state="translated">Unicode 文字の配列。</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
          <source>The starting position in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内の開始位置。</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to write.</source>
          <target state="translated">書き込む文字数。</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
          <source>Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.</source>
          <target state="translated">指定した Unicode 文字の部分配列を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
          <source>This method writes <ph id="ph1">`count`</ph> characters starting at position <ph id="ph2">`index`</ph> of <ph id="ph3">`buffer`</ph> to the standard output stream.</source>
          <target state="translated">このメソッドは書き込みます<ph id="ph1">`count`</ph>位置から始まる文字<ph id="ph2">`index`</ph>の<ph id="ph3">`buffer`</ph>を標準出力ストリームにします。</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="count" /&gt;</ph> specify a position that is not within <ph id="ph3">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> と <ph id="ph2">&lt;paramref name="count" /&gt;</ph> の合計が指定する位置は、<ph id="ph3">&lt;paramref name="buffer" /&gt;</ph> 内ではありません。</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>A composite format string.</source>
          <target state="translated">複合書式設定文字列。</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>The first object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む最初のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>The second object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む 2 番目のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</source>
          <target state="translated">指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
          <target state="translated">このメソッドを使用して、<bpt id="p1">[</bpt>複合書式指定機能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>The resulting string is written to the output stream.</source>
          <target state="translated">結果の文字列は、出力ストリームに書き込まれます。</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
          <target state="translated"><ph id="ph1">`format`</ph>パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
          <target state="translated">書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
          <target state="translated">書式指定項目の構文は<ph id="ph1">`{`</ph><bpt id="p1">*</bpt>インデックス<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>配置<ept id="p2">*</ept>] [<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
          <target state="translated">.NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated">などのメソッドでサポートされている複合書式指定機能の詳細については<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>、および一部のオーバー ロードの<ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>を参照してください<bpt id="p1">[</bpt>複合書式指定<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">数値書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の数値書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタム数値書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
          <target state="translated">についての日付と時刻の書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の日付と時刻の書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタムの日付と時刻の書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">列挙型書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>列挙型書式指定文字列<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">書式設定に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>型の書式設定<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</source>
          <target state="translated">次の例では、数値、日付、および列挙体の標準的な書式指定子を示します。</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>The following example is a tip calculator that calculates an 18% tip and uses the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method to display the amount of the original charge, the amount of the tip, and the total amount.</source>
          <target state="translated">次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>元費用の金額、ヒント、量合計金額を表示するメソッド。</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</source>
          <target state="translated">この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>The format specification in <ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> の書式指定が正しくありません。</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>A composite format string.</source>
          <target state="translated">複合書式設定文字列。</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>The first object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む最初のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>The second object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む 2 番目のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>The third object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む 3 番目のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</source>
          <target state="translated">指定した書式情報を使用して、指定したオブジェクトのテキスト表現を標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
          <target state="translated">このメソッドを使用して、<bpt id="p1">[</bpt>複合書式指定機能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>The resulting string is written to the output stream.</source>
          <target state="translated">結果の文字列は、出力ストリームに書き込まれます。</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
          <target state="translated"><ph id="ph1">`format`</ph>パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
          <target state="translated">書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
          <target state="translated">書式指定項目の構文は<ph id="ph1">`{`</ph><bpt id="p1">*</bpt>インデックス<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>配置<ept id="p2">*</ept>] [<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
          <target state="translated">.NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated">などのメソッドでサポートされている複合書式指定機能の詳細については<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>、および一部のオーバー ロードの<ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>を参照してください<bpt id="p1">[</bpt>複合書式指定<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">数値書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の数値書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタム数値書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
          <target state="translated">についての日付と時刻の書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の日付と時刻の書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタムの日付と時刻の書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">列挙型書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>列挙型書式指定文字列<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">書式設定に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>型の書式設定<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.</source>
          <target state="translated">次の例では、数値、日付、および列挙体の標準的な書式指定子を示します。</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>The following example is a tip calculator that calculates an 18% tip and uses the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method to display the amount of the original charge, the amount of the tip, and the total amount.</source>
          <target state="translated">次の例は、ヒントを計算する 18% ヒントを計算しを使用して、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>元費用の金額、ヒント、量合計金額を表示するメソッド。</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.</source>
          <target state="translated">この例とは、コマンド ライン パラメーターとして元の請求金額の量を指定するユーザーを必要とするコンソール アプリケーションです。</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>The format specification in <ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> の書式指定が正しくありません。</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>A composite format string.</source>
          <target state="translated">複合書式設定文字列。</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The first object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む最初のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The second object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む 2 番目のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The third object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む 3 番目のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The fourth object to write using <bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>format<ept id="p1">&lt;/c&gt;</ept> を使用して書き込む 4 番目のオブジェクト。</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>Writes the text representation of the specified objects and variable-length parameter list, followed by the current line terminator, to the standard output stream using the specified format information.</source>
          <target state="translated">指定した書式情報を使用して、指定したオブジェクトのテキスト表現と可変長パラメーター リストを標準出力ストリームに書き込み、続けて現在の行終端記号を書き込みます。</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>This API is not CLS-compliant.</source>
          <target state="translated">この API は、CLS に準拠していません。</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The CLS-compliant alternative is <ph id="ph1">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">CLS 準拠の代わりとして <ph id="ph1">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> を使用できます。</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The C# and Visual Basic compilers automatically resolve a call to this method as a call to <ph id="ph1">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">C# および Visual Basic コンパイラへの呼び出しとして、このメソッドの呼び出しを自動的に解決<ph id="ph1">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>This method uses the <bpt id="p1">[</bpt>composite formatting feature<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</source>
          <target state="translated">このメソッドを使用して、<bpt id="p1">[</bpt>複合書式指定機能<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The resulting string is written to the output stream.</source>
          <target state="translated">結果の文字列は、出力ストリームに書き込まれます。</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The <ph id="ph1">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method.</source>
          <target state="translated"><ph id="ph1">`format`</ph>パラメーターは、0 または 1 つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The formatting process replaces each format item with the text representation of the value of the corresponding object.</source>
          <target state="translated">書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The syntax of a format item is <ph id="ph1">`{`</ph><bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</source>
          <target state="translated">書式指定項目の構文は<ph id="ph1">`{`</ph><bpt id="p1">*</bpt>インデックス<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>配置<ept id="p2">*</ept>] [<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph>必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</source>
          <target state="translated">.NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>For more information about the composite formatting feature supported by methods such as <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and some overloads of <ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, see <bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated">などのメソッドでサポートされている複合書式指定機能の詳細については<ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>、および一部のオーバー ロードの<ph id="ph3">&lt;xref:System.Console.WriteLine%2A&gt;</ph>を参照してください<bpt id="p1">[</bpt>複合書式指定<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">数値書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の数値書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタム数値書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>For more information about date and time format specifiers, see <bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Date and Time Format Strings<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.</source>
          <target state="translated">についての日付と時刻の書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>標準の日付と時刻の書式指定文字列<ept id="p1">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept>と<bpt id="p2">[</bpt>カスタムの日付と時刻の書式指定文字列<ept id="p2">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>For more information about enumeration format specifiers, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">列挙型書式指定子の詳細については、次を参照してください。<bpt id="p1">[</bpt>列挙型書式指定文字列<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">書式設定に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>型の書式設定<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>For more information about the line terminator, see the Remarks section of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method that takes no parameters.</source>
          <target state="translated">行終端記号の詳細については、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>パラメーターをとらないメソッドです。</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The following example illustrates the use of variable arguments with the <ph id="ph1">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">次の例では、変数の引数の使用、<ph id="ph1">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The method is called with a composite format string and five format items.</source>
          <target state="translated">メソッドは、複合書式指定文字列と 5 つの書式指定項目で呼び出されます。</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The format specification in <ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> の書式指定が正しくありません。</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>for modifying safe top-level windows and subwindows.</source>
          <target state="translated">安全な最上位ウィンドウおよびサブウィンドウを変更します。</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>This method is marked with the <ph id="ph1">&lt;see langword="vararg" /&gt;</ph> keyword, which means that it supports a variable number of parameters.</source>
          <target state="translated">このメソッドが付いて、<ph id="ph1">&lt;see langword="vararg" /&gt;</ph>キーワードで、可変個のパラメーターをサポートしていることを意味します。</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The method can be called from Visual C++, but it cannot be called from C# or Visual Basic code.</source>
          <target state="translated">メソッドは、Visual C から呼び出すことができますが、c# または Visual Basic コードから呼び出すことができません。</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
          <source>The C# and Visual Basic compilers resolve calls to <ph id="ph1">&lt;see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" /&gt;</ph> as calls to <ph id="ph2">&lt;see cref="M:System.Console.WriteLine(System.String,System.Object[])" /&gt;</ph>.</source>
          <target state="translated">C# および Visual Basic コンパイラへの呼び出しを解決する<ph id="ph1">&lt;see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" /&gt;</ph>呼び出しとして<ph id="ph2">&lt;see cref="M:System.Console.WriteLine(System.String,System.Object[])" /&gt;</ph>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>