<Type Name="OutOfMemoryException" FullName="System.OutOfMemoryException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="96a911af501a853aec3992b2d7601c73f810ebbc" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52194971" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class OutOfMemoryException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit OutOfMemoryException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.OutOfMemoryException" />
  <TypeSignature Language="VB.NET" Value="Public Class OutOfMemoryException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutOfMemoryException : SystemException" />
  <TypeSignature Language="F#" Value="type OutOfMemoryException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>プログラムの実行を継続するためのメモリが不足している場合にスローされる例外。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.OutOfMemoryException>例外が 2 つの主な原因。  
  
-   展開しようとして、<xref:System.Text.StringBuilder>オブジェクトによって定義された長さを超えてその<xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType>プロパティ。  
  
-   共通言語ランタイムは、操作を正常に実行するための十分な連続したメモリを割り当てることができません。 メモリの割り当てを必要とするプロパティの割り当てまたはメソッド呼び出しによってこの例外をスローすることができます。 原因の詳細については、 <xref:System.OutOfMemoryException> 、例外を参照してください[「メモリ不足」は、物理メモリを参照しない](https://blogs.msdn.com/b/ericlippert/archive/2009/06/08/out-of-memory-does-not-refer-to-physical-memory.aspx)します。  
  
     この種類の<xref:System.OutOfMemoryException>例外は致命的なエラーを表します。 含める必要がありますが、例外を処理するために選択した場合、`catch`ブロックを呼び出す、<xref:System.Environment.FailFast%2A?displayProperty=nameWithType>メソッドをアプリを終了し、次の例のように、システム イベント ログにエントリを追加します。  
  
     [!code-csharp[System.OutOfMemoryException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/failfast1.cs#2)]
     [!code-vb[System.OutOfMemoryException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/failfast1.vb#2)]  
  
 例外がスローされ、それを排除するために行える操作は、以下の条件の一部:  
  
 呼び出している、<xref:System.Text.StringBuilder.Insert%2A?displayProperty=nameWithType>メソッド。  
 長さを拡張しようとして、<xref:System.Text.StringBuilder>オブジェクトで指定されたサイズを超えるその<xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType>プロパティ。 次の例を示しています、<xref:System.OutOfMemoryException>への呼び出しによってスローされた例外、<xref:System.Text.StringBuilder.Insert%28System.Int32%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType>メソッドの例では、オブジェクトの原因となる文字列を挿入しようとしました。<xref:System.Text.StringBuilder.Length%2A>プロパティをその最大の容量を超えます。  
  
 [!code-csharp[System.OutOfMemoryException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/sb_example1.cs#1)]
 [!code-vb[System.OutOfMemoryException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/sb_example1.vb#1)]  
  
 エラーに対処するには、次のいずれかの操作を行うことができます。  
  
-   呼び出し、<xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType>コンス トラクターの呼び出しでその他の<xref:System.Text.StringBuilder>コンス トラクター オーバー ロードします。 最大容量、<xref:System.Text.StringBuilder>オブジェクトは、これは既定値に設定する<xref:System.Int32.MaxValue?displayProperty=nameWithType>します。  
  
-   呼び出す、<xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType>を持つコンス トラクター、`maxCapacity`任意の拡張に対応するために十分な大きさである値、<xref:System.Text.StringBuilder>オブジェクト。  
  
 アプリは、32 ビット プロセスとして実行されます。  
 32 ビット プロセスでは、最大 2 GB の 32 ビット システムでユーザー モード仮想メモリと 4 GB の 64 ビット システムでユーザー モード仮想メモリを割り当てることができます。 これは、ため、共通言語ランタイムの大規模な割り当てが必要なときに十分な連続したメモリを割り当てることが難しく、ことができます。 これに対し、64 ビット プロセスでは、最大 8 TB の仮想メモリを割り当てることができます。 この例外に対処するため、64 ビット プラットフォームを対象とするアプリを再コンパイルします。 Visual Studio での特定のプラットフォームを対象とする方法の詳細については、次を参照してください。[方法: 構成 Projects to Target Platforms](https://msdn.microsoft.com/library/845302fc-273d-4f81-820a-7296ce91bd76)します。  
  
 アプリがアンマネージ リソースをリークしています。  
 (ファイル、メモリ マップト ファイルは、パイプ、レジストリ キー、および待機ハンドルへのハンドルを含む) オペレーティング システムの処理など、アンマネージ リソースに割り当てられたメモリは管理しません。 ガベージ コレクターはマネージ型に割り当てられたメモリを解放できませんが、など、Windows API の呼び出しによって直接、またはメモリ割り当て関数への呼び出しによって割り当てられたメモリ ブロックと`malloc`します。 アンマネージ リソースを消費する型を実装、<xref:System.IDisposable>インターフェイス。  
  
 アンマネージ リソースを使用する型を使用している場合に呼び出す必ず必要があります、<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>メソッドの使用を終了するときにします。 (一部の種類の実装も、`Close`を関数と同じであるメソッド、`Dispose`メソッドです)。詳細については、次を参照してください。、[オブジェクトを実装 IDisposable のを使用して](~/docs/standard/garbage-collection/using-objects.md)トピック。  
  
 アンマネージ リソースを使用する型を作成した場合は、Dispose パターンを実装している、必要に応じて、指定のファイナライザーを確認します。 詳細については、次を参照してください。、 [Dispose パターン](~/docs/standard/design-guidelines/dispose-pattern.md)、 [Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)、および<xref:System.Object.Finalize%2A?displayProperty=nameWithType>トピック。  
  
 64 ビット プロセスで大きな配列を作成しようとしました。  
 既定では、共通言語ランタイムにサイズが 2 GB を超えています。 1 つのオブジェクトはできません。 この既定の設定を上書きするには、合計サイズが 2 GB を超える配列を有効にするのに構成ファイルの設定を使用できます。  
  
 メモリでは、データ (配列、コレクション、またはデータベースのデータ セット) などの非常に大きなセットで作業しています。  
 メモリ内に存在するデータ セットまたはデータ構造が非常に大きいので、共通言語ランタイムが、連続する十分なメモリを割り当てることはできないことになったときに、<xref:System.OutOfMemoryException>例外が発生します。  
  
 防ぐために、<xref:System.OutOfMemoryException>例外の低いデータがメモリに常駐しているか、データをメモリ割り当てが少ないを必要とするセグメントに分割されますようにアプリケーションを変更する必要があります。 例:  
  
-   すべてのデータをデータベースから取得し、サーバーへのトリップを最小限に抑えるアプリでフィルター処理している場合をアプリに必要なデータのサブセットのみを返すクエリを変更する必要があります。 大規模なテーブルを操作するとき複数のクエリは、ほとんどが詳細はすべて 1 つのテーブル内のデータの取得し、それよりも効率的です。  
  
-   ユーザーが動的に作成したクエリを実行している場合は、クエリによって返されるレコードの数が制限されることを確認してください。  
  
-   大きな配列を使用しているかどうか、またはその他のコレクション オブジェクトのサイズ、結果、<xref:System.OutOfMemoryException>例外をすべて一度に使用するのではなく、データをサブセットで動作するアプリケーションを変更する必要があります。  
  
 次の例では、2億浮動小数点値で構成しの平均を計算する配列を取得します。 例の出力で示すは、例では、平均を計算する前にメモリ内配列全体を格納するため、<xref:System.OutOfMemoryException>がスローされます。  
  
 [!code-csharp[System.OutOfMemoryException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data1.cs#3)]
 [!code-vb[System.OutOfMemoryException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data1.vb#3)]  
  
 次の例では、排除、 <xref:System.OutOfMemoryException> (これらの行をコメント アウト例では、さらに処理を許可するために必要な場合は、ファイルにデータをシリアル化する、メモリ内データ セット全体を格納することがなく、受信データを処理することによって例外のでここで、サイズが 1 GB より大きいファイル) を生成して呼び出し元のルーチンに計算された平均とケースの数を返します。  
  
 [!code-csharp[System.OutOfMemoryException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data2.cs#4)]
 [!code-vb[System.OutOfMemoryException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data2.vb#4)]  
  
 大きな文字列を連結する繰り返し。  
 文字列は変更できないために、各文字列連結操作は、新しい文字列を作成します。 小さな文字列の場合、または連結操作の数が少ない場合の影響はごくわずかです。 大きな文字列または連結演算に非常に多くの場合は、文字列の連結は、多くのメモリの割り当てとメモリの断片化、パフォーマンスの低下を招く可能性と、場合によって<xref:System.OutOfMemoryException>例外。  
  
 大きな文字列の連結や、多数の連結演算を実行するを使用する際、<xref:System.Text.StringBuilder>クラスの代わりに、<xref:System.String>クラス。 文字列の操作が完了したら、変換、<xref:System.Text.StringBuilder>インスタンスを呼び出すことによって文字列、<xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType>メソッド。  
  
 メモリ内オブジェクトの数が多いをピン留めします。  
 メモリ内オブジェクトの数が多いをピン留めを長期間と、ガベージ コレクターが連続するメモリ ブロックを割り当てる難しくことができます。 ピン留めした多数のオブジェクトをメモリに例を使用している場合、`fixed`ステートメント (C#) または呼び出すことによって、<xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType>のハンドル型を持つメソッド<xref:System.Runtime.InteropServices.GCHandleType.Pinned?displayProperty=nameWithType>、アドレスには、次を行うことができます、<xref:System.OutOfMemoryException>例外。  
  
-   各オブジェクトは、ピン留めを本当に必要かどうかを評価します。  
  
-   ある各オブジェクトは固定されておらず、できるだけ早く確認してください。  
  
-   各呼び出しことを確認、<xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType>暗証番号 (pin) のメモリへのメソッドに対応する呼び出しには、<xref:System.Runtime.InteropServices.GCHandle.Free%2A?displayProperty=nameWithType>そのメモリの固定を解除するメソッド。  
  
 次の Microsoft intermediate (MSIL) 命令のスロー、<xref:System.OutOfMemoryException>例外。  
  
-   [box](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.box.aspx)  
  
-   [newarr](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.newarr.aspx)  
  
-   [newobj](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.newobj.aspx)newobj  
  
 <xref:System.OutOfMemoryException> HRESULT を使用して`COR_E_OUTOFMEMORY`0x8007000E 値を持ちます。  
  
 インスタンスの初期プロパティ値の一覧については<xref:System.OutOfMemoryException>を参照してください、<xref:System.OutOfMemoryException.%23ctor%2A>コンス トラクター。  
  
> [!NOTE]
>  継承された値<xref:System.Exception.Data%2A>プロパティは常に`null`します。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">例外の処理とスロー</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.OutOfMemoryException" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.OutOfMemoryException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターの初期化、 <xref:System.Exception.Message%2A> "十分なメモリが、プログラムの実行を継続する"などに、エラーを説明するシステム提供のメッセージの新しいインスタンスのプロパティ。 このメッセージには、現在のシステムのカルチャが考慮されます。  
  
 <xref:System.OutOfMemoryException> のインスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|[値]|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`。|  
|<xref:System.Exception.Message%2A>|ローカライズされたエラー メッセージ文字列。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">エラーを説明するメッセージ。</param>
        <summary>指定したエラー メッセージを使用して、<see cref="T:System.OutOfMemoryException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `message` パラメーターの内容は、ユーザーが理解できる内容にします。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。  
  
 <xref:System.OutOfMemoryException> のインスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|[値]|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 参照 (Visual Basic の場合は `Nothing`)。|  
|<xref:System.Exception.Message%2A>|エラー メッセージ文字列。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OutOfMemoryException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OutOfMemoryException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
        <param name="context">転送元または転送先に関するコンテキスト情報。</param>
        <summary>シリアル化したデータを使用して、<see cref="T:System.OutOfMemoryException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、逆シリアル化中に、ストリームで送信された例外オブジェクトを再構築するために呼び出されます。 詳細については、次を参照してください。 [XML および SOAP シリアル化](~/docs/standard/serialization/xml-and-soap-serialization.md)します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML シリアル化および SOAP シリアル化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string * Exception -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">例外の原因を説明するエラー メッセージ。</param>
        <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
        <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.OutOfMemoryException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前の例外の直接の結果としてスローされる例外は、<xref:System.Exception.InnerException%2A> プロパティに前の例外への参照を含んでいる場合があります。 <xref:System.Exception.InnerException%2A> プロパティは、コンストラクターに渡されたものと同じ値を返します。`Nothing` プロパティによって内部例外値がコンストラクターに渡されなかった場合は、null 参照 (Visual Basic の場合は <xref:System.Exception.InnerException%2A>) を返します。  
  
 <xref:System.OutOfMemoryException> のインスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|[値]|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|内部例外の参照。|  
|<xref:System.Exception.Message%2A>|エラー メッセージ文字列。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">例外の処理とスロー</related>
      </Docs>
    </Member>
  </Members>
</Type>