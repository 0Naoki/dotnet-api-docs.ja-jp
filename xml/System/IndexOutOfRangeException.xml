<Type Name="IndexOutOfRangeException" FullName="System.IndexOutOfRangeException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6205b488add46d5c9806f21cc9424d49c0455c60" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53230534" /></Metadata><TypeSignature Language="C#" Value="public sealed class IndexOutOfRangeException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit IndexOutOfRangeException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.IndexOutOfRangeException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IndexOutOfRangeException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class IndexOutOfRangeException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type IndexOutOfRangeException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3222a-101">境界外のインデックスを使用して配列またはコレクションの要素にアクセスしようとしたときにスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="3222a-101">The exception that is thrown when an attempt is made to access an element of an array or collection with an index that is outside its bounds.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3222a-102"><xref:System.IndexOutOfRangeException>無効なインデックスを使用して、配列またはコレクションのメンバーにアクセスする、またはバッファー内の特定の場所から読み取り/書き込みで例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="3222a-102">An <xref:System.IndexOutOfRangeException> exception is thrown when an invalid index is used to access a member of an array or a collection, or to read or write from a particular location in a buffer.</span></span> <span data-ttu-id="3222a-103">この例外の継承、<xref:System.Exception>クラスがない一意のメンバーを追加ができます。</span><span class="sxs-lookup"><span data-stu-id="3222a-103">This exception  inherits from the <xref:System.Exception> class but adds no unique members.</span></span>  
  
 <span data-ttu-id="3222a-104">通常、<xref:System.IndexOutOfRangeException>開発者のエラーの結果として例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="3222a-104">Typically, an <xref:System.IndexOutOfRangeException> exception is thrown as a result of developer error.</span></span> <span data-ttu-id="3222a-105">例外を処理する代わりには、エラーの原因を診断し、コードを修正する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3222a-105">Instead of handling the exception, you should diagnose the cause of the error and correct your code.</span></span> <span data-ttu-id="3222a-106">エラーの最も一般的な原因は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="3222a-106">The most common causes of the error are:</span></span>  
  
-   <span data-ttu-id="3222a-107">次の例として、要素またはメンバーの数よりも小さいを示しますが、0 から始まる配列またはコレクションの上限が、1 つになることを忘れてしまった。</span><span class="sxs-lookup"><span data-stu-id="3222a-107">Forgetting that the upper bound of a collection or a zero-based array is one less than its number of members or elements, as the following example illustrates.</span></span>  
  
     [!code-csharp[System.IndexOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)]
     [!code-vb[System.IndexOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)]  
  
     <span data-ttu-id="3222a-108">エラーを修正するには、次のようなコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="3222a-108">To correct the error, you can use code like the following.</span></span>  
  
     [!code-csharp[System.IndexOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)]
     [!code-vb[System.IndexOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)]  
  
     <span data-ttu-id="3222a-109">または、配列内のすべての要素を反復処理をインデックスには、代わりにすることができますを使用して、`foreach`ステートメント (c#) または`For Each`ステートメント (Visual Basic) でします。</span><span class="sxs-lookup"><span data-stu-id="3222a-109">Alternately, instead of iterating all the elements in the array by their index, you can use the `foreach` statement (in C#) or the `For Each` statement (in Visual Basic).</span></span>  
  
-   <span data-ttu-id="3222a-110">配列の要素を適切に次元されていないと、元の配列よりも少ない要素を持つ別の配列に割り当てるしようとしています。</span><span class="sxs-lookup"><span data-stu-id="3222a-110">Attempting to assign an array element to another array that has not been adequately dimensioned and that has fewer elements than the original array.</span></span> <span data-ttu-id="3222a-111">次の例は、最後の要素を代入しようとしています、`value1`配列内の同じ要素を`value2`配列。</span><span class="sxs-lookup"><span data-stu-id="3222a-111">The following example attempts to assign the last element in the `value1` array to the same element in the `value2` array.</span></span> <span data-ttu-id="3222a-112">ただし、`value2`配列がされて適切に関連付けられていないが 7 つの要素ではなく 6。</span><span class="sxs-lookup"><span data-stu-id="3222a-112">However, the `value2` array has been incorrectly dimensioned to have six instead of seven elements.</span></span> <span data-ttu-id="3222a-113">その結果、割り当てがスローされます、<xref:System.IndexOutOfRangeException>例外。</span><span class="sxs-lookup"><span data-stu-id="3222a-113">As a result, the assignment throws an <xref:System.IndexOutOfRangeException> exception.</span></span>  
  
     [!code-csharp[System.IndexOutOfRangeException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)]
     [!code-vb[System.IndexOutOfRangeException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)]  
  
-   <span data-ttu-id="3222a-114">値を使用して、配列または特定のインデックス位置からコレクションの一部を反復処理するメソッドを検索して返されます。</span><span class="sxs-lookup"><span data-stu-id="3222a-114">Using a value returned by a search method to iterate a portion of an array or collection starting at a particular index position.</span></span> <span data-ttu-id="3222a-115">ランタイムは、スロー、検索操作では、一致が見つかった、かどうかを確認するを忘れた場合、<xref:System.IndexOutOfRangeException>例外は、この例で示すようにします。</span><span class="sxs-lookup"><span data-stu-id="3222a-115">If you forget to check whether the search operation found a match, the runtime throws an <xref:System.IndexOutOfRangeException> exception, as shown in this example.</span></span>  
  
     [!code-csharp[System.IndexOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)]
     [!code-vb[System.IndexOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)]  
  
     <span data-ttu-id="3222a-116">ここで、<xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>メソッドは、検索に失敗した場合、無効なインデックス値である-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="3222a-116">In this case, the <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType> method returns -1, which is an invalid index value, when it fails to find a match.</span></span> <span data-ttu-id="3222a-117">このエラーを修正するには、この例で示すように、配列を反復処理する前に、search メソッドの戻り値を確認します。</span><span class="sxs-lookup"><span data-stu-id="3222a-117">To correct this error, check the search method's return value before iterating the array, as shown in this example.</span></span>  
  
     [!code-csharp[System.IndexOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)]
     [!code-vb[System.IndexOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)]  
  
-   <span data-ttu-id="3222a-118">使用して、または結果セット、コレクション、または返されるオブジェクトに有効なデータがあるかどうかをテストすることがなく、クエリによって返される配列を列挙しようとしました。</span><span class="sxs-lookup"><span data-stu-id="3222a-118">Trying to use or enumerate a result set, collection, or array returned by a query without testing whether the returned object has any valid data.</span></span>  
  
-   <span data-ttu-id="3222a-119">計算値を使用して、開始インデックス、終了インデックス、または反復処理する項目の数を定義します。</span><span class="sxs-lookup"><span data-stu-id="3222a-119">Using a computed value to define the starting index, the ending index, or the number of items to be iterated.</span></span> <span data-ttu-id="3222a-120">計算の結果が予想される場合に生じる、<xref:System.IndexOutOfRangeException>例外。</span><span class="sxs-lookup"><span data-stu-id="3222a-120">If the result of the computation is unexpected, it might result in an <xref:System.IndexOutOfRangeException> exception.</span></span> <span data-ttu-id="3222a-121">インデックス値の計算に、プログラムのロジックを確認し、配列またはコレクションを反復処理する前に、値を検証する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3222a-121">You should check your program's logic in calculating the index value and validate the value before iterating the array or collection.</span></span> <span data-ttu-id="3222a-122">次の条件すべてがあります。それ以外の場合、<xref:System.IndexOutOfRangeException>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="3222a-122">The following conditions must all be true; otherwise, an <xref:System.IndexOutOfRangeException> exception is thrown:</span></span>  
  
    -   <span data-ttu-id="3222a-123">大きいまたは等しい開始インデックスがある必要があります<xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType>の次元の配列を反復処理するか、コレクションの場合は 0 以上。</span><span class="sxs-lookup"><span data-stu-id="3222a-123">The starting index must be greater than or equal to <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> for the dimension of the array that you want to iterate, or greater than or equal to 0 for a collection.</span></span>  
  
    -   <span data-ttu-id="3222a-124">終了インデックスを超えることはできません<xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType>の次元の配列を反復処理、またはことはできませんよりも大きい値を指定する、`Count`コレクションのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="3222a-124">The ending index cannot exceed <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> for the dimension of the array that you want to iterate, or cannot be greater than or equal to the `Count` property of a collection.</span></span>  
  
    -   <span data-ttu-id="3222a-125">次の式は、反復処理する配列のディメンションの場合は true である必要があります。</span><span class="sxs-lookup"><span data-stu-id="3222a-125">The following equation must be true for the dimension of the array that you want to iterate:</span></span>  
  
        ```  
        start_index >= lower_bound And start_index + items_to_iterate - 1 <= upper_bound  
        ```  
  
         <span data-ttu-id="3222a-126">コレクションの次の式を満たす必要があります。</span><span class="sxs-lookup"><span data-stu-id="3222a-126">For a collection, the following equation must be true:</span></span>  
  
        ```  
        start_index >= 0 And start_index + items_to_iterate <= Count  
        ```  
  
        > [!TIP]
        >  <span data-ttu-id="3222a-127">配列またはコレクションの開始インデックスは、負の数値をすることはできません。</span><span class="sxs-lookup"><span data-stu-id="3222a-127">The starting index of an array or collection can never be a negative number.</span></span>  
  
-   <span data-ttu-id="3222a-128">配列は、0 から始まる必要があることを想定しています。</span><span class="sxs-lookup"><span data-stu-id="3222a-128">Assuming that an array must be zero-based.</span></span> <span data-ttu-id="3222a-129">作成できますが、0 から始まる配列、<xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType>メソッドが CLS に準拠していない、COM 相互運用機能によって返されるとします。</span><span class="sxs-lookup"><span data-stu-id="3222a-129">Arrays that are not zero-based can be created by the <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> method and can be returned by COM interop, although they aren't CLS-compliant.</span></span> <span data-ttu-id="3222a-130">次の例を示しています、<xref:System.IndexOutOfRangeException>で作成された 0 から始まらない配列を反復処理するときにスローされた、<xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="3222a-130">The following example illustrates the <xref:System.IndexOutOfRangeException> that is thrown when you try to iterate a non-zero-based array created by the <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> method.</span></span>  
  
     [!code-csharp[System.IndexOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)]
     [!code-vb[System.IndexOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)]  
  
     <span data-ttu-id="3222a-131">次の例のように、エラーを修正を呼び出すことができます、<xref:System.Array.GetLowerBound%2A>メソッドではなく、配列の開始インデックスを想定します。</span><span class="sxs-lookup"><span data-stu-id="3222a-131">To correct the error, as the following example does, you can call the <xref:System.Array.GetLowerBound%2A> method instead of making assumptions about the starting index of an array.</span></span>  
  
     [!code-csharp[System.IndexOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)]
     [!code-vb[System.IndexOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)]  
  
     <span data-ttu-id="3222a-132">呼び出すときに注意して、 <xref:System.Array.GetLowerBound%2A> 、配列の開始インデックスを取得するメソッドを呼び出す必要もあります、<xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType>終了インデックスを取得します。</span><span class="sxs-lookup"><span data-stu-id="3222a-132">Note that when you call the <xref:System.Array.GetLowerBound%2A> method to get the starting index of an array, you should also call the <xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType> method to get its ending index.</span></span>  
  
-   <span data-ttu-id="3222a-133">インデックスと数値の配列またはコレクション内のインデックスにある値が混乱します。</span><span class="sxs-lookup"><span data-stu-id="3222a-133">Confusing an index and the value at that index in a numeric array or collection.</span></span> <span data-ttu-id="3222a-134">使用する場合に、通常、この問題が発生した、`foreach`ステートメント (c#) または`For Each`ステートメント (Visual Basic) でします。</span><span class="sxs-lookup"><span data-stu-id="3222a-134">This issue usually occurs when using the `foreach` statement (in C#) or the `For Each` statement (in Visual Basic).</span></span> <span data-ttu-id="3222a-135">この問題を説明する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="3222a-135">The following example illustrates the problem.</span></span>  
  
     [!code-csharp[System.IndexOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)]
     [!code-vb[System.IndexOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)]  
  
     <span data-ttu-id="3222a-136">イテレーションの構成体は、配列またはコレクションのインデックスなしで各値を返します。</span><span class="sxs-lookup"><span data-stu-id="3222a-136">The iteration construct returns each value in an array or collection, not its index.</span></span> <span data-ttu-id="3222a-137">例外を取り除くには、このコードを使用します。</span><span class="sxs-lookup"><span data-stu-id="3222a-137">To eliminate the exception, use this code.</span></span>  
  
     [!code-csharp[System.IndexOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)]
     [!code-vb[System.IndexOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)]  
  
-   <span data-ttu-id="3222a-138">無効な列名を指定する、<xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="3222a-138">Providing an invalid column name to the <xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="3222a-139">スレッド セーフに違反します。</span><span class="sxs-lookup"><span data-stu-id="3222a-139">Violating thread safety.</span></span> <span data-ttu-id="3222a-140">同じからの読み取りなどの操作<xref:System.IO.StreamReader>オブジェクト、同じへの書き込み<xref:System.IO.StreamWriter>、複数のスレッドからオブジェクトまたは内のオブジェクトを列挙する、<xref:System.Collections.Hashtable>異なるスレッドからは、スロー、<xref:System.IndexOutOfRangeException>でオブジェクトがアクセスされていない場合、スレッド セーフな方法です。</span><span class="sxs-lookup"><span data-stu-id="3222a-140">Operations such as reading from the same <xref:System.IO.StreamReader> object, writing to the same <xref:System.IO.StreamWriter> object from multiple threads, or enumerating the objects in a <xref:System.Collections.Hashtable> from different threads can throw an <xref:System.IndexOutOfRangeException> if the object isn't accessed in a thread-safe way.</span></span> <span data-ttu-id="3222a-141">この例外は、競合状態に依存するために通常断続的です。</span><span class="sxs-lookup"><span data-stu-id="3222a-141">This exception is typically intermittent because it relies on a race condition.</span></span>  
  
 <span data-ttu-id="3222a-142">ハード コーディングされたインデックス値を使用して配列を操作するはインデックス値が正しくないか、無効な場合、または操作されている配列のサイズが予期されていない場合は、例外をスローする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="3222a-142">Using hard-coded index values to manipulate an array is likely to throw an exception if the index value is incorrect or invalid, or if the size of the array being manipulation is unexpected.</span></span> <span data-ttu-id="3222a-143">スローすることから、操作を防ぐために、<xref:System.IndexOutOfRangeException>例外では、次を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="3222a-143">To prevent an operation from throwing an  <xref:System.IndexOutOfRangeException> exception, you can do the following:</span></span>  
  
-   <span data-ttu-id="3222a-144">使用して、配列の要素を反復処理、 [foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx)ステートメント (c#) または[ごとにしています.[次へ]](https://msdn.microsoft.com/library/5ebk1751.aspx)インデックスを使用して要素を反復処理ではなく (Visual Basic) で構築します。</span><span class="sxs-lookup"><span data-stu-id="3222a-144">Iterate the elements of the array using the [foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx) statement (in C#) or the [For Each...Next](https://msdn.microsoft.com/library/5ebk1751.aspx) construct (in Visual Basic)  instead of iterating elements by index.</span></span>  
  
-   <span data-ttu-id="3222a-145">によって返されるインデックスから始まるインデックスを使用して要素を反復処理、<xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType>メソッドとによって返されるインデックスで終了するまで、<xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="3222a-145">Iterate the elements by index starting with the index returned by the <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> method and ending with the index returned by the <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="3222a-146">別の 1 つの配列の要素を割り当てる場合は先の配列に少なくとも同じ数の要素、ソース配列と比較することによってことを確認、<xref:System.Array.Length%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="3222a-146">If you are assigning elements in one array to another, ensure that  the target array has at least as many elements as the source array by comparing their <xref:System.Array.Length%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="3222a-147">インスタンスの初期プロパティ値の一覧については<xref:System.IndexOutOfRangeException>を参照してください、<xref:System.IndexOutOfRangeException>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="3222a-147">For a list of initial property values for an instance of <xref:System.IndexOutOfRangeException>, see the <xref:System.IndexOutOfRangeException> constructors.</span></span>  
  
 <span data-ttu-id="3222a-148">次の中間言語 (IL) の手順については、スロー <xref:System.IndexOutOfRangeException>:</span><span class="sxs-lookup"><span data-stu-id="3222a-148">The following intermediate language (IL) instructions throw <xref:System.IndexOutOfRangeException>:</span></span>  
  
-   <span data-ttu-id="3222a-149">ldelem.\<type></span><span class="sxs-lookup"><span data-stu-id="3222a-149">ldelem.\<type></span></span>  
  
-   <span data-ttu-id="3222a-150">ldelema</span><span class="sxs-lookup"><span data-stu-id="3222a-150">ldelema</span></span>  
  
-   <span data-ttu-id="3222a-151">stelem.\<type></span><span class="sxs-lookup"><span data-stu-id="3222a-151">stelem.\<type></span></span>  
  
 <span data-ttu-id="3222a-152"><xref:System.IndexOutOfRangeException> 値は 0x80131508 HRESULT COR_E_INDEXOUTOFRANGE を使用します。</span><span class="sxs-lookup"><span data-stu-id="3222a-152"><xref:System.IndexOutOfRangeException> uses the HRESULT COR_E_INDEXOUTOFRANGE, which has the value 0x80131508.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="3222a-153">.NET での例外の処理とスロー</span><span class="sxs-lookup"><span data-stu-id="3222a-153">Handling and throwing exceptions in .NET</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3222a-154"><see cref="T:System.IndexOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3222a-154">Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3222a-155"><see cref="T:System.IndexOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3222a-155">Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3222a-156">このコンス トラクターの初期化、 <xref:System.Exception.Message%2A> 「配列のインデックスが範囲外です」などに、エラーを説明するシステム提供のメッセージの新しいインスタンスのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="3222a-156">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as "An array index is out of range."</span></span> <span data-ttu-id="3222a-157">このメッセージには、現在のシステムのカルチャが考慮されます。</span><span class="sxs-lookup"><span data-stu-id="3222a-157">This message takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="3222a-158"><xref:System.IndexOutOfRangeException> のインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="3222a-158">The following table shows the initial property values for an instance of <xref:System.IndexOutOfRangeException>.</span></span>  
  
|<span data-ttu-id="3222a-159">プロパティ</span><span class="sxs-lookup"><span data-stu-id="3222a-159">Property</span></span>|<span data-ttu-id="3222a-160">[値]</span><span class="sxs-lookup"><span data-stu-id="3222a-160">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="3222a-161">null 参照 (Visual Basic の場合は `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="3222a-161">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="3222a-162">ローカライズされたエラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="3222a-162">The localized error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="3222a-163">エラーを説明するメッセージ。</span><span class="sxs-lookup"><span data-stu-id="3222a-163">The message that describes the error.</span></span></param>
        <summary><span data-ttu-id="3222a-164">指定したエラー メッセージを使用して、<see cref="T:System.IndexOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3222a-164">Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class with a specified error message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3222a-165">このコンス トラクターの初期化、<xref:System.Exception.Message%2A?displayProperty=nameWithType>を使用して新しい例外のプロパティ、`message`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="3222a-165">This constructor initializes the <xref:System.Exception.Message%2A?displayProperty=nameWithType> property of the new exception using the `message` parameter.</span></span> <span data-ttu-id="3222a-166">`message` の内容は、ユーザーが理解できる内容にします。</span><span class="sxs-lookup"><span data-stu-id="3222a-166">The content of `message` is intended to be understood by humans.</span></span> <span data-ttu-id="3222a-167">このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="3222a-167">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span></span>  
  
 <span data-ttu-id="3222a-168"><xref:System.IndexOutOfRangeException> のインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="3222a-168">The following table shows the initial property values for an instance of <xref:System.IndexOutOfRangeException>.</span></span>  
  
|<span data-ttu-id="3222a-169">プロパティ</span><span class="sxs-lookup"><span data-stu-id="3222a-169">Property</span></span>|<span data-ttu-id="3222a-170">[値]</span><span class="sxs-lookup"><span data-stu-id="3222a-170">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="3222a-171">null 参照 (Visual Basic の場合は `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="3222a-171">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="3222a-172">エラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="3222a-172">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string * Exception -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="3222a-173">例外の原因を説明するエラー メッセージ。</span><span class="sxs-lookup"><span data-stu-id="3222a-173">The error message that explains the reason for the exception.</span></span></param>
        <param name="innerException"><span data-ttu-id="3222a-174">現在の例外の原因となった例外。</span><span class="sxs-lookup"><span data-stu-id="3222a-174">The exception that is the cause of the current exception.</span></span> <span data-ttu-id="3222a-175"><paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="3222a-175">If the <paramref name="innerException" /> parameter is not a null reference (<see langword="Nothing" /> in Visual Basic), the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span></span></param>
        <summary><span data-ttu-id="3222a-176">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.IndexOutOfRangeException" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3222a-176">Initializes a new instance of the <see cref="T:System.IndexOutOfRangeException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3222a-177">前の例外の直接の結果としてスローされる例外については、<xref:System.Exception.InnerException%2A> プロパティに、前の例外への参照が格納されます。</span><span class="sxs-lookup"><span data-stu-id="3222a-177">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="3222a-178">`InnerException` プロパティは、コンストラクターに渡されたものと同じ値を返します。`Nothing` プロパティによって内部例外値がコンストラクターに渡されなかった場合は、null 参照 (Visual Basic の場合は `InnerException`) を返します。</span><span class="sxs-lookup"><span data-stu-id="3222a-178">The `InnerException` property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the `InnerException` property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="3222a-179"><xref:System.IndexOutOfRangeException> のインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="3222a-179">The following table shows the initial property values for an instance of <xref:System.IndexOutOfRangeException>.</span></span>  
  
|<span data-ttu-id="3222a-180">プロパティ</span><span class="sxs-lookup"><span data-stu-id="3222a-180">Property</span></span>|<span data-ttu-id="3222a-181">[値]</span><span class="sxs-lookup"><span data-stu-id="3222a-181">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="3222a-182">内部例外の参照。</span><span class="sxs-lookup"><span data-stu-id="3222a-182">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="3222a-183">エラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="3222a-183">The error message string.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>