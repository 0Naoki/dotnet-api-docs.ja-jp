<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IndexOutOfRangeException.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5fa743ca2f45cda07f83e63ffd565711d31756eb5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa743ca2f45cda07f83e63ffd565711d31756eb5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IndexOutOfRangeException">
          <source>The exception that is thrown when an attempt is made to access an element of an array or collection with an index that is outside its bounds.</source>
          <target state="translated">境界外のインデックスを使用して配列またはコレクションの要素にアクセスしようとしたときにスローされる例外。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>An <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception is thrown when an invalid index is used to access a member of an array or a collection, or to read or write from a particular location in a buffer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>配列またはコレクションのメンバーにアクセスするかを読み取ったり書き込んだりするバッファーの特定の場所から無効なインデックスを使用すると、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>This exception  inherits from the <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class but adds no unique members.</source>
          <target state="translated">この例外が継承、<ph id="ph1">&lt;xref:System.Exception&gt;</ph>クラスがない一意のメンバーを追加ができます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Typically, an <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception is thrown as a result of developer error.</source>
          <target state="translated">通常、<ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>開発者のエラーの結果として例外がスローされます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Instead of handling the exception, you should diagnose the cause of the error and correct your code.</source>
          <target state="translated">例外を処理する代わりに、エラーの原因を診断し、コードの修正ください。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The most common causes of the error are:</source>
          <target state="translated">エラーの最も一般的な原因は次のとおりです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Forgetting that the upper bound of a collection or a zero-based array is one less than its number of members or elements, as the following example illustrates.</source>
          <target state="translated">0 から始まる配列またはコレクションの上限が、1 つになることを忘れてしまった次の例として、要素またはメンバーの数よりも小さいを示しています。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>To correct the error, you can use code like the following.</source>
          <target state="translated">このエラーを修正するには、次のようにコードを使用できます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Alternately, instead of iterating all the elements in the array by their index, you can use the <ph id="ph1">`foreach`</ph> statement (in C#) or the <ph id="ph2">`For Each`</ph> statement (in Visual Basic).</source>
          <target state="translated">代わりに、そのインデックスによって反復処理には、配列内のすべての要素ではなく行うこともできます、<ph id="ph1">`foreach`</ph>ステートメント (c#) または<ph id="ph2">`For Each`</ph>ステートメント (Visual Basic の場合)。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Attempting to assign an array element to another array that has not been adequately dimensioned and that has fewer elements than the original array.</source>
          <target state="translated">配列の要素を適切に次元されていないと、元の配列よりも少ない要素を持つ別の配列に割り当てるしようとしています。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The following example attempts to assign the last element in the <ph id="ph1">`value1`</ph> array to the same element in the <ph id="ph2">`value2`</ph> array.</source>
          <target state="translated">次の例が、最後の要素を代入しようとしています。、<ph id="ph1">`value1`</ph>配列内の同じ要素を、<ph id="ph2">`value2`</ph>配列。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>However, the <ph id="ph1">`value2`</ph> array has been incorrectly dimensioned to have six instead of seven elements.</source>
          <target state="translated">ただし、<ph id="ph1">`value2`</ph>配列がされて正しく多次元化されていない 7 つの要素の代わりに 6 個にします。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>As a result, the assignment throws an <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception.</source>
          <target state="translated">割り当ての結果として、スロー、<ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Using a value returned by a search method to iterate a portion of an array or collection starting at a particular index position.</source>
          <target state="translated">配列またはコレクションの特定のインデックス位置からの一部を反復処理するメソッドを検索によって返される値を使用します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>If you forget to check whether the search operation found a match, the runtime throws an <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception, as shown in this example.</source>
          <target state="translated">ランタイムは、スロー、検索操作では、一致が見つかった、かどうかを確認するを忘れた場合、<ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>例外、この例で示すようにします。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType&gt;</ph> method returns -1, which is an invalid index value, when it fails to find a match.</source>
          <target state="translated">ここで、<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType&gt;</ph>メソッドに無効なインデックス値を一致を見つけ、失敗した場合は-1 を返します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>To correct this error, check the search method's return value before iterating the array, as shown in this example.</source>
          <target state="translated">このエラーを解決するには、この例のように、配列を反復処理する前に検索メソッドの戻り値を確認します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Trying to use or enumerate a result set, collection, or array returned by a query without testing whether the returned object has any valid data.</source>
          <target state="translated">使用するか、結果セット、コレクション、または、返されたオブジェクトに有効なデータがあるかどうかをテストすることがなく、クエリによって返される配列を列挙しようとします。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Using a computed value to define the starting index, the ending index, or the number of items to be iterated.</source>
          <target state="translated">開始インデックス、終了インデックス、または反復処理するのに項目の数を定義するのにには、計算された値を使用します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>If the result of the computation is unexpected, it might result in an <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception.</source>
          <target state="translated">計算の結果が予想される場合は、ことになります、<ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>You should check your program's logic in calculating the index value and validate the value before iterating the array or collection.</source>
          <target state="translated">インデックス値の計算で、プログラムのロジックを確認し、配列またはコレクションを反復処理する前に値を検証する必要があります。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The following conditions must all be true; otherwise, an <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception is thrown:</source>
          <target state="translated">次の条件すべて必要があります。それ以外の場合、<ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>例外がスローされます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The starting index must be greater than or equal to <ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType&gt;</ph> for the dimension of the array that you want to iterate, or greater than or equal to 0 for a collection.</source>
          <target state="translated">開始インデックスが以上にする必要があります<ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType&gt;</ph>、反復処理する配列の次元のまたはコレクションの場合は 0 以上。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The ending index cannot exceed <ph id="ph1">&lt;xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType&gt;</ph> for the dimension of the array that you want to iterate, or cannot be greater than or equal to the <ph id="ph2">`Count`</ph> property of a collection.</source>
          <target state="translated">終了インデックスを超えないように<ph id="ph1">&lt;xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType&gt;</ph>反復処理する、またはことはできませんよりも大きくするか、または等しいする配列の次元の<ph id="ph2">`Count`</ph>コレクションのプロパティです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The following equation must be true for the dimension of the array that you want to iterate:</source>
          <target state="translated">次の式は、反復処理する配列の次元の場合は true である必要があります。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>For a collection, the following equation must be true:</source>
          <target state="translated">コレクションは、次の式は true にする必要があります。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The starting index of an array or collection can never be a negative number.</source>
          <target state="translated">配列またはコレクションの開始インデックスは、負の数値をすることはできません。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Assuming that an array must be zero-based.</source>
          <target state="translated">0 から始まる配列である必要があると仮定します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Arrays that are not zero-based can be created by the <ph id="ph1">&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType&gt;</ph> method and can be returned by COM interop, although they aren’t CLS-compliant.</source>
          <target state="translated">0 から始まる配列を作成できます、<ph id="ph1">&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType&gt;</ph>メソッドが CLS に準拠していないが、COM 相互運用機能から返されることができます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The following example illustrates the <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> that is thrown when you try to iterate a non-zero-based array created by the <ph id="ph2">&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">次の例を示しています、<ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>によって作成された非ゼロ ベースの配列を反復処理しようとしたときにスローされる、<ph id="ph2">&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>To correct the error, as the following example does, you can call the <ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A&gt;</ph> method instead of making assumptions about the starting index of an array.</source>
          <target state="translated">次の例のように、エラーを修正を呼び出すことができます、<ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A&gt;</ph>配列の開始インデックスについて推測するのではなくメソッドです。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Note that when you call the <ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A&gt;</ph> method to get the starting index of an array, you should also call the <ph id="ph2">&lt;xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType&gt;</ph> method to get its ending index.</source>
          <target state="translated">呼び出すときに注意してください、 <ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A&gt;</ph> 、配列の開始インデックスを取得するメソッドを呼び出す必要もあります、<ph id="ph2">&lt;xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType&gt;</ph>終了インデックスを取得します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Confusing an index and the value at that index in a numeric array or collection.</source>
          <target state="translated">インデックスと数値の配列またはコレクション内のインデックスにある値を混乱します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>This issue usually occurs when using the <ph id="ph1">`foreach`</ph> statement (in C#) or the <ph id="ph2">`For Each`</ph> statement (in Visual Basic).</source>
          <target state="translated">この問題が発生するは通常を使用する場合、<ph id="ph1">`foreach`</ph>ステートメント (c#) または<ph id="ph2">`For Each`</ph>ステートメント (Visual Basic の場合)。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The following example illustrates the problem.</source>
          <target state="translated">この問題を説明する例を次に示します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The iteration construct returns each value in an array or collection, not its index.</source>
          <target state="translated">イテレーションの構成体には、配列またはコレクションは、インデックスなしの各値を返します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>To eliminate the exception, use this code.</source>
          <target state="translated">例外を回避するのには、このコードを使用します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Providing an invalid column name to the <ph id="ph1">&lt;xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">無効な列名を指定する、<ph id="ph1">&lt;xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Violating thread safety.</source>
          <target state="translated">スレッド セーフに違反します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Operations such as reading from the same <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> object, writing to the same <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> object from multiple threads, or enumerating the objects in a <ph id="ph3">&lt;xref:System.Collections.Hashtable&gt;</ph> from different threads can throw an <ph id="ph4">&lt;xref:System.IndexOutOfRangeException&gt;</ph> if the object isn’t accessed in a thread-safe way.</source>
          <target state="translated">同じからの読み取りなどの操作<ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph>オブジェクト、同じへの書き込み<ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph>または内のオブジェクトを列挙するオブジェクトの複数のスレッドから、<ph id="ph3">&lt;xref:System.Collections.Hashtable&gt;</ph>異なるスレッドからスローすることが、<ph id="ph4">&lt;xref:System.IndexOutOfRangeException&gt;</ph>オブジェクトは、スレッド セーフな方法でアクセスされていない場合。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>This exception is typically intermittent because it relies on a race condition.</source>
          <target state="translated">この例外は、競合状態に依存しているために、通常断続的なです。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Using hard-coded index values to manipulate an array is likely to throw an exception if the index value is incorrect or invalid, or if the size of the array being manipulation is unexpected.</source>
          <target state="translated">ハード コーディングされたインデックス値を使用して配列を操作するは、インデックス値が正しくないか、無効な場合、または操作されている配列のサイズは予期しない例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>To prevent an operation from throwing an  <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception, you can do the following:</source>
          <target state="translated">スローされることから、操作を防ぐために、<ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>の例外を除き、次を行うことができます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Iterate the elements of the array using the <bpt id="p1">[</bpt>foreach<ept id="p1">](https://msdn.microsoft.com/library/ttw7t8t6.aspx)</ept> statement (in C#) or the <bpt id="p2">[</bpt>For Each...Next<ept id="p2">](https://msdn.microsoft.com/library/5ebk1751.aspx)</ept> construct (in Visual Basic)  instead of iterating elements by index.</source>
          <target state="translated">使用して、配列の要素を反復処理する、 <bpt id="p1">[</bpt>foreach<ept id="p1">](https://msdn.microsoft.com/library/ttw7t8t6.aspx)</ept>ステートメント (c#) または<bpt id="p2">[</bpt>ごとにしています.[次へ]<ept id="p2">](https://msdn.microsoft.com/library/5ebk1751.aspx)</ept> (Visual Basic) のインデックスを使用して要素を繰り返し処理ではなくを作成します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Iterate the elements by index starting with the index returned by the <ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType&gt;</ph> method and ending with the index returned by the <ph id="ph2">&lt;xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">によって返されるインデックスから始まるインデックスを使用して要素を反復処理する、<ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType&gt;</ph>メソッドとによって返されるインデックスで終了するまで、<ph id="ph2">&lt;xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>If you are assigning elements in one array to another, ensure that  the target array has at least as many elements as the source array by comparing their <ph id="ph1">&lt;xref:System.Array.Length%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">別の 1 つの配列内の要素を割り当てる場合はあることを確認対象となる配列には、少なくとも同じ数の要素ソース配列と比較することによって、<ph id="ph1">&lt;xref:System.Array.Length%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>, see the <ph id="ph2">&lt;xref:System.IndexOutOfRangeException&gt;</ph> constructors.</source>
          <target state="translated">インスタンスの初期プロパティ値の一覧については<ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>を参照してください、<ph id="ph2">&lt;xref:System.IndexOutOfRangeException&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The following intermediate language (IL) instructions throw <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>:</source>
          <target state="translated">中間言語 (IL) の次の手順をスロー <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>ldelem.<ph id="ph1">\&lt;</ph>type&gt;</source>
          <target state="translated">ldelem.<ph id="ph1">\&lt;</ph>type&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>ldelema</source>
          <target state="translated">ldelema</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>stelem.<ph id="ph1">\&lt;</ph>type&gt;</source>
          <target state="translated">stelem.<ph id="ph1">\&lt;</ph>type&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source><ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> uses the HRESULT COR_E_INDEXOUTOFRANGE, which has the value 0x80131508.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> 値は 0x80131508 HRESULT COR_E_INDEXOUTOFRANGE を使用します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="T:System.IndexOutOfRangeException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as "An array index is out of range."</source>
          <target state="translated">このコンス トラクター、 <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> 「配列のインデックスが範囲外です」などに、エラーを説明するシステム提供のメッセージの新しいインスタンスのプロパティ。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">このメッセージには、現在のシステムのカルチャが考慮されます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> のインスタンスの初期プロパティ値を次の表に示します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>Property</source>
          <target state="translated">プロパティ</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>Value</source>
          <target state="translated">[値]</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">null 参照 (Visual Basic の場合は <ph id="ph1">`Nothing`</ph>)。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>The localized error message string.</source>
          <target state="translated">ローカライズされたエラー メッセージ文字列。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>The message that describes the error.</source>
          <target state="translated">エラーを説明するメッセージ。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> class with a specified error message.</source>
          <target state="translated">指定したエラー メッセージを使用して、<ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A?displayProperty=nameWithType&gt;</ph> property of the new exception using the <ph id="ph2">`message`</ph> parameter.</source>
          <target state="translated">このコンス トラクター、<ph id="ph1">&lt;xref:System.Exception.Message%2A?displayProperty=nameWithType&gt;</ph>の新しい例外を使用して、プロパティ、<ph id="ph2">`message`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>The content of <ph id="ph1">`message`</ph> is intended to be understood by humans.</source>
          <target state="translated"><ph id="ph1">`message`</ph> の内容は、ユーザーが理解できる内容にします。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> のインスタンスの初期プロパティ値を次の表に示します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>Property</source>
          <target state="translated">プロパティ</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>Value</source>
          <target state="translated">[値]</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">null 参照 (Visual Basic の場合は <ph id="ph1">`Nothing`</ph>)。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>The error message string.</source>
          <target state="translated">エラー メッセージ文字列。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">例外の原因を説明するエラー メッセージ。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">現在の例外の原因となった例外。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> parameter is not a null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> パラメーターが null 参照 (Visual Basic の場合は <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>) でない場合は、内部例外を処理する <ph id="ph2">&lt;see langword="catch" /&gt;</ph> ブロックで現在の例外が発生します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">前の例外の直接の結果としてスローされる例外については、<ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> プロパティに、前の例外への参照が格納されます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">`InnerException`</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic) if the <ph id="ph3">`InnerException`</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">`InnerException`</ph> プロパティは、コンストラクターに渡されたものと同じ値を返します。<ph id="ph2">`Nothing`</ph> プロパティによって内部例外値がコンストラクターに渡されなかった場合は、null 参照 (Visual Basic の場合は <ph id="ph3">`InnerException`</ph>) を返します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> のインスタンスの初期プロパティ値を次の表に示します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>Property</source>
          <target state="translated">プロパティ</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>Value</source>
          <target state="translated">[値]</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>The inner exception reference.</source>
          <target state="translated">内部例外の参照。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>The error message string.</source>
          <target state="translated">エラー メッセージ文字列。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>