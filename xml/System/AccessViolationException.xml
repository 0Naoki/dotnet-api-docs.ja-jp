<Type Name="AccessViolationException" FullName="System.AccessViolationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eb360adfc3670886a06c5f3ab2daa2470318896a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30727776" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AccessViolationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit AccessViolationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.AccessViolationException" />
  <TypeSignature Language="VB.NET" Value="Public Class AccessViolationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class AccessViolationException : SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="74e13-101">保護されたメモリに対して読み取りまたは書き込みを行おうとするとスローされる例外。</span>
      <span class="sxs-lookup">
        <span data-stu-id="74e13-101">The exception that is thrown when there is an attempt to read or write protected memory.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74e13-102">コードでは、読み取りまたは書き込みのメモリを割り当てられていないか、先にアクセスできないしようとすると、アンマネージ コードまたはアンセーフ コードでアクセス違反が発生します。</span><span class="sxs-lookup"><span data-stu-id="74e13-102">An access violation occurs in unmanaged or unsafe code when the code attempts to read or write to memory that has not been allocated, or to which it does not have access.</span></span> <span data-ttu-id="74e13-103">これは通常、ポインターがある正しくないために発生します。</span><span class="sxs-lookup"><span data-stu-id="74e13-103">This usually occurs because a pointer has a bad value.</span></span> <span data-ttu-id="74e13-104">無効なポインターによる読み取りまたは書き込みがすべてアクセス違反になるとは限らないため、通常、アクセス違反は、無効なポインターによって複数の読み取りまたは書き込みが発生したこと、およびメモリが破損している可能性があることを示します。</span><span class="sxs-lookup"><span data-stu-id="74e13-104">Not all reads or writes through bad pointers lead to access violations, so an access violation usually indicates that several reads or writes have occurred through bad pointers, and that memory might be corrupted.</span></span> <span data-ttu-id="74e13-105">したがって、アクセス違反はほぼ常に深刻なプログラミング エラーを示します。</span><span class="sxs-lookup"><span data-stu-id="74e13-105">Thus, access violations almost always indicate serious programming errors.</span></span> <span data-ttu-id="74e13-106"><xref:System.AccessViolationException>これらの重大なエラーを明確に識別します。</span><span class="sxs-lookup"><span data-stu-id="74e13-106">An <xref:System.AccessViolationException> clearly identifies these serious errors.</span></span>  
  
 <span data-ttu-id="74e13-107">全体が検証可能なマネージ コードで構成される、プログラムですべての参照が有効であるか、または null、およびアクセス違反は可能でありません。</span><span class="sxs-lookup"><span data-stu-id="74e13-107">In programs consisting entirely of verifiable managed code, all references are either valid or null, and access violations are impossible.</span></span> <span data-ttu-id="74e13-108">検証可能なコードがスローされます内の null 参照を参照しようとするすべての操作、<xref:System.NullReferenceException>例外。</span><span class="sxs-lookup"><span data-stu-id="74e13-108">Any operation that attempts to reference a null reference in verifiable code throws a <xref:System.NullReferenceException> exception.</span></span> <span data-ttu-id="74e13-109"><xref:System.AccessViolationException>のみと検証可能なマネージ コードを操作または安全でないマネージ コードとアンマネージ コードと発生します。</span><span class="sxs-lookup"><span data-stu-id="74e13-109">An <xref:System.AccessViolationException> occurs only when verifiable managed code interacts with unmanaged code or with unsafe managed code.</span></span>  
  
## <a name="troubleshooting-accessviolationexception-exceptions"></a><span data-ttu-id="74e13-110">AccessViolationException 例外のトラブルシューティング</span><span class="sxs-lookup"><span data-stu-id="74e13-110">Troubleshooting AccessViolationException exceptions</span></span>  
 <span data-ttu-id="74e13-111"><xref:System.AccessViolationException>安全でないマネージ コードでのみ例外が発生するか、コードがアンマネージ コードとやり取りするとき、検証可能な管理します。</span><span class="sxs-lookup"><span data-stu-id="74e13-111">An <xref:System.AccessViolationException> exception can occur only in unsafe managed code or when verifiable managed code interacts with unmanaged code:</span></span>  
  
-   <span data-ttu-id="74e13-112">安全でないマネージ コードで発生したアクセス違反は、いずれかとして表現できます、<xref:System.NullReferenceException>例外または<xref:System.AccessViolationException>によっては、プラットフォームの例外。</span><span class="sxs-lookup"><span data-stu-id="74e13-112">An access violation that occurs in unsafe managed code can be expressed as either a <xref:System.NullReferenceException> exception or an <xref:System.AccessViolationException> exception, depending on the platform.</span></span>  
  
-   <span data-ttu-id="74e13-113">マネージ コードにバブルをアンマネージ コードでアクセス違反は、常にラップ、<xref:System.AccessViolationException>例外。</span><span class="sxs-lookup"><span data-stu-id="74e13-113">An access violation in unmanaged code that bubbles up to managed code is always wrapped in an <xref:System.AccessViolationException> exception.</span></span>  
  
 <span data-ttu-id="74e13-114">どちらの場合、識別し、の原因を修正、<xref:System.AccessViolationException>次のように例外。</span><span class="sxs-lookup"><span data-stu-id="74e13-114">In either case, you can identify and correct the cause of the <xref:System.AccessViolationException> exception as follows:</span></span>  
  
 <span data-ttu-id="74e13-115">アクセスしようとしているメモリが割り当て済みであることを確認します。</span><span class="sxs-lookup"><span data-stu-id="74e13-115">Make sure that the memory that you are attempting to access has been allocated.</span></span>  
 <span data-ttu-id="74e13-116"><xref:System.AccessViolationException>例外がメモリにアクセスする保護された--は、メモリを割り当てられていないか、プロセスを所有していないにアクセスしようとして常にスローされます。</span><span class="sxs-lookup"><span data-stu-id="74e13-116">An <xref:System.AccessViolationException> exception is always thrown by an attempt to access protected memory -- that is, to access memory that is not allocated or that is not owned by a process.</span></span>  
  
 <span data-ttu-id="74e13-117">自動メモリ管理は、共通言語ランタイムが提供するサービスの 1 つです。</span><span class="sxs-lookup"><span data-stu-id="74e13-117">Automatic memory management is one of the services that the common language runtime provides.</span></span> <span data-ttu-id="74e13-118">マネージ コードでは、unmanagede コードと同じ機能を提供する場合は、この機能を活用するために、マネージ コードに移動する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="74e13-118">If managed code provides the same functionality as your unmanagede code, you may wish to move to managed code to take advantage of this functionality.</span></span> <span data-ttu-id="74e13-119">詳細については、次を参照してください。[自動メモリ管理](~/docs/standard/automatic-memory-management.md)です。</span><span class="sxs-lookup"><span data-stu-id="74e13-119">For more information, see [Automatic Memory Management](~/docs/standard/automatic-memory-management.md).</span></span>  
  
 <span data-ttu-id="74e13-120">アクセスしようとしているメモリが破損していないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="74e13-120">Make sure that the memory that you are attempting to access has not been corrupted.</span></span>  
 <span data-ttu-id="74e13-121">無効なポインターによって複数の読み取り操作または書き込み操作が発生すると、メモリが破損する場合があります。</span><span class="sxs-lookup"><span data-stu-id="74e13-121">If several read or write operations have occurred through bad pointers, memory may be corrupted.</span></span> <span data-ttu-id="74e13-122">これは通常、定義済みのバッファーの外部アドレスに対して読み取りまたは書き込み時に発生します。</span><span class="sxs-lookup"><span data-stu-id="74e13-122">This typically occurs when reading or writing to addresses outside of a predefined buffer.</span></span>  
  
## <a name="accessviolationexception-and-trycatch-blocks"></a><span data-ttu-id="74e13-123">AccessViolationException と try ブロックと catch ブロック</span><span class="sxs-lookup"><span data-stu-id="74e13-123">AccessViolationException and try/catch blocks</span></span>  
 <span data-ttu-id="74e13-124">以降で、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、<xref:System.AccessViolationException>で共通言語ランタイムによってスローされた例外は処理されない、`catch`共通言語ランタイムによって予約されるメモリの外部では、例外が発生した場合は、構造化例外ハンドラー内のステートメント。</span><span class="sxs-lookup"><span data-stu-id="74e13-124">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.AccessViolationException> exceptions thrown by the common language runtime are not handled by the `catch` statement in a structured exception handler if the exception occurs outside of the memory reserved by the common language runtime.</span></span> <span data-ttu-id="74e13-125">などを処理するために、<xref:System.AccessViolationException>適用する必要があります、例外、<xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute>例外がスローされたメソッドに属性します。</span><span class="sxs-lookup"><span data-stu-id="74e13-125">To handle such an <xref:System.AccessViolationException> exception, you should apply the  <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute to the method in which the exception is thrown.</span></span> <span data-ttu-id="74e13-126">この変更には影響しません<xref:System.AccessViolationException>によってキャッチを続行できるユーザー コードによってスローされた例外、`catch`ステートメントです。</span><span class="sxs-lookup"><span data-stu-id="74e13-126">This change does not affect <xref:System.AccessViolationException> exceptions thrown by user code, which can continue to be caught by a `catch` statement.</span></span> <span data-ttu-id="74e13-127">再コンパイルし、変更せずに実行する .NET Framework の以前のバージョン用に記述されたコードに対して、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]、追加することができます、 [ \<legacyCorruptedStateExceptionsPolicy >](~/docs/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element.md)要素をアプリの構成ファイル。</span><span class="sxs-lookup"><span data-stu-id="74e13-127">For code written for previous versions of the .NET Framework that you want to recompile and run without modification on the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can add the [\<legacyCorruptedStateExceptionsPolicy>](~/docs/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element.md) element to your app's configuration file.</span></span> <span data-ttu-id="74e13-128">また、ハンドラーを定義している場合にも、例外の通知が表示されることができます、<xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType>または<xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="74e13-128">Note that you can also receive notification of the exceptions if you have defined a handler for the <xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType> or <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="74e13-129">バージョン情報</span><span class="sxs-lookup"><span data-stu-id="74e13-129">Version Information</span></span>  
 <span data-ttu-id="74e13-130">.NET Framework 2.0 とそれ以降のバージョンでは、この例外はスローします。</span><span class="sxs-lookup"><span data-stu-id="74e13-130">This exception is thrown in the .NET Framework 2.0 and later versions.</span></span> <span data-ttu-id="74e13-131">.NET Framework の以前のバージョンで、アンマネージ コードまたは安全でないマネージ コードでアクセス違反がによって表される、<xref:System.NullReferenceException>マネージ コードでします。</span><span class="sxs-lookup"><span data-stu-id="74e13-131">In earlier versions of the .NET Framework, an access violation in unmanaged code or unsafe managed code is represented by a <xref:System.NullReferenceException> in managed code.</span></span> <span data-ttu-id="74e13-132">A<xref:System.NullReferenceException>データの破損を含まないイベントの発生、検証可能なマネージ コードでは null 参照が逆参照し、バージョン 1.0 または 1.1 では、2 つの状況を区別する手段がないときにもスローされます。</span><span class="sxs-lookup"><span data-stu-id="74e13-132">A <xref:System.NullReferenceException> is also thrown when a null reference is dereferenced in verifiable managed code, an occurrence that does not involve data corruption, and there is no way to distinguish between the two situations in versions 1.0 or 1.1.</span></span>  
  
 <span data-ttu-id="74e13-133">管理者は、.NET Framework version 1.1 の動作に戻すには、選択したアプリケーションを許可できます。</span><span class="sxs-lookup"><span data-stu-id="74e13-133">Administrators can allow selected applications to revert to the behavior of the .NET Framework version 1.1.</span></span> <span data-ttu-id="74e13-134">次の行での配置、 [&lt;ランタイム&gt;要素](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)アプリケーションの構成ファイルのセクション。</span><span class="sxs-lookup"><span data-stu-id="74e13-134">Place the following line in the [&lt;runtime&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of the configuration file for the application:</span></span>  
  
```  
<legacyNullReferenceExceptionPolicy enabled = "1"/>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="74e13-135">
            <see cref="T:System.AccessViolationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74e13-135">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="74e13-136">エラーを説明するシステム提供のメッセージを使用して、<see cref="T:System.AccessViolationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74e13-136">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a system-supplied message that describes the error.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74e13-137">このコンス トラクター、<xref:System.Exception.Message%2A>エラーを説明するシステム提供のメッセージの新しいインスタンスのプロパティなど"しようの読み取りまたは書き込み保護されているメモリ。</span><span class="sxs-lookup"><span data-stu-id="74e13-137">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as "Attempted to read or write protected memory.</span></span> <span data-ttu-id="74e13-138">これは多くの場合、その他のメモリが破損していることを示す値です。"</span><span class="sxs-lookup"><span data-stu-id="74e13-138">This is often an indication that other memory has been corrupted."</span></span> <span data-ttu-id="74e13-139">このメッセージには、現在のシステムのカルチャが考慮されます。</span><span class="sxs-lookup"><span data-stu-id="74e13-139">This message takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="74e13-140"><xref:System.AccessViolationException> のインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="74e13-140">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>  
  
|<span data-ttu-id="74e13-141">プロパティ</span><span class="sxs-lookup"><span data-stu-id="74e13-141">Property</span></span>|<span data-ttu-id="74e13-142">[値]</span><span class="sxs-lookup"><span data-stu-id="74e13-142">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="74e13-143">`null`。</span><span class="sxs-lookup"><span data-stu-id="74e13-143">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="74e13-144">ローカライズされたエラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="74e13-144">The localized error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="74e13-145">例外を説明するメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74e13-145">The message that describes the exception.</span>
          </span>
          <span data-ttu-id="74e13-146">このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74e13-146">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74e13-147">エラーを説明する指定したメッセージを使用して、<see cref="T:System.AccessViolationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74e13-147">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified message that describes the error.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74e13-148"><xref:System.AccessViolationException> のインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="74e13-148">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>  
  
|<span data-ttu-id="74e13-149">プロパティ</span><span class="sxs-lookup"><span data-stu-id="74e13-149">Property</span></span>|<span data-ttu-id="74e13-150">[値]</span><span class="sxs-lookup"><span data-stu-id="74e13-150">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="74e13-151">`null`。</span><span class="sxs-lookup"><span data-stu-id="74e13-151">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="74e13-152">`message` に指定されたエラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="74e13-152">The error message string specified in `message`.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AccessViolationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; AccessViolationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="74e13-153">シリアル化されたオブジェクト データを保持する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74e13-153">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="74e13-154">転送元または転送先についてのコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74e13-154">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74e13-155">シリアル化したデータを使用して、<see cref="T:System.AccessViolationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74e13-155">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with serialized data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74e13-156">このコンストラクターは、逆シリアル化中に、ストリームで送信された例外オブジェクトを再構築するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="74e13-156">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="74e13-157">詳細については、次を参照してください。 [XML および SOAP シリアル化](~/docs/standard/serialization/xml-and-soap-serialization.md)です。</span><span class="sxs-lookup"><span data-stu-id="74e13-157">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="74e13-158">例外を説明するメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74e13-158">The message that describes the exception.</span>
          </span>
          <span data-ttu-id="74e13-159">このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74e13-159">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span>
          </span>
        </param>
        <param name="innerException">
          <span data-ttu-id="74e13-160">現在の例外の原因となった例外。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74e13-160">The exception that is the cause of the current exception.</span>
          </span>
          <span data-ttu-id="74e13-161">
            <c>innerException</c> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74e13-161">If the <c>innerException</c> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="74e13-162">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.AccessViolationException" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="74e13-162">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="74e13-163">前の例外の直接の結果としてスローされる例外については、<xref:System.Exception.InnerException%2A> プロパティに、前の例外への参照が格納されます。</span><span class="sxs-lookup"><span data-stu-id="74e13-163">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="74e13-164"><xref:System.Exception.InnerException%2A> プロパティは、コンストラクターに渡されたものと同じ値を返します。`null` プロパティによって内部例外値がコンストラクターに渡されなかった場合は、<xref:System.Exception.InnerException%2A> を返します。</span><span class="sxs-lookup"><span data-stu-id="74e13-164">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="74e13-165"><xref:System.AccessViolationException> のインスタンスの初期プロパティ値を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="74e13-165">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>  
  
|<span data-ttu-id="74e13-166">プロパティ</span><span class="sxs-lookup"><span data-stu-id="74e13-166">Property</span></span>|<span data-ttu-id="74e13-167">[値]</span><span class="sxs-lookup"><span data-stu-id="74e13-167">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="74e13-168">`null`。</span><span class="sxs-lookup"><span data-stu-id="74e13-168">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="74e13-169">`message` に指定されたエラー メッセージ文字列。</span><span class="sxs-lookup"><span data-stu-id="74e13-169">The error message string specified in `message`.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>