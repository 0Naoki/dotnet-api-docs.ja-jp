<Type Name="Action" FullName="System.Action">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3c6438e0edf28c73793c53051d52f5fd7737cf4d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36434723" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action()" />
  <TypeSignature Language="C++ CLI" Value="public delegate void Action();" />
  <TypeSignature Language="F#" Value="type Action = delegate of unit -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <summary>
      <span data-ttu-id="e393d-101">パラメーターを持たず、値を返さないメソッドをカプセル化します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e393d-101">Encapsulates a method that has no parameters and does not return a value.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e393d-102">このデリゲートを使用して、メソッドを明示的にカスタム デリゲートを宣言しなくてもパラメーターとして渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="e393d-102">You can use this delegate to pass a method as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="e393d-103">カプセル化されるメソッドは、このデリゲートによって定義されているメソッドのシグネチャに対応する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e393d-103">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="e393d-104">つまり、カプセル化されるメソッドに必要ないパラメーターと戻り値はありません。</span><span class="sxs-lookup"><span data-stu-id="e393d-104">This means that the encapsulated method must have no parameters and no return value.</span></span> <span data-ttu-id="e393d-105">(C# の場合、メソッドが返す必要があります`void`です。</span><span class="sxs-lookup"><span data-stu-id="e393d-105">(In C#, the method must return `void`.</span></span> <span data-ttu-id="e393d-106">Visual Basic で定義する必要があります、`Sub`しています.`End Sub`</span><span class="sxs-lookup"><span data-stu-id="e393d-106">In Visual Basic, it must be defined by the `Sub`…`End Sub`</span></span> <span data-ttu-id="e393d-107">構築します。</span><span class="sxs-lookup"><span data-stu-id="e393d-107">construct.</span></span> <span data-ttu-id="e393d-108">できますが無視される値を返すメソッド。)通常、このようなメソッドは、操作の実行に使用されます。</span><span class="sxs-lookup"><span data-stu-id="e393d-108">It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e393d-109">パラメーターを持たず、値を返すメソッドを参照するには、ジェネリックを使用して<xref:System.Func%601>代わりに委任します。</span><span class="sxs-lookup"><span data-stu-id="e393d-109">To reference a method that has no parameters and returns a value, use the generic <xref:System.Func%601> delegate instead.</span></span>  
  
 <span data-ttu-id="e393d-110">使用すると、<xref:System.Action>デリゲートがありませんを明示的にパラメーターなしのプロシージャをカプセル化するデリゲートを定義します。</span><span class="sxs-lookup"><span data-stu-id="e393d-110">When you use the <xref:System.Action> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless procedure.</span></span> <span data-ttu-id="e393d-111">たとえば、次のコードを明示的に宣言という名前のデリゲート`ShowValue`への参照を割り当てると、`Name.DisplayToWindow`インスタンス メソッドのデリゲートのインスタンスにします。</span><span class="sxs-lookup"><span data-stu-id="e393d-111">For example, the following code explicitly declares a delegate named `ShowValue` and assigns a reference to the `Name.DisplayToWindow` instance method to its delegate instance.</span></span>  
  
 [!code-cpp[System.Action.Delegate#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.action.delegate/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action.Delegate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.action.delegate/cs/delegate.cs#1)]
 [!code-vb[System.Action.Delegate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.action.delegate/vb/delegate.vb#1)]  
  
 <span data-ttu-id="e393d-112">次の例は、インスタンス化してこのコードを簡略化、<xref:System.Action>明示的に新しいデリゲートを定義して、名前付きメソッドをそこに割り当てるのではなくデリゲート。</span><span class="sxs-lookup"><span data-stu-id="e393d-112">The following example simplifies this code by instantiating the <xref:System.Action> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-cpp[System.Action#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action/cpp/action.cpp#2)]
 [!code-csharp[System.Action#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action/cs/Action.cs#2)]
 [!code-vb[System.Action#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action/vb/Action.vb#2)]  
  
 <span data-ttu-id="e393d-113">使用することも、<xref:System.Action>次の例に示すように、C# の場合は、匿名メソッドを持つデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="e393d-113">You can also use the <xref:System.Action> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="e393d-114">(匿名メソッドの概要については、次を参照してください[匿名メソッド](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)。</span><span class="sxs-lookup"><span data-stu-id="e393d-114">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Action#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action/cs/Anon.cs#3)]  
  
 <span data-ttu-id="e393d-115">ラムダ式を割り当てることができます、<xref:System.Action>次の例に示すように、インスタンスを委任します。</span><span class="sxs-lookup"><span data-stu-id="e393d-115">You can also assign a lambda expression to an <xref:System.Action> delegate instance, as the following example illustrates.</span></span> <span data-ttu-id="e393d-116">(ラムダ式の概要については、次を参照してください[ラムダ式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)。</span><span class="sxs-lookup"><span data-stu-id="e393d-116">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Action#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action/cs/Lambda.cs#4)]
 [!code-vb[System.Action#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action/vb/lambda.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`1" />
  </Docs>
</Type>