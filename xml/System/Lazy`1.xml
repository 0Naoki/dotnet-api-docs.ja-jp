<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Lazy`1.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ad53c03faf661b5a698d5ef0c4fcd9d0451bbc14.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad53c03faf661b5a698d5ef0c4fcd9d0451bbc14</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The type of object that is being lazily initialized.</source>
          <target state="translated">遅延初期化されているオブジェクトの型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Lazy`1">
          <source>Provides support for lazy initialization.</source>
          <target state="translated">遅延初期化のサポートを提供します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</source>
          <target state="translated">このような作成または実行が、プログラムの有効期間中に実行されないときに特に、大規模なまたはリソースを消費するオブジェクトの作成や、リソースを消費するタスクの実行を遅延させるには、限定的な初期化を使用します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>To prepare for lazy initialization, you create an instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>.</source>
          <target state="translated">遅延初期化の準備をするには、インスタンスを作成する<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The type argument of the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object that you create specifies the type of the object that you want to initialize lazily.</source>
          <target state="translated">型引数、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>作成したオブジェクトが遅れて初期化するオブジェクトの種類を指定します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The constructor that you use to create the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object determines the characteristics of the initialization.</source>
          <target state="translated">コンス トラクターを使用して作成する、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>オブジェクトが初期化の特性を決定します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Lazy initialization occurs the first time the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property is accessed.</source>
          <target state="translated">遅延初期化は、<ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> プロパティへの初回のアクセス時に発生します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>In most cases, choosing a constructor depends on your answers to two questions:</source>
          <target state="translated">ほとんどの場合、コンス トラクターを選択する、2 つの質問に対する回答に依存します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Will the lazily initialized object be accessed from more than one thread?</source>
          <target state="translated">遅れて初期化されるオブジェクトは、複数のスレッドからアクセスされるか。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If so, the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object might create it on any thread.</source>
          <target state="translated">その場合、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>オブジェクトが任意のスレッドで作成可能性があります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>You can use one of the simple constructors whose default behavior is to create a thread-safe <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</source>
          <target state="translated">既定の動作がスレッド セーフを作成するには単純なコンス トラクターのいずれかを使用することができます<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>オブジェクトのため、アクセスしようとしているスレッドの数に関係なく遅延インスタンス化されたオブジェクトの 1 つのインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>To create a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</source>
          <target state="translated">作成する、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>スレッド セーフではないオブジェクト、スレッド セーフに指定することができるようにするコンス トラクターを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Making the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object thread safe does not protect the lazily initialized object.</source>
          <target state="translated">作成、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>オブジェクトのスレッド セーフであるが、遅れて初期化されるオブジェクトを保護しません。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</source>
          <target state="translated">複数のスレッドが、遅れて初期化されるオブジェクトにアクセスできる場合する必要がありますそのプロパティおよびメソッドにマルチ スレッド アクセスについて安全です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</source>
          <target state="translated">限定的な初期化を必要と多くのコード、または遅れて初期化されるオブジェクトは、すべてと必要とする例外をスローしない既定コンス トラクターを持つか。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</source>
          <target state="translated">初期化コードを記述する必要がある場合、または例外を処理する必要がある場合は、ファクトリ メソッドを取得するコンス トラクターのいずれかを使用します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Write your initialization code in the factory method.</source>
          <target state="translated">ファクトリ メソッドで初期化コードを記述します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The following table shows which constructor to choose, based on these two factors:</source>
          <target state="translated">これら 2 つの要因に基づいて選択するにはどのコンス トラクターを次の表に示します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Object will be accessed by</source>
          <target state="translated">アクセスされるオブジェクト</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If no initialization code is required (default constructor), use</source>
          <target state="translated">初期化コードが必要ない場合 (既定のコンス トラクター) を使用</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If initialization code is required, use</source>
          <target state="translated">初期化コードが必要な場合は、使用します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Multiple threads</source>
          <target state="translated">複数のスレッド</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>One thread</source>
          <target state="translated">1 つのスレッド</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> with <ph id="ph2">`isThreadSafe`</ph> set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> <ph id="ph2">`isThreadSafe`</ph> 'éý'<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> with <ph id="ph2">`isThreadSafe`</ph> set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> <ph id="ph2">`isThreadSafe`</ph> 'éý'<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>You can use a lambda expression to specify the factory method.</source>
          <target state="translated">ファクトリ メソッドを指定するのにラムダ式を使用することができます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>This keeps all the initialization code in one place.</source>
          <target state="translated">これは、すべての初期化コードが 1 か所で保持します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</source>
          <target state="translated">ラムダ式は、遅れて初期化されるオブジェクトのコンス トラクターに渡す引数も含めて、コンテキストをキャプチャします。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><bpt id="p1">**</bpt>Exception caching<ept id="p1">**</ept> When you use factory methods, exceptions are cached.</source>
          <target state="translated"><bpt id="p1">**</bpt>例外のキャッシュ<ept id="p1">**</ept>ファクトリ メソッドを使用する場合、例外がキャッシュされます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>That is, if the factory method throws an exception the first time a thread tries to access the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> object, the same exception is thrown on every subsequent attempt.</source>
          <target state="translated">つまり、ファクトリ メソッドが例外最初の時間をスローした場合、スレッドにアクセスしよう、<ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>オブジェクト、後続の試行ごとに、同じ例外がスローされます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>This ensures that every call to the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property produces the same result and avoids subtle errors that might arise if different threads get different results.</source>
          <target state="translated">これにより、すべての呼び出しに、<ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph>プロパティは、同じ結果を生成して、別のスレッドが異なる結果を得る場合に生じる可能性のある微妙なエラーを回避できます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> stands in for an actual <ph id="ph2">`T`</ph> that otherwise would have been initialized at some earlier point, usually during startup.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> 、実際の代わりに<ph id="ph2">`T`</ph>をそれ以外の場合は初期化されているある以前の時点での起動時に通常します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>A failure at that earlier point is usually fatal.</source>
          <target state="translated">その以前の時点でのエラーでは、通常致命的です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren’t using lazy initialization.</source>
          <target state="translated">回復可能な失敗の可能性がある場合は、限定的な初期化を使用していない場合と同様、(ここでは、工場出荷時のメソッド)、初期化ルーチンに再試行ロジックをビルドすることをお勧めします。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><bpt id="p1">**</bpt>Alternative to locking<ept id="p1">**</ept> In certain situations, you might want to avoid the overhead of the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object's default locking behavior.</source>
          <target state="translated"><bpt id="p1">**</bpt>ロックする代わりに<ept id="p1">**</ept>特定の状況でのオーバーヘッドを回避する可能性があります、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>オブジェクトの既定のロック動作します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>In rare situations, there might be a potential for deadlocks.</source>
          <target state="translated">まれにデッドロックの可能性があります。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>In such cases, you can use the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor, and specify <ph id="ph3">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">このような場合に使用することができます、<ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph>または<ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>コンス トラクターを指定および<ph id="ph3">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>This enables the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object to create a copy of the lazily initialized object on each of several threads if the threads call the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property simultaneously.</source>
          <target state="translated">これにより、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>スレッドを呼び出す場合、複数のスレッドの各遅れて初期化されるオブジェクトのコピーを作成するオブジェクト、<ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph>プロパティに同時にします。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>オブジェクトにより、すべてのスレッドが遅れて初期化されるオブジェクトの同じインスタンスを使用して、使用されていないインスタンスを破棄します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</source>
          <target state="translated">したがって、ロックのオーバーヘッドを軽減するのにかかるコストは、プログラムの作成し、余分な負荷の高いオブジェクトのコピーを破棄する場合がある場合がありますです。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>In most cases, this is unlikely.</source>
          <target state="translated">ほとんどの場合、これはほとんどありません。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The examples for the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructors demonstrate this behavior.</source>
          <target state="translated">例として、<ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph>と<ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>コンス トラクターは、この動作を示します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>When you specify <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, exceptions are never cached, even if you specify a factory method.</source>
          <target state="translated">指定すると<ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>、ファクトリ メソッドを指定した場合でも、例外はキャッシュされませんされます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><bpt id="p1">**</bpt>Equivalent constructors<ept id="p1">**</ept> In addition to enabling the use of <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, the <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> and <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructors can duplicate the functionality of the other constructors.</source>
          <target state="translated"><bpt id="p1">**</bpt>相当するコンス トラクター<ept id="p1">**</ept>の使用を有効にするだけでなく<ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>、<ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph>と<ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>コンス トラクターは、他のコンス トラクターの機能を実現できます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The following table shows the parameter values that produce equivalent behavior.</source>
          <target state="translated">次の表は、同等の動作を生成するパラメーター値を示します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>To create a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object that is</source>
          <target state="translated">作成する、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>オブジェクトを</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>For constructors that have a <ph id="ph1">`LazyThreadSafetyMode`</ph> <ph id="ph2">`mode`</ph> parameter, set <ph id="ph3">`mode`</ph> to</source>
          <target state="translated">コンス トラクターを持つ、 <ph id="ph1">`LazyThreadSafetyMode`</ph> <ph id="ph2">`mode`</ph>パラメーター設定<ph id="ph3">`mode`</ph>に</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>For constructors that have a Boolean <ph id="ph1">`isThreadSafe`</ph> parameter, set <ph id="ph2">`isThreadSafe`</ph> to</source>
          <target state="translated">ブール値を持つコンス トラクターの<ph id="ph1">`isThreadSafe`</ph>パラメーター設定<ph id="ph2">`isThreadSafe`</ph>に</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>For constructors with no thread safety parameters</source>
          <target state="translated">スレッド セーフのパラメーターなしのコンス トラクター</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Fully thread safe; uses locking to ensure that only one thread initializes the value.</source>
          <target state="translated">スレッド セーフでは完全に使用がロックを 1 つのスレッドが値を初期化することを確認します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>All such constructors are fully thread safe.</source>
          <target state="translated">このようなすべてのコンス トラクターは、スレッド セーフでは完全です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Not thread safe.</source>
          <target state="translated">いないスレッド セーフであります。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Not applicable.</source>
          <target state="translated">該当なし。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Fully thread safe; threads race to initialize the value.</source>
          <target state="translated">スレッド セーフでは完全に値を初期化するためにスレッド競合します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Not applicable.</source>
          <target state="translated">該当なし。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Not applicable.</source>
          <target state="translated">該当なし。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source><bpt id="p1">**</bpt>Other capabilities<ept id="p1">**</ept> For information about the use of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> with thread-static fields, or as the backing store for properties, see <bpt id="p2">[</bpt>Lazy Initialization<ept id="p2">](~/docs/framework/performance/lazy-initialization.md)</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>その他の機能<ept id="p1">**</ept>の使用方法について<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>スレッド内静的フィールドまたはプロパティのバッキング ストアとして参照してください<bpt id="p2">[</bpt>限定的な初期化<ept id="p2">](~/docs/framework/performance/lazy-initialization.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class to provide lazy initialization with access from multiple threads.</source>
          <target state="translated">次の例での使用、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>複数のスレッドからのアクセス権を持つ限定的な初期化を提供するクラス。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>It also demonstrates the use of the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor (specifying <ph id="ph2">`true`</ph> for <ph id="ph3">`isThreadSafe`</ph>) and the <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor (specifying <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> for <ph id="ph6">`mode`</ph>).</source>
          <target state="translated">使用についても示します、<ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph>コンス トラクター (を指定する<ph id="ph2">`true`</ph>の<ph id="ph3">`isThreadSafe`</ph>) および<ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>コンス トラクター (を指定する<ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>の<ph id="ph6">`mode`</ph>)。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>To switch to a different constructor, just change which constructors are commented out.</source>
          <target state="translated">別のコンス トラクターに切り替えると、どのコンス トラクターをコメント アウト オプションだけ変更します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>For an example that demonstrates exception caching using the same constructors, see the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">例外を示す例については同じコンス トラクターを使用するキャッシュを参照してください、<ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by one of several threads.</source>
          <target state="translated">この例では、複数あるスレッドのうちの 1 つによって遅れて初期化される <ph id="ph1">`LargeObject`</ph> クラスを定義します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the <ph id="ph1">`LargeObject`</ph> class, which displays a message when the object is created.</source>
          <target state="translated">コードの 4 つの主要セクションが、初期化子、工場出荷時のメソッド、実際の初期化およびのコンス トラクターの作成を示しています、<ph id="ph1">`LargeObject`</ph>クラスは、オブジェクトの作成時にメッセージが表示されます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the thread-safe lazy initializer for <ph id="ph2">`LargeObject`</ph>:</source>
          <target state="translated"><ph id="ph1">`Main`</ph> メソッドの開始時に、この例では <ph id="ph2">`LargeObject`</ph> のスレッドセーフな遅延初期化子が作成されます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The factory method shows the creation of the object, with a placeholder for further initialization:</source>
          <target state="translated">工場出荷時のメソッドより詳細な初期化を表すプレース ホルダーで、オブジェクトの作成を示しています。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>Note that the first two code sections could be combined by using a lambda function, as shown here:</source>
          <target state="translated">次に示すように、最初の 2 つのコードのセクションでは、でしたラムダ関数を使用して組み合わせることを確認してください。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</source>
          <target state="translated">遅延初期化が発生する前に、不定な期間が切れることがありますを示すために、例が一時停止します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>When you press the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key, the example creates and starts three threads.</source>
          <target state="translated">押すと、 <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept>キー、例を作成して 3 つのスレッドを開始します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The <ph id="ph1">`ThreadProc`</ph> method that's used by all three threads calls the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">`ThreadProc`</ph> 3 つのスレッドのすべての呼び出しによって使用されるメソッド、<ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The first time this happens, the <ph id="ph1">`LargeObject`</ph> instance is created:</source>
          <target state="translated">これは、最初に、<ph id="ph1">`LargeObject`</ph>インスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The constructor of the <ph id="ph1">`LargeObject`</ph> class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</source>
          <target state="translated">コンス トラクター、<ph id="ph1">`LargeObject`</ph>クラスは、コードの最後の主要セクションが含まれているメッセージが表示され、初期化中のスレッドの id を記録します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>The output from the program appears at the end of the full code listing.</source>
          <target state="translated">完全なコードの一覧の最後に、プログラムからの出力が表示されます。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">簡略化のために、この例では <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> のグローバル インスタンスを使用して、すべてのメソッドは <ph id="ph2">`static`</ph> (Visual Basic の <ph id="ph3">`Shared`</ph>) です。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">これらは、遅延初期化を使用するための要件ではありません。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>By default, all public and protected members of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class are thread safe and may be used concurrently from multiple threads.</source>
          <target state="translated">既定では、すべてのパブリックおよびプロテクト メンバー、<ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph>クラスはスレッド セーフであると、複数のスレッドから同時に使用される可能性があります。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Lazy`1">
          <source>These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</source>
          <target state="translated">これらのスレッド セーフの保証は、必要に応じて、型のコンス トラクターにパラメーターを使用して、インスタンスごとに削除できます。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Lazy`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor">
          <source>When lazy initialization occurs, the default constructor of the target type is used.</source>
          <target state="translated">遅延初期化が発生した場合は、ターゲット型の既定のコンストラクターが使用されます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>An instance that is created with this constructor may be used concurrently from multiple threads.</source>
          <target state="translated">このコンス トラクターで作成されるインスタンスは、複数のスレッドから同時に使用可能性があります。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">スレッドの安全性モード、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>このコンス トラクターで初期化されているインスタンスが<ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">複数のスレッドを初期化しようとするときにスレッド セーフ モードは動作について説明します、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is created with this constructor does not cache exceptions.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>このコンス トラクターで作成されるインスタンスでは、例外はキャッシュされません。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">詳細については、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> クラスまたは <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> 列挙体の解説を参照してください。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The following example demonstrates the use of this constructor.</source>
          <target state="translated">次の例では、このコンス トラクターの使用を示します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>It also illustrates the use of the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> constructor (specifying <ph id="ph2">`true`</ph> for <ph id="ph3">`isThreadSafe`</ph>) and the <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor (specifying <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> for <ph id="ph6">`mode`</ph>).</source>
          <target state="translated">使用も示しています、<ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph>コンス トラクター (を指定する<ph id="ph2">`true`</ph>の<ph id="ph3">`isThreadSafe`</ph>) および<ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph>コンス トラクター (を指定する<ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>の<ph id="ph6">`mode`</ph>)。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>To switch to a different constructor, just change which constructors are commented out.</source>
          <target state="translated">別のコンス トラクターに切り替えると、どのコンス トラクターをコメント アウト オプションだけ変更します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by one of several threads.</source>
          <target state="translated">この例では、複数あるスレッドのうちの 1 つによって遅れて初期化される <ph id="ph1">`LargeObject`</ph> クラスを定義します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The two key lines of code in this example are the creation of the initializer and the actual initialization.</source>
          <target state="translated">この例のコードの 2 つのキー行は、初期化子と実際の初期化の作成です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the thread-safe lazy initializer for <ph id="ph2">`LargeObject`</ph>:</source>
          <target state="translated"><ph id="ph1">`Main`</ph> メソッドの開始時に、この例では <ph id="ph2">`LargeObject`</ph> のスレッドセーフな遅延初期化子が作成されます。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The example creates and starts three threads that block on a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> object, so that the example can release the threads all at once.</source>
          <target state="translated">この例は、作成しをブロックする 3 つのスレッドを開始、<ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>オブジェクトの例が、スレッドをすべて同時に解放できるようにします。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The <ph id="ph1">`ThreadProc`</ph> method that's used by all three threads calls the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property to get the <ph id="ph3">`LargeObject`</ph> instance:</source>
          <target state="translated"><ph id="ph1">`ThreadProc`</ph> 3 つのスレッドのすべての呼び出しによって使用されるメソッド、<ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph>を取得するプロパティ、<ph id="ph3">`LargeObject`</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class provides locking, so that only one thread is allowed to create the <ph id="ph2">`LargeObject`</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>クラスを提供し、ロック、ように 1 つのスレッドを作成することは、<ph id="ph2">`LargeObject`</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>The example demonstrates that the other threads all get the same instance.</source>
          <target state="translated">この例では、他のスレッドのすべてが同じインスタンスを取得することを示します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">簡略化のために、この例では <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> のグローバル インスタンスを使用して、すべてのメソッドは <ph id="ph2">`static`</ph> (Visual Basic の <ph id="ph3">`Shared`</ph>) です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">これらは、遅延初期化を使用するための要件ではありません。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to make this instance usable concurrently by multiple threads; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to make the instance usable by only one thread at a time.</source>
          <target state="translated">このインスタンスを複数のスレッドで同時に使用できるようにする場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。インスタンスを一度に 1 つのスレッドでしか使用できないようにする場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</source>
          <target state="translated">遅延初期化が発生すると、ターゲット型の既定のコンストラクターおよび指定した初期化モードが使用されます。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> if <ph id="ph3">`isThreadSafe`</ph> is <ph id="ph4">`true`</ph>; otherwise, the mode is <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">スレッドの安全性モード、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>このコンス トラクターで初期化されているインスタンスが<ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>場合<ph id="ph3">`isThreadSafe`</ph>は<ph id="ph4">`true`</ph>、それ以外のモードは<ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">複数のスレッドを初期化しようとするときにスレッド セーフ モードは動作について説明します、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>To specify the <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph> mode, use the <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> or <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor.</source>
          <target state="translated">指定する、<ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>モードを使用して、<ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>または<ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is created with this constructor does not cache exceptions.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>このコンス トラクターで作成されるインスタンスでは、例外はキャッシュされません。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">詳細については、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> クラスまたは <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> 列挙体の解説を参照してください。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</source>
          <target state="translated">次の例では、スレッド セーフである、遅れて初期化されるオブジェクトに対するすべてのアクセスのと同じスレッドで発生しているシナリオではない、遅延初期化子を作成するこのコンス トラクターの使用を示します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>It also demonstrates the use of the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor (specifying <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> for <ph id="ph3">`mode`</ph>.</source>
          <target state="translated">使用についても示します、<ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph>コンス トラクター (を指定する<ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>の<ph id="ph3">`mode`</ph>します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>To switch to a different constructor, just change which constructor is commented out.</source>
          <target state="translated">別のコンス トラクターに切り替えると、どのコンス トラクターをコメント アウト オプションだけ変更します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>For code that demonstrates how to use this constructor in multithreaded scenarios (specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`isThreadSafe`</ph>), see the example for the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph> constructor.</source>
          <target state="translated">マルチ スレッド シナリオでこのコンス トラクターを使用する方法を示すコードについて (を指定する<ph id="ph1">`true`</ph>の<ph id="ph2">`isThreadSafe`</ph>)、例を参照してください、<ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily.</source>
          <target state="translated">例では、定義、<ph id="ph1">`LargeObject`</ph>遅れて初期化されるクラスです。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>In the <ph id="ph1">`Main`</ph> method, the example creates a <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance and then pauses.</source>
          <target state="translated"><ph id="ph1">`Main`</ph>メソッドは、例では、作成、<ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>インスタンスし、一時停止します。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>When you press the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key, the example accesses the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance, which causes initialization to occur.</source>
          <target state="translated">押すと、 <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept>キー、例では、アクセス、<ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>これにより、初期化が発生するインスタンス。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>The constructor of the <ph id="ph1">`LargeObject`</ph> class displays a console message.</source>
          <target state="translated">コンス トラクター、<ph id="ph1">`LargeObject`</ph>クラスには、コンソール メッセージが表示されます。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">簡略化のために、この例では <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> のグローバル インスタンスを使用して、すべてのメソッドは <ph id="ph2">`static`</ph> (Visual Basic の <ph id="ph3">`Shared`</ph>) です。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Boolean)">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">これらは、遅延初期化を使用するための要件ではありません。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The delegate that is invoked to produce the lazily initialized value when it is needed.</source>
          <target state="translated">必要に応じて、遅延初期化の値を生成するために呼び出されるデリゲート。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>When lazy initialization occurs, the specified initialization function is used.</source>
          <target state="translated">遅延初期化が発生すると、指定された初期化関数が使用されます。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>An instance that is created with this constructor may be used concurrently from multiple threads.</source>
          <target state="translated">このコンス トラクターで作成されるインスタンスは、複数のスレッドから同時に使用可能性があります。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">スレッドの安全性モード、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>このコンス トラクターで初期化されているインスタンスが<ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">複数のスレッドを初期化しようとするときにスレッド セーフ モードは動作について説明します、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>Exceptions that are thrown by <ph id="ph1">`valueFactory`</ph> are cached.</source>
          <target state="translated">によってスローされる例外<ph id="ph1">`valueFactory`</ph>キャッシュされます。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">詳細については、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> クラスまたは <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> 列挙体の解説を参照してください。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</source>
          <target state="translated">次の例では、キャッシュが例外の限定的な初期化を提供するこのコンス トラクターの使用を示します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>It also demonstrates the use of the <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor (specifying <ph id="ph2">`true`</ph> for <ph id="ph3">`isThreadSafe`</ph>) and the <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor (specifying <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> for <ph id="ph6">`mode`</ph>).</source>
          <target state="translated">使用についても示します、<ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph>コンス トラクター (を指定する<ph id="ph2">`true`</ph>の<ph id="ph3">`isThreadSafe`</ph>) および<ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>コンス トラクター (を指定する<ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>の<ph id="ph6">`mode`</ph>)。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>To switch to a different constructor, just change which constructors are commented out.</source>
          <target state="translated">別のコンス トラクターに切り替えると、どのコンス トラクターをコメント アウト オプションだけ変更します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by one of several threads.</source>
          <target state="translated">この例では、複数あるスレッドのうちの 1 つによって遅れて初期化される <ph id="ph1">`LargeObject`</ph> クラスを定義します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the <ph id="ph1">`LargeObject`</ph> class, which demonstrates exception caching.</source>
          <target state="translated">コードの 3 つの主要セクションが、実際の初期化とのコンス トラクターの初期化子の作成を示しています、<ph id="ph1">`LargeObject`</ph>クラスは、例外のキャッシュを示しています。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the thread-safe lazy initializer for <ph id="ph2">`LargeObject`</ph>:</source>
          <target state="translated"><ph id="ph1">`Main`</ph> メソッドの開始時に、この例では <ph id="ph2">`LargeObject`</ph> のスレッドセーフな遅延初期化子が作成されます。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The example creates and starts three threads.</source>
          <target state="translated">この例では、作成し、3 つのスレッドを開始します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>The <ph id="ph1">`ThreadProc`</ph> method that's used by all three threads calls the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property to get the <ph id="ph3">`LargeObject`</ph> instance:</source>
          <target state="translated"><ph id="ph1">`ThreadProc`</ph> 3 つのスレッドのすべての呼び出しによって使用されるメソッド、<ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph>を取得するプロパティ、<ph id="ph3">`LargeObject`</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>In the constructor of the <ph id="ph1">`LargeObject`</ph> class, the third key section of code throws an exception the first time a <ph id="ph2">`LargeObject`</ph> instance is created, but thereafter allows instance creation to occur:</source>
          <target state="translated">コンス トラクターで、<ph id="ph1">`LargeObject`</ph>クラス、コードの 3 番目の主要セクションが最初に例外をスローする、<ph id="ph2">`LargeObject`</ph>インスタンスは作成されますが、これ以降発生するインスタンスの作成を許可します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>When the example is run, the first thread that tries to create an instance of <ph id="ph1">`LargeObject`</ph> fails, and the exception is caught.</source>
          <target state="translated">例では、実行時のインスタンスを作成しようとしています。 最初のスレッド<ph id="ph1">`LargeObject`</ph>は失敗し、例外をキャッチします。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>You might expect that the next thread would successfully create an instance, but the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object has cached the exception.</source>
          <target state="translated">次のスレッドは、インスタンスの作成が正常にする予定であるが、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>オブジェクトが例外をキャッシュします。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>Because of this, all three threads throw the exception.</source>
          <target state="translated">このためは、次の 3 つのすべてのスレッドは、例外をスローします。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">簡略化のために、この例では <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> のグローバル インスタンスを使用して、すべてのメソッドは <ph id="ph2">`static`</ph> (Visual Basic の <ph id="ph3">`Shared`</ph>) です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">これらは、遅延初期化を使用するための要件ではありません。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0})">
          <source><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>One of the enumeration values that specifies the thread safety mode.</source>
          <target state="translated">スレッド セーフ モードを指定する列挙値の 1 つ。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class that uses the default constructor of <ph id="ph2">&lt;paramref name="T" /&gt;</ph> and the specified thread-safety mode.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="T" /&gt;</ph> の既定のコンストラクターと指定されたスレッド セーフ モードを使用する <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance describes the behavior when multiple threads try to initialize the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">スレッドの安全性モード、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>インスタンスを初期化するときに複数のスレッドの動作をについて説明します、<ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>A <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is created with this constructor does not cache exceptions.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>このコンス トラクターで作成されるインスタンスでは、例外はキャッシュされません。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">詳細については、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> クラスまたは <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> 列挙体の解説を参照してください。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</source>
          <target state="translated">次の例では、遅延オブジェクトの作成に競合する複数のスレッドをできるようにする遅延初期化子を作成するこのコンス トラクターの使用を示します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</source>
          <target state="translated">複数のスレッドが、インスタンスの作成に成功する可能性がありますが、すべてのスレッドが最初に作成されたインスタンスを使用します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`mode`</ph>), see the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">シングル スレッドのシナリオでこのコンス トラクターを使用する方法を示す例については (を指定する<ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`mode`</ph>) を参照してください、<ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`mode`</ph>), see the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph> constructor.</source>
          <target state="translated">このコンス トラクターを使用して、マルチ スレッド シナリオでの競合状態の代わりにロックを提供する方法を示す例については (を指定する<ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`mode`</ph>) を参照してください、<ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by any of several threads.</source>
          <target state="translated">例では、定義、<ph id="ph1">`LargeObject`</ph>複数のスレッドのいずれかによって遅れて初期化されるクラスです。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the <ph id="ph1">`LargeObject`</ph> class.</source>
          <target state="translated">コードの 3 つの主要セクションは、初期化子、実際の初期化とコンス トラクターの作成とのファイナライザーを示しています、<ph id="ph1">`LargeObject`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> object that performs lazy initialization of the <ph id="ph3">`LargeObject`</ph>:</source>
          <target state="translated">先頭に、<ph id="ph1">`Main`</ph>メソッドは、例では、作成、<ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>の限定的な初期化を実行するオブジェクト、 <ph id="ph3">`LargeObject`</ph>:</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The example creates and starts three threads that block on a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> object, so that the example can release the threads all at once.</source>
          <target state="translated">この例は、作成しをブロックする 3 つのスレッドを開始、<ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>オブジェクトの例が、スレッドをすべて同時に解放できるようにします。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>In the <ph id="ph1">`ThreadProc`</ph> method that's used by all three threads, calling the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property creates the <ph id="ph3">`LargeObject`</ph> instance:</source>
          <target state="translated"><ph id="ph1">`ThreadProc`</ph>メソッドの呼び出し、3 つすべてのスレッドによって使用される、<ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph>プロパティを作成、<ph id="ph3">`LargeObject`</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>Because the constructor for the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance specified <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, all three threads are allowed to create <ph id="ph3">`LargeObject`</ph> instances.</source>
          <target state="translated">のコンス トラクター、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>指定されたインスタンス<ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>、3 つすべてのスレッドを作成することが<ph id="ph3">`LargeObject`</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The example demonstrates this by displaying console messages in the constructor and in the finalizer of the <ph id="ph1">`LargeObject`</ph> class:</source>
          <target state="translated">例では、このコンス トラクターおよびのファイナライザーでは、コンソール メッセージを表示することによって、<ph id="ph1">`LargeObject`</ph>クラス。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>However, the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object ensures that only one instance is used by all threads.</source>
          <target state="translated">ただし、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>オブジェクトにより 1 つのインスタンスは、すべてのスレッドによって使用されます。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</source>
          <target state="translated">出力例を使用を示しています 3 つすべてのスレッド、同じインスタンス、およびも他の 2 つのインスタンスがガベージ コレクションによって再要求できることを示しています。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">簡略化のために、この例では <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> のグローバル インスタンスを使用して、すべてのメソッドは <ph id="ph2">`static`</ph> (Visual Basic の <ph id="ph3">`Shared`</ph>) です。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">これらは、遅延初期化を使用するための要件ではありません。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
          <source><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> contains an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> に無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The delegate that is invoked to produce the lazily initialized value when it is needed.</source>
          <target state="translated">必要に応じて、遅延初期化の値を生成するために呼び出されるデリゲート。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to make this instance usable concurrently by multiple threads; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to make this instance usable by only one thread at a time.</source>
          <target state="translated">このインスタンスを複数のスレッドで同時に使用できるようにする場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。このインスタンスを一度に 1 つのスレッドでしか使用できないようにする場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>When lazy initialization occurs, the specified initialization function and initialization mode are used.</source>
          <target state="translated">遅延初期化が発生すると、指定された初期化関数と初期化モードが使用されます。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance that is initialized with this constructor is <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> if <ph id="ph3">`isThreadSafe`</ph> is <ph id="ph4">`true`</ph>; otherwise, the mode is <ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">スレッドの安全性モード、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>このコンス トラクターで初期化されているインスタンスが<ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>場合<ph id="ph3">`isThreadSafe`</ph>は<ph id="ph4">`true`</ph>、それ以外のモードは<ph id="ph5">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The thread safety mode describes the behavior when multiple threads try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">複数のスレッドを初期化しようとするときにスレッド セーフ モードは動作について説明します、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>To specify the <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph> mode, use the <ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph> or <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph> constructor.</source>
          <target state="translated">指定する、<ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>モードを使用して、<ph id="ph2">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>または<ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Exceptions that are thrown by <ph id="ph1">`valueFactory`</ph> are cached.</source>
          <target state="translated">によってスローされる例外<ph id="ph1">`valueFactory`</ph>キャッシュされます。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">詳細については、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> クラスまたは <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> 列挙体の解説を参照してください。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</source>
          <target state="translated">次の例では、キャッシュ、シナリオで単一のスレッドで例外に限定的な初期化を提供するこのコンス トラクターの使用を示します。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>It also demonstrates the use of the  <ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%2A&gt;</ph> constructor (specifying <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> for <ph id="ph3">`mode`</ph>).</source>
          <target state="translated">使用についても示します、<ph id="ph1">&lt;xref:System.Lazy%601.%23ctor%2A&gt;</ph>コンス トラクター (を指定する<ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>の<ph id="ph3">`mode`</ph>)。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>To switch to that constructor, just change which constructor is commented out.</source>
          <target state="translated">そのコンス トラクターに切り替えるには、だけどのコンス トラクターをコメント アウトを変更します。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>For code that demonstrates how to use this constructor in multithreaded scenarios (specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`isThreadSafe`</ph>), see the example for the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph> constructor.</source>
          <target state="translated">マルチ スレッド シナリオでこのコンス トラクターを使用する方法を示すコードについて (を指定する<ph id="ph1">`true`</ph>の<ph id="ph2">`isThreadSafe`</ph>)、例を参照してください、<ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by one of several threads.</source>
          <target state="translated">この例では、複数あるスレッドのうちの 1 つによって遅れて初期化される <ph id="ph1">`LargeObject`</ph> クラスを定義します。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the <ph id="ph1">`LargeObject`</ph> class, which demonstrates exception caching.</source>
          <target state="translated">コードの 3 つの主要セクションが、実際の初期化とのコンス トラクターの初期化子の作成を示しています、<ph id="ph1">`LargeObject`</ph>クラスは、例外のキャッシュを示しています。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the thread-safe lazy initializer for <ph id="ph2">`LargeObject`</ph>:</source>
          <target state="translated"><ph id="ph1">`Main`</ph> メソッドの開始時に、この例では <ph id="ph2">`LargeObject`</ph> のスレッドセーフな遅延初期化子が作成されます。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>In the call to the constructor, the <ph id="ph1">`isThreadSafe`</ph> parameter is <ph id="ph2">`false`</ph>, so the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> is not thread safe.</source>
          <target state="translated">コンス トラクターの呼び出しで、<ph id="ph1">`isThreadSafe`</ph>パラメーターは<ph id="ph2">`false`</ph>ので、<ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph>はスレッド セーフであります。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Because it's not thread safe, the example calls the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property three times on the same thread:</source>
          <target state="translated">この例ではスレッド セーフではないため、 <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> 3 回、同じスレッドのプロパティ。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>In the constructor of the <ph id="ph1">`LargeObject`</ph> class, the third key section of code throws an exception the first time a <ph id="ph2">`LargeObject`</ph> instance is created, but thereafter allows instance creation to occur:</source>
          <target state="translated">コンス トラクターで、<ph id="ph1">`LargeObject`</ph>クラス、コードの 3 番目の主要セクションが最初に例外をスローする、<ph id="ph2">`LargeObject`</ph>インスタンスは作成されますが、これ以降発生するインスタンスの作成を許可します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>When the example is run, the first attempt to create an instance of <ph id="ph1">`LargeObject`</ph> fails, and the exception is caught.</source>
          <target state="translated">例では、実行時のインスタンスを作成する最初の試行<ph id="ph1">`LargeObject`</ph>は失敗し、例外をキャッチします。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>You might expect that the next attempt would succeed, but the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object has cached the exception.</source>
          <target state="translated">次の試行が成功すると思うかもしれませんが、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>オブジェクトが例外をキャッシュします。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>Because of this, all three attempts throw the exception.</source>
          <target state="translated">このためは、次の 3 つのすべての試行は、例外をスローします。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">簡略化のために、この例では <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> のグローバル インスタンスを使用して、すべてのメソッドは <ph id="ph2">`static`</ph> (Visual Basic の <ph id="ph3">`Shared`</ph>) です。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">これらは、遅延初期化を使用するための要件ではありません。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The delegate that is invoked to produce the lazily initialized value when it is needed.</source>
          <target state="translated">必要に応じて、遅延初期化の値を生成するために呼び出されるデリゲート。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>One of the enumeration values that specifies the thread safety mode.</source>
          <target state="translated">スレッド セーフ モードを指定する列挙値の 1 つ。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> class that uses the specified initialization function and thread-safety mode.</source>
          <target state="translated">指定された初期化関数とスレッド セーフ モードを使用する <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The thread safety mode of a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance describes the behavior when multiple threads try to initialize the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">スレッドの安全性モード、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>インスタンスを初期化するときに複数のスレッドの動作をについて説明します、<ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>Exceptions that are thrown by <ph id="ph1">`valueFactory`</ph> are cached, unless <ph id="ph2">`mode`</ph> is <ph id="ph3">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">によってスローされる例外<ph id="ph1">`valueFactory`</ph>はキャッシュされる場合を除き、<ph id="ph2">`mode`</ph>は<ph id="ph3">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">詳細については、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> クラスまたは <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType&gt;</ph> 列挙体の解説を参照してください。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</source>
          <target state="translated">次の例では、遅延オブジェクトの作成に競合する複数のスレッドをできるようにする遅延初期化子を作成するこのコンス トラクターの使用を示します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</source>
          <target state="translated">複数のスレッドが、インスタンスの作成に成功する可能性がありますが、すべてのスレッドが最初に作成されたインスタンスを使用します。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>In addition, the example demonstrates that exceptions are never cached when you specify <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</source>
          <target state="translated">さらに、この例を指定する場合の例外はキャッシュしないで<ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>遅れて作成された型の既定のコンス トラクターによって初期化が実行の代わりに、関数であっても、します。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`mode`</ph>), see the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">シングル スレッドのシナリオでこのコンス トラクターを使用する方法を示す例については (を指定する<ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`mode`</ph>) を参照してください、<ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Boolean%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`mode`</ph>), see the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph> constructor.</source>
          <target state="translated">このコンス トラクターを使用して、マルチ スレッド シナリオでの競合状態の代わりにロックを提供する方法を示す例については (を指定する<ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`mode`</ph>) を参照してください、<ph id="ph3">&lt;xref:System.Lazy%601.%23ctor&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The example defines a <ph id="ph1">`LargeObject`</ph> class that will be initialized lazily by any of several threads.</source>
          <target state="translated">例では、定義、<ph id="ph1">`LargeObject`</ph>複数のスレッドのいずれかによって遅れて初期化されるクラスです。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the <ph id="ph1">`LargeObject`</ph> class.</source>
          <target state="translated">コードの 4 つの主要なセクションは、初期化子、実際の初期化、初期化関数と、コンス トラクターの作成とのファイナライザーを示しています、<ph id="ph1">`LargeObject`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>At the beginning of the <ph id="ph1">`Main`</ph> method, the example creates the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> object that performs lazy initialization of the <ph id="ph3">`LargeObject`</ph>:</source>
          <target state="translated">先頭に、<ph id="ph1">`Main`</ph>メソッドは、例では、作成、<ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>の限定的な初期化を実行するオブジェクト、 <ph id="ph3">`LargeObject`</ph>:</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The lazy initializer uses a function to perform the initialization.</source>
          <target state="translated">遅延初期化子では、関数を使用して、初期化を実行します。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>In this case, a function is required because there is no default constructor for the <ph id="ph1">`LargeObject`</ph> class.</source>
          <target state="translated">この場合、関数は、必要な既定のコンス トラクターがないため、<ph id="ph1">`LargeObject`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The example creates and starts three threads that block on a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> object, so that the example can release the threads all at once.</source>
          <target state="translated">この例は、作成しをブロックする 3 つのスレッドを開始、<ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>オブジェクトの例が、スレッドをすべて同時に解放できるようにします。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>In the <ph id="ph1">`ThreadProc`</ph> method that's used by all three threads, calling the <ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property creates the <ph id="ph3">`LargeObject`</ph> instance:</source>
          <target state="translated"><ph id="ph1">`ThreadProc`</ph>メソッドの呼び出し、3 つすべてのスレッドによって使用される、<ph id="ph2">&lt;xref:System.Lazy%601.Value%2A&gt;</ph>プロパティを作成、<ph id="ph3">`LargeObject`</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>In the third key section of code, the lazy initialization function is called to create the <ph id="ph1">`LargeObject`</ph> instance.</source>
          <target state="translated">コードの 3 番目の主要セクションで、遅延初期化関数を作成する、<ph id="ph1">`LargeObject`</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The function throws an exception the first time it's called:</source>
          <target state="translated">関数が呼び出される最初の例外にスローされます。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>With any other <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode&gt;</ph> setting, an unhandled exception in the initialization function would be cached.</source>
          <target state="translated">その他の<ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode&gt;</ph>設定すると、初期化関数の未処理の例外はキャッシュされます。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>However, <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph> suppresses exception caching.</source>
          <target state="translated">ただし、<ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>例外のキャッシュを抑制します。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</source>
          <target state="translated">例の出力は、オブジェクトを初期化後の試行が成功したことを示します。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The exception message usually appears after messages indicating that other threads have successfully initialized the object.</source>
          <target state="translated">例外メッセージは、通常、他のスレッドでオブジェクトが正常に初期化したことを示すメッセージの後に表示されます。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>This is because of the delay introduced by throwing and catching the exception.</source>
          <target state="translated">これは、スローして、例外をキャッチによって導入された、遅延が原因です。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>Because the constructor for the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance specified <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, all three threads are allowed to create <ph id="ph3">`LargeObject`</ph> instances.</source>
          <target state="translated">のコンス トラクター、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>指定されたインスタンス<ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>、3 つすべてのスレッドを作成することが<ph id="ph3">`LargeObject`</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The example demonstrates this by displaying console messages in the constructor and in the finalizer of the <ph id="ph1">`LargeObject`</ph> class:</source>
          <target state="translated">例では、このコンス トラクターおよびのファイナライザーでは、コンソール メッセージを表示することによって、<ph id="ph1">`LargeObject`</ph>クラス。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>オブジェクトにより 1 つのインスタンスが (初期化関数が例外をスローするスレッド) を除くすべてのスレッドによって使用されます。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>The output from the example shows this.</source>
          <target state="translated">この例からの出力に示します。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>For simplicity, this example uses a global instance of <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>, and all the methods are <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic).</source>
          <target state="translated">簡略化のために、この例では <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> のグローバル インスタンスを使用して、すべてのメソッドは <ph id="ph2">`static`</ph> (Visual Basic の <ph id="ph3">`Shared`</ph>) です。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source>These are not requirements for the use of lazy initialization.</source>
          <target state="translated">これらは、遅延初期化を使用するための要件ではありません。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> contains an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="mode" /&gt;</ph> に無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
          <source><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="valueFactory" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.Lazy`1.IsValueCreated">
          <source>Gets a value that indicates whether a value has been created for this <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> インスタンスに対して値が作成されているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a value has been created for this <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Lazy`1" /&gt;</ph> インスタンスに対して値が作成されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>When lazy initialization occurs for a <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance, it may result in either a value being created or an exception being thrown.</source>
          <target state="translated">限定的な初期化が発生したとき、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>インスタンス、する可能性があります、値を作成中または例外がスローされます。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If an exception is thrown, subsequent behavior of the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance depends on whether exception caching is in effect.</source>
          <target state="translated">例外がスローされると、後の動作の場合、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>インスタンスは、有効では例外キャッシュするかどうかによって異なります。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>インスタンスの初期化関数を指定しないコンス トラクターを使用して作成し、例外のキャッシュは無効です。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>A subsequent attempt to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> might succeed, and after successful initialization the <ph id="ph2">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> property returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">初期化するために、後続の試行、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>成功可能性がありますと初期化が成功した後、<ph id="ph2">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph>プロパティから返される<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance was created with an initialization function (specified by the <ph id="ph2">`valueFactory`</ph> parameter of the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> constructor), then exception caching is controlled by the thread safety mode.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>初期化関数のインスタンスが作成された (によって指定された、<ph id="ph2">`valueFactory`</ph>のパラメーター、<ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph>コンス トラクター)、例外のキャッシュは、スレッドの安全性モードによって制御されます。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If the mode is <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>, there is no second chance to initialize the <ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">モードの場合<ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType&gt;</ph>または<ph id="ph2">&lt;xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType&gt;</ph>、初期化するために 2 つ目の可能性はありません、<ph id="ph3">&lt;xref:System.Lazy%601&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">場合は、例外が発生し、初期化関数でハンドルされていない、その例外はキャッシュされ、以降のアクセスの再スローされます、<ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>No value is created if an exception is thrown, so in such cases <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">例外がスローされた場合、それには、このような場合の値は作成されません<ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph>返します<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If the mode is <ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">モードの場合<ph id="ph1">&lt;xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType&gt;</ph>を正常に初期化関数 (または既定のコンス トラクター) を実行している最初のスレッドの値を作成する、<ph id="ph2">&lt;xref:System.Lazy%601&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>If the initialization function throws an exception on one thread, other threads can still try to initialize the <ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph> instance.</source>
          <target state="translated">増やせる場合は、初期化関数は、1 つのスレッドで例外をスロー、他のスレッドも初期化するために、<ph id="ph1">&lt;xref:System.Lazy%601&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.IsValueCreated">
          <source>Until the value is created, the <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">値が作成されるまで、<ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A&gt;</ph>プロパティから返される<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.ToString">
          <source>Creates and returns a string representation of the <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property for this instance.</source>
          <target state="translated">このインスタンスの <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> プロパティの文字列形式を作成して返します。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.ToString">
          <source>The result of calling the <ph id="ph1">&lt;see cref="M:System.Object.ToString" /&gt;</ph> method on the <ph id="ph2">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property for this instance, if the value has been created (that is, if the <ph id="ph3">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph> property returns <ph id="ph4">&lt;see langword="true" /&gt;</ph>).</source>
          <target state="translated">値が作成された (つまり、<ph id="ph1">&lt;see cref="M:System.Object.ToString" /&gt;</ph> プロパティが <ph id="ph4">&lt;see langword="true" /&gt;</ph> を返す) 場合は、このインスタンスの <ph id="ph2">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> プロパティに対して <ph id="ph3">&lt;see cref="P:System.Lazy`1.IsValueCreated" /&gt;</ph> メソッドを呼び出した結果。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.ToString">
          <source>Otherwise, a string indicating that the value has not been created.</source>
          <target state="translated">それ以外の場合は、値が作成されていないことを示す文字列です。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.ToString">
          <source>Calling this method does not cause initialization.</source>
          <target state="translated">このメソッドを呼び出すことも、初期化は行われません。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Lazy`1.ToString">
          <source>The <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph> property can be <ph id="ph2">`null`</ph> after lazy initialization if the factory method that was specified for the <ph id="ph3">`valueFactory`</ph> parameter of the <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>, <ph id="ph5">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>, or <ph id="ph6">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor returns <ph id="ph7">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Lazy%601.Value%2A?displayProperty=nameWithType&gt;</ph>プロパティを指定できます<ph id="ph2">`null`</ph>ファクトリ メソッドをした場合、遅延初期化の後に指定された、<ph id="ph3">`valueFactory`</ph>のパラメーター、 <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>、 <ph id="ph5">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>、または<ph id="ph6">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph>コンス トラクターを返します<ph id="ph7">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Lazy`1.ToString">
          <source>The <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> property is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> プロパティが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="P:System.Lazy`1.Value">
          <source>Gets the lazily initialized value of the current <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> インスタンスの遅延初期化された値を取得します。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.Value">
          <source>The lazily initialized value of the current <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> インスタンスの遅延初期化された値。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.Value">
          <source>If the <ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType&gt;</ph> property is <ph id="ph2">`false`</ph>, accessing the <ph id="ph3">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property forces initialization.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType&gt;</ph>プロパティは<ph id="ph2">`false`</ph>へのアクセス、<ph id="ph3">&lt;xref:System.Lazy%601.Value%2A&gt;</ph>プロパティ強制的に初期化します。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Lazy`1.Value">
          <source>In addition to the exceptions that are listed, the <ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph> property can throw any unhandled exception that is thrown by the factory method that was passed to the <ph id="ph2">`valueFactory`</ph> parameter of the <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>, <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>, or <ph id="ph5">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">記載されている例外に加え、<ph id="ph1">&lt;xref:System.Lazy%601.Value%2A&gt;</ph>プロパティに渡されたファクトリ メソッドによってスローされる未処理の例外をスロー、<ph id="ph2">`valueFactory`</ph>のパラメーター、 <ph id="ph3">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29&gt;</ph>、 <ph id="ph4">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29&gt;</ph>、または<ph id="ph5">&lt;xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="P:System.Lazy`1.Value">
          <source>The <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> インスタンスは、遅延初期化されている型の既定のコンストラクターを使用して初期化されており、コンストラクターに対するアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Lazy`1.Value">
          <source>The <ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Lazy`1" /&gt;</ph> インスタンスは、遅延初期化されている型の既定のコンストラクターを使用して初期化されており、この型にはパラメーターがない public コンストラクターがありません。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="P:System.Lazy`1.Value">
          <source>The initialization function tries to access <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> on this instance.</source>
          <target state="translated">初期化関数が、このインスタンスで <ph id="ph1">&lt;see cref="P:System.Lazy`1.Value" /&gt;</ph> へのアクセスを試行します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>