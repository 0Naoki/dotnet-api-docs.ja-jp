<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1fe040656ca9af07674a26a02d9bd1c32874d7b8" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57911253" /></Metadata><TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="5c49d-101">遅延初期化されるオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="5c49d-101">The type of object that is being lazily initialized.</span></span></typeparam>
    <summary><span data-ttu-id="5c49d-102">遅延初期化のサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-102">Provides support for lazy initialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c49d-103">遅延初期化を使用して、このような作成または実行は、プログラムの有効期間中に発生しない場合に特に、大規模またはリソースを消費するオブジェクトの作成や、リソースを消費するタスクの実行を延期します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="5c49d-104">インスタンスを作成する遅延初期化の準備として、<xref:System.Lazy%601>します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="5c49d-105">型引数、<xref:System.Lazy%601>を作成するオブジェクトを遅延初期化に使用オブジェクトの種類を指定します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="5c49d-106">使用して作成するコンス トラクター、<xref:System.Lazy%601>オブジェクトが初期化の特性を決定します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="5c49d-107">遅延初期化は、<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> プロパティへの初回のアクセス時に発生します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="5c49d-108">ほとんどの場合、コンス トラクターを選択することは、2 つの質問に対する回答に依存します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="5c49d-109">遅れて初期化されるオブジェクトは、複数のスレッドからアクセスされるでしょうか。</span><span class="sxs-lookup"><span data-stu-id="5c49d-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="5c49d-110">そうである場合、<xref:System.Lazy%601>オブジェクトを使用するとすべてのスレッドで作成可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5c49d-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="5c49d-111">既定の動作がスレッド セーフを作成するには単純なコンス トラクターのいずれかを使用することができます<xref:System.Lazy%601>オブジェクト、それにアクセスしようとしているスレッドの数に関係なく遅延インスタンス化されたオブジェクトの 1 つのインスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="5c49d-112">作成する、<xref:System.Lazy%601>スレッド セーフでないオブジェクトの場合は、スレッド セーフを含まないように指定することができるコンス トラクターを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5c49d-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="5c49d-113">作成、<xref:System.Lazy%601>遅れて初期化されるオブジェクトはスレッド セーフでオブジェクトは保護されません。</span><span class="sxs-lookup"><span data-stu-id="5c49d-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="5c49d-114">複数のスレッドが遅れて初期化されるオブジェクトにアクセスできる場合おく必要がありますプロパティとメソッドのアクセスをマルチ スレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="5c49d-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="5c49d-115">遅延初期化は、多くのコードを必要または遅れて初期化されるオブジェクトが既定のコンス トラクターにする必要があるし、例外をスローせず、あらゆる操作を実行しますか。</span><span class="sxs-lookup"><span data-stu-id="5c49d-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="5c49d-116">初期化コードを記述する必要がある場合、または例外を処理する必要がある場合は、ファクトリ メソッドを受け取るコンス トラクターのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="5c49d-117">ファクトリ メソッドでは、初期化コードを記述します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="5c49d-118">これら 2 つの要因に基づいて選択するにはコンス トラクターを次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="5c49d-119">オブジェクトがアクセスします。</span><span class="sxs-lookup"><span data-stu-id="5c49d-119">Object will be accessed by</span></span>|<span data-ttu-id="5c49d-120">初期化コードが必要ない場合 (既定のコンス トラクター) を使用して、</span><span class="sxs-lookup"><span data-stu-id="5c49d-120">If no initialization code is required (default constructor), use</span></span>|<span data-ttu-id="5c49d-121">初期化コードが必要な場合は、使用します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="5c49d-122">複数のスレッド</span><span class="sxs-lookup"><span data-stu-id="5c49d-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="5c49d-123">1 つのスレッド</span><span class="sxs-lookup"><span data-stu-id="5c49d-123">One thread</span></span>|<span data-ttu-id="5c49d-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> `isThreadSafe`設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="5c49d-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> `isThreadSafe`設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="5c49d-126">ラムダ式を使用すると、ファクトリ メソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="5c49d-127">これにより、1 か所ですべての初期化コードが保持されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="5c49d-128">ラムダ式は、遅れて初期化されるオブジェクトのコンス トラクターに渡す引数も含めて、コンテキストをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="5c49d-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="5c49d-129">**例外キャッシュ**ファクトリ メソッドを使用する場合、例外がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="5c49d-130">つまり、ファクトリ メソッドが、例外の最初の時間をスローした場合、スレッドにアクセスしようと、<xref:System.Lazy%601.Value%2A>のプロパティ、<xref:System.Lazy%601>オブジェクトのすべての後続の試行で同じ例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="5c49d-131">これにより、すべての呼び出し、<xref:System.Lazy%601.Value%2A>プロパティは同じ結果に、別のスレッドが異なる結果を取得する場合に生じる可能性のある微妙なエラーを回避できます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="5c49d-132"><xref:System.Lazy%601> 、実際の代わりに`T`をそれ以外の場合は初期化されている以前の時点でスタートアップ中に通常します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="5c49d-133">以前の時点のエラーでは、通常は致命的です。</span><span class="sxs-lookup"><span data-stu-id="5c49d-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="5c49d-134">回復可能なエラーが発生する可能性がある場合は、遅延初期化を使用していない場合と同様、(この例では、ファクトリ メソッド) で初期化ルーチンに再試行ロジックを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="5c49d-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren't using lazy initialization.</span></span>  
  
 <span data-ttu-id="5c49d-135">**ロックする代わりに**特定の状況でのオーバーヘッドを回避する可能性があります、<xref:System.Lazy%601>オブジェクトの既定のロック動作します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="5c49d-136">まれに、デッドロックの可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5c49d-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="5c49d-137">このような場合は、使用することができます、<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>または<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>コンス トラクターを指定して<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5c49d-138">これにより、 <xref:System.Lazy%601> 、スレッドを呼び出す場合、それぞれ複数のスレッドの遅れて初期化されるオブジェクトのコピーを作成するオブジェクト、<xref:System.Lazy%601.Value%2A>プロパティ同時にします。</span><span class="sxs-lookup"><span data-stu-id="5c49d-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="5c49d-139"><xref:System.Lazy%601>オブジェクトにより、すべてのスレッドが遅れて初期化されるオブジェクトの同じインスタンスを使用し、使用されていないインスタンスを破棄します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="5c49d-140">そのため、ロックのオーバーヘッドを軽減するのコストは、プログラムの作成し、負荷の高いオブジェクトの余分なコピーを破棄する場合がある場合がありますです。</span><span class="sxs-lookup"><span data-stu-id="5c49d-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="5c49d-141">ほとんどの場合でない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5c49d-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="5c49d-142">例では、<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>と<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>コンス トラクターは、この動作を示します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5c49d-143">指定すると<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>、ファクトリ メソッドを指定した場合でも、例外はキャッシュされないされます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="5c49d-144">**同等のコンス トラクター**の使用を有効にするだけでなく<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>、<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>と<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>コンス トラクターは、他のコンス トラクターの機能を実現できます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="5c49d-145">次の表では、同等の動作を生成するパラメーターの値を示します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="5c49d-146">作成する、<xref:System.Lazy%601>されるオブジェクト</span><span class="sxs-lookup"><span data-stu-id="5c49d-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="5c49d-147">コンス トラクターを持つ、 `LazyThreadSafetyMode` `mode`パラメーター設定`mode`に</span><span class="sxs-lookup"><span data-stu-id="5c49d-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="5c49d-148">ブール値を持つコンス トラクターの`isThreadSafe`パラメーター設定`isThreadSafe`に</span><span class="sxs-lookup"><span data-stu-id="5c49d-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="5c49d-149">スレッド セーフ パラメーターなしのコンス トラクター</span><span class="sxs-lookup"><span data-stu-id="5c49d-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="5c49d-150">完全スレッド セーフであります。使用がロックを 1 つのスレッドが値を初期化することを確認します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="5c49d-151">このようなすべてのコンス トラクターは、完全にスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="5c49d-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="5c49d-152">スレッド セーフでないです。</span><span class="sxs-lookup"><span data-stu-id="5c49d-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="5c49d-153">該当なし。</span><span class="sxs-lookup"><span data-stu-id="5c49d-153">Not applicable.</span></span>|  
|<span data-ttu-id="5c49d-154">完全スレッド セーフであります。値を初期化するためにスレッド競合します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="5c49d-155">該当なし。</span><span class="sxs-lookup"><span data-stu-id="5c49d-155">Not applicable.</span></span>|<span data-ttu-id="5c49d-156">該当なし。</span><span class="sxs-lookup"><span data-stu-id="5c49d-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="5c49d-157">**その他の機能**の使用については<xref:System.Lazy%601>、スレッド内静的フィールドを持つ、またはプロパティのバッキング ストアとしてを参照してください。[遅延初期化](~/docs/framework/performance/lazy-initialization.md)します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c49d-158">次の例では、使用、<xref:System.Lazy%601>複数のスレッドからのアクセス権を持つ遅延初期化を提供するクラス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5c49d-159">この例では、<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="5c49d-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="5c49d-160">使用にも示しますが、<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>コンス トラクター (を指定する`true`の`isThreadSafe`) と<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>コンス トラクター (を指定する<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>の`mode`)。</span><span class="sxs-lookup"><span data-stu-id="5c49d-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="5c49d-161">別のコンス トラクターを切り替えるだけどのコンス トラクターをコメント アウトを変更します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="5c49d-162">例外を示す例については、同じコンス トラクターを使用して、キャッシュを参照してください、<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="5c49d-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="5c49d-163">この例では、複数あるスレッドのうちの 1 つによって遅れて初期化される `LargeObject` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="5c49d-164">コードの 4 つの主要セクションが、初期化子、ファクトリ メソッド、実際の初期化のコンス トラクターの作成を示しています、`LargeObject`クラスは、オブジェクトが作成されたときにメッセージが表示されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="5c49d-165">`Main` メソッドの開始時に、この例では `LargeObject` のスレッドセーフな遅延初期化子が作成されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="5c49d-166">ファクトリ メソッドは、初期化を行うためのプレース ホルダーで、オブジェクトの作成を示しています。</span><span class="sxs-lookup"><span data-stu-id="5c49d-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="5c49d-167">次に示すように、最初の 2 つのコードのセクションでは、でしたラムダ関数を使用して組み合わせることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="5c49d-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="5c49d-168">例では、遅延初期化が発生する前に、不確定な期間が切れることを示すために一時停止します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="5c49d-169">押したときに、 **Enter**キー、例では、作成して 3 つのスレッドを開始します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="5c49d-170">`ThreadProc` 3 つのスレッドのすべての呼び出しで使用されるメソッド、<xref:System.Lazy%601.Value%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5c49d-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="5c49d-171">これは、最初に、`LargeObject`インスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="5c49d-172">コンス トラクター、`LargeObject`クラスは、コードの最後の主要セクションが含まれているメッセージが表示され、初期化中のスレッドの id を記録します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="5c49d-173">完全なコード リストの最後に、プログラムからの出力が表示されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="5c49d-174">簡略化のために、この例では <xref:System.Lazy%601> のグローバル インスタンスを使用して、すべてのメソッドは `static` (Visual Basic の `Shared`) です。</span><span class="sxs-lookup"><span data-stu-id="5c49d-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="5c49d-175">これらは、遅延初期化を使用するための要件ではありません。</span><span class="sxs-lookup"><span data-stu-id="5c49d-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="5c49d-176">既定ですべてのパブリックおよびプロテクト メンバーの<see cref="T:System.Lazy`1" />クラスはスレッド セーフであると、複数のスレッドから同時に使用される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5c49d-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span></span> <span data-ttu-id="5c49d-177">これらのスレッド セーフの保証は、必要に応じて、型のコンス トラクターにパラメーターを使用して、インスタンスごとに削除できます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span></span></threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="5c49d-178">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="5c49d-178">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5c49d-179"><see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5c49d-180"><see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-180">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="5c49d-181">遅延初期化が発生した場合、対象の型の既定のコンストラクターが使用されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-181">When lazy initialization occurs, the default constructor of the target type is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c49d-182">このコンス トラクターで作成されるインスタンスは、複数のスレッドから同時に使用される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5c49d-182">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="5c49d-183">スレッドの安全性モード、<xref:System.Lazy%601>このコンス トラクターで初期化されたインスタンスが<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-183">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5c49d-184">初期化しようとしている複数のスレッドとスレッドの安全性モードは、動作について説明します、<xref:System.Lazy%601>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-184">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="5c49d-185">A<xref:System.Lazy%601>このコンス トラクターで作成されたインスタンスには、例外をキャッシュしません。</span><span class="sxs-lookup"><span data-stu-id="5c49d-185">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="5c49d-186">詳細については、<xref:System.Lazy%601> クラスまたは <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列挙体の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5c49d-186">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c49d-187">次の例では、このコンス トラクターの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-187">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="5c49d-188">使用も示しています、<xref:System.Lazy%601.%23ctor%28System.Boolean%29>コンス トラクター (を指定する`true`の`isThreadSafe`) および<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>コンス トラクター (を指定する<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>の`mode`)。</span><span class="sxs-lookup"><span data-stu-id="5c49d-188">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="5c49d-189">別のコンス トラクターを切り替えるだけどのコンス トラクターをコメント アウトを変更します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-189">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="5c49d-190">この例では、複数あるスレッドのうちの 1 つによって遅れて初期化される `LargeObject` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-190">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="5c49d-191">このコード例での 2 つの主要な行は、初期化子と実際の初期化を作成します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-191">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="5c49d-192">`Main` メソッドの開始時に、この例では `LargeObject` のスレッドセーフな遅延初期化子が作成されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-192">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="5c49d-193">例を作成し、ブロックの 3 つのスレッドを開始、<xref:System.Threading.ManualResetEvent>オブジェクトの例が、スレッドをすべて同時に解放できるようにします。</span><span class="sxs-lookup"><span data-stu-id="5c49d-193">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="5c49d-194">`ThreadProc` 3 つのスレッドのすべての呼び出しで使用されるメソッド、<xref:System.Lazy%601.Value%2A>を取得するプロパティ、`LargeObject`インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-194">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="5c49d-195"><xref:System.Lazy%601>クラスは 1 つのスレッドが作成できるように、ロックを提供、`LargeObject`インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-195">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="5c49d-196">この例では、すべて、他のスレッドが同じインスタンスを取得することを示します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-196">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5c49d-197">簡略化のために、この例では <xref:System.Lazy%601> のグローバル インスタンスを使用して、すべてのメソッドは `static` (Visual Basic の `Shared`) です。</span><span class="sxs-lookup"><span data-stu-id="5c49d-197">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="5c49d-198">これらは、遅延初期化を使用するための要件ではありません。</span><span class="sxs-lookup"><span data-stu-id="5c49d-198">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="5c49d-199">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="5c49d-199">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe"><span data-ttu-id="5c49d-200">このインスタンスを複数のスレッドで同時に使用できるようにする場合は <see langword="true" />。インスタンスを一度に 1 つのスレッドでしか使用できないようにする場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5c49d-200"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="5c49d-201"><see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-201">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="5c49d-202">遅延初期化が発生した場合、対象の型の既定のコンストラクターと指定された初期化モードが使用されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-202">When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c49d-203">スレッドの安全性モード、<xref:System.Lazy%601>このコンス トラクターで初期化されたインスタンスが<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>場合`isThreadSafe`は`true`、それ以外のモードは<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-203">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5c49d-204">初期化しようとしている複数のスレッドとスレッドの安全性モードは、動作について説明します、<xref:System.Lazy%601>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-204">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="5c49d-205">指定する、<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>モードを使用して、<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>または<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="5c49d-205">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="5c49d-206">A<xref:System.Lazy%601>このコンス トラクターで作成されたインスタンスには、例外をキャッシュしません。</span><span class="sxs-lookup"><span data-stu-id="5c49d-206">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="5c49d-207">詳細については、<xref:System.Lazy%601> クラスまたは <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列挙体の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5c49d-207">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c49d-208">次の例では、スレッド セーフである、遅れて初期化されるオブジェクトに対するすべてのアクセスが同じスレッドで発生するシナリオではない遅延初期化子を作成するこのコンス トラクターの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-208">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="5c49d-209">使用にも示しますが、<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>コンス トラクター (を指定する<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>の`mode`します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-209">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="5c49d-210">別のコンス トラクターに切り替えると、同じコンス トラクターをコメント アウトを変更します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-210">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5c49d-211">マルチ スレッド シナリオでこのコンス トラクターを使用する方法を示すコードについて (を指定する`true`の`isThreadSafe`)、例をご覧ください、<xref:System.Lazy%601.%23ctor>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="5c49d-211">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="5c49d-212">例では、定義、`LargeObject`遅れて初期化されるクラス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-212">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="5c49d-213">`Main`メソッドの例は、作成、<xref:System.Lazy%601>インスタンスと、一時停止します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-213">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="5c49d-214">押したときに、 **」と入力**キー、例では、アクセス、<xref:System.Lazy%601.Value%2A>のプロパティ、<xref:System.Lazy%601>初期化が発生すると、インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-214">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="5c49d-215">コンス トラクター、`LargeObject`クラスには、コンソール メッセージが表示されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-215">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5c49d-216">簡略化のために、この例では <xref:System.Lazy%601> のグローバル インスタンスを使用して、すべてのメソッドは `static` (Visual Basic の `Shared`) です。</span><span class="sxs-lookup"><span data-stu-id="5c49d-216">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="5c49d-217">これらは、遅延初期化を使用するための要件ではありません。</span><span class="sxs-lookup"><span data-stu-id="5c49d-217">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="5c49d-218">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="5c49d-218">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="5c49d-219">必要時に遅延初期化される値を生成するために呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="5c49d-219">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <summary><span data-ttu-id="5c49d-220"><see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-220">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="5c49d-221">遅延初期化が発生した場合、指定された初期化関数が使用されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-221">When lazy initialization occurs, the specified initialization function is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c49d-222">このコンス トラクターで作成されるインスタンスは、複数のスレッドから同時に使用される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="5c49d-222">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="5c49d-223">スレッドの安全性モード、<xref:System.Lazy%601>このコンス トラクターで初期化されたインスタンスが<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-223">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5c49d-224">初期化しようとしている複数のスレッドとスレッドの安全性モードは、動作について説明します、<xref:System.Lazy%601>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-224">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="5c49d-225">によってスローされる例外`valueFactory`キャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-225">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="5c49d-226">詳細については、<xref:System.Lazy%601> クラスまたは <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列挙体の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5c49d-226">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c49d-227">次の例では、遅延初期化で例外キャッシュを提供するこのコンス トラクターの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-227">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="5c49d-228">使用にも示しますが、<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>コンス トラクター (を指定する`true`の`isThreadSafe`) と<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>コンス トラクター (を指定する<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>の`mode`)。</span><span class="sxs-lookup"><span data-stu-id="5c49d-228">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="5c49d-229">別のコンス トラクターを切り替えるだけどのコンス トラクターをコメント アウトを変更します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-229">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="5c49d-230">この例では、複数あるスレッドのうちの 1 つによって遅れて初期化される `LargeObject` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-230">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="5c49d-231">コードの 3 つの主要セクションが、初期化子、実際の初期化のコンス トラクターの作成を示しています、`LargeObject`クラスは、例外キャッシュを示します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-231">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="5c49d-232">`Main` メソッドの開始時に、この例では `LargeObject` のスレッドセーフな遅延初期化子が作成されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-232">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="5c49d-233">例では、作成し、次の 3 つのスレッドを開始します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-233">The example creates and starts three threads.</span></span> <span data-ttu-id="5c49d-234">`ThreadProc` 3 つのスレッドのすべての呼び出しで使用されるメソッド、<xref:System.Lazy%601.Value%2A>を取得するプロパティ、`LargeObject`インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-234">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="5c49d-235">コンス トラクター、`LargeObject`クラス、コードの 3 番目のキー セクションが最初に例外をスロー、`LargeObject`インスタンスが作成されますが、発生するインスタンスの作成は、その後。</span><span class="sxs-lookup"><span data-stu-id="5c49d-235">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="5c49d-236">例では、実行時のインスタンスを作成しようとしています。 最初のスレッド`LargeObject`失敗し、例外がキャッチされます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-236">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="5c49d-237">次のスレッドは、インスタンスの作成で正常に思うかもしれませんが、<xref:System.Lazy%601>オブジェクトには、例外がキャッシュされています。</span><span class="sxs-lookup"><span data-stu-id="5c49d-237">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="5c49d-238">このため、次の 3 つのすべてのスレッドは、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="5c49d-238">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5c49d-239">簡略化のために、この例では <xref:System.Lazy%601> のグローバル インスタンスを使用して、すべてのメソッドは `static` (Visual Basic の `Shared`) です。</span><span class="sxs-lookup"><span data-stu-id="5c49d-239">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="5c49d-240">これらは、遅延初期化を使用するための要件ではありません。</span><span class="sxs-lookup"><span data-stu-id="5c49d-240">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5c49d-241"><paramref name="valueFactory" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5c49d-241"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="5c49d-242">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="5c49d-242">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="5c49d-243">スレッド セーフ モードを指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="5c49d-243">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="5c49d-244"><paramref name="T" /> の既定のコンストラクターと指定されたスレッド セーフ モードを使用する <see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-244">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the default constructor of <paramref name="T" /> and the specified thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c49d-245">スレッドの安全性モード、<xref:System.Lazy%601>インスタンスを初期化しようとしている複数のスレッドと動作を示しています、<xref:System.Lazy%601>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-245">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="5c49d-246">A<xref:System.Lazy%601>このコンス トラクターで作成されたインスタンスには、例外をキャッシュしません。</span><span class="sxs-lookup"><span data-stu-id="5c49d-246">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="5c49d-247">詳細については、<xref:System.Lazy%601> クラスまたは <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列挙体の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5c49d-247">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c49d-248">次の例では、複数のスレッドが競合するオブジェクトの遅延作成を遅延初期化子を作成するこのコンス トラクターの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-248">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="5c49d-249">複数のスレッドが、インスタンスの作成に成功可能性がありますが、すべてのスレッドが最初に作成されたインスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-249">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5c49d-250">シングル スレッド シナリオでこのコンス トラクターを使用する方法を示す例については (を指定する<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>の`mode`) を参照してください、<xref:System.Lazy%601.%23ctor%28System.Boolean%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="5c49d-250">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="5c49d-251">このコンス トラクターを使用して、競合状態がマルチ スレッド シナリオではなく、ロックを提供する方法を示す例については (を指定する<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>の`mode`) を参照してください、<xref:System.Lazy%601.%23ctor>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="5c49d-251">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="5c49d-252">例では、定義、`LargeObject`クラスの複数のスレッドのいずれかによって遅れて初期化されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-252">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="5c49d-253">初期化子、実際の初期化とコンス トラクターの作成とファイナライザーのコードの 3 つの重要なセクションを示しています、`LargeObject`クラス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-253">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="5c49d-254">先頭に、`Main`メソッドの例は、作成、<xref:System.Lazy%601>の遅延初期化を実行するオブジェクト、 `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="5c49d-254">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="5c49d-255">例を作成し、ブロックの 3 つのスレッドを開始、<xref:System.Threading.ManualResetEvent>オブジェクトの例が、スレッドをすべて同時に解放できるようにします。</span><span class="sxs-lookup"><span data-stu-id="5c49d-255">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="5c49d-256">`ThreadProc`メソッドを呼び出す 3 つすべてのスレッドで使用される、<xref:System.Lazy%601.Value%2A>プロパティでは、`LargeObject`インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-256">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="5c49d-257">のコンス トラクター、<xref:System.Lazy%601>指定されたインスタンス<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>、3 つすべてのスレッドの作成を許可`LargeObject`インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-257">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="5c49d-258">例では、これを示します、コンス トラクターとファイナライザーのコンソール メッセージを表示することによって、`LargeObject`クラス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-258">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="5c49d-259">ただし、<xref:System.Lazy%601>オブジェクトにより 1 つのインスタンスは、すべてのスレッドによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-259">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="5c49d-260">例の出力は、次の 3 つのすべてのスレッドを使用して、同じインスタンスともその他の 2 つのインスタンスをガベージ コレクションによって解放できることを示しています、ことを示しています。</span><span class="sxs-lookup"><span data-stu-id="5c49d-260">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5c49d-261">簡略化のために、この例では <xref:System.Lazy%601> のグローバル インスタンスを使用して、すべてのメソッドは `static` (Visual Basic の `Shared`) です。</span><span class="sxs-lookup"><span data-stu-id="5c49d-261">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="5c49d-262">これらは、遅延初期化を使用するための要件ではありません。</span><span class="sxs-lookup"><span data-stu-id="5c49d-262">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5c49d-263"><paramref name="mode" /> に無効な値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="5c49d-263"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="5c49d-264">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="5c49d-264">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5c49d-265">使用される、事前に初期化された値。</span><span class="sxs-lookup"><span data-stu-id="5c49d-265">The preinitialized value to be used.</span></span></param>
        <summary><span data-ttu-id="5c49d-266">事前に初期化され、指定された値を使用する <see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-266">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses a preinitialized specified value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="5c49d-267">このコンス トラクターで作成されたインスタンスは同時に複数のスレッドで使用可能です。</span><span class="sxs-lookup"><span data-stu-id="5c49d-267">An instance created with this constructor is usable by multiple threads concurrently.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="5c49d-268">必要時に遅延初期化される値を生成するために呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="5c49d-268">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="isThreadSafe"><span data-ttu-id="5c49d-269">このインスタンスを複数のスレッドで同時に使用できるようにする場合は <see langword="true" />。このインスタンスを一度に 1 つのスレッドでしか使用できないようにする場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5c49d-269"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="5c49d-270"><see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-270">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="5c49d-271">遅延初期化が発生した場合、指定された初期化関数および初期化モードが使用されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-271">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c49d-272">スレッドの安全性モード、<xref:System.Lazy%601>このコンス トラクターで初期化されたインスタンスが<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>場合`isThreadSafe`は`true`、それ以外のモードは<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-272">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5c49d-273">初期化しようとしている複数のスレッドとスレッドの安全性モードは、動作について説明します、<xref:System.Lazy%601>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-273">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="5c49d-274">指定する、<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>モードを使用して、<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>または<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="5c49d-274">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="5c49d-275">によってスローされる例外`valueFactory`キャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-275">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="5c49d-276">詳細については、<xref:System.Lazy%601> クラスまたは <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列挙体の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5c49d-276">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c49d-277">次の例では、例外がキャッシュには、1 つのスレッドがあるシナリオで遅延初期化を提供するこのコンス トラクターの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-277">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="5c49d-278">使用にも示しますが、<xref:System.Lazy%601.%23ctor%2A>コンス トラクター (を指定する<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>の`mode`)。</span><span class="sxs-lookup"><span data-stu-id="5c49d-278">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="5c49d-279">そのコンス トラクターを切り替えるだけコンス トラクターをコメント アウトを変更します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-279">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5c49d-280">マルチ スレッド シナリオでこのコンス トラクターを使用する方法を示すコードについて (を指定する`true`の`isThreadSafe`)、例をご覧ください、<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="5c49d-280">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="5c49d-281">この例では、複数あるスレッドのうちの 1 つによって遅れて初期化される `LargeObject` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-281">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="5c49d-282">コードの 3 つの主要セクションが、初期化子、実際の初期化のコンス トラクターの作成を示しています、`LargeObject`クラスは、例外キャッシュを示します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-282">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="5c49d-283">`Main` メソッドの開始時に、この例では `LargeObject` のスレッドセーフな遅延初期化子が作成されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-283">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="5c49d-284">コンス トラクターの呼び出しで、`isThreadSafe`パラメーターが`false`であり、<xref:System.Lazy%601>安全なスレッドはありません。</span><span class="sxs-lookup"><span data-stu-id="5c49d-284">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="5c49d-285">例ではスレッド セーフではないため、 <xref:System.Lazy%601.Value%2A> 3 回、同じスレッドでのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="5c49d-285">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="5c49d-286">コンス トラクター、`LargeObject`クラス、コードの 3 番目のキー セクションが最初に例外をスロー、`LargeObject`インスタンスが作成されますが、発生するインスタンスの作成は、その後。</span><span class="sxs-lookup"><span data-stu-id="5c49d-286">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="5c49d-287">例では、実行時のインスタンスを作成する最初の試み`LargeObject`失敗し、例外がキャッチされます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-287">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="5c49d-288">次の試行が成功すると思うかもしれませんが、<xref:System.Lazy%601>オブジェクトが例外をキャッシュします。</span><span class="sxs-lookup"><span data-stu-id="5c49d-288">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="5c49d-289">このため、次の 3 つのすべての試行は、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="5c49d-289">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5c49d-290">簡略化のために、この例では <xref:System.Lazy%601> のグローバル インスタンスを使用して、すべてのメソッドは `static` (Visual Basic の `Shared`) です。</span><span class="sxs-lookup"><span data-stu-id="5c49d-290">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="5c49d-291">これらは、遅延初期化を使用するための要件ではありません。</span><span class="sxs-lookup"><span data-stu-id="5c49d-291">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5c49d-292"><paramref name="valueFactory" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5c49d-292"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="5c49d-293">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="5c49d-293">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="5c49d-294">必要時に遅延初期化される値を生成するために呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="5c49d-294">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="mode"><span data-ttu-id="5c49d-295">スレッド セーフ モードを指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="5c49d-295">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="5c49d-296">指定された初期化関数とスレッド セーフ モードを使用する <see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-296">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c49d-297">スレッドの安全性モード、<xref:System.Lazy%601>インスタンスを初期化しようとしている複数のスレッドと動作を示しています、<xref:System.Lazy%601>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-297">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="5c49d-298">によってスローされる例外`valueFactory`キャッシュされる場合を除き、`mode`は<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-298">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5c49d-299">詳細については、<xref:System.Lazy%601> クラスまたは <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列挙体の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5c49d-299">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c49d-300">次の例では、複数のスレッドが競合するオブジェクトの遅延作成を遅延初期化子を作成するこのコンス トラクターの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-300">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="5c49d-301">複数のスレッドが、インスタンスの作成に成功可能性がありますが、すべてのスレッドが最初に作成されたインスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-301">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="5c49d-302">さらに、例を示しますを指定するときに例外がキャッシュされない<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>は限定的に作成された型の既定のコンス トラクターで、初期化がの代わりに関数によって実行される場合でも、します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-302">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5c49d-303">シングル スレッド シナリオでこのコンス トラクターを使用する方法を示す例については (を指定する<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>の`mode`) を参照してください、<xref:System.Lazy%601.%23ctor%28System.Boolean%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="5c49d-303">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="5c49d-304">このコンス トラクターを使用して、競合状態がマルチ スレッド シナリオではなく、ロックを提供する方法を示す例については (を指定する<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>の`mode`) を参照してください、<xref:System.Lazy%601.%23ctor>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="5c49d-304">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="5c49d-305">例では、定義、`LargeObject`クラスの複数のスレッドのいずれかによって遅れて初期化されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-305">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="5c49d-306">初期化子、実際の初期化、初期化関数、および、コンス トラクターの作成とファイナライザーのコードの 4 つの重要なセクションを示しています、`LargeObject`クラス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-306">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="5c49d-307">先頭に、`Main`メソッドの例は、作成、<xref:System.Lazy%601>の遅延初期化を実行するオブジェクト、 `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="5c49d-307">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="5c49d-308">遅延初期化子では、関数を使用して、初期化を実行します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-308">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="5c49d-309">この場合、関数が必要なの既定のコンス トラクターはありません、`LargeObject`クラス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-309">In this case, a function is required because there is no default constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="5c49d-310">例を作成し、ブロックの 3 つのスレッドを開始、<xref:System.Threading.ManualResetEvent>オブジェクトの例が、スレッドをすべて同時に解放できるようにします。</span><span class="sxs-lookup"><span data-stu-id="5c49d-310">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="5c49d-311">`ThreadProc`メソッドを呼び出す 3 つすべてのスレッドで使用される、<xref:System.Lazy%601.Value%2A>プロパティでは、`LargeObject`インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-311">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="5c49d-312">遅延初期化関数の呼び出しを作成するコードの 3 番目のキーのセクションで、`LargeObject`インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-312">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="5c49d-313">関数が呼び出される例外は、最初にスローされます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-313">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="5c49d-314">その他の<xref:System.Threading.LazyThreadSafetyMode>設定すると、初期化関数で未処理の例外はキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-314">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="5c49d-315">ただし、<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>例外キャッシュを抑制します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-315">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="5c49d-316">例の出力では、オブジェクトを初期化する後続の試行が成功したことを示します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-316">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5c49d-317">通常、例外メッセージは、後は、他のスレッドがオブジェクトを正常に初期化があることを示すメッセージが表示されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-317">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="5c49d-318">これは、スローされると、例外をキャッチするで導入された、遅延が原因です。</span><span class="sxs-lookup"><span data-stu-id="5c49d-318">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="5c49d-319">のコンス トラクター、<xref:System.Lazy%601>指定されたインスタンス<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>、3 つすべてのスレッドの作成を許可`LargeObject`インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-319">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="5c49d-320">例では、これを示します、コンス トラクターとファイナライザーのコンソール メッセージを表示することによって、`LargeObject`クラス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-320">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="5c49d-321"><xref:System.Lazy%601>オブジェクトにより、スレッドの初期化関数が例外をスローします) (を除くすべてのスレッドによって 1 つのインスタンスが使用されるようになります。</span><span class="sxs-lookup"><span data-stu-id="5c49d-321">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="5c49d-322">この例の出力を示します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-322">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5c49d-323">簡略化のために、この例では <xref:System.Lazy%601> のグローバル インスタンスを使用して、すべてのメソッドは `static` (Visual Basic の `Shared`) です。</span><span class="sxs-lookup"><span data-stu-id="5c49d-323">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="5c49d-324">これらは、遅延初期化を使用するための要件ではありません。</span><span class="sxs-lookup"><span data-stu-id="5c49d-324">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5c49d-325"><paramref name="mode" /> に無効な値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="5c49d-325"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5c49d-326"><paramref name="valueFactory" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5c49d-326"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="5c49d-327">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="5c49d-327">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c49d-328">この <see cref="T:System.Lazy`1" /> インスタンスに対して値が作成されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-328">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="5c49d-329">この <see cref="T:System.Lazy`1" /> インスタンスに対して値が作成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5c49d-329"><see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c49d-330">遅延初期化のタイミング、<xref:System.Lazy%601>インスタンス、その可能性が作成されている値または例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-330">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="5c49d-331">例外がスローされると、以降の動作の場合、<xref:System.Lazy%601>インスタンスは、有効では例外キャッシュするかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="5c49d-331">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="5c49d-332">場合、<xref:System.Lazy%601>インスタンスが、初期化関数を指定していないコンス トラクターを使用して作成し、例外キャッシュが有効になっています。</span><span class="sxs-lookup"><span data-stu-id="5c49d-332">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="5c49d-333">初期化するために、後続の試行、<xref:System.Lazy%601>が成功したと初期化が成功した後、<xref:System.Lazy%601.IsValueCreated%2A>プロパティが返す`true`します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-333">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="5c49d-334">場合、<xref:System.Lazy%601>初期化関数を使用したインスタンスが作成された (で指定された、`valueFactory`のパラメーター、<xref:System.Lazy%601>コンス トラクター)、例外キャッシュは、スレッドの安全性モードによって制御されます。</span><span class="sxs-lookup"><span data-stu-id="5c49d-334">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="5c49d-335">モードの場合<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>または<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>、初期化するために 2 つ目の可能性はありません、<xref:System.Lazy%601>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-335">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="5c49d-336">例外が発生し、初期化関数で処理されないが、その例外はキャッシュされの後続アクセスで再度スローされます、<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5c49d-336">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="5c49d-337">例外がスローされた場合、それには、このような場合の値は作成されません<xref:System.Lazy%601.IsValueCreated%2A>返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-337">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="5c49d-338">モードの場合<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>を正常に初期化関数 (または既定のコンス トラクター) を実行する最初のスレッドの値を作成し、<xref:System.Lazy%601>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-338">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="5c49d-339">他のスレッドが初期化するために試すことができますが、初期化関数は、1 つのスレッドで例外をスローする場合、<xref:System.Lazy%601>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5c49d-339">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="5c49d-340">値が作成されるまで、<xref:System.Lazy%601.IsValueCreated%2A>プロパティが返す`false`します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-340">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="5c49d-341">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="5c49d-341">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5c49d-342">このインスタンスの <see cref="P:System.Lazy`1.Value" /> プロパティの文字列形式を作成して返します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-342">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span></span></summary>
        <returns><span data-ttu-id="5c49d-343">値が作成された (つまり、<see cref="M:System.Object.ToString" /> プロパティが <see langword="true" /> を返す) 場合は、このインスタンスの <see cref="P:System.Lazy`1.Value" /> プロパティに対して <see cref="P:System.Lazy`1.IsValueCreated" /> メソッドを呼び出した結果。</span><span class="sxs-lookup"><span data-stu-id="5c49d-343">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span></span> <span data-ttu-id="5c49d-344">それ以外の場合は、値が作成されなかったことを示す文字列。</span><span class="sxs-lookup"><span data-stu-id="5c49d-344">Otherwise, a string indicating that the value has not been created.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c49d-345">このメソッドを呼び出すことも、初期化をされません。</span><span class="sxs-lookup"><span data-stu-id="5c49d-345">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="5c49d-346"><xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>プロパティできる`null`ファクトリ メソッドをした場合、遅延初期化した後に指定された、`valueFactory`のパラメーター、 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>、 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>、または<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>コンス トラクターを返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-346">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="5c49d-347"><see cref="P:System.Lazy`1.Value" /> プロパティが <see langword="null" /> である。</span><span class="sxs-lookup"><span data-stu-id="5c49d-347">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5c49d-348">現在の <see cref="T:System.Lazy`1" /> インスタンスの遅延初期化された値を取得します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-348">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="5c49d-349">現在の <see cref="T:System.Lazy`1" /> インスタンスの遅延初期化された値。</span><span class="sxs-lookup"><span data-stu-id="5c49d-349">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c49d-350">場合、<xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType>プロパティは`false`へのアクセス、<xref:System.Lazy%601.Value%2A>プロパティ強制的に初期化します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-350">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="5c49d-351">記載されている例外だけでなく、<xref:System.Lazy%601.Value%2A>プロパティが、ファクトリ メソッドに渡されたによってスローされる未処理の例外をスロー、`valueFactory`のパラメーター、 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>、 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>、または<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="5c49d-351">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="5c49d-352"><see cref="T:System.Lazy`1" /> インスタンスは、遅延初期化されている型の既定のコンストラクターを使用して初期化されており、コンストラクターに対するアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="5c49d-352">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="5c49d-353"><see cref="T:System.Lazy`1" /> インスタンスは、遅延初期化されている型の既定のコンストラクターを使用して初期化されており、この型にはパラメーターがない public コンストラクターがありません。</span><span class="sxs-lookup"><span data-stu-id="5c49d-353">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5c49d-354">初期化関数が、このインスタンスで <see cref="P:System.Lazy`1.Value" /> へのアクセスを試行します。</span><span class="sxs-lookup"><span data-stu-id="5c49d-354">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="5c49d-355">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="5c49d-355">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>