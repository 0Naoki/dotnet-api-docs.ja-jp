<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a193eefa8afa38666768441022aa43617f7556d1" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70663824" /></Metadata><TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="db1fe-101">遅延初期化されるオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="db1fe-101">The type of object that is being lazily initialized.</span></span></typeparam>
    <summary><span data-ttu-id="db1fe-102">遅延初期化のサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-102">Provides support for lazy initialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db1fe-103">遅延初期化を使用すると、大量またはリソースを消費するオブジェクトの作成や、リソースを集中的に使用するタスクの実行を遅らせることができます。特に、プログラムの有効期間中にこのような作成や実行が行われない場合があります。</span><span class="sxs-lookup"><span data-stu-id="db1fe-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="db1fe-104">遅延初期化を準備するには、の<xref:System.Lazy%601>インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="db1fe-105">作成する<xref:System.Lazy%601>オブジェクトの型引数は、遅延を初期化するオブジェクトの型を指定します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="db1fe-106">オブジェクトの<xref:System.Lazy%601>作成に使用するコンストラクターによって、初期化の特性が決まります。</span><span class="sxs-lookup"><span data-stu-id="db1fe-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="db1fe-107">遅延初期化は、<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> プロパティへの初回のアクセス時に発生します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="db1fe-108">ほとんどの場合、コンストラクターの選択は、次の2つの質問に対する回答に依存します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="db1fe-109">遅延初期化されたオブジェクトには、複数のスレッドからアクセスしますか。</span><span class="sxs-lookup"><span data-stu-id="db1fe-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="db1fe-110">その場合は、 <xref:System.Lazy%601>オブジェクトによって任意のスレッドで作成される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="db1fe-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="db1fe-111">既定の動作がスレッドセーフ<xref:System.Lazy%601>オブジェクトを作成する単純なコンストラクターの1つを使用できます。これにより、遅延インスタンス化されたオブジェクトの1つのインスタンスだけが、そのオブジェクトにアクセスしようとするスレッドの数に関係なく作成されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="db1fe-112">スレッドセーフで<xref:System.Lazy%601>はないオブジェクトを作成するには、スレッドセーフを指定できないようにするコンストラクターを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="db1fe-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="db1fe-113">オブジェクトを<xref:System.Lazy%601>スレッドセーフにすると、遅延初期化オブジェクトは保護されません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="db1fe-114">遅延初期化されたオブジェクトに複数のスレッドがアクセスできる場合は、そのプロパティとメソッドを、マルチスレッドアクセスに対して安全にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="db1fe-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="db1fe-115">遅延初期化には多数のコードが必要です。また、遅延初期化オブジェクトには、必要なすべての処理を行うパラメーターなしのコンストラクターがあり、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a parameterless constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="db1fe-116">初期化コードを記述する必要がある場合、または例外を処理する必要がある場合は、ファクトリメソッドを受け取るコンストラクターのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="db1fe-117">ファクトリメソッドに初期化コードを記述します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="db1fe-118">次の表は、これらの2つの要因に基づいて、選択するコンストラクターを示しています。</span><span class="sxs-lookup"><span data-stu-id="db1fe-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="db1fe-119">オブジェクトにアクセスする</span><span class="sxs-lookup"><span data-stu-id="db1fe-119">Object will be accessed by</span></span>|<span data-ttu-id="db1fe-120">初期化コードが必要ない場合 (パラメーターなしのコンストラクター)、を使用します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-120">If no initialization code is required (parameterless constructor), use</span></span>|<span data-ttu-id="db1fe-121">初期化コードが必要な場合は、を使用します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="db1fe-122">複数のスレッド</span><span class="sxs-lookup"><span data-stu-id="db1fe-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="db1fe-123">1つのスレッド</span><span class="sxs-lookup"><span data-stu-id="db1fe-123">One thread</span></span>|<span data-ttu-id="db1fe-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29>が`isThreadSafe` に `false` 設定された。</span><span class="sxs-lookup"><span data-stu-id="db1fe-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="db1fe-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>が`isThreadSafe` に `false` 設定された。</span><span class="sxs-lookup"><span data-stu-id="db1fe-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="db1fe-126">ラムダ式を使用して、ファクトリメソッドを指定できます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="db1fe-127">これにより、すべての初期化コードが1つの場所に保持されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="db1fe-128">ラムダ式は、遅延初期化オブジェクトのコンストラクターに渡す引数を含め、コンテキストをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="db1fe-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="db1fe-129">**例外のキャッシュ**ファクトリメソッドを使用すると、例外がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="db1fe-130">つまり、スレッドが最初に<xref:System.Lazy%601.Value%2A> <xref:System.Lazy%601>オブジェクトのプロパティにアクセスしようとしたときにファクトリメソッドが例外をスローした場合、それ以降のすべての試行で同じ例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="db1fe-131">これにより、プロパティの<xref:System.Lazy%601.Value%2A>すべての呼び出しで同じ結果が生成されるため、異なるスレッドで異なる結果が得られる場合に発生する軽度のエラーを回避できます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="db1fe-132">は<xref:System.Lazy%601> 、以前の時点で`T`初期化されている (通常はスタートアップ時に) 実際のを表します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="db1fe-133">その前の時点でのエラーは、通常、致命的です。</span><span class="sxs-lookup"><span data-stu-id="db1fe-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="db1fe-134">回復可能なエラーが発生する可能性がある場合は、遅延初期化を使用していない場合と同様に、初期化ルーチン (この場合はファクトリメソッド) に再試行ロジックを作成することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="db1fe-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren't using lazy initialization.</span></span>  
  
 <span data-ttu-id="db1fe-135">**ロックの代替手段**場合によっては、 <xref:System.Lazy%601>オブジェクトの既定のロック動作のオーバーヘッドを回避する必要があります。</span><span class="sxs-lookup"><span data-stu-id="db1fe-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="db1fe-136">まれに、デッドロックが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="db1fe-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="db1fe-137">このような場合<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>は、コンストラクターまたは<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>コンストラクターを使用してを指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>できます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="db1fe-138">これにより<xref:System.Lazy%601> 、スレッドが同時にプロパティを<xref:System.Lazy%601.Value%2A>呼び出す場合に、オブジェクトは、複数のスレッドのそれぞれに、遅延初期化されたオブジェクトのコピーを作成できるようになります。</span><span class="sxs-lookup"><span data-stu-id="db1fe-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="db1fe-139">オブジェクト<xref:System.Lazy%601>は、すべてのスレッドが遅延初期化オブジェクトの同じインスタンスを使用し、使用されていないインスタンスを破棄することを保証します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="db1fe-140">したがって、ロックのオーバーヘッドを減らすコストは、プログラムが高価なオブジェクトの余分なコピーを作成して破棄することがあります。</span><span class="sxs-lookup"><span data-stu-id="db1fe-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="db1fe-141">ほとんどの場合、このことはほとんどありません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="db1fe-142">コンストラクター <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> と <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> コンストラクターの例では、この動作を示しています。</span><span class="sxs-lookup"><span data-stu-id="db1fe-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="db1fe-143">を指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>すると、ファクトリメソッドを指定した場合でも、例外はキャッシュされません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="db1fe-144">**同等のコンストラクター**<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>および <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> コンストラクターは、の使用を有効にするだけでなく、他のコンストラクターの機能を複製することもできます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="db1fe-145">次の表に、同等の動作を生成するパラメーター値を示します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="db1fe-146">オブジェクトを<xref:System.Lazy%601>作成するには</span><span class="sxs-lookup"><span data-stu-id="db1fe-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="db1fe-147">パラメーターを持つ`LazyThreadSafetyMode`コンストラクターの場合、を`mode`に設定します。 `mode`</span><span class="sxs-lookup"><span data-stu-id="db1fe-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="db1fe-148">ブール型`isThreadSafe`パラメーターを持つコンストラクターの場合、 `isThreadSafe`をに設定します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="db1fe-149">スレッドセーフパラメーターのないコンストラクターの場合</span><span class="sxs-lookup"><span data-stu-id="db1fe-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="db1fe-150">完全なスレッドセーフはロックを使用して、1つのスレッドだけが値を初期化するようにします。</span><span class="sxs-lookup"><span data-stu-id="db1fe-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="db1fe-151">このようなコンストラクターはすべて、完全にスレッドセーフです。</span><span class="sxs-lookup"><span data-stu-id="db1fe-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="db1fe-152">スレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="db1fe-153">該当なし。</span><span class="sxs-lookup"><span data-stu-id="db1fe-153">Not applicable.</span></span>|  
|<span data-ttu-id="db1fe-154">完全なスレッドセーフ値を初期化するスレッドの競合。</span><span class="sxs-lookup"><span data-stu-id="db1fe-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="db1fe-155">該当なし。</span><span class="sxs-lookup"><span data-stu-id="db1fe-155">Not applicable.</span></span>|<span data-ttu-id="db1fe-156">該当なし。</span><span class="sxs-lookup"><span data-stu-id="db1fe-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="db1fe-157">**その他の機能**スレッド静的フィールドでのの<xref:System.Lazy%601>使用、またはプロパティのバッキングストアとしてを使用する方法については、「[レイジー初期化](~/docs/framework/performance/lazy-initialization.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="db1fe-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="db1fe-158">次の例では、 <xref:System.Lazy%601>クラスを使用して、複数のスレッドからのアクセスで遅延初期化を行う方法を示します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="db1fe-159">この例では<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 、コンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="db1fe-160">また、 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>コンストラクター (の場合`isThreadSafe`はを指定`true` ) と<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>コンストラクター ( <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>の場合`mode`はを指定) の使用方法も示します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="db1fe-161">別のコンストラクターに切り替えるには、コメントアウトするコンストラクターを変更するだけです。</span><span class="sxs-lookup"><span data-stu-id="db1fe-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="db1fe-162">同じコンストラクターを使用した例外のキャッシュを示す例につい<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>ては、「コンストラクター」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="db1fe-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="db1fe-163">この例では、複数あるスレッドのうちの 1 つによって遅れて初期化される `LargeObject` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="db1fe-164">コードの4つの主要なセクションでは、初期化子、ファクトリメソッド、実際の初期化、およびオブジェクトが作成さ`LargeObject`れたときにメッセージを表示するクラスのコンストラクターを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="db1fe-165">`Main` メソッドの開始時に、この例では `LargeObject` のスレッドセーフな遅延初期化子が作成されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="db1fe-166">ファクトリメソッドは、さらに初期化するためのプレースホルダーを使用して、オブジェクトの作成を示します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="db1fe-167">次に示すように、ラムダ関数を使用すると、最初の2つのコードセクションを組み合わせることができます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="db1fe-168">この例では、遅延初期化が発生する前に、不確定な期間が経過する可能性があることを示すために一時停止します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="db1fe-169">**Enter キーを**押すと、この例では3つのスレッドを作成して開始します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="db1fe-170">3 `ThreadProc`つのすべてのスレッドで使用されるメソッド<xref:System.Lazy%601.Value%2A>は、プロパティを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="db1fe-171">これが初めて発生`LargeObject`したときに、インスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="db1fe-172">コードの最後の`LargeObject`キーセクションを含むクラスのコンストラクターは、メッセージを表示し、初期化中のスレッドの id を記録します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="db1fe-173">プログラムからの出力は、完全なコードリストの最後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="db1fe-174">簡略化のために、この例では <xref:System.Lazy%601> のグローバル インスタンスを使用して、すべてのメソッドは `static` (Visual Basic の `Shared`) です。</span><span class="sxs-lookup"><span data-stu-id="db1fe-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="db1fe-175">これらは、遅延初期化を使用するための要件ではありません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="db1fe-176">既定では、 <see cref="T:System.Lazy`1" />クラスのパブリックメンバーとプロテクトメンバーはすべてスレッドセーフであり、複数のスレッドから同時に使用することができます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span></span> <span data-ttu-id="db1fe-177">これらのスレッドセーフの保証は、必要に応じて、型のコンストラクターへのパラメーターを使用して、インスタンスごとに削除することができます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span></span></threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="db1fe-178">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="db1fe-178">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="db1fe-179"><see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="db1fe-180"><see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-180">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="db1fe-181">遅延初期化が発生した場合、ターゲットの型のパラメーターなしのコンストラクターが使用されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-181">When lazy initialization occurs, the parameterless constructor of the target type is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db1fe-182">このコンストラクターを使用して作成されたインスタンスは、複数のスレッドから同時に使用できます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-182">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="db1fe-183">このコンストラクターで初期化され<xref:System.Lazy%601>たインスタンスのスレッドセーフモードは<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="db1fe-183">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="db1fe-184">スレッドセーフモードでは、複数のスレッドが<xref:System.Lazy%601>インスタンスを初期化しようとしたときの動作が記述されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-184">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="db1fe-185">この<xref:System.Lazy%601>コンストラクターを使用して作成されたインスタンスは、例外をキャッシュしません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-185">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="db1fe-186">詳細については、<xref:System.Lazy%601> クラスまたは <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列挙体の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="db1fe-186">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="db1fe-187">このコンストラクターの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-187">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="db1fe-188">また、 <xref:System.Lazy%601.%23ctor%28System.Boolean%29>コンストラクター (では`isThreadSafe`を指定`true` ) と<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>コンストラクター ( <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>の場合`mode`はを指定) の使用方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="db1fe-188">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="db1fe-189">別のコンストラクターに切り替えるには、コメントアウトするコンストラクターを変更するだけです。</span><span class="sxs-lookup"><span data-stu-id="db1fe-189">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="db1fe-190">この例では、複数あるスレッドのうちの 1 つによって遅れて初期化される `LargeObject` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-190">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="db1fe-191">この例の2つの重要なコード行は、初期化子と実際の初期化を作成することです。</span><span class="sxs-lookup"><span data-stu-id="db1fe-191">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="db1fe-192">`Main` メソッドの開始時に、この例では `LargeObject` のスレッドセーフな遅延初期化子が作成されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-192">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="db1fe-193">この例では、 <xref:System.Threading.ManualResetEvent>オブジェクトでブロックされる3つのスレッドを作成して開始します。これにより、この例では、スレッドをすべて一度に解放できます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-193">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="db1fe-194">3 `ThreadProc`つのすべてのスレッドで使用されるメソッド<xref:System.Lazy%601.Value%2A>は、プロパティを`LargeObject`呼び出してインスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-194">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="db1fe-195">クラス<xref:System.Lazy%601>は、1つのスレッドのみがインスタンスの`LargeObject`作成を許可されるように、ロックを提供します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-195">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="db1fe-196">この例では、他のスレッドがすべて同じインスタンスを取得することを示しています。</span><span class="sxs-lookup"><span data-stu-id="db1fe-196">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="db1fe-197">簡略化のために、この例では <xref:System.Lazy%601> のグローバル インスタンスを使用して、すべてのメソッドは `static` (Visual Basic の `Shared`) です。</span><span class="sxs-lookup"><span data-stu-id="db1fe-197">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="db1fe-198">これらは、遅延初期化を使用するための要件ではありません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-198">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="db1fe-199">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="db1fe-199">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe"><span data-ttu-id="db1fe-200">このインスタンスを複数のスレッドで同時に使用できるようにする場合は <see langword="true" />。インスタンスを一度に 1 つのスレッドでしか使用できないようにする場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="db1fe-200"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="db1fe-201"><see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-201">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="db1fe-202">遅延初期化が発生した場合、ターゲットの型のパラメーターなしのコンストラクターと指定された初期化モードが使用されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-202">When lazy initialization occurs, the parameterless constructor of the target type and the specified initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db1fe-203">このコンストラクターで初期化される<xref:System.Lazy%601>インスタンスのスレッドセーフモードは、が<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>の`isThreadSafe` `true`場合はです。それ以外の<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>場合、モードはです。</span><span class="sxs-lookup"><span data-stu-id="db1fe-203">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="db1fe-204">スレッドセーフモードでは、複数のスレッドが<xref:System.Lazy%601>インスタンスを初期化しようとしたときの動作が記述されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-204">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="db1fe-205"><xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>モードを指定するに<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>は、コンストラクター <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>またはコンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-205">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="db1fe-206">この<xref:System.Lazy%601>コンストラクターを使用して作成されたインスタンスは、例外をキャッシュしません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-206">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="db1fe-207">詳細については、<xref:System.Lazy%601> クラスまたは <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列挙体の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="db1fe-207">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="db1fe-208">次の例では、このコンストラクターを使用して、遅延初期化されたオブジェクトへのすべてのアクセスが同じスレッドで発生するシナリオについて、スレッドセーフではないレイジー初期化子を作成しています。</span><span class="sxs-lookup"><span data-stu-id="db1fe-208">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="db1fe-209">また、 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>コンストラクターの使用方法も示します ( <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>を`mode`指定します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-209">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="db1fe-210">別のコンストラクターに切り替えるには、コメントアウトされているコンストラクターを変更するだけです。</span><span class="sxs-lookup"><span data-stu-id="db1fe-210">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="db1fe-211">このコンストラクターをマルチスレッドシナリオで使用する方法を示すコード ( `true`の`isThreadSafe`場合) につい<xref:System.Lazy%601.%23ctor>ては、コンストラクターの例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="db1fe-211">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="db1fe-212">この例では`LargeObject` 、遅延して初期化されるクラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-212">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="db1fe-213">メソッドでは、インスタンスを<xref:System.Lazy%601>作成して一時停止します。 `Main`</span><span class="sxs-lookup"><span data-stu-id="db1fe-213">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="db1fe-214">**Enter キーを**押すと、 <xref:System.Lazy%601.Value%2A> <xref:System.Lazy%601>インスタンスのプロパティにアクセスします。これにより、初期化が発生します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-214">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="db1fe-215">`LargeObject`クラスのコンストラクターは、コンソールメッセージを表示します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-215">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="db1fe-216">簡略化のために、この例では <xref:System.Lazy%601> のグローバル インスタンスを使用して、すべてのメソッドは `static` (Visual Basic の `Shared`) です。</span><span class="sxs-lookup"><span data-stu-id="db1fe-216">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="db1fe-217">これらは、遅延初期化を使用するための要件ではありません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-217">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="db1fe-218">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="db1fe-218">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="db1fe-219">必要時に遅延初期化される値を生成するために呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="db1fe-219">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <summary><span data-ttu-id="db1fe-220"><see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-220">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="db1fe-221">遅延初期化が発生した場合、指定された初期化関数が使用されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-221">When lazy initialization occurs, the specified initialization function is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db1fe-222">このコンストラクターを使用して作成されたインスタンスは、複数のスレッドから同時に使用できます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-222">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="db1fe-223">このコンストラクターで初期化され<xref:System.Lazy%601>たインスタンスのスレッドセーフモードは<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="db1fe-223">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="db1fe-224">スレッドセーフモードでは、複数のスレッドが<xref:System.Lazy%601>インスタンスを初期化しようとしたときの動作が記述されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-224">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="db1fe-225">によって`valueFactory`スローされた例外はキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-225">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="db1fe-226">詳細については、<xref:System.Lazy%601> クラスまたは <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列挙体の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="db1fe-226">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="db1fe-227">次の例では、このコンストラクターを使用して、例外キャッシュによるレイジー初期化を行う方法を示します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-227">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="db1fe-228">また、 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>コンストラクター (の場合`isThreadSafe`はを指定`true` ) と<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>コンストラクター ( <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>の場合`mode`はを指定) の使用方法も示します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-228">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="db1fe-229">別のコンストラクターに切り替えるには、コメントアウトするコンストラクターを変更するだけです。</span><span class="sxs-lookup"><span data-stu-id="db1fe-229">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="db1fe-230">この例では、複数あるスレッドのうちの 1 つによって遅れて初期化される `LargeObject` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-230">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="db1fe-231">コードの3つの重要なセクションは、初期化子の作成、実際の初期化、および`LargeObject`クラスのコンストラクターの作成を示しています。これは、例外のキャッシュを示しています。</span><span class="sxs-lookup"><span data-stu-id="db1fe-231">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="db1fe-232">`Main` メソッドの開始時に、この例では `LargeObject` のスレッドセーフな遅延初期化子が作成されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-232">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="db1fe-233">この例では、3つのスレッドを作成して開始します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-233">The example creates and starts three threads.</span></span> <span data-ttu-id="db1fe-234">3 `ThreadProc`つのすべてのスレッドで使用されるメソッド<xref:System.Lazy%601.Value%2A>は、プロパティを`LargeObject`呼び出してインスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-234">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="db1fe-235">`LargeObject`クラスのコンストラクターでは、コードの3番目のキーセクションが、 `LargeObject`インスタンスが最初に作成されたときに例外をスローしますが、その後インスタンスの作成が可能になります。</span><span class="sxs-lookup"><span data-stu-id="db1fe-235">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="db1fe-236">この例を実行すると、の`LargeObject`インスタンスを作成しようとする最初のスレッドが失敗し、例外がキャッチされます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-236">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="db1fe-237">次のスレッドによってインスタンスが正常に作成されても<xref:System.Lazy%601> 、オブジェクトによって例外がキャッシュされていることが予想される場合があります。</span><span class="sxs-lookup"><span data-stu-id="db1fe-237">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="db1fe-238">このため、3つのすべてのスレッドが例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="db1fe-238">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="db1fe-239">簡略化のために、この例では <xref:System.Lazy%601> のグローバル インスタンスを使用して、すべてのメソッドは `static` (Visual Basic の `Shared`) です。</span><span class="sxs-lookup"><span data-stu-id="db1fe-239">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="db1fe-240">これらは、遅延初期化を使用するための要件ではありません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-240">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="db1fe-241"><paramref name="valueFactory" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="db1fe-241"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="db1fe-242">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="db1fe-242">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="db1fe-243">スレッド セーフ モードを指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="db1fe-243">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="db1fe-244"><paramref name="T" /> のパラメーターなしのコンストラクターと指定されたスレッド セーフ モードを使用する <see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-244">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the parameterless constructor of <paramref name="T" /> and the specified thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db1fe-245"><xref:System.Lazy%601>インスタンスのスレッドセーフモードでは、複数のスレッドが<xref:System.Lazy%601>インスタンスを初期化しようとしたときの動作が記述されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-245">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="db1fe-246">この<xref:System.Lazy%601>コンストラクターを使用して作成されたインスタンスは、例外をキャッシュしません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-246">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="db1fe-247">詳細については、<xref:System.Lazy%601> クラスまたは <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列挙体の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="db1fe-247">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="db1fe-248">次の例では、このコンストラクターを使用して、複数のスレッドによるオブジェクトの作成を遅延させるレイジー初期化子を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-248">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="db1fe-249">インスタンスの作成には複数のスレッドが成功することがありますが、すべてのスレッドは最初に作成されたインスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-249">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="db1fe-250">シングルスレッドシナリオ<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> `mode`でこのコンストラクターを使用する方法を示す例については、「」を参照<xref:System.Lazy%601.%23ctor%28System.Boolean%29>してください。</span><span class="sxs-lookup"><span data-stu-id="db1fe-250">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="db1fe-251">このコンストラクターを使用してマルチスレッドシナリオ<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> `mode`で競合状態ではなくロックを提供する方法を示す例については<xref:System.Lazy%601.%23ctor> 、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="db1fe-251">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="db1fe-252">この例では`LargeObject` 、複数のスレッドのいずれかによって遅延的に初期化されるクラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-252">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="db1fe-253">コードの3つの重要なセクションでは、初期化子の作成、実際の初期化、および`LargeObject`クラスのコンストラクターとファイナライザーを示します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-253">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="db1fe-254">`Main`メソッドの先頭で、この例では、 `LargeObject`の<xref:System.Lazy%601>遅延初期化を実行するオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-254">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="db1fe-255">この例では、 <xref:System.Threading.ManualResetEvent>オブジェクトでブロックされる3つのスレッドを作成して開始します。これにより、この例では、スレッドをすべて一度に解放できます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-255">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="db1fe-256">3つのすべてのスレッドで使用される<xref:System.Lazy%601.Value%2A> `LargeObject` メソッドで、プロパティを呼び出すと、インスタンスが作成 `ThreadProc` されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-256">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="db1fe-257"><xref:System.Lazy%601>インスタンスのコンストラクターが指定さ<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>れているため、3つのすべて`LargeObject`のスレッドでインスタンスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-257">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="db1fe-258">この例では、 `LargeObject`クラスのコンストラクターとファイナライザーにコンソールメッセージを表示することによって、これを示します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-258">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="db1fe-259">ただし、オブジェクト<xref:System.Lazy%601>は、すべてのスレッドで使用されるインスタンスが1つだけであることを保証します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-259">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="db1fe-260">この例の出力は、3つのすべてのスレッドが同じインスタンスを使用しており、他の2つのインスタンスがガベージコレクションによって再利用できることを示しています。</span><span class="sxs-lookup"><span data-stu-id="db1fe-260">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="db1fe-261">簡略化のために、この例では <xref:System.Lazy%601> のグローバル インスタンスを使用して、すべてのメソッドは `static` (Visual Basic の `Shared`) です。</span><span class="sxs-lookup"><span data-stu-id="db1fe-261">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="db1fe-262">これらは、遅延初期化を使用するための要件ではありません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-262">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="db1fe-263"><paramref name="mode" /> に無効な値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="db1fe-263"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="db1fe-264">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="db1fe-264">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="db1fe-265">使用される、事前に初期化された値。</span><span class="sxs-lookup"><span data-stu-id="db1fe-265">The preinitialized value to be used.</span></span></param>
        <summary><span data-ttu-id="db1fe-266">事前に初期化され、指定された値を使用する <see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-266">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses a preinitialized specified value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="db1fe-267">このコンストラクターを使用して作成されたインスタンスは、複数のスレッドが同時に使用できます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-267">An instance created with this constructor is usable by multiple threads concurrently.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="db1fe-268">必要時に遅延初期化される値を生成するために呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="db1fe-268">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="isThreadSafe"><span data-ttu-id="db1fe-269">このインスタンスを複数のスレッドで同時に使用できるようにする場合は <see langword="true" />。このインスタンスを一度に 1 つのスレッドでしか使用できないようにする場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="db1fe-269"><see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span></span></param>
        <summary><span data-ttu-id="db1fe-270"><see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-270">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span></span> <span data-ttu-id="db1fe-271">遅延初期化が発生した場合、指定された初期化関数および初期化モードが使用されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-271">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db1fe-272">このコンストラクターで初期化される<xref:System.Lazy%601>インスタンスのスレッドセーフモードは、が<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>の`isThreadSafe` `true`場合はです。それ以外の<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>場合、モードはです。</span><span class="sxs-lookup"><span data-stu-id="db1fe-272">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="db1fe-273">スレッドセーフモードでは、複数のスレッドが<xref:System.Lazy%601>インスタンスを初期化しようとしたときの動作が記述されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-273">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="db1fe-274"><xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>モードを指定するに<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>は、コンストラクター <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>またはコンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-274">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="db1fe-275">によって`valueFactory`スローされた例外はキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-275">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="db1fe-276">詳細については、<xref:System.Lazy%601> クラスまたは <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列挙体の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="db1fe-276">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="db1fe-277">次の例では、単一のスレッドを使用するシナリオで、このコンストラクターを使用して、例外のキャッシュによるレイジー初期化を行う方法を示します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-277">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="db1fe-278">また、 <xref:System.Lazy%601.%23ctor%2A>コンストラクターの使用方法についても示し`mode`ます (を指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> )。</span><span class="sxs-lookup"><span data-stu-id="db1fe-278">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="db1fe-279">このコンストラクターに切り替えるには、コメントアウトされているコンストラクターを変更するだけです。</span><span class="sxs-lookup"><span data-stu-id="db1fe-279">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="db1fe-280">このコンストラクターをマルチスレッドシナリオで使用する方法を示すコード ( `true`の`isThreadSafe`場合) につい<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>ては、コンストラクターの例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="db1fe-280">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="db1fe-281">この例では、複数あるスレッドのうちの 1 つによって遅れて初期化される `LargeObject` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-281">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="db1fe-282">コードの3つの重要なセクションは、初期化子の作成、実際の初期化、および`LargeObject`クラスのコンストラクターの作成を示しています。これは、例外のキャッシュを示しています。</span><span class="sxs-lookup"><span data-stu-id="db1fe-282">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="db1fe-283">`Main` メソッドの開始時に、この例では `LargeObject` のスレッドセーフな遅延初期化子が作成されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-283">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="db1fe-284">コンストラクター `isThreadSafe`の呼び出しでは、パラメーターは`false`であるため<xref:System.Lazy%601> 、はスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-284">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="db1fe-285">この例では、スレッドセーフではないため<xref:System.Lazy%601.Value%2A> 、同じスレッドでプロパティを3回呼び出します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-285">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="db1fe-286">`LargeObject`クラスのコンストラクターでは、コードの3番目のキーセクションが、 `LargeObject`インスタンスが最初に作成されたときに例外をスローしますが、その後インスタンスの作成が可能になります。</span><span class="sxs-lookup"><span data-stu-id="db1fe-286">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="db1fe-287">この例を実行すると、の`LargeObject`インスタンスを初めて作成しようとして失敗し、例外がキャッチされます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-287">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="db1fe-288">次の試行は成功したと思われるかも<xref:System.Lazy%601>しれませんが、オブジェクトによって例外がキャッシュされています。</span><span class="sxs-lookup"><span data-stu-id="db1fe-288">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="db1fe-289">このため、3回すべての試行で例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-289">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="db1fe-290">簡略化のために、この例では <xref:System.Lazy%601> のグローバル インスタンスを使用して、すべてのメソッドは `static` (Visual Basic の `Shared`) です。</span><span class="sxs-lookup"><span data-stu-id="db1fe-290">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="db1fe-291">これらは、遅延初期化を使用するための要件ではありません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-291">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="db1fe-292"><paramref name="valueFactory" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="db1fe-292"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="db1fe-293">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="db1fe-293">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="valueFactory"><span data-ttu-id="db1fe-294">必要時に遅延初期化される値を生成するために呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="db1fe-294">The delegate that is invoked to produce the lazily initialized value when it is needed.</span></span></param>
        <param name="mode"><span data-ttu-id="db1fe-295">スレッド セーフ モードを指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="db1fe-295">One of the enumeration values that specifies the thread safety mode.</span></span></param>
        <summary><span data-ttu-id="db1fe-296">指定された初期化関数とスレッド セーフ モードを使用する <see cref="T:System.Lazy`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-296">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db1fe-297"><xref:System.Lazy%601>インスタンスのスレッドセーフモードでは、複数のスレッドが<xref:System.Lazy%601>インスタンスを初期化しようとしたときの動作が記述されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-297">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="db1fe-298">によって`valueFactory`スローされた例外は、 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>がの場合を除き`mode` 、キャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-298">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="db1fe-299">詳細については、<xref:System.Lazy%601> クラスまたは <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 列挙体の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="db1fe-299">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="db1fe-300">次の例では、このコンストラクターを使用して、複数のスレッドによるオブジェクトの作成を遅延させるレイジー初期化子を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-300">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="db1fe-301">インスタンスの作成には複数のスレッドが成功することがありますが、すべてのスレッドは最初に作成されたインスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-301">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="db1fe-302">また、この例では、指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>したときに例外がキャッシュされないことを示しています。これは、遅延作成型のパラメーターなしのコンストラクターではなく、関数によって初期化が実行される場合でも同様です。</span><span class="sxs-lookup"><span data-stu-id="db1fe-302">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the parameterless constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="db1fe-303">シングルスレッドシナリオ<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> `mode`でこのコンストラクターを使用する方法を示す例については、「」を参照<xref:System.Lazy%601.%23ctor%28System.Boolean%29>してください。</span><span class="sxs-lookup"><span data-stu-id="db1fe-303">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="db1fe-304">このコンストラクターを使用してマルチスレッドシナリオ<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> `mode`で競合状態ではなくロックを提供する方法を示す例については<xref:System.Lazy%601.%23ctor> 、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="db1fe-304">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="db1fe-305">この例では`LargeObject` 、複数のスレッドのいずれかによって遅延的に初期化されるクラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-305">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="db1fe-306">コードの4つの主要なセクションでは、初期化子、実際の初期化、初期化関数、および`LargeObject`クラスのコンストラクターとファイナライザーの作成について説明します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-306">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="db1fe-307">`Main`メソッドの先頭で、この例では、 `LargeObject`の<xref:System.Lazy%601>遅延初期化を実行するオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-307">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="db1fe-308">レイジー初期化子は、関数を使用して初期化を実行します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-308">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="db1fe-309">この場合、 `LargeObject`クラスのパラメーターなしのコンストラクターがないため、関数が必要です。</span><span class="sxs-lookup"><span data-stu-id="db1fe-309">In this case, a function is required because there is no parameterless constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="db1fe-310">この例では、 <xref:System.Threading.ManualResetEvent>オブジェクトでブロックされる3つのスレッドを作成して開始します。これにより、この例では、スレッドをすべて一度に解放できます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-310">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="db1fe-311">3つのすべてのスレッドで使用される<xref:System.Lazy%601.Value%2A> `LargeObject` メソッドで、プロパティを呼び出すと、インスタンスが作成 `ThreadProc` されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-311">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="db1fe-312">コードの3番目のキーセクションでは、遅延初期化関数を呼び出して`LargeObject`インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-312">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="db1fe-313">関数は、初めて呼び出されたときに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="db1fe-313">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="db1fe-314">その他の<xref:System.Threading.LazyThreadSafetyMode>設定では、初期化関数でハンドルされない例外がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-314">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="db1fe-315">ただし、 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>は例外のキャッシュを抑制します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-315">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="db1fe-316">この例の出力は、オブジェクトの初期化が成功したことを示しています。</span><span class="sxs-lookup"><span data-stu-id="db1fe-316">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="db1fe-317">通常、例外メッセージは、他のスレッドがオブジェクトを正常に初期化したことを示すメッセージの後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-317">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="db1fe-318">これは、例外のスローとキャッチによって発生する遅延に起因します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-318">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="db1fe-319"><xref:System.Lazy%601>インスタンスのコンストラクターが指定さ<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>れているため、3つのすべて`LargeObject`のスレッドでインスタンスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-319">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="db1fe-320">この例では、 `LargeObject`クラスのコンストラクターとファイナライザーにコンソールメッセージを表示することによって、これを示します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-320">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="db1fe-321">オブジェクト<xref:System.Lazy%601>は、すべてのスレッドで使用されるインスタンスが1つだけであることを保証します (初期化関数が例外をスローするスレッドを除く)。</span><span class="sxs-lookup"><span data-stu-id="db1fe-321">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="db1fe-322">この例の出力はこれを示しています。</span><span class="sxs-lookup"><span data-stu-id="db1fe-322">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="db1fe-323">簡略化のために、この例では <xref:System.Lazy%601> のグローバル インスタンスを使用して、すべてのメソッドは `static` (Visual Basic の `Shared`) です。</span><span class="sxs-lookup"><span data-stu-id="db1fe-323">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="db1fe-324">これらは、遅延初期化を使用するための要件ではありません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-324">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="db1fe-325"><paramref name="mode" /> に無効な値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="db1fe-325"><paramref name="mode" /> contains an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="db1fe-326"><paramref name="valueFactory" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="db1fe-326"><paramref name="valueFactory" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="db1fe-327">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="db1fe-327">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="db1fe-328">この <see cref="T:System.Lazy`1" /> インスタンスに対して値が作成されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-328">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="db1fe-329">この <see cref="T:System.Lazy`1" /> インスタンスに対して値が作成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="db1fe-329"><see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db1fe-330"><xref:System.Lazy%601>インスタンスに対して遅延初期化が発生すると、値が作成されるか、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-330">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="db1fe-331">例外がスローされた場合、 <xref:System.Lazy%601>インスタンスの後続の動作は、例外キャッシュが有効になっているかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="db1fe-331">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="db1fe-332">初期化関数を指定していないコンストラクターを使用してインスタンスが作成された場合、例外キャッシュは有効になりません。 <xref:System.Lazy%601></span><span class="sxs-lookup"><span data-stu-id="db1fe-332">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="db1fe-333">後続のの<xref:System.Lazy%601>初期化は成功する可能性があり、初期化が成功すると`true`、プロパティは<xref:System.Lazy%601.IsValueCreated%2A>を返します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-333">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="db1fe-334">インスタンスが初期化関数 ( <xref:System.Lazy%601>コンストラクターの`valueFactory`パラメーターで指定) を使用して作成されている場合、例外キャッシュはスレッドセーフモードによって制御されます。 <xref:System.Lazy%601></span><span class="sxs-lookup"><span data-stu-id="db1fe-334">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="db1fe-335">モードが<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>または<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>の場合、インスタンスを<xref:System.Lazy%601>初期化する機会はもうありません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-335">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="db1fe-336">例外が発生し、初期化関数でハンドルされない場合、その例外はキャッシュされ、その後<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>のプロパティのアクセス時に再スローされます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-336">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="db1fe-337">例外がスローされた場合は値が作成されない<xref:System.Lazy%601.IsValueCreated%2A>ため`false`、このような場合はが返されます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-337">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="db1fe-338">モードが<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>の場合、初期化関数 (またはパラメーターなしのコンストラクター) の実行に成功した最初のスレッドが、 <xref:System.Lazy%601>インスタンスの値を作成します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-338">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the parameterless constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="db1fe-339">初期化関数が1つのスレッドで例外をスローした場合でも、他の<xref:System.Lazy%601>スレッドはインスタンスの初期化を試みることができます。</span><span class="sxs-lookup"><span data-stu-id="db1fe-339">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="db1fe-340">値が作成されるまで、 <xref:System.Lazy%601.IsValueCreated%2A>プロパティは`false`を返します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-340">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="db1fe-341">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="db1fe-341">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="db1fe-342">このインスタンスの <see cref="P:System.Lazy`1.Value" /> プロパティの文字列形式を作成して返します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-342">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span></span></summary>
        <returns><span data-ttu-id="db1fe-343">値が作成された (つまり、<see cref="M:System.Object.ToString" /> プロパティが <see langword="true" /> を返す) 場合は、このインスタンスの <see cref="P:System.Lazy`1.Value" /> プロパティに対して <see cref="P:System.Lazy`1.IsValueCreated" /> メソッドを呼び出した結果。</span><span class="sxs-lookup"><span data-stu-id="db1fe-343">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span></span> <span data-ttu-id="db1fe-344">それ以外の場合は、値が作成されなかったことを示す文字列。</span><span class="sxs-lookup"><span data-stu-id="db1fe-344">Otherwise, a string indicating that the value has not been created.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db1fe-345">このメソッドを呼び出すと、初期化は行われません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-345">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="db1fe-346"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>、 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> `valueFactory` `null` `null` 、また <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> はコンストラクターのパラメーターに指定されたファクトリメソッドがを返す場合、プロパティは遅延初期化の後に設定できます。 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29></span><span class="sxs-lookup"><span data-stu-id="db1fe-346">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="db1fe-347"><see cref="P:System.Lazy`1.Value" /> プロパティが <see langword="null" /> である。</span><span class="sxs-lookup"><span data-stu-id="db1fe-347">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="db1fe-348">現在の <see cref="T:System.Lazy`1" /> インスタンスの遅延初期化された値を取得します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-348">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></summary>
        <value><span data-ttu-id="db1fe-349">現在の <see cref="T:System.Lazy`1" /> インスタンスの遅延初期化された値。</span><span class="sxs-lookup"><span data-stu-id="db1fe-349">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="db1fe-350">プロパティがの場合`false`、プロパティに<xref:System.Lazy%601.Value%2A>アクセスすると、強制的に初期化されます。 <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="db1fe-350">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="db1fe-351"><xref:System.Lazy%601.Value%2A>このプロパティは、一覧表示されている例外に加えて、 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>、 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>、または<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>の`valueFactory`パラメーターに渡されたファクトリメソッドによってスローされた未処理の例外をスローできます。コンストラクター.</span><span class="sxs-lookup"><span data-stu-id="db1fe-351">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="db1fe-352"><see cref="T:System.Lazy`1" /> インスタンスは、遅延初期化されている型のパラメーターなしのコンストラクターを使用して初期化されており、コンストラクターに対するアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-352">The <see cref="T:System.Lazy`1" /> instance is initialized to use the parameterless constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="db1fe-353"><see cref="T:System.Lazy`1" /> インスタンスは、遅延初期化されている型のパラメーターなしのコンストラクターを使用して初期化されており、この型にはパブリックのパラメーターのないコンストラクターがありません。</span><span class="sxs-lookup"><span data-stu-id="db1fe-353">The <see cref="T:System.Lazy`1" /> instance is initialized to use the parameterless constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="db1fe-354">初期化関数が、このインスタンスで <see cref="P:System.Lazy`1.Value" /> へのアクセスを試行します。</span><span class="sxs-lookup"><span data-stu-id="db1fe-354">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span></span></exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="db1fe-355">限定的な初期化</span><span class="sxs-lookup"><span data-stu-id="db1fe-355">Lazy Initialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
