<Type Name="Func&lt;T1,T2,T3,T4,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ff21adcbbc27f30b24f2d51c885e8492eac105ea" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46663807" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,in T4,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`5&lt;- T1, - T2, - T3, - T4, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`5" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, In T4, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3, T4 arg4);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'T3, 'T4, 'Result&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">
      <span data-ttu-id="07016-101">このデリゲートによってカプセル化されるメソッドの最初のパラメーターの型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="07016-101">The type of the first parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="T2">
      <span data-ttu-id="07016-102">このデリゲートによってカプセル化されるメソッドの 2 番目のパラメーターの型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="07016-102">The type of the second parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="T3">
      <span data-ttu-id="07016-103">このデリゲートによってカプセル化されるメソッドの 3 番目のパラメーターの型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="07016-103">The type of the third parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="T4">
      <span data-ttu-id="07016-104">このデリゲートによってカプセル化されるメソッドの 4 番目のパラメーターの型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="07016-104">The type of the fourth parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="TResult">
      <span data-ttu-id="07016-105">このデリゲートによってカプセル化されるメソッドの戻り値の型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="07016-105">The type of the return value of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <param name="arg1">
      <span data-ttu-id="07016-106">このデリゲートによってカプセル化されるメソッドの最初のパラメーター。</span>
      <span class="sxs-lookup">
        <span data-stu-id="07016-106">The first parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <param name="arg2">
      <span data-ttu-id="07016-107">このデリゲートによってカプセル化されるメソッドの 2 番目のパラメーター。</span>
      <span class="sxs-lookup">
        <span data-stu-id="07016-107">The second parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <param name="arg3">
      <span data-ttu-id="07016-108">このデリゲートによってカプセル化されるメソッドの 3 番目のパラメーター。</span>
      <span class="sxs-lookup">
        <span data-stu-id="07016-108">The third parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <param name="arg4">
      <span data-ttu-id="07016-109">このデリゲートによってカプセル化されるメソッドの 4 番目のパラメーター。</span>
      <span class="sxs-lookup">
        <span data-stu-id="07016-109">The fourth parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="07016-110">4 つのパラメーターを受け取って <typeparamref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="07016-110">Encapsulates a method that has four parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="07016-111">このデリゲートによってカプセル化されるメソッドの戻り値。</span>
      <span class="sxs-lookup">
        <span data-stu-id="07016-111">The return value of the method that this delegate encapsulates.</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07016-112">このデリゲートを使用して、カスタム デリゲートを明示的に宣言することがなく、パラメーターとして渡すことができるメソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="07016-112">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="07016-113">カプセル化されるメソッドは、このデリゲートで定義されているメソッド シグネチャに対応する必要があります。</span><span class="sxs-lookup"><span data-stu-id="07016-113">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="07016-114">つまり、カプセル化するメソッドがあり、いずれは、それを値によって渡される、4 つのパラメーターが必要な値を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="07016-114">This means that the encapsulated method must have four parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07016-115">4 つのパラメーターを返すメソッドを参照する`void`(として宣言されている Visual basic、または、`Sub`ではなくとして、 `Function`)、ジェネリックを使用して、<xref:System.Action%604>代わりにデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="07016-115">To reference a method that has four parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%604> delegate instead.</span></span>  
  
 <span data-ttu-id="07016-116">使用すると、<xref:System.Func%605>デリゲートがありませんを明示的に 4 つのパラメーターを持つメソッドをカプセル化するデリゲートを定義します。</span><span class="sxs-lookup"><span data-stu-id="07016-116">When you use the <xref:System.Func%605> delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters.</span></span> <span data-ttu-id="07016-117">たとえば、次のコードで明示的にという名前のジェネリック デリゲートが宣言`Searcher`への参照を割り当てると、<xref:System.String.IndexOf%2A>メソッドのデリゲートのインスタンスにします。</span><span class="sxs-lookup"><span data-stu-id="07016-117">For example, the following code explicitly declares a generic delegate named `Searcher` and assigns a reference to the <xref:System.String.IndexOf%2A> method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Delegate.cs#1)]
 [!code-vb[System.Func~5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="07016-118">次の例では、インスタンス化してこのコードを簡略化、<xref:System.Func%605>明示的に新しいデリゲートを定義して、名前付きメソッドをそこに割り当てる代わりにデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="07016-118">The following example simplifies this code by instantiating the <xref:System.Func%605> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~5#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Func5.cs#2)]
 [!code-vb[System.Func~5#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Func5.vb#2)]  
  
 <span data-ttu-id="07016-119">使用することができます、<xref:System.Func%605>次の例に示すように、c# の場合は、匿名メソッドを持つデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="07016-119">You can use the <xref:System.Func%605> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="07016-120">(匿名メソッドの概要については、次を参照してください[匿名メソッド](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)。</span><span class="sxs-lookup"><span data-stu-id="07016-120">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~5#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Anon.cs#3)]  
  
 <span data-ttu-id="07016-121">ラムダ式を割り当てることもできます、<xref:System.Func%605>デリゲート、次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="07016-121">You can also assign a lambda expression to a <xref:System.Func%605> delegate, as the following example illustrates.</span></span> <span data-ttu-id="07016-122">(ラムダ式の概要については、次を参照してください[ラムダ式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)と[ラムダ式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)。</span><span class="sxs-lookup"><span data-stu-id="07016-122">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~5#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~5/cs/Lambda.cs#4)]
 [!code-vb[System.Func~5#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~5/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="07016-123">ラムダ式の基になる型がジェネリックのいずれかの`Func`デリゲート。</span><span class="sxs-lookup"><span data-stu-id="07016-123">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="07016-124">これによりを明示的にデリゲートに割り当てることがなく、パラメーターとしてラムダ式を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="07016-124">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="07016-125">具体的には、ため、型の多くのメソッド、<xref:System.Linq>名前空間が`Func`パラメーターを渡すことができますこれらのメソッド、ラムダ式に明示的にインスタンス化せず、`Func`を委任します。</span><span class="sxs-lookup"><span data-stu-id="07016-125">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07016-126">次の例では、宣言して使用する方法、<xref:System.Func%603>を委任します。</span><span class="sxs-lookup"><span data-stu-id="07016-126">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="07016-127">この例で宣言、<xref:System.Func%603>変数代入を受け取るラムダ式と、<xref:System.String>値と<xref:System.Int32>パラメーターとして値。</span><span class="sxs-lookup"><span data-stu-id="07016-127">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="07016-128">ラムダ式から返される`true`場合の長さ、<xref:System.String>パラメーターがの値と等しく、<xref:System.Int32>パラメーター。</span><span class="sxs-lookup"><span data-stu-id="07016-128">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="07016-129">このメソッドをカプセル化するデリゲート、クエリ文字列の配列の文字列のフィルターで使用します。</span><span class="sxs-lookup"><span data-stu-id="07016-129">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">
      <span data-ttu-id="07016-130">ラムダ式 (C# プログラミング ガイド)</span>
      <span class="sxs-lookup">
        <span data-stu-id="07016-130">Lambda Expressions (C# Programming Guide)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">
      <span data-ttu-id="07016-131">ラムダ式</span>
      <span class="sxs-lookup">
        <span data-stu-id="07016-131">Lambda Expressions</span>
      </span>
    </related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">
      <span data-ttu-id="07016-132">デリゲート (C# プログラミング ガイド)</span>
      <span class="sxs-lookup">
        <span data-stu-id="07016-132">Delegates (C# Programming Guide)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">
      <span data-ttu-id="07016-133">Visual Basic でのデリゲート</span>
      <span class="sxs-lookup">
        <span data-stu-id="07016-133">Delegates in Visual Basic</span>
      </span>
    </related>
  </Docs>
</Type>