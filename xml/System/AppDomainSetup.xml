<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AppDomainSetup.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5de1a8d1ecd07f9f8d0291eb6d18e2d042042a9b2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de1a8d1ecd07f9f8d0291eb6d18e2d042042a9b2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.AppDomainSetup">
          <source>Represents assembly binding information that can be added to an instance of <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph> のインスタンスに追加できるアセンブリ バインディング情報を表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>Changing the properties of an <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> instance does not affect any existing <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">プロパティの変更、<ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph>インスタンスには影響しません、既存の<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>It can affect only the creation of a new <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>, when the <ph id="ph2">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> method is called with the <ph id="ph3">&lt;xref:System.AppDomainSetup&gt;</ph> instance as a parameter.</source>
          <target state="translated">新しいの作成のみを与えることが<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>、ときに、<ph id="ph2">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph>メソッドが呼び出された、<ph id="ph3">&lt;xref:System.AppDomainSetup&gt;</ph>をパラメーターとしてのインスタンス。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>This class implements the <ph id="ph1">&lt;xref:System.IAppDomainSetup&gt;</ph> interface.</source>
          <target state="translated">このクラスは、<ph id="ph1">&lt;xref:System.IAppDomainSetup&gt;</ph> インターフェイスを実装します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>The default value for the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph> property is false.</source>
          <target state="translated">既定値、<ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph>プロパティは false。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>This setting is unsafe for services.</source>
          <target state="translated">この設定は、サービスの安全ではありません。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>To help prevent services from downloading partially trusted code, set this property to true</source>
          <target state="translated">サービスが部分的に信頼されたコードをダウンロードするを防ぐためには、このプロパティを true に設定します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.AppDomainSetup">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.ActivationContext)">
          <source>The activation context to be used for an application domain.</source>
          <target state="translated">アプリケーション ドメインに使用されるアクティベーション コンテキスト。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.ActivationContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> class with the specified activation context to use for manifest-based activation of an application domain.</source>
          <target state="translated">アプリケーション ドメイン用に指定されたアクティベーション コンテキスト (マニフェストに基づくアクティベーションに使用される) で、<ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.#ctor(System.ActivationContext)">
          <source>The <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph> object specified for <ph id="ph2">`activationContext`</ph> is used to generate an <ph id="ph3">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> object containing information required to activate a new application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph>に指定されたオブジェクト<ph id="ph2">`activationContext`</ph>生成に使用される、<ph id="ph3">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph>新しいアプリケーション ドメインをアクティブ化するために必要な情報を含むオブジェクト。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.#ctor(System.ActivationContext)">
          <source>This <ph id="ph1">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> object can be accessed by using the <ph id="ph2">&lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt;</ph> property.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph>オブジェクトを使用してアクセスできる、<ph id="ph2">&lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.ActivationContext)">
          <source><ph id="ph1">&lt;paramref name="activationContext" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="activationContext" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)">
          <source>An object that specifies information required for the manifest-based activation of a new application domain.</source>
          <target state="translated">新しいアプリケーション ドメインの、マニフェストに基づくアクティベーションに必要な情報を指定するオブジェクト。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> class with the specified activation arguments required for manifest-based activation of an application domain.</source>
          <target state="translated">アプリケーション ドメイン用に指定されたアクティベーション引数 (マニフェストに基づくアクティベーションに使用される) で、<ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)">
          <source>The object specified for <ph id="ph1">`activationArguments`</ph> can be accessed by using the <ph id="ph2">&lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt;</ph> property.</source>
          <target state="translated">指定されたオブジェクト<ph id="ph1">`activationArguments`</ph>を使用してアクセスできる、<ph id="ph2">&lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)">
          <source><ph id="ph1">&lt;paramref name="activationArguments" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="activationArguments" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>Gets or sets data about the activation of an application domain.</source>
          <target state="translated">アプリケーション ドメインのアクティベーションに関するデータを取得または設定します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>An object that contains data about the activation of an application domain.</source>
          <target state="translated">アプリケーション ドメインのアクティベーションに関するデータを格納するオブジェクト。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>No exception is thrown if this property is set to <ph id="ph1">`null`</ph>.</source>
          <target state="translated">このプロパティ設定されている場合に例外がスローされません<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>The information provided by the <ph id="ph1">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> object supports manifest-based activation.</source>
          <target state="translated">によって提供される情報、<ph id="ph1">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph>オブジェクトは、マニフェストに基づくアクティベーションをサポートしています。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>The property is set to an <ph id="ph1">&lt;see cref="T:System.Runtime.Hosting.ActivationArguments" /&gt;</ph> object whose application identity does not match the application identity of the <ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> object returned by the <ph id="ph3">&lt;see cref="P:System.AppDomainSetup.ApplicationTrust" /&gt;</ph> property.</source>
          <target state="translated">プロパティは、<ph id="ph3">&lt;see cref="P:System.AppDomainSetup.ApplicationTrust" /&gt;</ph> プロパティから返される <ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> オブジェクトのアプリケーション ID とは一致しないアプリケーション ID の <ph id="ph1">&lt;see cref="T:System.Runtime.Hosting.ActivationArguments" /&gt;</ph> オブジェクトに設定されています。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>No exception is thrown if the <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ApplicationTrust" /&gt;</ph> property is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ApplicationTrust" /&gt;</ph> プロパティが <ph id="ph2">&lt;see langword="null" /&gt;</ph> の場合、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> delegate, which represents a callback method that is invoked when the application domain is initialized.</source>
          <target state="translated">アプリケーション ドメインの初期化時に呼び出されるコールバック メソッドを表す <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> デリゲートを取得または設定します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>A delegate that represents a callback method that is invoked when the application domain is initialized.</source>
          <target state="translated">アプリケーション ドメインの初期化時に呼び出されるコールバック メソッドを表すデリゲート。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>To pass information to the callback method, assign an array of strings to the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph> property.</source>
          <target state="translated">情報をコールバック メソッドに渡すために文字列の配列を割り当てる、<ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>The array is passed to the callback method each time an <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> is initialized.</source>
          <target state="translated">配列が毎回、コールバック メソッドに渡される、<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>が初期化されています。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>The callback method is executed in the context of the newly created application domain.</source>
          <target state="translated">コールバック メソッドは、新しく作成されたアプリケーション ドメインのコンテキストで実行されます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>The following example creates a child application domain named <ph id="ph1">`ChildDomain`</ph>, using an <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> object and evidence from the default application domain.</source>
          <target state="translated">次の例は、という名前の子アプリケーション ドメインを作成<ph id="ph1">`ChildDomain`</ph>を使用して、<ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph>オブジェクトおよび既定のアプリケーション ドメインからの証拠。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> property is set to the callback method <ph id="ph2">`AppDomainInit`</ph>, which is invoked when the child domain is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph>コールバック メソッドにプロパティが設定されている<ph id="ph2">`AppDomainInit`</ph>、子ドメインの初期化時にこれが呼び出されます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>The arguments for the callback method are placed in an array of strings, which is assigned to the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph> property.</source>
          <target state="translated">割り当てられた文字列の配列で、コールバック メソッドの引数を配置している、<ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>When the child domain is created, the callback method simply prints the strings.</source>
          <target state="translated">子ドメインが作成されると、コールバック メソッドの文字列が出力されます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>Gets or sets the arguments passed to the callback method represented by the <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> delegate.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> デリゲートが表すコールバック メソッドへの引数を取得または設定します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>The callback method is invoked when the application domain is initialized.</source>
          <target state="translated">コールバック メソッドは、アプリケーション ドメインの初期化時に呼び出されます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>An array of strings that is passed to the callback method represented by the <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> delegate, when the callback method is invoked during <ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph> initialization.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph> の初期化中、<ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> デリゲートが表すコールバック メソッドが呼び出されたとき、このコールバック メソッドに渡される文字列の配列。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>Use the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> property to specify a callback method that is invoked during <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> initialization.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph>中に呼び出されるコールバック メソッドを指定するプロパティ<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>初期化します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>If the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> property is not set, the array assigned to this property is not used.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph>プロパティが設定されていない場合、このプロパティに割り当てられている配列は使用されません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>The callback method is executed in the context of the newly created application domain.</source>
          <target state="translated">コールバック メソッドは、新しく作成されたアプリケーション ドメインのコンテキストで実行されます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>The following code example creates a child application domain named <ph id="ph1">`ChildDomain`</ph>, using an <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> object and evidence from the default application domain.</source>
          <target state="translated">次のコード例は、という名前の子アプリケーション ドメインを作成<ph id="ph1">`ChildDomain`</ph>を使用して、<ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph>オブジェクトおよび既定のアプリケーション ドメインからの証拠。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> property is set to the callback method <ph id="ph2">`AppDomainInit`</ph>, which is invoked when the child domain is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph>コールバック メソッドにプロパティが設定されている<ph id="ph2">`AppDomainInit`</ph>、子ドメインの初期化時にこれが呼び出されます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>The arguments for the callback method are placed in an array of strings, which is assigned to the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph> property.</source>
          <target state="translated">割り当てられた文字列の配列で、コールバック メソッドの引数を配置している、<ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>When the child domain is created, the callback method simply prints the strings.</source>
          <target state="translated">子ドメインが作成されると、コールバック メソッドの文字列が出力されます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>Gets or sets the display name of the assembly that provides the type of the application domain manager for application domains created using this <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> object.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> オブジェクトを使用して作成されたアプリケーション ドメインのアプリケーション ドメイン マネージャーの型を提供するアセンブリの表示名を取得または設定します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>The display name of the assembly that provides the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the application domain manager.</source>
          <target state="translated">アプリケーション ドメイン マネージャーの <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> を提供するアセンブリの表示名。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>To specify the type of the application domain manager, set both this property and the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainManagerType%2A&gt;</ph> property.</source>
          <target state="translated">アプリケーション ドメイン マネージャーの種類を指定するには、この両方のプロパティを設定し、<ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainManagerType%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>If either of these properties is not set, the other is ignored.</source>
          <target state="translated">これらのプロパティのいずれかが設定されていない場合、その他は無視されます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A?displayProperty=nameWithType&gt;</ph> method is called).</source>
          <target state="translated">アプリケーション ドメイン マネージャーが、親のアプリケーション ドメインと同じ型から作成された型が指定されていない場合 (元のアプリケーション ドメインは、<ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A?displayProperty=nameWithType&gt;</ph>メソッドが呼び出されます)。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>When the application domain is loaded, <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown if the assembly does not exist, or if the assembly does not contain the type specified by the <ph id="ph2">&lt;xref:System.AppDomainSetup.AppDomainManagerType%2A&gt;</ph> property.</source>
          <target state="translated">アプリケーション ドメインが読み込まれるときに<ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph>アセンブリが存在しない場合、またはアセンブリに指定された型が含まれていない場合にスローされますが、<ph id="ph2">&lt;xref:System.AppDomainSetup.AppDomainManagerType%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source><ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> is thrown if the assembly is found but the version information does not match.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> アセンブリが見つかりましたが、バージョン情報が一致しない場合にスローされます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>To set the application domain manager for the default application domain, use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>appDomainManagerAssembly&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept> and <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>appDomainManagerType&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept> elements in the <bpt id="p3">[</bpt><ph id="ph3">\&lt;</ph>runtime&gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of the application configuration file, or use the environment variables described in <ph id="ph4">&lt;xref:System.AppDomainManager&gt;</ph>.</source>
          <target state="translated">既定のアプリケーション ドメインのアプリケーション ドメイン マネージャーを設定するには、使用、 <bpt id="p1">[</bpt> <ph id="ph1">\&lt;</ph>appDomainManagerAssembly &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept>と<bpt id="p2">[</bpt> <ph id="ph2">\&lt;</ph>appDomainManagerType &gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept>内の要素、 <bpt id="p3">[</bpt><ph id="ph3">\&lt;</ph>ランタイム &gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept>アプリケーション構成ファイル、または環境変数に記載されている使用のセクション<ph id="ph4">&lt;xref:System.AppDomainManager&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>This feature requires the application to have full trust.</source>
          <target state="translated">この機能では、アプリケーションに完全信頼が必要です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>(For example, an application running on the desktop has full trust.) If the application does not have full trust, a <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown.</source>
          <target state="translated">(たとえば、デスクトップで実行されているアプリケーションが完全な信頼。)アプリケーションには、完全な信頼がない場合、<ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph>がスローされます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>The format of the assembly display name is given by the <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">アセンブリの表示名の形式である、<ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>Gets or sets the full name of the type that provides the application domain manager for application domains created using this <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> object.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> オブジェクトを使用して作成されたアプリケーション ドメインのアプリケーション ドメイン マネージャーを提供する型の完全名を取得または設定します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>The full name of the type, including the namespace.</source>
          <target state="translated">名前空間を含む、型の完全名。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>To specify the type of the application domain manager, set both this property and the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainManagerAssembly%2A&gt;</ph> property.</source>
          <target state="translated">アプリケーション ドメイン マネージャーの種類を指定するには、この両方のプロパティを設定し、<ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainManagerAssembly%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>If either of these properties is not set, the other is ignored.</source>
          <target state="translated">これらのプロパティのいずれかが設定されていない場合、その他は無視されます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A?displayProperty=nameWithType&gt;</ph> method is called).</source>
          <target state="translated">アプリケーション ドメイン マネージャーが、親のアプリケーション ドメインと同じ型から作成された型が指定されていない場合 (元のアプリケーション ドメインは、<ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A?displayProperty=nameWithType&gt;</ph>メソッドが呼び出されます)。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>When the application domain is loaded, <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown if the assembly specified by the <ph id="ph2">&lt;xref:System.AppDomainSetup.AppDomainManagerAssembly%2A&gt;</ph> property does not contain the type specified by this property.</source>
          <target state="translated">アプリケーション ドメインが読み込まれるときに<ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph>によってアセンブリが指定されている場合にスローされますが、<ph id="ph2">&lt;xref:System.AppDomainSetup.AppDomainManagerAssembly%2A&gt;</ph>プロパティにこのプロパティによって指定された型が含まれていません。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>To set the application domain manager for the default application domain, use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>appDomainManagerAssembly&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept> and <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>appDomainManagerType&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept> elements in the <bpt id="p3">[</bpt><ph id="ph3">\&lt;</ph>runtime&gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of the application configuration file, or use the environment variables described in <ph id="ph4">&lt;xref:System.AppDomainManager&gt;</ph>.</source>
          <target state="translated">既定のアプリケーション ドメインのアプリケーション ドメイン マネージャーを設定するには、使用、 <bpt id="p1">[</bpt> <ph id="ph1">\&lt;</ph>appDomainManagerAssembly &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept>と<bpt id="p2">[</bpt> <ph id="ph2">\&lt;</ph>appDomainManagerType &gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept>内の要素、 <bpt id="p3">[</bpt><ph id="ph3">\&lt;</ph>ランタイム &gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept>アプリケーション構成ファイル、または環境変数に記載されている使用のセクション<ph id="ph4">&lt;xref:System.AppDomainManager&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>This feature requires the application to have full trust.</source>
          <target state="translated">この機能では、アプリケーションに完全信頼が必要です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>(For example, an application running on the desktop has full trust.) If the application does not have full trust, a <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown.</source>
          <target state="translated">(たとえば、デスクトップで実行されているアプリケーションが完全な信頼。)アプリケーションには、完全な信頼がない場合、<ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph>がスローされます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>The format of the full name of a type is given by the <ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">型の完全名の形式である、<ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>Gets or sets the name of the directory containing the application.</source>
          <target state="translated">アプリケーションが格納されているディレクトリの名前を取得または設定します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>The name of the application base directory.</source>
          <target state="translated">アプリケーションのベース ディレクトリの名前。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>The application base directory is where the assembly manager begins probing for assemblies.</source>
          <target state="translated">アプリケーションの基本ディレクトリは、アセンブリ マネージャーがアセンブリのプローブを開始します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property can influence which permissions are granted to an application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>プロパティをアプリケーション ドメインにアクセス許可が付与されますに影響を与えることができます。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>For example, an application domain originating from the local computer normally receives full trust based on its location of origin.</source>
          <target state="translated">たとえば、通常、ローカル コンピューターから送信されたアプリケーション ドメインは、元の場所に基づいて完全に信頼を受け取ります。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>However, if the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property of that <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> is set to the full name of an intranet directory, the <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> setting restricts the permissions granted to the application domain to a LocalIntranet grant even though the application domain actually originates from the local computer.</source>
          <target state="translated">ただし場合、<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>プロパティの<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>、イントラネットのディレクトリの完全な名前に設定されている、<ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>設定する場合でも、アプリケーション ドメインは、ローカル コンピューターから実際にあなた LocalIntranet grant をアプリケーション ドメインに許可する権限が制限されます。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property to set the location where the assembly loader begins probing for assemblies to load into a new application domain.</source>
          <target state="translated">次の例で使用する方法、<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>アセンブリ ローダーが、新しいアプリケーション ドメインに読み込むアセンブリをプローブを開始位置を設定するプロパティです。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>You must ensure that the folder you specify exists.</source>
          <target state="translated">指定したフォルダーが存在することを確認する必要があります。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>for access to the path information.</source>
          <target state="translated">アクセス パス情報。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationName">
          <source>Gets or sets the name of the application.</source>
          <target state="translated">アプリケーションの名前を取得または設定します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The name of the application.</source>
          <target state="translated">アプリケーションの名前。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The following example shows how to set the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property when you create a new application domain.</source>
          <target state="translated">次の例は、設定する方法を示します、<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph>プロパティ、新しいアプリケーション ドメインを作成するときにします。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The example creates a new application domain, and then calls the <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph> method to load the example assembly into the new application domain and create an instance of the <ph id="ph2">`Worker`</ph> class.</source>
          <target state="translated">この例は、新しいアプリケーション ドメインを作成しを呼び出して、<ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph>を新しいアプリケーション ドメインにサンプル アセンブリを読み込んでのインスタンスを作成する方法、<ph id="ph2">`Worker`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The <ph id="ph1">`Worker`</ph> class inherits <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, so the example can use the proxy returned by <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph> to call the <ph id="ph4">`TestLoad`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Worker`</ph>クラスは継承<ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>例では、によって返されるプロキシを使用できるように、<ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph>を呼び出して、<ph id="ph4">`TestLoad`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The <ph id="ph1">`TestLoad`</ph> method loads an assembly that you specify.</source>
          <target state="translated"><ph id="ph1">`TestLoad`</ph>メソッドは、指定したアセンブリを読み込みます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>You must either specify a valid, fully qualified assembly name, or comment out the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.String%29&gt;</ph> method.</source>
          <target state="translated">必要があるため、有効な完全修飾アセンブリ名を指定するか、コメント アウト、<ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.String%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The <ph id="ph1">`TestLoad`</ph> method lists the assemblies that are loaded into the new application domain, showing that your specified assembly and the example assembly are loaded.</source>
          <target state="translated"><ph id="ph1">`TestLoad`</ph>メソッドには、指定したアセンブリとアセンブリが読み込まれることを示す、新しいアプリケーション ドメインに読み込まれるアセンブリが一覧表示されます。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The example uses the <ph id="ph1">&lt;xref:System.LoaderOptimizationAttribute&gt;</ph> attribute to tell the assembly loader how the application will share code across application domains.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.LoaderOptimizationAttribute&gt;</ph>属性へのアプリケーションがアプリケーション ドメイン間でコードを共有する方法をアセンブリ ローダーに通知します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>Gets or sets an object containing security and trust information.</source>
          <target state="translated">セキュリティ情報や信頼情報を格納するオブジェクトを取得または設定します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>An object that contains security and trust information.</source>
          <target state="translated">セキュリティ情報や信頼情報を格納するオブジェクト。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>This property is <ph id="ph1">`null`</ph> when the <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> is created.</source>
          <target state="translated">このプロパティは<ph id="ph1">`null`</ph>ときに、<ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph>を作成します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>Once changed, it cannot be reset to a null reference.</source>
          <target state="translated">変更されると、null 参照をリセットできません。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>The property is set to an <ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> object whose application identity does not match the application identity of the <ph id="ph2">&lt;see cref="T:System.Runtime.Hosting.ActivationArguments" /&gt;</ph> object returned by the <ph id="ph3">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> property.</source>
          <target state="translated">プロパティは、<ph id="ph3">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> プロパティから返される <ph id="ph2">&lt;see cref="T:System.Runtime.Hosting.ActivationArguments" /&gt;</ph> オブジェクトのアプリケーション ID とは一致しないアプリケーション ID の <ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> オブジェクトに設定されています。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>No exception is thrown if the <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> property is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> プロパティが <ph id="ph2">&lt;see langword="null" /&gt;</ph> の場合、例外はスローされません。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>The property is set to <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">プロパティが <ph id="ph1">&lt;see langword="null" /&gt;</ph> に設定されています。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.CachePath">
          <source>Gets or sets the name of an area specific to the application where files are shadow copied.</source>
          <target state="translated">ファイルがシャドウ コピーされる、そのアプリケーションに固有の領域の名前を取得または設定します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>The fully qualified name of the directory path and file name where files are shadow copied.</source>
          <target state="translated">ファイルのシャドウ コピー先のディレクトリ パスとファイル名から成る完全修飾名。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>In order for this property to have an effect, the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property must also be set.</source>
          <target state="translated">このプロパティを影響を与えるために、<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph>プロパティも設定する必要があります。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>If the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property is not set, the <ph id="ph2">&lt;xref:System.AppDomainSetup.CachePath%2A&gt;</ph> property is ignored and the shadow copy cache location defaults to the download cache.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph>プロパティが設定されていない、<ph id="ph2">&lt;xref:System.AppDomainSetup.CachePath%2A&gt;</ph>プロパティは無視され、シャドウ コピーのキャッシュの場所の既定値は、ダウンロード キャッシュします。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">シャドウ コピーの詳細については、次を参照してください。<bpt id="p1">[</bpt>アセンブリのシャドウ コピー<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>for access to the path information.</source>
          <target state="translated">アクセス パス情報。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>Gets or sets the name of the configuration file for an application domain.</source>
          <target state="translated">アプリケーション ドメインの構成ファイルの名前を取得または設定します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>The name of the configuration file.</source>
          <target state="translated">構成ファイルの名前。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>The configuration file describes the search rules and configuration data for the application domain.</source>
          <target state="translated">構成ファイルは、アプリケーション ドメインの構成データと検索の規則について説明します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>The host that creates the application domain is responsible for supplying this data because the meaningful values vary from situation to situation.</source>
          <target state="translated">アプリケーション ドメインを作成するホストは、意味のある値が状況によって異なるために、このデータを提供します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>For example, the configuration data for ASP.NET applications is stored for each application, site, and computer, while the configuration data for an executable is stored for each application, user, and computer.</source>
          <target state="translated">たとえば、各アプリケーション、ユーザー、およびコンピューターで実行可能ファイルの構成データが格納されている各アプリケーション、サイト、およびコンピューターの ASP.NET アプリケーションの構成データが格納されます。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>Only the host knows the specifics of the configuration data for a particular circumstance.</source>
          <target state="translated">ホストだけでは、構成データの特定の状況の詳細を認識します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>for access to the path information.</source>
          <target state="translated">アクセス パス情報。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>Specifies whether the application base path and private binary path are probed when searching for assemblies to load.</source>
          <target state="translated">読み込むアセンブリを検索する際に、アプリケーションのベース パスおよびプライベート バイナリ パスを調査対象から除外するかどうかを指定します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if probing is not allowed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">調査対象としない場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>If the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the value of the <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property is ignored.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph>プロパティは<ph id="ph2">`true`</ph>の値、<ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>プロパティは無視されます。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>That is, no assemblies are probed for in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property.</source>
          <target state="translated">つまり、アセンブリがプローブされますないので指定されたディレクトリで、<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>In addition, the values of the <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPathProbe%2A&gt;</ph> property are ignored.</source>
          <target state="translated">さらの値、<ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>プロパティおよび<ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPathProbe%2A&gt;</ph>プロパティは無視されます。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>No assemblies are probed for in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> property.</source>
          <target state="translated">指定したディレクトリ内のアセンブリがプローブされますなし、<ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph> property provides an additional layer of control over the loading process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph>プロパティは、読み込みプロセス制御の追加レイヤーを提供します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>In the normal assembly loading sequence, the application base is probed before the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType&gt;</ph> event is raised.</source>
          <target state="translated">通常のアセンブリ読み込みの前に、アプリケーション ベースがプローブ、<ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType&gt;</ph>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>However, some applications might need to load assemblies from an OLE compound file within a document, or from a unique known location that is neither in the global assembly cache nor in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> properties.</source>
          <target state="translated">ただし、一部のアプリケーションは、ドキュメント内の OLE 複合ファイルまたはグローバル アセンブリ キャッシュにも、によって指定されたディレクトリで、一意な既知の場所からアセンブリを読み込む必要があります、<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>Such applications can use the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph> property to avoid the delay caused by normal probing, and to avoid loading copies of the necessary assembly that might be located in the normal probing paths.</source>
          <target state="translated">このようなアプリケーションを使用して、<ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph>プロパティ標準の調査、による遅延を回避して、通常のプローブ パスに存在する可能性があるために必要なアセンブリのコピーが読み込まれないようにします。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DisallowBindingRedirects">
          <source>Gets or sets a value that indicates whether an application domain allows assembly binding redirection.</source>
          <target state="translated">アプリケーション ドメインでアセンブリ バインディング リダイレクトを使用できるかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowBindingRedirects">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if redirection of assemblies is not allowed; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is allowed.</source>
          <target state="translated">アセンブリのリダイレクトを使用できない場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>、使用できる場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowBindingRedirects">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowBindingRedirects%2A&gt;</ph> property is designed to be used by services and server applications where assembly binding redirection is not part of the application scenario.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowBindingRedirects%2A&gt;</ph>プロパティは、アセンブリ バインド リダイレクトがアプリケーションのシナリオの一部ではないサービスとサーバー アプリケーションで使用するように設計されています。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source>Gets or sets a value that indicates whether HTTP download of assemblies is allowed for an application domain.</source>
          <target state="translated">アプリケーション ドメインでアセンブリの HTTP ダウンロードを使用できるかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if HTTP download of assemblies is not allowed; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is allowed.</source>
          <target state="translated">アセンブリの HTTP ダウンロードを使用できない場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。使用できる場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph> property is designed to be used by services and server applications where downloading code from an intranet or the Internet is not part of the application scenario.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph>プロパティが、イントラネットまたはインターネットからダウンロードするコードがアプリケーションのシナリオの一部ではないサービスとサーバー アプリケーションで使用するように設計されています。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source>The default value for the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph> property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">既定値、<ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph>プロパティは<ph id="ph2">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source>This setting is unsafe for services.</source>
          <target state="translated">この設定は、サービスの安全ではありません。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source>To help prevent services from downloading partially trusted code, set this property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">サービスが部分的に信頼されたコードをダウンロードするを防ぐためには、このプロパティを設定<ph id="ph1">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source>Gets or sets a value that indicates whether the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>publisherPolicy<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/publisherpolicy-element.md)</ept> section of the configuration file is applied to an application domain.</source>
          <target state="translated">構成ファイルの <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>publisherPolicy<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/publisherpolicy-element.md)</ept> セクションをアプリケーション ドメインに適用するかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="&amp;lt;publisherPolicy&amp;gt;" /&gt;</ph> section of the configuration file for an application domain is ignored; <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the declared publisher policy is honored.</source>
          <target state="translated">アプリケーション ドメインの構成ファイルの <ph id="ph2">&lt;see langword="&amp;lt;publisherPolicy&amp;gt;" /&gt;</ph> セクションを無視する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。宣言された発行元ポリシーを有効とする場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowPublisherPolicy%2A&gt;</ph> property specifically applies to a Web application that is loaded locally.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowPublisherPolicy%2A&gt;</ph>具体的には、プロパティはローカルで読み込まれている Web アプリケーションに適用されます。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source>Use this property to help prevent a malicious attempt to execute an unsafe Web application in safe mode.</source>
          <target state="translated">セーフ モードで、安全でない Web アプリケーションを実行するのに悪意のある試みを防止するのにには、このプロパティを使用します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source>For more information about bypassing publisher policy, see the <bpt id="p1">[</bpt>Redirecting Assembly Versions<ept id="p1">](~/docs/framework/configure-apps/redirect-assembly-versions.md)</ept> topic.</source>
          <target state="translated">発行者ポリシーの省略の詳細については、次を参照してください。、<bpt id="p1">[</bpt>アセンブリ バージョンのリダイレクト<ept id="p1">](~/docs/framework/configure-apps/redirect-assembly-versions.md)</ept>トピックです。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source>For more information about safe mode, see the "Examining the Configuration Files" section of the <bpt id="p1">[</bpt>How the Runtime Locates Assemblies<ept id="p1">](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md)</ept> topic.</source>
          <target state="translated">セーフ モードの詳細については、の「構成ファイルを調べて、」を参照してください、<bpt id="p1">[</bpt>ランタイムがアセンブリを検索する方法<ept id="p1">](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md)</ept>トピックです。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Gets or sets the base directory where the directory for dynamically generated files is located.</source>
          <target state="translated">動的に生成されたファイルが格納されるディレクトリのベース ディレクトリを取得または設定します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The directory where the <ph id="ph1">&lt;see cref="P:System.AppDomain.DynamicDirectory" /&gt;</ph> is located.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.AppDomain.DynamicDirectory" /&gt;</ph> が置かれているディレクトリ。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The return value of this property is different from the value assigned.</source>
          <target state="translated">このプロパティの戻り値は、割り当てられた値とは異なります。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Use this property to set the base directory where the dynamic directory for the new application domain will be located.</source>
          <target state="translated">このプロパティを使用すると、新しいアプリケーション ドメインの動的なディレクトリが配置される、ベース ディレクトリを設定できます。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>When code in the new application domain loads an assembly, assembly resolution looks first in the normal probing paths.</source>
          <target state="translated">新しいアプリケーション ドメインでコードが、アセンブリをアセンブリの解決を読み込むときに、通常のプローブ パスに最初に検索します。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>If it does not find the assembly, it looks in the dynamic directory, which is returned by the <ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">によって返される動的のディレクトリを検索、アセンブリが見つからない場合、<ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Dynamic assemblies that will be loaded and executed by the new application domain can be placed there.</source>
          <target state="translated">動的アセンブリが読み込まれ、新しいアプリケーション ドメインによって実行されるは、ある配置できます。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>When you assign a path to the <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property, an additional subdirectory is added; the name of this subdirectory is the hash code of the value assigned to the <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property.</source>
          <target state="translated">パスを割り当てると、<ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph>プロパティ、追加のサブディレクトリが追加された以外の場合はこのサブディレクトリの名前に割り当てられた値のハッシュ コード、<ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Thus, the base directory subsequently returned by this property is always different from the value assigned.</source>
          <target state="translated">したがって、このプロパティによって返される、後で、ベース ディレクトリでは、割り当てられている値と異なるは常にします。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Assigning a value to this property does not create any directories.</source>
          <target state="translated">このプロパティに値を代入しても、すべてのディレクトリは作成されません。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The directories must be created or verified by the code that uses them.</source>
          <target state="translated">ディレクトリを作成またはそれらを使用するコードを確認する必要があります。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The dynamic directory is a subdirectory of <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph>.</source>
          <target state="translated">動的なディレクトリのサブディレクトリでは<ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Its simple name is the value returned by the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property, so its format is <bpt id="p1">*</bpt>original path<ept id="p1">*</ept><ph id="ph2">\\</ph><bpt id="p2">*</bpt>hash code<ept id="p2">*</ept><ph id="ph3">\\</ph><bpt id="p3">*</bpt>application name<ept id="p3">*</ept>.</source>
          <target state="translated">単純な名前がによって返される値、<ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph>プロパティ、その形式は<bpt id="p1">*</bpt>元のパス<ept id="p1">*</ept><ph id="ph2">\\</ph><bpt id="p2">*</bpt>ハッシュ コード<ept id="p2">*</ept><ph id="ph3">\\</ph><bpt id="p3">*</bpt>アプリケーション名<ept id="p3">*</ept>です。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property to set the path an application domain probes when loading dynamic assemblies.</source>
          <target state="translated">次の例で使用する方法、<ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph>動的アセンブリを読み込むときにアプリケーション ドメインのパスを設定するプロパティがプローブされます。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The example creates an <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> object and sets its <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property to "Example" and its <ph id="ph3">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property to "C:\DynamicAssemblyDir".</source>
          <target state="translated">例は、作成、<ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph>オブジェクトと設定、<ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph>プロパティを「例」とその<ph id="ph3">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph>プロパティを"C:\DynamicAssemblyDir".</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The example then displays the <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property, to show that the hash code of the application name has been appended as a subdirectory of the path that was originally assigned.</source>
          <target state="translated">例を表示し、<ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph>プロパティは、アプリケーション名のハッシュ コードが割り当てられた最初のパスのサブディレクトリとして追加されていないことを表示します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The base directory in this example is intended to be outside the probing path for the example application.</source>
          <target state="translated">この例では、ベース ディレクトリはサンプル アプリケーションのプローブ パスの外側でも目的としています。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Be sure to compile the example in a different location.</source>
          <target state="translated">別の場所に例をコンパイルすることを確認します。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Delete the base directory and all its subdirectories each time you run the example.</source>
          <target state="translated">この例を実行するたびに、ベース ディレクトリとそのすべてのサブディレクトリを削除します。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The example creates a new application domain using the <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> object.</source>
          <target state="translated">例では新しいアプリケーション ドメインを使用して、作成、<ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The example then creates the dynamic directory if it does not already exist.</source>
          <target state="translated">既に存在しない場合、この例は、動的ディレクトリを作成します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Although the example uses the application domain's <ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=nameWithType&gt;</ph> property to get the name of the dynamic directory, it could just as easily create the directory beforehand by concatenating the original path, the hash code of the application name, and the application name.</source>
          <target state="translated">例では、アプリケーション ドメインを使用しますが<ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=nameWithType&gt;</ph>動的のディレクトリの名前を取得するプロパティ事前は元のパスでは、アプリケーション名のハッシュ コードを連結することによって簡単にディレクトリを作成、でしたおよびアプリケーションの名前。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The example has a <ph id="ph1">`GenerateDynamicAssembly`</ph> method that emits an assembly named <ph id="ph2">`DynamicHelloWorld.dll`</ph> and stores it in the new application domain's dynamic directory.</source>
          <target state="translated">この例は、<ph id="ph1">`GenerateDynamicAssembly`</ph>メソッドという名前のアセンブリを出力する<ph id="ph2">`DynamicHelloWorld.dll`</ph>し、新しいアプリケーション ドメインの動的なディレクトリに格納します。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The dynamic assembly contains one type, <ph id="ph1">`HelloWorld`</ph>, that has a static method (<ph id="ph2">`Shared`</ph> method in Visual Basic) named <ph id="ph3">`HelloFromAD`</ph>.</source>
          <target state="translated">動的アセンブリには、1 つの型が含まれています。 <ph id="ph1">`HelloWorld`</ph>、静的メソッドを持つ (<ph id="ph2">`Shared`</ph> Visual Basic のメソッド) という<ph id="ph3">`HelloFromAD`</ph>です。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Calling this method displays the name of the application domain.</source>
          <target state="translated">このメソッドを呼び出すには、アプリケーション ドメインの名前が表示されます。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The <ph id="ph1">`Example`</ph> class derives from <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, so the example can create an instance of the class in the new application domain and call its <ph id="ph3">`Test`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Example`</ph>クラスから派生<ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>例では、新しいアプリケーション ドメインと呼び出しで、クラスのインスタンスを作成できるように、その<ph id="ph3">`Test`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The <ph id="ph1">`Test`</ph> method loads the dynamic assembly by its display name and calls the static <ph id="ph2">`HelloFromAD`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Test`</ph>メソッドの表示名によって、動的アセンブリを読み込みますを呼び出す、静的な<ph id="ph2">`HelloFromAD`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>You can show that the dynamic directory is searched after the normal probing paths by writing code for an assembly named <ph id="ph1">`DynamicHelloWorld.dll`</ph> and compiling it in the same directory as this example.</source>
          <target state="translated">という名前のアセンブリのコードを記述して、動的なディレクトリが通常のプローブ パスの後に検索を表示する<ph id="ph1">`DynamicHelloWorld.dll`</ph>し、次の例と同じディレクトリにコンパイルします。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The assembly must have a class named <ph id="ph1">`HelloWorld`</ph> with a static method named <ph id="ph2">`HelloFromAD`</ph>.</source>
          <target state="translated">という名前のクラスをアセンブリである必要があります<ph id="ph1">`HelloWorld`</ph>という名前の静的メソッドを持つ<ph id="ph2">`HelloFromAD`</ph>します。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>This method does not have to have the same functionality as the one in the example; it can simply display a string to the console.</source>
          <target state="translated">このメソッドはの例での 1 つと同じ機能を使用する必要はありません。単に文字列をコンソールに表示できます。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The assembly must also have an <ph id="ph1">&lt;xref:System.Reflection.AssemblyVersionAttribute&gt;</ph> attribute that sets its version to 1.0.0.0.</source>
          <target state="translated">アセンブリも必要、<ph id="ph1">&lt;xref:System.Reflection.AssemblyVersionAttribute&gt;</ph>そのバージョンを 1.0.0.0 に設定する属性。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>When you run the example, the assembly you compiled in the current directory is found before the dynamic directory is searched.</source>
          <target state="translated">例を実行するときに、動的なディレクトリを検索する前に、現在のディレクトリでコンパイルされたアセンブリが見つかりました。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DynamicBase">
          <source>This property cannot be set because the application name on the application domain is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">アプリケーション ドメインのアプリケーション名が <ph id="ph1">&lt;see langword="null" /&gt;</ph> であるため、このプロパティを設定できません。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>for access to the path information.</source>
          <target state="translated">アクセス パス情報。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>Returns the XML configuration information set by the <ph id="ph1">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> method, which overrides the application's XML configuration information.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> メソッドによって設定された (アプリケーションの XML 構成情報をオーバーライドする) XML 構成情報を返します。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>An array that contains the XML configuration information that was set by the <ph id="ph1">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the <ph id="ph3">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> メソッドによって設定された XML 構成情報を格納する配列。<ph id="ph3">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> メソッドが呼び出されなかった場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method provides a way to override the configuration information of an application that creates a new application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph>メソッドは、新しいアプリケーション ドメインを作成するアプリケーションの構成情報をオーバーライドする方法を提供します。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>The configuration file information in <ph id="ph1">`value`</ph> overrides the configuration file information for the application.</source>
          <target state="translated">ファイルの構成情報で<ph id="ph1">`value`</ph>アプリケーションの構成ファイルの情報をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>For example, when the Example.exe application creates a new application domain, it can override the configuration information originally obtained from Example.exe.config file.</source>
          <target state="translated">たとえば、Example.exe アプリケーションは、新しいアプリケーション ドメインを作成するときは、最初に Example.exe.config ファイルから取得された構成情報をオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>Some consumers of configuration file information do not use the information stored by the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method.</source>
          <target state="translated">構成ファイルの情報のいくつかのコンシューマーは格納されている情報を使用しないでください、<ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>The runtime does not enforce this.</source>
          <target state="translated">ランタイムはこれを強制しません。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>To ensure that all configuration file information is overridden in a new application domain, use the <ph id="ph1">&lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt;</ph> property to specify a configuration file.</source>
          <target state="translated">すべての構成ファイルの情報が、新しいアプリケーション ドメインでオーバーライドされることを使用して、<ph id="ph1">&lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt;</ph>構成ファイルを指定するプロパティです。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method does affect assembly binding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph>メソッドはアセンブリのバインディングに影響します。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>The XML in <ph id="ph1">`value`</ph> is the same as the XML in a normal configuration file, except that it is stored as a <ph id="ph2">&lt;xref:System.Byte&gt;</ph> array.</source>
          <target state="translated">内の XML<ph id="ph1">`value`</ph>同じですが、通常の構成ファイルに xml として保存されている、<ph id="ph2">&lt;xref:System.Byte&gt;</ph>配列。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>To access the configuration bytes for an application domain, use the <ph id="ph1">&lt;xref:System.AppDomain.SetupInformation%2A?displayProperty=nameWithType&gt;</ph> property to get the <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> object for the application domain, then use the <ph id="ph3">&lt;xref:System.AppDomainSetup.GetConfigurationBytes%2A&gt;</ph> method.</source>
          <target state="translated">アプリケーション ドメインの構成 (バイト) にアクセスするには、使用、<ph id="ph1">&lt;xref:System.AppDomain.SetupInformation%2A?displayProperty=nameWithType&gt;</ph>を取得するプロパティ、<ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph>アプリケーション ドメインのオブジェクトを使用して、<ph id="ph3">&lt;xref:System.AppDomainSetup.GetConfigurationBytes%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.LicenseFile">
          <source>Gets or sets the location of the license file associated with this domain.</source>
          <target state="translated">このドメインに関連付けられたライセンス ファイルの場所を取得または設定します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.LicenseFile">
          <source>The location and name of the license file.</source>
          <target state="translated">ライセンス ファイルの場所と名前。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.LicenseFile">
          <source>for access to the path information.</source>
          <target state="translated">アクセス パス情報。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.LicenseFile">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.LoaderOptimization">
          <source>Specifies the optimization policy used to load an executable.</source>
          <target state="translated">実行可能ファイルを読み込むために使用する最適化ポリシーを指定します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.LoaderOptimization">
          <source>An enumerated constant that is used with the <ph id="ph1">&lt;see cref="T:System.LoaderOptimizationAttribute" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.LoaderOptimizationAttribute" /&gt;</ph> で使用される列挙型定数。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.LoaderOptimization">
          <source>The following example creates a dynamic assembly and saves it to disk, and then uses the <ph id="ph1">&lt;xref:System.AppDomainSetup.LoaderOptimization%2A&gt;</ph> property to set the optimization policy used to load the assembly into an application domain.</source>
          <target state="translated">次の例は、動的アセンブリを作成し、ディスク、および、使用に保存、<ph id="ph1">&lt;xref:System.AppDomainSetup.LoaderOptimization%2A&gt;</ph>プロパティをアプリケーション ドメインにアセンブリを読み込むために使用する最適化ポリシーを設定します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>Gets or sets a list of assemblies marked with the <ph id="ph1">&lt;see cref="F:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault" /&gt;</ph> flag that are made visible to partial-trust code running in a sandboxed application domain.</source>
          <target state="translated">サンドボックス化されたアプリケーション ドメインで実行されている部分信頼コードから参照できる、<ph id="ph1">&lt;see cref="F:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault" /&gt;</ph> フラグでマークされたアセンブリのリストを取得または設定します。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>An array of partial assembly names, where each partial name consists of the simple assembly name and the public key.</source>
          <target state="translated">部分アセンブリ名の配列。各部分名は単純なアセンブリ名と公開キーで構成されます。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph> (APTCA) attribute can be made conditional by setting its <ph id="ph3">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel%2A&gt;</ph> property to <ph id="ph4">&lt;xref:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault&gt;</ph>.</source>
          <target state="translated">以降で、 <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>、 <ph id="ph2">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph> (APTCA) 属性が適用できる条件を設定してその<ph id="ph3">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel%2A&gt;</ph>プロパティを<ph id="ph4">&lt;xref:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>An APTCA assembly that is marked with <ph id="ph1">&lt;xref:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault&gt;</ph> cannot be used by partially trusted code unless the host application allows it.</source>
          <target state="translated">マークされている APTCA アセンブリ<ph id="ph1">&lt;xref:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault&gt;</ph>ホスト アプリケーションで許可されている場合を除き、部分的に信頼されたコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>The host of a sandboxed application domain allows code in the application domain to use assemblies with conditional APTCA attributes by creating an array that contains the simple name and public key of each assembly, and assigning the array to this property.</source>
          <target state="translated">サンド ボックス アプリケーション ドメインのホストは、単純な名前と、各アセンブリの公開キーを含む配列を作成し、このプロパティに、配列を割り当てることによって、条件付きの APTCA 属性を持つアセンブリを使用するアプリケーション ドメインでコードを許可します。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>For example, an element of the array might look like the following: "MyAssembly, PublicKey=0024000004800000940000000602000000240000525341310004000001000100db2ad5e5fedc67ea526ff72ad426ef68e08e241d296c499eedfec6648dcc62b1a12f72be5833a45bbec481b68415b08a5fbc9f9ef247b523dd72bbea65bb532784ddc5c704544bd2f1c2d46fdbe41e4f949e76f9947357b2d5cf8ca9f970701bbd6e8ab64ad31b20ad0be9b56dae4f6b83332b92a2a3b8ea2804c40efbc0b6b9".</source>
          <target state="translated">For example, an element of the array might look like the following: "MyAssembly, PublicKey=0024000004800000940000000602000000240000525341310004000001000100db2ad5e5fedc67ea526ff72ad426ef68e08e241d296c499eedfec6648dcc62b1a12f72be5833a45bbec481b68415b08a5fbc9f9ef247b523dd72bbea65bb532784ddc5c704544bd2f1c2d46fdbe41e4f949e76f9947357b2d5cf8ca9f970701bbd6e8ab64ad31b20ad0be9b56dae4f6b83332b92a2a3b8ea2804c40efbc0b6b9".</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>If you are using a subclass of <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>, and the assembly that defines it depends on assemblies that are marked with the conditional APTCA attribute, you must include those assemblies in the list that you pass to the <ph id="ph2">&lt;xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.AppDomainSetup&gt;</ph> you use to create application domains.</source>
          <target state="translated">サブクラスを使用している場合<ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>、およびそれを定義するアセンブリが、条件付きの APTCA 属性でマークされたアセンブリに依存して、渡されたリストでそれらのアセンブリを含める必要があります、<ph id="ph2">&lt;xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A&gt;</ph>のプロパティ、<ph id="ph3">&lt;xref:System.AppDomainSetup&gt;</ph>を使用するアプリケーション ドメインを作成します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>Otherwise the assemblies that are marked with the conditional APTCA attribute will be disabled.</source>
          <target state="translated">それ以外の場合、条件付きの APTCA 属性でマークされたアセンブリが無効になります。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>When you are debugging an application that is running in a sandboxed application domain, some <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> messages can be misleading.</source>
          <target state="translated">サンド ボックス アプリケーション ドメインで実行されているアプリケーションをデバッグしているときにいくつか<ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph>メッセージは誤解を招くことがあります。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>For example, a message might state that one of your fully trusted assemblies has only limited permissions, when the real cause of the problem is that a security demand that exceeds the grant set of the sandboxed application domain has propagated to the boundary of the sandboxed application domain and failed.</source>
          <target state="translated">たとえば、メッセージを完全に信頼されたアセンブリのいずれかが限られるアクセス許可、本当の問題の原因がサンド ボックス アプリケーション ドメインの許可セットの値を超えているセキュリティの要求がサンド ボックス アプリケーション ドメインの境界に伝達する場合に状態があり、失敗しました。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.PrivateBinPath">
          <source>Gets or sets the list of directories under the application base directory that are probed for private assemblies.</source>
          <target state="translated">プライベート アセンブリが調査されるアプリケーション ベース ディレクトリ下に存在するディレクトリのリストを取得または設定します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPath">
          <source>A list of directory names separated by semicolons.</source>
          <target state="translated">セミコロンで区切られたディレクトリ名のリスト。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPath">
          <source>Private assemblies are deployed in the same directory structure as the application.</source>
          <target state="translated">プライベート アセンブリは、アプリケーションと同じディレクトリ構造で展開されます。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPath">
          <source>If the directories specified for <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> are not under <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>, they are ignored.</source>
          <target state="translated">ディレクトリが指定されている場合<ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>されない<ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>は無視されます。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.PrivateBinPathProbe">
          <source>Gets or sets a string value that includes or excludes <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ApplicationBase" /&gt;</ph> from the search path for the application, and searches only <ph id="ph2">&lt;see cref="P:System.AppDomainSetup.PrivateBinPath" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ApplicationBase" /&gt;</ph> をアプリケーションの検索パスに含めたり、このディレクトリを検索パスから除外して <ph id="ph2">&lt;see cref="P:System.AppDomainSetup.PrivateBinPath" /&gt;</ph> だけを検索するようにしたりするための文字列値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPathProbe">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) to include the application base path when searching for assemblies; any non-null string value to exclude the path.</source>
          <target state="translated">アセンブリを検索するときにアプリケーションのベース パスを含める場合は、null 参照 (Visual Basic では <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>)。パスを除外する場合は、null 以外の文字列値。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPathProbe">
          <source>The default value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPathProbe">
          <source>Set this property to any non-null string value, including <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> (""), to exclude the application directory path — that is, <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> — from the search path for the application, and to search for assemblies only in <ph id="ph3">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>.</source>
          <target state="translated">任意の null 以外の文字列値にこのプロパティを設定を含む<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>("")、アプリケーションのディレクトリ パスを除外する: つまり、 <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> — アプリケーション、およびアセンブリを検索する検索パスからでのみ<ph id="ph3">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.SandboxInterop">
          <source>Gets or sets a value that indicates whether interface caching is disabled for interop calls in the application domain, so that a <bpt id="p1">&lt;c&gt;</bpt>QueryInterface<ept id="p1">&lt;/c&gt;</ept> is performed on each call.</source>
          <target state="translated">呼び出しのたびに <bpt id="p1">&lt;c&gt;</bpt>QueryInterface<ept id="p1">&lt;/c&gt;</ept> が実行されるように、アプリケーション ドメインの相互運用呼び出しに対するインターフェイス キャッシュが無効かどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.SandboxInterop">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if interface caching is disabled for interop calls in application domains created with the current <ph id="ph2">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph2">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> オブジェクトを使用して作成された、アプリケーション ドメインの相互運用呼び出しに対するインターフェイス キャッシュが無効の場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。そうでない場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.SandboxInterop">
          <source>Disabling interface caching has a significant impact on the performance of interop calls.</source>
          <target state="translated">相互運用呼び出しのパフォーマンスに大きな影響を及ぼしますインターフェイスのキャッシュを無効にします。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.SandboxInterop">
          <source>This member is introduced in the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>.</source>
          <target state="translated">このメンバーがで導入された、<ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>An enumerable set of string values that specify compatibility switches, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> to erase the existing compatibility switches.</source>
          <target state="translated">互換性スイッチを指定する文字列値の列挙可能なセット。既存の互換性スイッチを消去する場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Sets the specified switches, making the application domain compatible with previous versions of the .NET Framework for the specified issues.</source>
          <target state="translated">指定されたスイッチを設定し、指定された問題のためにアプリケーション ドメインと以前のバージョンの .NET Framework の互換性を確保します。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Major versions of the .NET Framework sometimes introduce breaking changes from the previous version.</source>
          <target state="translated">.NET Framework のメジャー バージョンは、以前のバージョンの場合もありますにおける重大な変更を紹介します。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>For example, the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> introduces a small number of breaking changes from the <ph id="ph2">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>.</source>
          <target state="translated">たとえば、<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>から重大な変更の数が少ないが導入されています、<ph id="ph2">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Use the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetCompatibilitySwitches%2A&gt;</ph> method to specify that one or more of these breaking changes should be rolled back for the application domain, to make the behavior compatible with the previous version of the .NET Framework.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.AppDomainSetup.SetCompatibilitySwitches%2A&gt;</ph>が 1 つまたは複数のこれらの重大な変更を指定するメソッドは、動作を .NET Framework の以前のバージョンと互換性のあるようにする、アプリケーション ドメインのロールバックする必要があります。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Each time you call this method, it replaces the existing switch settings.</source>
          <target state="translated">このメソッドを呼び出すたびに、既存のスイッチの設定が置き換えられます。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>To erase the settings, specify <ph id="ph1">`null`</ph> for the <ph id="ph2">`switches`</ph> parameter.</source>
          <target state="translated">消去するには、設定を指定して<ph id="ph1">`null`</ph>の<ph id="ph2">`switches`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>The set of string values you provide for <ph id="ph1">`switches`</ph> can be a simple string array, because arrays implement the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
          <target state="translated">指定する文字列値のセット<ph id="ph1">`switches`</ph>配列が実装するため、単純な文字列配列であることができます、<ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>The following table provides examples of compatibility switches that can be set to restore the behavior of earlier versions of the .NET Framework.</source>
          <target state="translated">次の表は、.NET Framework の以前のバージョンの動作を復元する設定できる互換性スイッチの例を示します。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Switch</source>
          <target state="translated">切り替え</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Meaning</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>"NetFx40_LegacySecurityPolicy"</source>
          <target state="translated">"NetFx40_LegacySecurityPolicy"</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Code access security (CAS) for the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> is enabled in this application domain.</source>
          <target state="translated">コード アクセス セキュリティ (CAS)、<ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>このアプリケーション ドメインで有効にします。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>NetFx40_LegacySecurityPolicy<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>NetFx40_LegacySecurityPolicy<ph id="ph2">&amp;gt;</ph>要素<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>"NetFx40_Legacy20SortingBehavior"</source>
          <target state="translated">"NetFx40_Legacy20SortingBehavior"</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>String sorting defaults for the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> are enabled in this application domain.</source>
          <target state="translated">文字列の既定値を並べ替え、<ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>アプリケーション ドメインで有効にします。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Successfully restoring legacy sorting behavior also requires the sort00001000.dll dynamic link library to be available on the local system.</source>
          <target state="translated">従来の並べ替え動作を正常に復元すると、ローカル システムで利用できる sort00001000.dll ダイナミック リンク ライブラリも必要です。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>CompatSortNLSVersion<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/compatsortnlsversion-element.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>CompatSortNLSVersion<ph id="ph2">&amp;gt;</ph>要素<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/compatsortnlsversion-element.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>"NetFx40_Legacy40SortingBehavior"</source>
          <target state="translated">"NetFx40_Legacy40SortingBehavior"</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>String sorting defaults for the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> and Unicode 5.0 are enabled in this application domain.</source>
          <target state="translated">文字列の既定値を並べ替え、 <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> Unicode 5.0 がこのアプリケーション ドメインで有効にします。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Successfully restoring legacy sorting behavior also requires the sort00060101.dll dynamic link library to be available on the local system.</source>
          <target state="translated">従来の並べ替え動作を正常に復元すると、ローカル システムで利用できる sort00060101.dll ダイナミック リンク ライブラリも必要です。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>"NetFx40_TimeSpanLegacyFormatMode"</source>
          <target state="translated">"NetFx40_TimeSpanLegacyFormatMode"</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source><ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> formatting behavior for the <ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> is enabled in this application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> 動作を書式設定、<ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph>このアプリケーション ドメインで有効にします。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>TimeSpan_LegacyFormatMode<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md)</ept> and the "Restoring Legacy TimeSpan Formatting" section of the <ph id="ph3">&lt;xref:System.TimeSpan&gt;</ph> topic.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>TimeSpan_LegacyFormatMode<ph id="ph2">&amp;gt;</ph>要素<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md)</ept>、および「復元レガシ TimeSpan 書式設定」のセクション、<ph id="ph3">&lt;xref:System.TimeSpan&gt;</ph>トピックです。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>"UseRandomizedStringHashAlgorithm"</source>
          <target state="translated">"UseRandomizedStringHashAlgorithm"</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>The runtime calculates hash codes for strings on a per application domain basis instead of using a single hashing algorithm that produces a consistent hash code across application domains.</source>
          <target state="translated">ランタイムでは、文字列のハッシュ コードを計算で、アプリケーション ドメイン間で一貫したハッシュ コードを生成する単一のハッシュ アルゴリズムを使用する代わりのアプリケーション ドメインごとです。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>UseRandomizedStringHashAlgorithm<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>UseRandomizedStringHashAlgorithm<ph id="ph2">&amp;gt;</ph>要素<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>An array that contains the XML configuration information to be used for the application domain.</source>
          <target state="translated">アプリケーション ドメイン用に使用される XML 構成情報が格納された配列。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>Provides XML configuration information for the application domain, replacing the application's XML configuration information.</source>
          <target state="translated">アプリケーションの XML 構成情報を置換し、アプリケーション ドメインの XML 構成情報を提供します。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method provides a way to replace the configuration information of an application that creates a new application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph>メソッドは、新しいアプリケーション ドメインを作成するアプリケーションの構成情報を交換する方法を提供します。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>The configuration file information in <ph id="ph1">`value`</ph> replaces the configuration file information for the application.</source>
          <target state="translated">ファイルの構成情報で<ph id="ph1">`value`</ph>アプリケーションの構成ファイルの情報が置き換えられます。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>For example, when the Example.exe application creates a new application domain, it can replace the configuration information originally obtained from the Example.exe.config file.</source>
          <target state="translated">たとえば、Example.exe アプリケーションは、新しいアプリケーション ドメインを作成するときは、Example.exe.config ファイルから最初に取得された構成情報を置き換えることができます。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>Some consumers of configuration file information do not use the information stored by the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method.</source>
          <target state="translated">構成ファイルの情報のいくつかのコンシューマーは格納されている情報を使用しないでください、<ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>The runtime does not enforce this.</source>
          <target state="translated">ランタイムはこれを強制しません。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>To ensure that all configuration file information is replaced in a new application domain, use the <ph id="ph1">&lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt;</ph> property to specify a configuration file.</source>
          <target state="translated">すべての構成ファイルの情報が、新しいアプリケーション ドメインで置き換えられたことを確認してくださいを使用して、<ph id="ph1">&lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt;</ph>プロパティを構成ファイルを指定します。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method does affect assembly binding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph>メソッドはアセンブリのバインディングに影響します。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>The XML in <ph id="ph1">`value`</ph> is the same as the XML in a normal configuration file, except that it is stored as a <ph id="ph2">&lt;xref:System.Byte&gt;</ph> array.</source>
          <target state="translated">内の XML<ph id="ph1">`value`</ph>同じですが、通常の構成ファイルに xml として保存されている、<ph id="ph2">&lt;xref:System.Byte&gt;</ph>配列。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>The name of the string comparison function to override.</source>
          <target state="translated">オーバーライドする文字列比較関数の名前。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>The function version.</source>
          <target state="translated">関数のバージョン。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>For <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, its value must be 1 or greater.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> では、その値は 1 以上である必要があります。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>A pointer to the function that overrides <bpt id="p1">&lt;c&gt;</bpt>functionName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>functionName<ept id="p1">&lt;/c&gt;</ept> をオーバーライドする関数へのポインター。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>Provides the common language runtime with an alternate implementation of a string comparison function.</source>
          <target state="translated">文字列比較関数の代替実装を持つ共通言語ランタイムを提供します。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>The following string comparison and sorting methods can be overridden by the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetNativeFunction%2A&gt;</ph> method:</source>
          <target state="translated">次の文字列の比較および並べ替え方法をオーバーライドすることができます、<ph id="ph1">&lt;xref:System.AppDomainSetup.SetNativeFunction%2A&gt;</ph>メソッド。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>For information about these functions, see <bpt id="p1">[</bpt>National Language Support Functions<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=228134)</ept>.</source>
          <target state="translated">これらの関数については、次を参照してください。<bpt id="p1">[</bpt>言語サポート関数の各国語<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=228134)</ept>です。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source><ph id="ph1">&lt;paramref name="functionName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="functionName" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source><ph id="ph1">&lt;paramref name="functionVersion" /&gt;</ph> is not 1 or greater.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="functionVersion" /&gt;</ph> が 1 以上ではありません。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source><ph id="ph1">&lt;paramref name="functionPointer" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="functionPointer" /&gt;</ph> は <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>Gets or sets the names of the directories containing assemblies to be shadow copied.</source>
          <target state="translated">シャドウ コピー対象のアセンブリが格納されているディレクトリの名前を取得または設定します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>A list of directory names separated by semicolons.</source>
          <target state="translated">セミコロンで区切られたディレクトリ名のリスト。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>When shadow copying is enabled, the default is to shadow copy all assemblies found through probing; that is, in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> properties.</source>
          <target state="translated">既定ではシャドウ コピーが調査; で見つかったすべてのアセンブリがシャドウ コピーを有効にすると、つまり、ディレクトリ内で指定された、<ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph> property restricts the shadow copy to the assemblies in the directories specified by <ph id="ph2">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph>プロパティで指定したディレクトリ内のアセンブリにシャドウ コピーを制限します。<ph id="ph2">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>If you don’t assign a string to the <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph> property, or if you set this property to <ph id="ph2">`null`</ph>, all assemblies in the directories specified by the <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> properties are shadow copied.</source>
          <target state="translated">文字列を <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph> プロパティに割り当てない場合、またはこのプロパティを <ph id="ph2">`null`</ph> に設定した場合は、<ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> と <ph id="ph4">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> プロパティで指定したディレクトリ内のすべてのアセンブリがシャドウ コピーされます。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>Directory paths must not contain semicolons, because the semicolon is the delimiter character.</source>
          <target state="translated">セミコロンは区切り文字なので、ディレクトリ パスにはセミコロンを含めないでください。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>There is no escape character for semicolons.</source>
          <target state="translated">セミコロンのためのエスケープ文字はありません。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>When shadow copying is in effect, assembly files are copied to another location before the assemblies are loaded.</source>
          <target state="translated">シャドウ コピーが有効な場合は、アセンブリが読み込まれる前に別の場所にアセンブリ ファイルがコピーされます。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>The original assembly file is not locked, so it can be updated.</source>
          <target state="translated">元のアセンブリ ファイルはロックされず、更新できるようにします。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">シャドウ コピーの詳細については、次を参照してください。<bpt id="p1">[</bpt>アセンブリのシャドウ コピー<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>for access to the path information.</source>
          <target state="translated">アクセス パス情報。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ShadowCopyFiles">
          <source>Gets or sets a string that indicates whether shadow copying is turned on or off.</source>
          <target state="translated">シャドウ コピーが有効であるか無効であるかを示す文字列を取得または設定します。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyFiles">
          <source>The string value "true" to indicate that shadow copying is turned on; or "false" to indicate that shadow copying is turned off.</source>
          <target state="translated">シャドウ コピーが有効な場合は文字列値 "true"。シャドウ コピーが無効な場合は "false"。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyFiles">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">シャドウ コピーの詳細については、次を参照してください。<bpt id="p1">[</bpt>アセンブリのシャドウ コピー<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>Gets or sets a string that specifies the target version and profile of the .NET Framework for the application domain, in a format that can be parsed by the <ph id="ph1">&lt;see cref="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)" /&gt;</ph> constructor.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)" /&gt;</ph> のコンストラクターによって解析できる形式で、アプリケーション ドメインの .NET Framework のターゲット バージョンおよびプロファイルを指定する文字列を取得または設定します。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>The target version and profile of the .NET Framework.</source>
          <target state="translated">対象となる .NET Framework のバージョンとプロファイル。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>Set this property to tell the currently running version of the .NET Framework that the application domain will be used to load and run assemblies that have been compiled for the target version and profile.</source>
          <target state="translated">このプロパティへの読み込みと実行対象のバージョンまたはプロファイルにコンパイルされたアセンブリ、アプリケーション ドメインが使用されることを現在実行中の .NET Framework のバージョンに通知を設定します。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>If the currently running version of the .NET Framework has optional behaviors that affect the compatibility of code that was compiled with the target version, it can enable or disable those behaviors, as appropriate, to improve compatibility.</source>
          <target state="translated">現在実行中の .NET Framework のバージョンに対象のバージョンでコンパイルされたコードとの互換性に影響する省略可能な動作がある場合は、有効または互換性を向上させるために、必要に応じて、これらの動作を無効にすることできます。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>This can be useful when an application supports add-ins compiled with multiple versions of the .NET Framework by running them in separate application domains.</source>
          <target state="translated">これは、アプリケーションは、個別のアプリケーション ドメインで実行することにより、.NET Framework の複数のバージョンでコンパイルされたアドインをサポートしている場合に役立ちます。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>For client applications, the value of the <ph id="ph1">&lt;xref:System.AppDomainSetup.TargetFrameworkName%2A&gt;</ph> property is inferred from the <ph id="ph2">&lt;xref:System.Runtime.Versioning.TargetFrameworkAttribute&gt;</ph> attribute.</source>
          <target state="translated">クライアント アプリケーションの場合の値、<ph id="ph1">&lt;xref:System.AppDomainSetup.TargetFrameworkName%2A&gt;</ph>から推論されるプロパティ、<ph id="ph2">&lt;xref:System.Runtime.Versioning.TargetFrameworkAttribute&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>In <ph id="ph1">[!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)]</ph> and later, this attribute is added to the assembly automatically based on the setting of the project's <bpt id="p1">**</bpt>Target Framework<ept id="p1">**</ept> property.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)]</ph>後で、この属性が追加のプロジェクトの設定に基づいて自動的に、アセンブリと<bpt id="p1">**</bpt>ターゲット フレームワーク<ept id="p1">**</ept>プロパティです。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>