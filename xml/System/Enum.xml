<Type Name="Enum" FullName="System.Enum">
  <TypeSignature Language="C#" Value="public abstract class Enum : ValueType, IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Enum extends System.ValueType implements class System.IComparable, class System.IConvertible, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Enum" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Enum&#xA;Inherits ValueType&#xA;Implements IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enum abstract : ValueType, IComparable, IConvertible, IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="1d7fe-101">列挙体の基底クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-101">Provides the base class for enumerations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-102">列挙型は、基になる型は任意の整数型、名前付き定数のセットです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-102">An enumeration is a set of named constants whose underlying type is any integral type.</span></span> <span data-ttu-id="1d7fe-103">基になる型が明示的に宣言されていない場合<xref:System.Int32>を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-103">If no underlying type is explicitly declared, <xref:System.Int32> is used.</span></span> <span data-ttu-id="1d7fe-104"><xref:System.Enum> .NET Framework のすべての列挙体の基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-104"><xref:System.Enum> is the base class for all enumerations in the .NET Framework.</span></span> <span data-ttu-id="1d7fe-105">列挙型がで定義されている、`enum`キーワード (C#) および`Enum`しています.`End Enum` Visual Basic で作成します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-105">Enumeration types are defined by the `enum` keyword in C# and the `Enum`...`End Enum` construct in Visual Basic.</span></span>  
  
 <span data-ttu-id="1d7fe-106"><xref:System.Enum> このクラスのインスタンスを比較する、インスタンスの値を文字列形式に変換する、数値の文字列形式をこのクラスのインスタンスに変換すると、指定した列挙体と値のインスタンスを作成するには、メソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-106"><xref:System.Enum> provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.</span></span>  
  
 <span data-ttu-id="1d7fe-107">列挙型ビット フィールドとして扱うこともできます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-107">You can also treat an enumeration as a bit field.</span></span> <span data-ttu-id="1d7fe-108">詳細については、次を参照してください。、[非排他的なメンバーと Flags 属性](#Flags)セクションおよび<xref:System.FlagsAttribute>トピックです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-108">For more information, see the [Non-Exclusive Members and the Flags Attribute](#Flags) section and the <xref:System.FlagsAttribute> topic.</span></span>  
  
 <span data-ttu-id="1d7fe-109">このトピックの内容:</span><span class="sxs-lookup"><span data-stu-id="1d7fe-109">In this topic:</span></span>  
  
 <span data-ttu-id="1d7fe-110">[列挙型を作成します。](#Creating) </span><span class="sxs-lookup"><span data-stu-id="1d7fe-110">[Creating an enumeration type](#Creating) </span></span>  
 <span data-ttu-id="1d7fe-111">[列挙型をインスタンス化します。](#Instantiating) </span><span class="sxs-lookup"><span data-stu-id="1d7fe-111">[Instantiating an enumeration type](#Instantiating) </span></span>  
 <span data-ttu-id="1d7fe-112">[列挙体のベスト プラクティス](#BestPractices) </span><span class="sxs-lookup"><span data-stu-id="1d7fe-112">[Enumeration best practices](#BestPractices) </span></span>  
 <span data-ttu-id="1d7fe-113">[列挙体で操作を実行します。](#Operations) </span><span class="sxs-lookup"><span data-stu-id="1d7fe-113">[Performing operations with enumerations](#Operations) </span></span>  
 [<span data-ttu-id="1d7fe-114">変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-114">Performing conversions</span></span>](#conversions)  
 [<span data-ttu-id="1d7fe-115">列挙値の解析</span><span class="sxs-lookup"><span data-stu-id="1d7fe-115">Parsing enumeration values</span></span>](#parsing)  
 [<span data-ttu-id="1d7fe-116">列挙値の書式設定</span><span class="sxs-lookup"><span data-stu-id="1d7fe-116">Formatting enumeration values</span></span>](#formatting)  
[<span data-ttu-id="1d7fe-117">列挙型のメンバーを反復処理します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-117">Iterating enumeration members</span></span>](#iterating)  
[<span data-ttu-id="1d7fe-118">非排他的なメンバーと Flags 属性</span><span class="sxs-lookup"><span data-stu-id="1d7fe-118">Non-exclusive members and the Flags attribute</span></span>](#Flags)  
[<span data-ttu-id="1d7fe-119">列挙メソッドを追加します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-119">Adding enumeration methods</span></span>](#methods)  
  
<a name="Creating"></a>   
## <a name="creating-an-enumeration-type"></a><span data-ttu-id="1d7fe-120">列挙型を作成します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-120">Creating an enumeration type</span></span>  
 <span data-ttu-id="1d7fe-121">プログラミング言語は、通常、名前付き定数とその値のセットで構成される列挙体を宣言するための構文を提供します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-121">Programming languages typically provide syntax to declare an enumeration that consists of a set of named constants and their values.</span></span> <span data-ttu-id="1d7fe-122">次の例は、列挙体を定義する c# および Visual Basic で使用される構文を示しています。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-122">The following example illustrates the syntax used by C# and Visual Basic to define an enumeration.</span></span> <span data-ttu-id="1d7fe-123">という名前の列挙を作成`ArrivalStatus`3 つのメンバーを持つ: `ArrivalStatus.Early`、 `ArrivalStatus.OnTime`、および`ArrivalStatus.Late`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-123">It creates an enumeration named `ArrivalStatus` that has three members: `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, and `ArrivalStatus.Late`.</span></span> <span data-ttu-id="1d7fe-124">どちらの場合、列挙型に明示的に継承していないことからに注意してください<xref:System.Enum>; コンパイラによって暗黙的に継承関係を処理します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-124">Note that in both cases, the enumeration does not explicitly inherit from <xref:System.Enum>; the inheritance relationship is handled implicitly by the compiler.</span></span>  
  
 [!code-csharp[System.Enum.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#1)]
 [!code-vb[System.Enum.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#1)]  
  
> [!WARNING]
>  <span data-ttu-id="1d7fe-125">基になる型が整数以外の列挙型は作成しないでまたは<xref:System.Char>です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-125">You should never create an enumeration type whose underlying type is non-integral or <xref:System.Char>.</span></span> <span data-ttu-id="1d7fe-126">列挙型を作成するには、リフレクションを使用して、、追加の例外をスローする可能性がもと、結果の型を使用するメソッド呼び出しは信頼性の高いではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-126">Although you can create such an enumeration type by using reflection, method calls that use the resulting type are unreliable and may also throw additional exceptions.</span></span>  
  
<a name="Instantiating"></a>   
## <a name="instantiating-an-enumeration-type"></a><span data-ttu-id="1d7fe-127">列挙型をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-127">Instantiating an enumeration type</span></span>  
 <span data-ttu-id="1d7fe-128">他の任意の値型のインスタンスを作成すると同様に、列挙型がインスタンス化できます。 変数を宣言すると、そこを割り当てる列挙型の定数のいずれかでします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-128">You can instantiate an enumeration type just as you instantiate any other value type: by declaring a variable and assigning one of the enumeration's constants to it.</span></span> <span data-ttu-id="1d7fe-129">次の例のインスタンスを作成、`ArrivalStatus`値がある`ArrivalStatus.OnTime`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-129">The following example instantiates an `ArrivalStatus` whose value is `ArrivalStatus.OnTime`.</span></span>  
  
 [!code-csharp[System.Enum.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#2)]
 [!code-vb[System.Enum.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#2)]  
  
 <span data-ttu-id="1d7fe-130">次の方法で列挙値をインスタンス化することができますも。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-130">You can also instantiate an enumeration value in the following ways:</span></span>  
  
-   <span data-ttu-id="1d7fe-131">特定のプログラミング言語の機能を使用する (c# の場合と) にキャスト (Visual Basic の場合) のように整数値の列挙値に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-131">By using a particular programming language's features to cast (as in C#) or convert (as in Visual Basic) an integer value to an enumeration value.</span></span> <span data-ttu-id="1d7fe-132">次の例を作成、`ArrivalStatus`値があるオブジェクト`ArrivalStatus.Early`この方法でします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-132">The following example creates an `ArrivalStatus` object whose value is `ArrivalStatus.Early` in this way.</span></span>  
  
     [!code-csharp[System.Enum.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#4)]
     [!code-vb[System.Enum.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#4)]  
  
-   <span data-ttu-id="1d7fe-133">暗黙的な既定のコンス トラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-133">By calling its implicit default constructor.</span></span> <span data-ttu-id="1d7fe-134">次の例に示す、ここでは、基になるインスタンスの値、列挙が 0 です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-134">As the following example shows, in this case the underlying value of the enumeration instance is 0.</span></span> <span data-ttu-id="1d7fe-135">ただし、これとは限りません列挙体の有効な定数の値です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-135">However, this is not necessarily the value of a valid constant in the enumeration.</span></span>  
  
     [!code-csharp[System.Enum.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#3)]
     [!code-vb[System.Enum.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#3)]  
  
-   <span data-ttu-id="1d7fe-136">呼び出して、<xref:System.Enum.Parse%2A>または<xref:System.Enum.TryParse%2A>列挙体の定数の名前を表す文字列を解析します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-136">By calling the <xref:System.Enum.Parse%2A> or <xref:System.Enum.TryParse%2A> method to parse a string that contains the name of a constant in the enumeration.</span></span> <span data-ttu-id="1d7fe-137">詳細については、次を参照してください。、[列挙値の解析](#parsing)セクションです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-137">For more information, see the [Parsing Enumeration Values](#parsing) section.</span></span>  
  
-   <span data-ttu-id="1d7fe-138">呼び出して、<xref:System.Enum.ToObject%2A>列挙型を整数値に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-138">By calling the <xref:System.Enum.ToObject%2A> method to convert an integral value to an enumeration type.</span></span> <span data-ttu-id="1d7fe-139">詳細については、次を参照してください。、[を実行する変換](#conversions)セクションです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-139">For more information, see the [Performing Conversions](#conversions) section.</span></span>  
  
<a name="BestPractices"></a>   
## <a name="enumeration-best-practices"></a><span data-ttu-id="1d7fe-140">列挙体のベスト プラクティス</span><span class="sxs-lookup"><span data-stu-id="1d7fe-140">Enumeration best practices</span></span>  
 <span data-ttu-id="1d7fe-141">列挙型を定義する場合は、次のベスト プラクティスを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-141">We recommend that you use the following best practices when you define enumeration types:</span></span>  
  
-   <span data-ttu-id="1d7fe-142">値が 0 列挙体のメンバーを定義していない場合は、作成することを検討してください、`None`列挙型定数。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-142">If you have not defined an enumeration member whose value is 0, consider creating a `None` enumerated constant.</span></span> <span data-ttu-id="1d7fe-143">既定では、列挙体に使用するメモリが 0 に初期化される、共通言語ランタイムによってです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-143">By default, the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="1d7fe-144">その結果、値が 0 の定数を定義していない場合が作成されるとき、列挙体は値が無効含まれます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-144">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
-   <span data-ttu-id="1d7fe-145">表す列挙を使用して、アプリケーションがある、明確な既定のケースがある場合の値が定数表現するために 0 です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-145">If there is an obvious default case that your application has to represent, consider using an enumerated constant whose value is zero to represent it.</span></span> <span data-ttu-id="1d7fe-146">既定のケースがない場合は、によってその他の列挙定数のいずれかの値が 0 表されないケースを指定する列挙定数の使用を検討してください。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-146">If there is no default case, consider using an enumerated constant whose value is zero to specify the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="1d7fe-147">将来使用するために予約されている列挙型定数は指定しません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-147">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="1d7fe-148">メソッドまたは値として列挙型定数は、プロパティを定義するときは、値の検証を検討してください。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-148">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="1d7fe-149">理由は、その数値の値が列挙体で定義されていない場合でも、列挙型の数値にキャストすることです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-149">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
 <span data-ttu-id="1d7fe-150">列挙型の定数はビット フィールドの追加のベスト プラクティスが記載されて、[非排他的なメンバーと Flags 属性](#Flags)セクションです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-150">Additional best practices for enumeration types whose constants are bit fields are listed in the [Non-Exclusive Members and the Flags Attribute](#Flags) section.</span></span>  
  
<a name="Operations"></a>   
## <a name="performing-operations-with-enumerations"></a><span data-ttu-id="1d7fe-151">列挙体で操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-151">Performing operations with enumerations</span></span>  
 <span data-ttu-id="1d7fe-152">列挙体を作成するときに新しいメソッドを定義することはできません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-152">You cannot define new methods when you are creating an enumeration.</span></span> <span data-ttu-id="1d7fe-153">ただし、列挙型は、静的の完全なセットとからインスタンス メソッドを継承、<xref:System.Enum>クラスです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-153">However, an enumeration type inherits a complete set of static and instance methods from the <xref:System.Enum> class.</span></span> <span data-ttu-id="1d7fe-154">次のセクションでは、列挙値を使用する場合によく使用されるその他のいくつかのメソッドだけでなく、これらのメソッドのほとんどを調査します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-154">The following sections survey most of these methods, in addition to several other methods that are commonly used when working with enumeration values.</span></span>  
  
<a name="conversions"></a>   
### <a name="performing-conversions"></a><span data-ttu-id="1d7fe-155">変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-155">Performing conversions</span></span>  
 <span data-ttu-id="1d7fe-156">キャスト (C# の場合) または (Visual Basic) の変換演算子を使用して、列挙体のメンバーとその基になる型の間で変換することができます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-156">You can convert between an enumeration member and its underlying type by using a casting (in C#) or conversion (in Visual Basic) operator.</span></span> <span data-ttu-id="1d7fe-157">次の例では、キャスト演算または変換演算子を使用して、列挙値の整数と列挙値を整数に変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-157">The following example uses casting or conversion operators to perform conversions both from an integer to an enumeration value and from an enumeration value to an integer.</span></span>  
  
 [!code-csharp[System.Enum.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#5)]
 [!code-vb[System.Enum.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#5)]  
  
 <span data-ttu-id="1d7fe-158"><xref:System.Enum>クラスも含まれます、<xref:System.Enum.ToObject%2A>メソッドを任意の整数型の値を列挙値に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-158">The <xref:System.Enum> class also includes a <xref:System.Enum.ToObject%2A> method that converts a value of any integral type to an enumeration value.</span></span> <span data-ttu-id="1d7fe-159">次の例では、<xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29>に変換する方法、<xref:System.Int32>を`ArrivalStatus`値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-159">The following example uses the <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method to convert an <xref:System.Int32> to an `ArrivalStatus` value.</span></span> <span data-ttu-id="1d7fe-160">なお、ため、<xref:System.Enum.ToObject%2A>型の値を返します<xref:System.Object>、キャスト演算または変換演算子の使用、オブジェクトは、列挙型にキャストする必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-160">Note that, because the <xref:System.Enum.ToObject%2A> returns a value of type <xref:System.Object>, the use of a casting or conversion operator may still be necessary to cast the object to the enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#6)]
 [!code-vb[System.Enum.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#6)]  
  
 <span data-ttu-id="1d7fe-161">整数を列挙値に変換するときは、実際には、列挙体のメンバーではない値を代入することです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-161">When converting an integer to an enumeration value, it is possible to assign a value that is not actually a member of the enumeration.</span></span> <span data-ttu-id="1d7fe-162">これを回避するには整数を渡すことができます、<xref:System.Enum.IsDefined%2A>メソッドの変換を実行する前にします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-162">To prevent this, you can pass the integer to the <xref:System.Enum.IsDefined%2A> method before performing the conversion.</span></span> <span data-ttu-id="1d7fe-163">次の例では、このメソッドを使用する整数値の配列内の要素を変換できるかどうかを決定する`ArrivalStatus`値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-163">The following example uses this method to determine whether the elements in an array of integer values can be converted to `ArrivalStatus` values.</span></span>  
  
 [!code-csharp[System.Enum.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion1.cs#7)]
 [!code-vb[System.Enum.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion1.vb#7)]  
  
 <span data-ttu-id="1d7fe-164"><xref:System.Enum>クラスの明示的なインターフェイス実装を提供する、<xref:System.IConvertible>インターフェイス列挙値から整数型に変換する、用のメソッドを使用する必要があります、<xref:System.Convert>クラスなど<xref:System.Convert.ToInt32%2A>をこれらの変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-164">Although the <xref:System.Enum> class provides explicit interface implementations of the <xref:System.IConvertible> interface for converting from an enumeration value to an integral type, you should use the methods of the <xref:System.Convert> class, such as <xref:System.Convert.ToInt32%2A>, to perform these conversions.</span></span> <span data-ttu-id="1d7fe-165">次の例を使用する方法を示しています、<xref:System.Enum.GetUnderlyingType%2A>メソッドと共に、<xref:System.Convert.ChangeType%2A?displayProperty=nameWithType>列挙値を基になる型に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-165">The following example illustrates how you can use the <xref:System.Enum.GetUnderlyingType%2A> method along with the <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method to convert an enumeration value to its underlying type.</span></span> <span data-ttu-id="1d7fe-166">この例に、コンパイル時に既知である列挙体の基になる型が必要としないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-166">Note that this example does not require the underlying type of the enumeration to be known at compile time.</span></span>  
  
 [!code-csharp[System.Enum.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion2.cs#8)]
 [!code-vb[System.Enum.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion2.vb#8)]  
  
<a name="parsing"></a>   
### <a name="parsing-enumeration-values"></a><span data-ttu-id="1d7fe-167">列挙値の解析</span><span class="sxs-lookup"><span data-stu-id="1d7fe-167">Parsing enumeration values</span></span>  
 <span data-ttu-id="1d7fe-168"><xref:System.Enum.Parse%2A>と<xref:System.Enum.TryParse%2A>メソッドを使用すると、その値を列挙値の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-168">The <xref:System.Enum.Parse%2A> and <xref:System.Enum.TryParse%2A> methods allow you to convert the string representation of an enumeration value to that value.</span></span> <span data-ttu-id="1d7fe-169">文字列形式には、名前または列挙定数の基になる値のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-169">The string representation can be either the name or the underlying value of an enumeration constant.</span></span> <span data-ttu-id="1d7fe-170">解析のメソッドが列挙体の基になる型の値に文字列を変換できる場合、特定の列挙体のメンバーではない数字の文字列形式に変換されますが正常に注意してください。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-170">Note that the parsing methods will successfully convert string representations of numbers that are not members of a particular enumeration if the strings can be converted to a value of the enumeration's underlying type.</span></span> <span data-ttu-id="1d7fe-171">これを防ぐため、<xref:System.Enum.IsDefined%2A>解析メソッドの結果が有効な列挙値であることを確認するメソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-171">To prevent this, the <xref:System.Enum.IsDefined%2A> method can be called to ensure that the result of the parsing method is a valid enumeration value.</span></span> <span data-ttu-id="1d7fe-172">この例は、この方法を示していて、両方への呼び出しを示しています、<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>と<xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-172">The example illustrates this approach and demonstrates calls to both the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> and <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="1d7fe-173">非ジェネリックの解析方法がキャスト (c#) または (Visual Basic) の適切な列挙型に変換する必要のあるオブジェクトを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-173">Note that the non-generic parsing method returns an object that you may have to cast (in C#) or convert (in Visual Basic) to the appropriate enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classparse1.cs#9)]
 [!code-vb[System.Enum.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classparse1.vb#9)]  
  
<a name="formatting"></a>   
### <a name="formatting-enumeration-values"></a><span data-ttu-id="1d7fe-174">列挙値の書式設定</span><span class="sxs-lookup"><span data-stu-id="1d7fe-174">Formatting enumeration values</span></span>  
 <span data-ttu-id="1d7fe-175">列挙値をそれぞれの文字列表現に変換するには、静的なを呼び出すことによって<xref:System.Enum.Format%2A>メソッドだけでなく、インスタンスのオーバー ロード<xref:System.Enum.ToString%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-175">You can convert enumeration values to their string representations by calling the static <xref:System.Enum.Format%2A> method, as well as the overloads of the instance <xref:System.Enum.ToString%2A> method.</span></span> <span data-ttu-id="1d7fe-176">文字列として表される列挙値の正確な方法を制御するのに書式指定文字列を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-176">You can use a format string to control the precise way in which an enumeration value is represented as a string.</span></span> <span data-ttu-id="1d7fe-177">詳細については、次を参照してください。[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-177">For more information, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="1d7fe-178">次の例を使用して、サポートされている列挙型書式指定文字列 ("G"または"g"、"D"または"d"、"X"または"x"と"F"または"f") の各変換のメンバー、`ArrivalStatus`文字列形式を列挙します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-178">The following example uses each of the supported enumeration format strings ("G" or "g", "D" or "d", "X" or "x", and "F" or "f" ) to convert a member of the `ArrivalStatus` enumeration to its string representations.</span></span>  
  
 [!code-csharp[System.Enum.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classformat1.cs#10)]
 [!code-vb[System.Enum.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classformat1.vb#10)]  
  
<a name="iterating"></a>   
### <a name="iterating-enumeration-members"></a><span data-ttu-id="1d7fe-179">列挙型のメンバーを反復処理します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-179">Iterating enumeration members</span></span>  
 <span data-ttu-id="1d7fe-180"><xref:System.Enum>型を実装しません、<xref:System.Collections.IEnumerable>または<xref:System.Collections.Generic.IEnumerable%601>インターフェイスを使用して、コレクションのメンバーを反復処理することを可能にすると、 `foreach` (C# の場合) または`For Each`(Visual Basic) で構築します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-180">The <xref:System.Enum> type does not implement the <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601> interface, which would enable you to iterate members of a collection by using a `foreach` (in C#) or `For Each` (in Visual Basic) construct.</span></span> <span data-ttu-id="1d7fe-181">ただし、2 つの方法のいずれかのメンバーを列挙できます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-181">However, you can enumerate members in either of two ways.</span></span>  
  
-   <span data-ttu-id="1d7fe-182">呼び出すことができます、<xref:System.Enum.GetNames%2A>列挙体メンバーの名前を含む文字列配列を取得します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-182">You can call the <xref:System.Enum.GetNames%2A> method to retrieve a string array containing the names of the enumeration members.</span></span> <span data-ttu-id="1d7fe-183">次に、文字列配列の各要素に対してを呼び出すことができます、<xref:System.Enum.Parse%2A>を等価の列挙の値に文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-183">Next, for each element of the string array, you can call the <xref:System.Enum.Parse%2A> method to convert the string to its equivalent enumeration value.</span></span> <span data-ttu-id="1d7fe-184">このアプローチの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-184">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#11)]
     [!code-vb[System.Enum.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#11)]  
  
-   <span data-ttu-id="1d7fe-185">呼び出すことができます、<xref:System.Enum.GetValues%2A>列挙体の値は、基になるを格納する配列を取得します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-185">You can call the <xref:System.Enum.GetValues%2A> method to retrieve an array that contains the underlying values in the enumeration.</span></span> <span data-ttu-id="1d7fe-186">次に、配列の各要素に対してを呼び出すことができます、<xref:System.Enum.ToObject%2A>を等価の列挙の値に整数に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-186">Next, for each element of the array, you can call the <xref:System.Enum.ToObject%2A> method to convert the integer to its equivalent enumeration value.</span></span> <span data-ttu-id="1d7fe-187">このアプローチの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-187">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#12)]
     [!code-vb[System.Enum.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#12)]  
  
<a name="Flags"></a>   
## <a name="non-exclusive-members-and-the-flags-attribute"></a><span data-ttu-id="1d7fe-188">非排他的なメンバーと Flags 属性</span><span class="sxs-lookup"><span data-stu-id="1d7fe-188">Non-exclusive members and the Flags attribute</span></span>  
 <span data-ttu-id="1d7fe-189">列挙型の 1 つの一般的な用途は、相互に排他的な値のセットを表してです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-189">One common use of an enumeration is to represent a set of mutually exclusive values.</span></span> <span data-ttu-id="1d7fe-190">たとえば、`ArrivalStatus`インスタンスの値をとります。 `Early`、 `OnTime`、または`Late`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-190">For example, an `ArrivalStatus` instance can have a value of `Early`, `OnTime`, or `Late`.</span></span> <span data-ttu-id="1d7fe-191">値の意味がない、`ArrivalStatus`インスタンス 1 つ以上の列挙定数を反映するようにします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-191">It makes no sense for the value of an `ArrivalStatus` instance to reflect more than one enumeration constant.</span></span>  
  
 <span data-ttu-id="1d7fe-192">ただし、それ以外の場合、列挙型のオブジェクトの値は、複数の列挙型メンバーを含めることができます、各メンバーは、列挙値のビット フィールドを表します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-192">In other cases, however, the value of an enumeration object can include multiple enumeration members, and each member represents a bit field in the enumeration value.</span></span> <span data-ttu-id="1d7fe-193"><xref:System.FlagsAttribute>属性は、ビット フィールドの列挙体で構成されているを示すために使用できます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-193">The <xref:System.FlagsAttribute> attribute can be used to indicate that the enumeration consists of bit fields.</span></span> <span data-ttu-id="1d7fe-194">たとえば、という名前の列挙`Pets`世帯でペットの種類を示すために使用される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-194">For example, an enumeration named `Pets` might be used to indicate the kinds of pets in a household.</span></span> <span data-ttu-id="1d7fe-195">次のように定義できます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-195">It can be defined as follows.</span></span>  
  
 [!code-csharp[System.Enum.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#13)]
 [!code-vb[System.Enum.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#13)]  
  
 <span data-ttu-id="1d7fe-196">`Pets`列挙体は、次の例で示すようにし、使用できます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-196">The `Pets` enumeration can then be used as shown in the following example.</span></span>  
  
 [!code-csharp[System.Enum.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#14)]
 [!code-vb[System.Enum.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#14)]  
  
 <span data-ttu-id="1d7fe-197">ビット単位を定義するときに、次のベスト プラクティスを使用する必要があります列挙体を適用する、<xref:System.FlagsAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-197">The following best practices should be used when defining a bitwise enumeration and applying the <xref:System.FlagsAttribute> attribute.</span></span>  
  
-   <span data-ttu-id="1d7fe-198">使用して、<xref:System.FlagsAttribute>ビットごとの演算 (AND、OR の排他的 OR) は、数値の値に対して実行する場合にのみ列挙型のカスタム属性です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-198">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="1d7fe-199">つまり、1、2、4、8、およびよびな 2 の累乗で列挙定数を定義します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-199">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="1d7fe-200">これは、結合された列挙定数の各フラグが重複しないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-200">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="1d7fe-201">一般的に使用されるフラグの組み合わせに対して列挙定数を作成することを検討します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-201">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="1d7fe-202">たとえば、ファイル I/O 操作に使用する列挙体がある場合を含む列挙型定数`Read = 1`と`Write = 2`、列挙型定数の作成を検討して`ReadWrite = Read OR Write`、どの結合、`Read`と`Write`フラグ。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-202">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="1d7fe-203">さらに、フラグの組み合わせに使用されるビットごとの OR 演算することはできません、単純なタスクをいくつかの状況での高度な概念と見なされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-203">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="1d7fe-204">多くのフラグの位置は 1 では、可能性があります、コードが複雑になる場合容易させ、コーディング エラーに設定する可能性がありますので、フラグの列挙定数として負の数を定義する場合は、注意を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-204">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="1d7fe-205">数値の値で、フラグが設定されているかどうかをテストする便利な方法は、インスタンスの呼び出しを<xref:System.Enum.HasFlag%2A>メソッドを次の例で示すようにします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-205">A convenient way to test whether a flag is set in a numeric value is to call the instance <xref:System.Enum.HasFlag%2A> method, as shown in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#15)]
     [!code-vb[System.Enum.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#15)]  
  
     <span data-ttu-id="1d7fe-206">これは、数値の値とすべてのビットを設定すると、フラグに対応していないゼロに対応する数値で、フラグ列挙型定数のビットごとの AND 演算を実行して、その操作の結果がフラグの列挙型定数と等しいかどうかをテストしてに相当します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-206">It is equivalent to performing a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, and then testing whether the result of that operation is equal to the flag enumerated constant.</span></span> <span data-ttu-id="1d7fe-207">このことを次の例で説明します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-207">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#16)]
     [!code-vb[System.Enum.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#16)]  
  
-   <span data-ttu-id="1d7fe-208">使用して`None`フラグの名前は列挙定数の値が 0 として。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-208">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="1d7fe-209">使用することはできません、`None`のため、結果は常に 0 フラグをテストするビットごとの AND 演算で列挙型定数。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-209">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="1d7fe-210">ただし、行うことができます、論理、数値の値の間でビット演算子、比較ではありません、`None`数値の値のビットを設定するかどうかを決定する列挙型定数。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-210">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span> <span data-ttu-id="1d7fe-211">このことを次の例で説明します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-211">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#17)]
     [!code-vb[System.Enum.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#17)]  
  
-   <span data-ttu-id="1d7fe-212">列挙体自体の状態を反映するだけの列挙値を定義しません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-212">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="1d7fe-213">たとえば、列挙の終了をマークするだけの列挙定数を定義してください。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-213">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="1d7fe-214">列挙体の最後の値を決定する必要がある場合は、その値を明示的に確認します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-214">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="1d7fe-215">さらに、範囲内のすべての値は有効な場合は、最初と最後の列挙型定数の範囲チェックを実行できます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-215">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
<a name="methods"></a>   
## <a name="adding-enumeration-methods"></a><span data-ttu-id="1d7fe-216">列挙メソッドを追加します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-216">Adding enumeration methods</span></span>  
 <span data-ttu-id="1d7fe-217">列挙型がなどの言語構造体によって定義されるため`enum`(c#) および`Enum`(Visual Basic) 列挙型から継承されたこれらのメソッド以外のカスタム メソッドを定義することはできません、<xref:System.Enum>クラスです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-217">Because enumeration types are defined by language structures, such as `enum` (C#) and `Enum` (Visual Basic), you cannot define custom methods for an enumeration type other than those methods inherited from the <xref:System.Enum> class.</span></span>  <span data-ttu-id="1d7fe-218">ただし、機能を特定の列挙型に追加するのに拡張メソッドを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-218">However, you can use extension methods to add functionality to a particular enumeration type.</span></span>  
  
 <span data-ttu-id="1d7fe-219">次の例では、`Grades` 列挙型は学生が授業で受け取る成績評価を表わしています。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-219">In the following example, the `Grades` enumeration represents the possible letter grades that a student may receive in a class.</span></span> <span data-ttu-id="1d7fe-220">`Passing` という名前の拡張機能メソッドが `Grades` 型に追加されていて、この型の各インスタンスが合格点を表しているかどうかを自ら "認識" できるようになっています。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-220">An extension method named `Passing` is added to the `Grades` type so that each instance of that type now "knows" whether it represents a passing grade or not.</span></span>       <span data-ttu-id="1d7fe-221">`Extensions`クラスには、最小合格を定義する静的な読み取り/書き込み変数も含まれています。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-221">The `Extensions` class also contains a static read-write variable that defines the minimum passing grade.</span></span> <span data-ttu-id="1d7fe-222">戻り値、`Passing`拡張メソッドには、その変数の現在の値が反映されます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-222">The return value of the `Passing` extension method reflects the current value of that variable.</span></span>  
  
 [!code-csharp[System.Enum.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/Extensions.cs#18)]
 [!code-vb[System.Enum.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/Extensions.vb#18)]  
  
   
  
## Examples  
 <span data-ttu-id="1d7fe-223">次の例では、名前付きの値と別の名前付きビット フィールドを表す列挙体を表す列挙体を使用してを示しています。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-223">The following example demonstrates using an enumeration to represent named values and another enumeration to represent named bit fields.</span></span>  
  
 [!code-cpp[enummain#1](~/samples/snippets/cpp/VS_Snippets_CLR/enummain/CPP/EnumMain.cpp#1)]
 [!code-csharp[enummain#1](~/samples/snippets/csharp/VS_Snippets_CLR/enummain/CS/EnumMain.cs#1)]
 [!code-vb[enummain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enummain/VB/EnumMain.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="1d7fe-224">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-224">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.ValueType" />
    <altmember cref="T:System.FlagsAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Enum ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Enum();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1d7fe-225"><see cref="T:System.Enum" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-225">Initializes a new instance of the <see cref="T:System.Enum" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (target As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="1d7fe-226">比較対象のオブジェクト、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-226">An object to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="1d7fe-227">指定したオブジェクトとこのインスタンスを比較し、これらの相対値を示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-227">Compares this instance to a specified object and returns an indication of their relative values.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-228">このインスタンスと <paramref name="target" /> の相対値を示す符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-228">A signed number that indicates the relative values of this instance and <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="1d7fe-229"><list type="table"><listheader><term> 値</span><span class="sxs-lookup"><span data-stu-id="1d7fe-229"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="1d7fe-230"></term><description> 意味</span><span class="sxs-lookup"><span data-stu-id="1d7fe-230"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="1d7fe-231"></description></listheader><item><term> 0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="1d7fe-231"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="1d7fe-232"></term><description> このインスタンスの値が <paramref name="target" /> より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-232"></term><description> The value of this instance is less than the value of <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="1d7fe-233"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="1d7fe-233"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="1d7fe-234"></term><description> このインスタンスの値が <paramref name="target" /> の値と同じです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-234"></term><description> The value of this instance is equal to the value of <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="1d7fe-235"></description></item><item><term> 0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="1d7fe-235"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="1d7fe-236"></term><description> このインスタンスの値が <paramref name="target" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-236"></term><description> The value of this instance is greater than the value of <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="1d7fe-237">- または -</span><span class="sxs-lookup"><span data-stu-id="1d7fe-237">-or-</span></span>  
  
 <span data-ttu-id="1d7fe-238"><paramref name="target" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-238"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1d7fe-239">次の例は、の使用を示しています。`CompareTo`のコンテキストで`Enum`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-239">The following example illustrates the use of `CompareTo` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumcompareto/CPP/EnumCompareTo.cpp#1)]
 [!code-csharp[enumcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumcompareto/CS/EnumCompareTo.cs#1)]
 [!code-vb[enumcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumcompareto/VB/EnumCompareTo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-240"><paramref name="target" /> とこのインスタンスは型が異なっています。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-240"><paramref name="target" /> and this instance are not the same type.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1d7fe-241">このインスタンスの型が、<see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" />、または <see cref="T:System.UInt64" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-241">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="1d7fe-242">対象のインスタンスと比較する対象のオブジェクト、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-242">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="1d7fe-243">このインスタンスが指定されたオブジェクトに等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-243">Returns a value indicating whether this instance is equal to a specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="1d7fe-244"><paramref name="obj" /> が同じ型の列挙体値で、基になる値がこのインスタンスと同じである場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-244"><see langword="true" /> if <paramref name="obj" /> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-245"><xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType>メソッドのオーバーライド<xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType>を等価の列挙型のメンバーを評価する方法を定義します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-245">The <xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> to define how enumeration members are evaluated for equality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d7fe-246"><xref:System.Enum.Equals%2A> メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-246">The following example illustrates the use of the <xref:System.Enum.Equals%2A> method.</span></span>  
  
 [!code-cpp[enumequals#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumequals/CPP/EnumEquals.cpp#1)]
 [!code-csharp[enumequals#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumequals/CS/EnumEquals.cs#1)]
 [!code-vb[enumequals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumequals/VB/EnumEquals.vb#1)]  
  
 <span data-ttu-id="1d7fe-247">次の例は、次の 2 つの列挙型を定義`SledDog`と`WorkDog`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-247">The following example defines two enumeration types, `SledDog` and `WorkDog`.</span></span> <span data-ttu-id="1d7fe-248">`SledDog`列挙体には 2 つのメンバー、`SledDog.AlaskanMalamute`と`SledDog.Malamute`、基になる値が同じであること。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-248">The `SledDog` enumeration has two members, `SledDog.AlaskanMalamute` and `SledDog.Malamute`, that have the same underlying value.</span></span> <span data-ttu-id="1d7fe-249">呼び出し、<xref:System.Enum.Equals%2A>メソッドでは、その基になる値が同じなのでこれらの値が等しいことを示します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-249">The call to the <xref:System.Enum.Equals%2A> method indicates that these values are equal because their underlying values are the same.</span></span> <span data-ttu-id="1d7fe-250">`SledDog.Malamute`と`WorkDog.Newfoundland`異なる列挙型であるが、基になる値が同じをメンバーであります。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-250">The `SledDog.Malamute` and `WorkDog.Newfoundland` members have the same underlying value, although they represent different enumeration types.</span></span> <span data-ttu-id="1d7fe-251">呼び出し、<xref:System.Enum.Equals%2A>メソッドでは、これらの値が等しくないことを示します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-251">A call to the <xref:System.Enum.Equals%2A> method indicates that these values are not equal.</span></span>  
  
 [!code-csharp[System.Enum.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.equals/cs/enumequals.cs#1)]
 [!code-vb[System.Enum.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.equals/vb/enumequals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Enum.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (Type enumType, object value, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.Type enumType, object value, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (enumType As Type, value As Object, format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(Type ^ enumType, System::Object ^ value, System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-252">変換する値の列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-252">The enumeration type of the value to convert.</span></span></param>
        <param name="value"><span data-ttu-id="1d7fe-253">変換する値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-253">The value to convert.</span></span></param>
        <param name="format"><span data-ttu-id="1d7fe-254">使用する出力形式。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-254">The output format to use.</span></span></param>
        <summary><span data-ttu-id="1d7fe-255">指定した形式に従って、指定した列挙型の指定した値をそれと等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-255">Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-256"><paramref name="value" /> の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-256">A string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-257">次の表に有効な値を示しています、`format`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-257">The following table shows the valid values for the `format` parameter.</span></span>  
  
|<span data-ttu-id="1d7fe-258">形式</span><span class="sxs-lookup"><span data-stu-id="1d7fe-258">Format</span></span>|<span data-ttu-id="1d7fe-259">説明</span><span class="sxs-lookup"><span data-stu-id="1d7fe-259">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="1d7fe-260">"G" または "g"</span><span class="sxs-lookup"><span data-stu-id="1d7fe-260">"G" or "g"</span></span>|<span data-ttu-id="1d7fe-261">場合`value`は名前付きの列挙型定数に等しく、その定数の名前を返します。 それ以外の場合、10 進数表`value`が返されます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-261">If `value` is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of `value` is returned.</span></span><br /><br /> <span data-ttu-id="1d7fe-262">たとえば、唯一の列挙定数が赤をという名前し、その値は 1 です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-262">For example, suppose the only enumerated constant is named Red, and its value is 1.</span></span> <span data-ttu-id="1d7fe-263">場合`value`は 1 で指定、この形式は"Red"を返します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-263">If `value` is specified as 1, this format returns "Red".</span></span> <span data-ttu-id="1d7fe-264">ただし場合、 `value` 2 として指定されて、この形式は「2」を返します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-264">However, if `value` is specified as 2, this format returns "2".</span></span><br /><br /> <span data-ttu-id="1d7fe-265">- または -</span><span class="sxs-lookup"><span data-stu-id="1d7fe-265">-or-</span></span><br /><br /> <span data-ttu-id="1d7fe-266">場合、<xref:System.FlagsAttribute>カスタム属性が、列挙型に適用される`value`は 1 つ以上のビットで構成される 1 つまたは複数のフラグが含まれているビット フィールドとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-266">If the <xref:System.FlagsAttribute> custom attribute is applied to the enumeration, `value` is treated as a bit field that contains one or more flags that consist of one or more bits.</span></span><br /><br /> <span data-ttu-id="1d7fe-267">場合`value`列挙定数の名前の組み合わせと等しいかどうかが、これらの定数の名前のコンマ区切りのリストが返されます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-267">If `value` is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned.</span></span> <span data-ttu-id="1d7fe-268">`value` 最大値を含むフラグから最小値へと向かうフラグが検索されます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-268">`value` is searched for flags, going from the flag with the largest value to the smallest value.</span></span> <span data-ttu-id="1d7fe-269">内のビット フィールドに対応する各フラグの`value`、区切り記号で区切られたリストに定数の名前を連結します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-269">For each flag that corresponds to a bit field in `value`, the name of the constant is concatenated to the delimiter-separated list.</span></span> <span data-ttu-id="1d7fe-270">そのフラグの値は、さらに考慮対象から除外し、次のフラグから検索を続行します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-270">The value of that flag is then excluded from further consideration, and the search continues for the next flag.</span></span><br /><br /> <span data-ttu-id="1d7fe-271">場合`value`は等しくありませんの組み合わせと等価の 10 進の等価の列挙定数をという名前`value`が返されます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-271">If `value` is not equal to a combination of named enumerated constants, the decimal equivalent of `value` is returned.</span></span>|  
|<span data-ttu-id="1d7fe-272">"X" または "x"</span><span class="sxs-lookup"><span data-stu-id="1d7fe-272">"X" or "x"</span></span>|<span data-ttu-id="1d7fe-273">表す`value`先頭に"0 x"のない 16 進数形式でします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-273">Represents `value` in hexadecimal format without a leading "0x".</span></span>|  
|<span data-ttu-id="1d7fe-274">"D" または "d"</span><span class="sxs-lookup"><span data-stu-id="1d7fe-274">"D" or "d"</span></span>|<span data-ttu-id="1d7fe-275">表す`value`10 進数。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-275">Represents `value` in decimal form.</span></span>|  
|<span data-ttu-id="1d7fe-276">"F" または "f"</span><span class="sxs-lookup"><span data-stu-id="1d7fe-276">"F" or "f"</span></span>|<span data-ttu-id="1d7fe-277">"G"または"g"、同じように動作する点を除いて、<xref:System.FlagsAttribute>に存在している必要はありません、<xref:System.Enum>宣言します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-277">Behaves identically to "G" or "g", except that the <xref:System.FlagsAttribute> is not required to be present on the <xref:System.Enum> declaration.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="1d7fe-278">次の例は、の使用を示しています。`Format`のコンテキストで`Enum`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-278">The following example illustrates the use of `Format` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumformat/CPP/EnumFormat.cpp#1)]
 [!code-csharp[enumformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumformat/CS/EnumFormat.cs#1)]
 [!code-vb[enumformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumformat/VB/EnumFormat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1d7fe-279"><paramref name="enumType" />、<paramref name="value" />、または <paramref name="format" /> パラメーターが <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-279">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1d7fe-280"><paramref name="enumType" /> パラメーターが <see cref="T:System.Enum" /> 型ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-280">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.</span></span>  
  
 <span data-ttu-id="1d7fe-281">- または -</span><span class="sxs-lookup"><span data-stu-id="1d7fe-281">-or-</span></span>  
  
 <span data-ttu-id="1d7fe-282"><paramref name="value" /> は、<paramref name="enumType" /> とは型の異なる列挙体からの値です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-282">The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.</span></span>  
  
 <span data-ttu-id="1d7fe-283">- または -</span><span class="sxs-lookup"><span data-stu-id="1d7fe-283">-or-</span></span>  
  
 <span data-ttu-id="1d7fe-284"><paramref name="value" /> の型が、<paramref name="enumType" /> の基になる型ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-284">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="1d7fe-285"><paramref name="format" /> パラメーターには無効な値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-285">The <paramref name="format" /> parameter contains an invalid value.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1d7fe-286"><paramref name="format" /> は "X"と等しいですが、列挙型は不明です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-286"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.ToString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1d7fe-287">このインスタンスの値のハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-287">Returns the hash code for the value of this instance.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-288">32 ビット符号付き整数ハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-288">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public static string GetName (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetName(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetName(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetName (enumType As Type, value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetName(Type ^ enumType, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-289">列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-289">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="1d7fe-290">基になる型に関連する特定の列挙型定数の値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-290">The value of a particular enumerated constant in terms of its underlying type.</span></span></param>
        <summary><span data-ttu-id="1d7fe-291">指定した値を持つ指定した列挙体にある定数の名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-291">Retrieves the name of the constant in the specified enumeration that has the specified value.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-292">値が <paramref name="enumType" /> である <paramref name="value" /> 内にある列挙型定数の名前が含まれた文字列。そのような定数が見つからない場合は、<see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-292">A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />; or <see langword="null" /> if no such constant is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-293">複数の列挙メンバー値がある場合、同じ基になる、<xref:System.Enum.GetName%2A>メソッドは、その列挙体メンバーのいずれかの名前が返されることを保証します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-293">If multiple enumeration members have the same underlying value, the <xref:System.Enum.GetName%2A> method guarantees that it will return the name of one of those enumeration members.</span></span> <span data-ttu-id="1d7fe-294">ただし、これは保証されないことが常に返される同じ列挙型メンバーの名前。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-294">However, it does not guarantee that it will always return the name of the same enumeration member.</span></span> <span data-ttu-id="1d7fe-295">結果として、複数の列挙体メンバーの値が同じ場合は、アプリケーション コード必要がありますしないによって異なります特定メンバーの名前を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-295">As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member's name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d7fe-296">次の例は、の使用を示しています。`GetName`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-296">The following example illustrates the use of `GetName`.</span></span>  
  
 [!code-cpp[enumgetname#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetname/CPP/EnumGetName.cpp#1)]
 [!code-csharp[enumgetname#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetname/CS/EnumGetName.cs#1)]
 [!code-vb[enumgetname#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetname/VB/EnumGetName.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-297"><paramref name="enumType" /> または <paramref name="value" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-297"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-298"><paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-298"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="1d7fe-299">- または -</span><span class="sxs-lookup"><span data-stu-id="1d7fe-299">-or-</span></span>  
  
 <span data-ttu-id="1d7fe-300"><paramref name="value" /> の型が <paramref name="enumType" /> ではなく、基になる型も <paramref name="enumType" /> と同じではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-300"><paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNames">
      <MemberSignature Language="C#" Value="public static string[] GetNames (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetNames(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetNames(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNames (enumType As Type) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetNames(Type ^ enumType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-301">列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-301">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="1d7fe-302">指定した列挙体に含まれている定数の名前の配列を取得します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-302">Retrieves an array of the names of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-303"><paramref name="enumType" /> に含まれている定数の名前の文字列配列。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-303">A string array of the names of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-304">戻り値の配列の要素は、列挙型定数のバイナリ値で並べ替えられます (つまり、その符号なしの大きさによって)。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-304">The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="1d7fe-305">次の例は、によって返される配列に関する情報を表示、<xref:System.Enum.GetNames%2A>負の値や 0、正の値を含む列挙体のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-305">The following example provides displays information about the array returned by the <xref:System.Enum.GetNames%2A> method for an enumeration that includes a negative, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getnames/cs/getnames1.cs#1)]
 [!code-vb[System.Enum.GetNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getnames/vb/getnames1.vb#1)]  
  
 <span data-ttu-id="1d7fe-306">同じ値を持つ列挙定数がある場合は、対応する名前の順序は指定されません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-306">If there are enumerated constants with same value, the order of their corresponding names is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d7fe-307"><xref:System.Enum.GetNames%2A> メソッドの使用例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-307">The following example illustrates the use of the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 [!code-cpp[enumgetnames#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetnames/CPP/EnumGetNames.cpp#1)]
 [!code-csharp[enumgetnames#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetnames/CS/EnumGetNames.cs#1)]
 [!code-vb[enumgetnames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetnames/VB/EnumGetNames.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-308"><paramref name="enumType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-308"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-309"><paramref name="enumType" /> パラメーターが <see cref="T:System.Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-309"><paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1d7fe-310">この列挙メンバーの基になる型の型コードを返します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-310">Returns the type code of the underlying type of this enumeration member.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-311">このインスタンスの基になる型の型コードを返します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-311">The type code of the underlying type of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1d7fe-312">列挙型が不明です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-312">The enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.GetUnderlyingType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnderlyingType">
      <MemberSignature Language="C#" Value="public static Type GetUnderlyingType (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetUnderlyingType(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetUnderlyingType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnderlyingType (enumType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetUnderlyingType(Type ^ enumType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-313">基になる型が取得される列挙。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-313">The enumeration whose underlying type will be retrieved.</span></span></param>
        <summary><span data-ttu-id="1d7fe-314">指定した列挙体の基になる型を返します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-314">Returns the underlying type of the specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-315"><paramref name="enumType" /> の基になる型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-315">The underlying type of <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-316"><xref:System.Enum>構造により、名前付き定数として表現されている値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-316">The <xref:System.Enum> structure enables values to be represented as named constants.</span></span> <span data-ttu-id="1d7fe-317">列挙型の値のデータ型は、基になる型と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-317">The data type of the enumeration's values is known as its underlying type.</span></span> <span data-ttu-id="1d7fe-318">たとえば、基になる型の<xref:System.DayOfWeek>列挙体は、各曜日を表す定数で構成されます (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>、<xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>など) は<xref:System.Int32>します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-318">For example, the underlying type of the <xref:System.DayOfWeek> enumeration, which consists of constants that represent each day of the week (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>, and so on), is <xref:System.Int32>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d7fe-319">次の例では、<xref:System.Enum.GetUnderlyingType%2A>メソッドをいくつかの列挙メンバーの基になる型を表示します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-319">The following example calls the <xref:System.Enum.GetUnderlyingType%2A> method to display the underlying type of some enumeration members.</span></span>  
  
 [!code-csharp[System.Enum.GetUnderlyingType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getunderlyingtype/cs/getunderlyingtype1.cs#1)]
 [!code-vb[System.Enum.GetUnderlyingType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getunderlyingtype/vb/getunderlyingtype1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-320"><paramref name="enumType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-320"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-321"><paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-321"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.GetTypeCode" />
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public static Array GetValues (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array GetValues(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetValues(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValues (enumType As Type) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ GetValues(Type ^ enumType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-322">列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-322">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="1d7fe-323">指定した列挙体に含まれている定数の値の配列を取得します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-323">Retrieves an array of the values of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-324"><paramref name="enumType" /> に含まれている定数の値を格納する配列。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-324">An array that contains the values of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-325">配列の要素は列挙定数のバイナリ値に基づいて並べ替えられます (つまり、その符号なしの大きさによって)。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-325">The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="1d7fe-326">次の例は、によって返される配列に関する情報を表示、<xref:System.Enum.GetValues%2A>負の値や 0、正の値を含む列挙体のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-326">The following example displays information about the array returned by the <xref:System.Enum.GetValues%2A> method for an enumeration that includes a negative value, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues1.cs#1)]
 [!code-vb[System.Enum.GetValues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues1.vb#1)]  
  
 <span data-ttu-id="1d7fe-327"><xref:System.Enum.GetValues%2A>メソッドの各メンバーの値を含む配列を返します、`enumType`列挙します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-327">The <xref:System.Enum.GetValues%2A> method returns an array that contains a value for each member of the `enumType` enumeration.</span></span> <span data-ttu-id="1d7fe-328">複数のメンバーの値が同じ場合は、返される配列には、重複する値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-328">If multiple members have the same value, the returned array includes duplicate values.</span></span> <span data-ttu-id="1d7fe-329">この場合、呼び出し、<xref:System.Enum.GetName%2A>返される配列内の各値を持つメソッドが重複する値を持つメンバーに割り当てられた一意の名前を復元できません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-329">In this case, calling the <xref:System.Enum.GetName%2A> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values.</span></span> <span data-ttu-id="1d7fe-330">すべての列挙体メンバーの名前を正常に取得する、<xref:System.Enum.GetNames%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-330">To retrieve all the names of enumeration members successfully, call the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 <span data-ttu-id="1d7fe-331"><xref:System.Enum.GetValues%2A>リフレクションのみのコンテキストでリフレクションを使用してメソッドを呼び出すことができません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-331">The <xref:System.Enum.GetValues%2A> method cannot be invoked by using reflection in a reflection-only context.</span></span> <span data-ttu-id="1d7fe-332">使用してすべての列挙体メンバーの値を取得する代わりに、<xref:System.Type.GetFields%2A?displayProperty=nameWithType>の配列を取得するメソッド<xref:System.Reflection.FieldInfo>列挙型のメンバーを表すオブジェクトを呼び出す、<xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType>配列の各要素に対してメソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-332">Instead, you can retrieve the value of all enumeration members by using the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get an array of <xref:System.Reflection.FieldInfo> objects that represent enumeration members and then call the <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> method on each element of the array.</span></span> <span data-ttu-id="1d7fe-333">次の例では、この方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-333">The following example illustrates this technique.</span></span> <span data-ttu-id="1d7fe-334">これは、Enumerations.dll をという名前のアセンブリでは、次の列挙型を定義することが必要です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-334">It requires that you define the following enumeration in an assembly named Enumerations.dll:</span></span>  
  
 [!code-csharp[System.Enum.GetValues#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#2)]
 [!code-vb[System.Enum.GetValues#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#2)]  
  
 <span data-ttu-id="1d7fe-335">アセンブリがリフレクションのみのコンテキストに読み込まれている、<xref:System.Type>を表すオブジェクト、`Pets`列挙型がインスタンス化の配列<xref:System.Reflection.FieldInfo>オブジェクトを取得し、フィールドの値がコンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-335">The assembly is loaded in a reflection-only context, a <xref:System.Type> object that represents the `Pets` enumeration is instantiated, an array of <xref:System.Reflection.FieldInfo> objects is retrieved, and the field values are displayed to the console.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#3)]
 [!code-vb[System.Enum.GetValues#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="1d7fe-336">次の例は、の使用を示しています。<xref:System.Enum.GetValues%2A>です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-336">The following example illustrates the use of <xref:System.Enum.GetValues%2A>.</span></span>  
  
 [!code-cpp[enumgetvalues#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetvalues/CPP/EnumGetValues.cpp#1)]
 [!code-csharp[enumgetvalues#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetvalues/CS/EnumGetValues.cs#1)]
 [!code-vb[enumgetvalues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetvalues/VB/EnumGetValues.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-337"><paramref name="enumType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-337"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-338"><paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-338"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1d7fe-339">リフレクションのみのコンテキストでのリフレクションによって、メソッドが呼び出されます</span><span class="sxs-lookup"><span data-stu-id="1d7fe-339">The method is invoked by reflection in a reflection-only context,</span></span>  
  
 <span data-ttu-id="1d7fe-340">- または -</span><span class="sxs-lookup"><span data-stu-id="1d7fe-340">-or-</span></span>  
  
 <span data-ttu-id="1d7fe-341"><paramref name="enumType" /> はリフレクションのみのコンテキストに読み込まれたアセンブリからの型です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-341"><paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HasFlag">
      <MemberSignature Language="C#" Value="public bool HasFlag (Enum flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasFlag(class System.Enum flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.HasFlag(System.Enum)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasFlag (flag As Enum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasFlag(Enum ^ flag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Enum" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="1d7fe-342">列挙値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-342">An enumeration value.</span></span></param>
        <summary><span data-ttu-id="1d7fe-343">現在のインスタンスで 1 つ以上のビット フィールドが設定されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-343">Determines whether one or more bit fields are set in the current instance.</span></span></summary>
        <returns>
          <span data-ttu-id="1d7fe-344"><paramref name="flag" /> に設定されているビット フィールドが現在のインスタンスでも設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-344"><see langword="true" /> if the bit field or bit fields that are set in <paramref name="flag" /> are also set in the current instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-345"><xref:System.Enum.HasFlag%2A>メソッドには、次のブール式の結果が返されます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-345">The <xref:System.Enum.HasFlag%2A> method returns the result of the following Boolean expression.</span></span>  
  
```  
thisInstance And flag = flag   
```  
  
 <span data-ttu-id="1d7fe-346">場合の基になる値`flag`0 の場合は、メソッドが返される`true`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-346">If the underlying value of `flag` is zero, the method returns `true`.</span></span> <span data-ttu-id="1d7fe-347">この動作が望ましくない場合を使用できます、 <xref:System.Enum.Equals%2A> 0 や呼び出しとの等価性をテストするメソッド<xref:System.Enum.HasFlag%2A>場合にのみの基になる値`flag`0 以外の場合は、次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-347">If this behavior is not desirable, you can use the <xref:System.Enum.Equals%2A> method to test for equality with zero and call <xref:System.Enum.HasFlag%2A> only if the underlying value of `flag` is non-zero, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag0.cs#1)]
 [!code-vb[System.Enum.HasFlag#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag0.vb#1)]  
  
 <span data-ttu-id="1d7fe-348"><xref:System.Enum.HasFlag%2A>でマークされた列挙型で使用するメソッドが設計されています、<xref:System.FlagsAttribute>属性し、複数のビット フィールドが設定されているかどうかを確認するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-348">The <xref:System.Enum.HasFlag%2A> method is designed to be used with enumeration types that are marked with the <xref:System.FlagsAttribute> attribute and can be used to determine whether multiple bit fields are set.</span></span> <span data-ttu-id="1d7fe-349">マークされていない列挙型の<xref:System.FlagsAttribute>属性、いずれかを呼び出す、<xref:System.Enum.Equals%2A>メソッドまたは<xref:System.Enum.CompareTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-349">For enumeration types that are not marked with the <xref:System.FlagsAttribute> attribute, call either the <xref:System.Enum.Equals%2A> method or the <xref:System.Enum.CompareTo%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d7fe-350">次の例では定義、`ItemsOrdered`顧客がレストランで注文できます項目のカテゴリを表す列挙。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-350">The following example defines an `ItemsOrdered` enumeration that reflects categories of items that a customer can order in a restaurant.</span></span> <span data-ttu-id="1d7fe-351">この例では、前菜と飲み物の両方の顧客が注文があるかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-351">The example tests whether the customer has ordered both an entrée and a beverage.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag1.cs#2)]
 [!code-vb[System.Enum.HasFlag#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-352"><paramref name="flag" /> の型が、現在のインスタンスの型と異なっています。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-352"><paramref name="flag" /> is a different type than the current instance.</span></span></exception>
        <altmember cref="T:System.FlagsAttribute" />
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.IsDefined(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefined (enumType As Type, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefined(Type ^ enumType, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-353">列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-353">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="1d7fe-354"><c>enumType</c> 内の定数の値または名前。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-354">The value or name of a constant in <c>enumType</c>.</span></span></param>
        <summary><span data-ttu-id="1d7fe-355">指定した値を持つ定数が指定した列挙体に存在するかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-355">Returns an indication whether a constant with a specified value exists in a specified enumeration.</span></span></summary>
        <returns>
          <span data-ttu-id="1d7fe-356"><paramref name="enumType" /> 内の定数の値が <paramref name="value" /> と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-356"><see langword="true" /> if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-357">`value`パラメーターには、次のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-357">The `value` parameter can be any of the following:</span></span>  
  
-   <span data-ttu-id="1d7fe-358">型のメンバーはすべて`enumType`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-358">Any member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="1d7fe-359">値が型の列挙体のメンバーである変数`enumType`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-359">A variable whose value is an enumeration member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="1d7fe-360">列挙体のメンバーの名前の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-360">The string representation of the name of an enumeration member.</span></span> <span data-ttu-id="1d7fe-361">文字列の文字には、列挙メンバー名として同じ大文字と小文字が必要です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-361">The characters in the string must have the same case as the enumeration member name.</span></span>  
  
-   <span data-ttu-id="1d7fe-362">基になる型の値`enumType`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-362">A value of the underlying type of `enumType`.</span></span>  
  
 <span data-ttu-id="1d7fe-363">場合の定数は、`enumType`ビット フィールドのセットを定義および`value`値、名、または複数のビット フィールドの基になる値が含まれています、<xref:System.Enum.IsDefined%2A>メソッドを返します。`false`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-363">If the constants in `enumType` define a set of bit fields and `value` contains the values, names, or underlying values of multiple bit fields, the <xref:System.Enum.IsDefined%2A> method returns `false`.</span></span> <span data-ttu-id="1d7fe-364">つまり、列挙型ビット フィールドのセットを定義するを判断するメソッドのみ 1 ビット フィールドが列挙体に属しているかどうか。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-364">In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration.</span></span> <span data-ttu-id="1d7fe-365">タグ付けされた列挙型で複数のビット フィールドが設定されているかどうかを決定する、<xref:System.FlagsAttribute>呼び出すことができます、属性、<xref:System.Enum.HasFlag%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-365">To determine whether multiple bit fields are set in an enumeration type that is tagged with the <xref:System.FlagsAttribute> attribute, you can call the <xref:System.Enum.HasFlag%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d7fe-366">次の例は、という名前の列挙を定義`PetType`個別のフィールドで構成されます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-366">The following example defines an enumeration named `PetType` that consists of individual bit fields.</span></span> <span data-ttu-id="1d7fe-367">呼び出して、<xref:System.Enum.IsDefined%2A>列挙値、文字列名、および複数のビット フィールドの設定に起因する複合型の値を基になる、できる限りメソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-367">It then calls the <xref:System.Enum.IsDefined%2A> method with possible underlying enumeration values, string names, and composite values that result from setting multiple bit fields.</span></span>  
  
 [!code-csharp[System.Enum.IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined1.cs#1)]
 [!code-vb[System.Enum.IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/IsDefined1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-368"><paramref name="enumType" /> または <paramref name="value" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-368"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-369"><paramref name="enumType" /> が <see langword="Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-369"><paramref name="enumType" /> is not an <see langword="Enum" />.</span></span>  
  
 <span data-ttu-id="1d7fe-370">- または -</span><span class="sxs-lookup"><span data-stu-id="1d7fe-370">-or-</span></span>  
  
 <span data-ttu-id="1d7fe-371"><paramref name="value" /> の型は列挙体ですが、型 <paramref name="enumType" /> 型の列挙体ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-371">The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.</span></span>  
  
 <span data-ttu-id="1d7fe-372">- または -</span><span class="sxs-lookup"><span data-stu-id="1d7fe-372">-or-</span></span>  
  
 <span data-ttu-id="1d7fe-373"><paramref name="value" /> の型が、<paramref name="enumType" /> の基になる型ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-373">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1d7fe-374"><paramref name="value" /> の型が <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" />、<see cref="T:System.UInt64" />、<see cref="T:System.String" /> のどれでもありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-374"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="1d7fe-375">場合<paramref name="enumType" />を使用して定義されている列挙体です、<see cref="T:System.FlagsAttribute" />属性、メソッドを返します<see langword="false" />場合は、複数のビット フィールドで<paramref name="value" />設定されますが、<paramref name="value" />複合列挙値に対応していない場合、または<paramref name="value" />は、複数のビット フラグの名前の文字列の連結。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-375">If <paramref name="enumType" /> is an enumeration that is defined by using the <see cref="T:System.FlagsAttribute" /> attribute, the method returns <see langword="false" /> if multiple bit fields in <paramref name="value" /> are set but <paramref name="value" /> does not correspond to a composite enumeration value, or if <paramref name="value" /> is a string concatenation of the names of multiple bit flags.</span></span> <span data-ttu-id="1d7fe-376">次の例で、<c>ペット</c>の列挙が定義されて、<see cref="T:System.FlagsAttribute" />属性。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-376">In the following example, a <c>Pets</c> enumeration is defined with the <see cref="T:System.FlagsAttribute" /> attribute.</span></span> <span data-ttu-id="1d7fe-377"><see cref="M:System.Enum.IsDefined(System.Type,System.Object)" />メソッドを返します<see langword="false" />を渡す場合、2 つのビット フィールドが含まれる列挙値 (<c>Pets.Dog</c>と<c>Pets.Cat</c>) 設定、やり取りするとき、その文字列形式を、。列挙値 (「Dog, Cat」) です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-377">The <see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> method returns <see langword="false" /> when you pass it an enumeration value that has two bit fields (<c>Pets.Dog</c> and <c>Pets.Cat</c>) set, and when you pass it the string representation of that enumeration value ("Dog, Cat").</span></span>  
  
 [!code-csharp[System.Enum.IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined2.cs#2)]
 [!code-vb[System.Enum.IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/isdefined2.vb#2)]  
  
 <span data-ttu-id="1d7fe-378">呼び出すことによって複数のビット フィールドを設定するかどうかを決定できます、<see cref="M:System.Enum.HasFlag(System.Enum)" />メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-378">You can determine whether multiple bit fields are set by calling the <see cref="M:System.Enum.HasFlag(System.Enum)" /> method.</span></span></para>
        </block>
        <altmember cref="M:System.Enum.GetName(System.Type,System.Object)" />
        <altmember cref="M:System.Enum.GetNames(System.Type)" />
        <altmember cref="M:System.Enum.GetValues(System.Type)" />
        <altmember cref="M:System.Enum.HasFlag(System.Enum)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1d7fe-379">文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-379">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <altmember cref="M:System.Enum.TryParse``1(System.String,``0@)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-380">列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-380">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="1d7fe-381">変換する名前または値が含まれている文字列。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-381">A string containing the name or value to convert.</span></span></param>
        <summary><span data-ttu-id="1d7fe-382">文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-382">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-383">値が <paramref name="enumType" /> により表される <paramref name="value" /> 型のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-383">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-384">`value`パラメーターには、列挙体のメンバーの基になる値や名前付き定数の文字列表現が含まれているかの一覧がコンマ (,) で区切られた定数をという名前です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-384">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="1d7fe-385">1 つ以上の空白文字が前または次の各値、名前、またはコンマで`value`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-385">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="1d7fe-386">場合`value`リストで、戻り値は、ビットごとと組み合わせて、指定した名前の値`OR`操作します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-386">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="1d7fe-387">場合`value`の名前付き定数に対応していない名前は、`enumType`がスローされます、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-387">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="1d7fe-388">場合`value`の基になる値を表していないを整数の文字列表現です、`enumType`列挙型、メソッドは、基になる値が列挙体のメンバーを返します`value`整数型に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-388">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="1d7fe-389">この動作が望ましくない場合は、呼び出し、<xref:System.Enum.IsDefined%2A>整数の特定の文字列表現が実際のメンバーであることを確認するメソッド`enumType`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-389">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="1d7fe-390">次の例では定義、`Colors`列挙型、呼び出し、 <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> 、対応する列挙値、および呼び出し文字列に変換するメソッド、<xref:System.Enum.IsDefined%2A>の値が特定の整数値が基になることを確認する方法、`Colors`列挙します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-390">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample1.cs#1)]
 [!code-vb[System.Enum.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample1.vb#1)]  
  
 <span data-ttu-id="1d7fe-391">この操作は、大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-391">This operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d7fe-392">次の例では、<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>メソッドを呼び出すことによって作成される文字列の配列を解析、<xref:System.Enum.GetNames%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-392">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="1d7fe-393">また、使用、<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>ビット フィールドで構成される列挙値を解析します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-393">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-cpp[enumparse#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumparse/CPP/EnumParse.cpp#1)]
 [!code-csharp[enumparse#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumparse/CS/EnumParse.cs#1)]
 [!code-vb[enumparse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumparse/VB/EnumParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-394"><paramref name="enumType" /> または <paramref name="value" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-394"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-395"><paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-395"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="1d7fe-396">- または -</span><span class="sxs-lookup"><span data-stu-id="1d7fe-396">-or-</span></span>  
  
 <span data-ttu-id="1d7fe-397"><paramref name="value" /> が空の文字列であるか、または空白しか含まれていません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-397"><paramref name="value" /> is either an empty string or only contains white space.</span></span>  
  
 <span data-ttu-id="1d7fe-398">- または -</span><span class="sxs-lookup"><span data-stu-id="1d7fe-398">-or-</span></span>  
  
 <span data-ttu-id="1d7fe-399"><paramref name="value" /> は名前ですが、列挙体に対して定義された名前付き定数ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-399"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="1d7fe-400"><paramref name="value" /> が <paramref name="enumType" /> の基になる型の範囲外の値です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-400"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String, ignoreCase As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-401">列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-401">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="1d7fe-402">変換する名前または値が含まれている文字列。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-402">A string containing the name or value to convert.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="1d7fe-403">大文字と小文字を区別しない場合は <see langword="true" />。大文字と小文字を区別する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-403"><see langword="true" /> to ignore case; <see langword="false" /> to regard case.</span></span></param>
        <summary><span data-ttu-id="1d7fe-404">文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-404">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="1d7fe-405">演算で大文字と小文字を区別しないかどうかをパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-405">A parameter specifies whether the operation is case-insensitive.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-406">値が <paramref name="enumType" /> により表される <paramref name="value" /> 型のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-406">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-407">`value`パラメーターには、列挙体のメンバーの基になる値や名前付き定数の文字列表現が含まれているかの一覧がコンマ (,) で区切られた定数をという名前です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-407">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="1d7fe-408">1 つ以上の空白文字が前または次の各値、名前、またはコンマで`value`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-408">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="1d7fe-409">場合`value`リストで、戻り値は、ビットごとと組み合わせて、指定した名前の値`OR`操作します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-409">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="1d7fe-410">場合`value`の名前付き定数に対応していない名前は、`enumType`がスローされます、<xref:System.ArgumentException>です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-410">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="1d7fe-411">場合`value`の基になる値を表していないを整数の文字列表現です、`enumType`列挙型、メソッドは、基になる値が列挙体のメンバーを返します`value`整数型に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-411">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="1d7fe-412">この動作が望ましくない場合は、呼び出し、<xref:System.Enum.IsDefined%2A>整数の特定の文字列表現が実際のメンバーであることを確認するメソッド`enumType`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-412">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="1d7fe-413">次の例では定義、`Colors`列挙型、呼び出し、 <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> 、対応する列挙値、および呼び出し文字列に変換するメソッド、<xref:System.Enum.IsDefined%2A>の値が特定の整数値が基になることを確認する方法、`Colors`列挙します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-413">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 <span data-ttu-id="1d7fe-414">`ignoreCase`パラメーターは、この操作は、大文字小文字を区別するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-414">The `ignoreCase` parameter specifies whether this operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d7fe-415">次の例では、<xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29>メソッドを呼び出すことによって作成される文字列の配列を解析、<xref:System.Enum.GetNames%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-415">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="1d7fe-416">また、使用、<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>ビット フィールドで構成される列挙値を解析します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-416">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-417"><paramref name="enumType" /> または <paramref name="value" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-417"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-418"><paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-418"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="1d7fe-419">- または -</span><span class="sxs-lookup"><span data-stu-id="1d7fe-419">-or-</span></span>  
  
 <span data-ttu-id="1d7fe-420"><paramref name="value" /> が空の文字列 ("") であるか、または空白しか含まれていません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-420"><paramref name="value" /> is either an empty string ("") or only contains white space.</span></span>  
  
 <span data-ttu-id="1d7fe-421">- または -</span><span class="sxs-lookup"><span data-stu-id="1d7fe-421">-or-</span></span>  
  
 <span data-ttu-id="1d7fe-422"><paramref name="value" /> は名前ですが、列挙体に対して定義された名前付き定数ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-422"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="1d7fe-423"><paramref name="value" /> が <paramref name="enumType" /> の基になる型の範囲外の値です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-423"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value, bool ignoreCase) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String, ignoreCase As Boolean) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1d7fe-424">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-424">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="1d7fe-425">基になる型に基づいて、現在の値をブール値に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-425">Converts the current value to a Boolean value based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-426">このメンバーは常に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-426">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-427">現在、実装されていません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-427">Currently not implemented.</span></span> <span data-ttu-id="1d7fe-428">常に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-428">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="1d7fe-429">すべての場合。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-429">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1d7fe-430">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-430">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="1d7fe-431">基になる型に基づいて、現在の値を 8 ビット符号なし整数に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-431">Converts the current value to an 8-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-432">変換された値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-432">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-433">使用して<xref:System.Convert>変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-433">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1d7fe-434">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-434">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="1d7fe-435">基になる型に基づいて、現在の値を Unicode 文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-435">Converts the current value to a Unicode character based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-436">このメンバーは常に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-436">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-437">現在、実装されていません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-437">Currently not implemented.</span></span> <span data-ttu-id="1d7fe-438">常に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-438">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="1d7fe-439">すべての場合。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-439">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1d7fe-440">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-440">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="1d7fe-441">基になる型に基づいて、現在の値を <see cref="T:System.DateTime" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-441">Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-442">このメンバーは常に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-442">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-443">現在、実装されていません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-443">Currently not implemented.</span></span> <span data-ttu-id="1d7fe-444">常に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-444">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="1d7fe-445">すべての場合。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-445">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1d7fe-446">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-446">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="1d7fe-447">基になる型に基づいて、現在の値を <see cref="T:System.Decimal" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-447">Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-448">このメンバーは常に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-448">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-449">現在、実装されていません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-449">Currently not implemented.</span></span> <span data-ttu-id="1d7fe-450">常に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-450">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="1d7fe-451">すべての場合。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-451">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1d7fe-452">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-452">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="1d7fe-453">基になる型に基づいて、現在の値を倍精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-453">Converts the current value to a double-precision floating point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-454">このメンバーは常に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-454">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-455">現在、実装されていません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-455">Currently not implemented.</span></span> <span data-ttu-id="1d7fe-456">常に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-456">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="1d7fe-457">すべての場合。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-457">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1d7fe-458">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-458">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="1d7fe-459">基になる型に基づいて、現在の値を 16 ビット符号付き整数に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-459">Converts the current value to a 16-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-460">変換された値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-460">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-461">使用して<xref:System.Convert>変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-461">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1d7fe-462">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-462">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="1d7fe-463">基になる型に基づいて、現在の値を 32 ビット符号付き整数に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-463">Converts the current value to a 32-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-464">変換された値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-464">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-465">使用して<xref:System.Convert>変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-465">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1d7fe-466">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-466">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="1d7fe-467">基になる型に基づいて、現在の値を 64 ビット符号付き整数に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-467">Converts the current value to a 64-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-468">変換された値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-468">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-469">使用して<xref:System.Convert>変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-469">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1d7fe-470">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-470">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="1d7fe-471">基になる型に基づいて、現在の値を 8 ビット符号付き整数に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-471">Converts the current value to an 8-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-472">変換された値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-472">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-473">使用して<xref:System.Convert>変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-473">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1d7fe-474">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-474">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="1d7fe-475">基になる型に基づいて、現在の値を単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-475">Converts the current value to a single-precision floating-point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-476">このメンバーは常に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-476">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-477">現在、実装されていません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-477">Currently not implemented.</span></span> <span data-ttu-id="1d7fe-478">常に例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-478">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="1d7fe-479">すべての場合。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-479">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="1d7fe-480">変換後の型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-480">The type to convert to.</span></span></param>
        <param name="provider"><span data-ttu-id="1d7fe-481">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-481">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="1d7fe-482">基になる型に基づいて、現在の値を指定した型に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-482">Converts the current value to a specified type based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-483">変換された値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-483">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-484">使用して<xref:System.Convert>変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-484">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1d7fe-485">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-485">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="1d7fe-486">基になる型に基づいて、現在の値を 16 ビット符号なし整数に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-486">Converts the current value to a 16-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-487">変換された値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-487">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-488">使用して<xref:System.Convert>変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-488">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1d7fe-489">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-489">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="1d7fe-490">基になる型に基づいて、現在の値を 32 ビット符号なし整数に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-490">Converts the current value to a 32-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-491">変換された値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-491">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-492">使用して<xref:System.Convert>変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-492">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1d7fe-493">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-493">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="1d7fe-494">基になる型に基づいて、現在の値を 64 ビット符号なし整数に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-494">Converts the current value to a 64-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-495">変換された値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-495">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-496">使用して<xref:System.Convert>変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-496">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1d7fe-497">指定した整数値を列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-497">Converts a specified integer value to an enumeration member.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Byte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-498">返される列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-498">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="1d7fe-499">列挙メンバーへと変換する値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-499">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="1d7fe-500">指定した 8 ビット符号なし整数を列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-500">Converts the specified 8-bit unsigned integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-501"><paramref name="value" /> に設定される列挙体のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-501">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-502"><xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29>メソッドに変換`value`を基になる値を列挙メンバー`value`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-502">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="1d7fe-503">値がの境界の外側にある場合でも、変換が成功したことに注意してください`enumType`メンバー。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-503">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="1d7fe-504">いることを確認する`value`の有効な基になる値は、`enumType`列挙体に渡すこと、<xref:System.Enum.IsDefined%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-504">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="1d7fe-505">この変換メソッドが型の値を返します<xref:System.Object>です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-505">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="1d7fe-506">キャスト、型のオブジェクトに変換したり`enumType`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-506">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-507"><paramref name="enumType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-507"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-508"><paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-508"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Short) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-509">返される列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-509">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="1d7fe-510">列挙メンバーへと変換する値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-510">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="1d7fe-511">指定した 16 ビット符号付き整数を列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-511">Converts the specified 16-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-512"><paramref name="value" /> に設定される列挙体のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-512">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-513"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29>メソッドに変換`value`を基になる値を列挙メンバー`value`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-513">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="1d7fe-514">値がの境界の外側にある場合でも、変換が成功したことに注意してください`enumType`メンバー。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-514">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="1d7fe-515">いることを確認する`value`の有効な基になる値は、`enumType`列挙体に渡すこと、<xref:System.Enum.IsDefined%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-515">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="1d7fe-516">この変換メソッドが型の値を返します<xref:System.Object>です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-516">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="1d7fe-517">キャスト、型のオブジェクトに変換したり`enumType`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-517">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-518"><paramref name="enumType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-518"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-519"><paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-519"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-520">返される列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-520">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="1d7fe-521">列挙メンバーへと変換する値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-521">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="1d7fe-522">指定した 32 ビット符号付き整数を列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-522">Converts the specified 32-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-523"><paramref name="value" /> に設定される列挙体のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-523">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-524"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29>メソッドに変換`value`を基になる値を列挙メンバー`value`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-524">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="1d7fe-525">値がの境界の外側にある場合でも、変換が成功したことに注意してください`enumType`メンバー。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-525">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="1d7fe-526">いることを確認する`value`の有効な基になる値は、`enumType`列挙体に渡すこと、<xref:System.Enum.IsDefined%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-526">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="1d7fe-527">この変換メソッドが型の値を返します<xref:System.Object>です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-527">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="1d7fe-528">キャスト、型のオブジェクトに変換したり`enumType`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-528">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-529"><paramref name="enumType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-529"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-530"><paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-530"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-531">返される列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-531">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="1d7fe-532">列挙メンバーへと変換する値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-532">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="1d7fe-533">指定した 64 ビット符号付き整数を列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-533">Converts the specified 64-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-534"><paramref name="value" /> に設定される列挙体のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-534">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-535"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29>メソッドに変換`value`を基になる値を列挙メンバー`value`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-535">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="1d7fe-536">値がの境界の外側にある場合でも、変換が成功したことに注意してください`enumType`メンバー。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-536">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="1d7fe-537">いることを確認する`value`の有効な基になる値は、`enumType`列挙体に渡すこと、<xref:System.Enum.IsDefined%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-537">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="1d7fe-538">この変換メソッドが型の値を返します<xref:System.Object>です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-538">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="1d7fe-539">キャスト、型のオブジェクトに変換したり`enumType`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-539">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-540"><paramref name="enumType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-540"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-541"><paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-541"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-542">返される列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-542">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="1d7fe-543">列挙メンバーへと変換する値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-543">The value convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="1d7fe-544">整数値を持つ指定したオブジェクトを列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-544">Converts the specified object with an integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-545">値が <paramref name="value" /> である列挙オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-545">An enumeration object whose value is <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-546"><xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29>メソッドは、整数値を変換します。`value`を基になる値を列挙メンバー`value`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-546">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> method converts the integral value `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="1d7fe-547">値がの境界の外側にある場合でも、変換が成功したことに注意してください`enumType`メンバー。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-547">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="1d7fe-548">いることを確認する`value`の有効な基になる値は、`enumType`列挙体に渡すこと、<xref:System.Enum.IsDefined%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-548">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="1d7fe-549">この変換メソッドが型の値を返します<xref:System.Object>です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-549">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="1d7fe-550">キャスト、型のオブジェクトに変換したり`enumType`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-550">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-551"><paramref name="enumType" /> または <paramref name="value" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-551"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-552"><paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-552"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="1d7fe-553">- または -</span><span class="sxs-lookup"><span data-stu-id="1d7fe-553">-or-</span></span>  
  
 <span data-ttu-id="1d7fe-554"><paramref name="value" /> が型 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" />、または <see cref="T:System.UInt64" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-554"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As SByte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-555">返される列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-555">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="1d7fe-556">列挙メンバーへと変換する値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-556">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="1d7fe-557">指定した 8 ビット符号付き整数値を列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-557">Converts the specified 8-bit signed integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-558"><paramref name="value" /> に設定される列挙体のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-558">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-559"><xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29>メソッドに変換`value`を基になる値を列挙メンバー`value`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-559">The <xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="1d7fe-560">値がの境界の外側にある場合でも、変換が成功したことに注意してください`enumType`メンバー。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-560">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="1d7fe-561">いることを確認する`value`の有効な基になる値は、`enumType`列挙体に渡すこと、<xref:System.Enum.IsDefined%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-561">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="1d7fe-562">この変換メソッドが型の値を返します<xref:System.Object>です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-562">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="1d7fe-563">キャスト、型のオブジェクトに変換したり`enumType`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-563">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-564"><paramref name="enumType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-564"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-565"><paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-565"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UShort) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-566">返される列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-566">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="1d7fe-567">列挙メンバーへと変換する値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-567">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="1d7fe-568">指定した 16 ビット符号なし整数値を列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-568">Converts the specified 16-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-569"><paramref name="value" /> に設定される列挙体のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-569">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-570"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29>メソッドに変換`value`を基になる値を列挙メンバー`value`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-570">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="1d7fe-571">値がの境界の外側にある場合でも、変換が成功したことに注意してください`enumType`メンバー。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-571">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="1d7fe-572">いることを確認する`value`の有効な基になる値は、`enumType`列挙体に渡すこと、<xref:System.Enum.IsDefined%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-572">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="1d7fe-573">この変換メソッドが型の値を返します<xref:System.Object>です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-573">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="1d7fe-574">キャスト、型のオブジェクトに変換したり`enumType`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-574">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-575"><paramref name="enumType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-575"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-576"><paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-576"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UInteger) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-577">返される列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-577">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="1d7fe-578">列挙メンバーへと変換する値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-578">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="1d7fe-579">指定した 32 ビット符号なし整数値を列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-579">Converts the specified 32-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-580"><paramref name="value" /> に設定される列挙体のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-580">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-581"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29>メソッドに変換`value`を基になる値を列挙メンバー`value`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-581">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="1d7fe-582">値がの境界の外側にある場合でも、変換が成功したことに注意してください`enumType`メンバー。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-582">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="1d7fe-583">いることを確認する`value`の有効な基になる値は、`enumType`列挙体に渡すこと、<xref:System.Enum.IsDefined%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-583">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="1d7fe-584">この変換メソッドが型の値を返します<xref:System.Object>です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-584">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="1d7fe-585">キャスト、型のオブジェクトに変換したり`enumType`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-585">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-586"><paramref name="enumType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-586"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-587"><paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-587"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As ULong) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="1d7fe-588">返される列挙型。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-588">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="1d7fe-589">列挙メンバーへと変換する値。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-589">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="1d7fe-590">指定した 64 ビット符号なし整数値を列挙メンバーに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-590">Converts the specified 64-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-591"><paramref name="value" /> に設定される列挙体のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-591">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-592"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29>メソッドに変換`value`を基になる値を列挙メンバー`value`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-592">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="1d7fe-593">値がの境界の外側にある場合でも、変換が成功したことに注意してください`enumType`メンバー。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-593">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="1d7fe-594">いることを確認する`value`の有効な基になる値は、`enumType`列挙体に渡すこと、<xref:System.Enum.IsDefined%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-594">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="1d7fe-595">この変換メソッドが型の値を返します<xref:System.Object>です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-595">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="1d7fe-596">キャスト、型のオブジェクトに変換したり`enumType`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-596">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1d7fe-597"><paramref name="enumType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-597"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-598"><paramref name="enumType" /> が <see cref="T:System.Enum" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-598"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1d7fe-599">このインスタンスの値を、それと等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-599">Converts the value of this instance to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1d7fe-600">このインスタンスの値を、それと等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-600">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-601">このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-601">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-602">戻り値には、一般書式指定子 ("G") が表示されます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-602">The return value is formatted with the general format specifier ("G").</span></span> <span data-ttu-id="1d7fe-603">つまり場合、<xref:System.FlagsAttribute>には適用されませんこの列挙型、名前付き定数と等しい、このインスタンスの値があるし、戻り値は、定数の名前を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-603">That is, if the <xref:System.FlagsAttribute> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant.</span></span> <span data-ttu-id="1d7fe-604">場合、<xref:System.FlagsAttribute>が適用される 1 つまたは複数の名前付き定数の組み合わせがある、このインスタンスの値と同じにし、戻り値は、定数の名前のコンマ区切りのリストを含む文字列。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-604">If the <xref:System.FlagsAttribute> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants.</span></span> <span data-ttu-id="1d7fe-605">それ以外の場合、戻り値は、このインスタンスの数値の文字列形式です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-605">Otherwise, the return value is the string representation of the numeric value of this instance.</span></span> <span data-ttu-id="1d7fe-606">列挙値の書式設定の詳細については、次を参照してください。[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-606">For more information about formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="1d7fe-607">一般に書式設定に関する詳細については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-607">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d7fe-608">次の例では、列挙型の値を文字列に変換するを示しています。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-608">The following example demonstrates converting an enumerated value to a string.</span></span>  
  
 [!code-cpp[Classic Enum.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Enum.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic Enum.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="1d7fe-609">複数の列挙体メンバーは、同じ基になる値を持つ、その基になる値に基づいた列挙体のメンバーの名前の文字列形式を取得しようとする場合は、コードが、メソッドが返すどの名に関するすべての前提を加えないでください。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-609">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="1d7fe-610">たとえば、次の列挙には、2 つのメンバーを定義します。 <c>Shade.Gray</c>と<c>Shade.Grey</c>、基になる値が同じであること。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-610">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
 [!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)]
 [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]  
  
 <span data-ttu-id="1d7fe-611">次のメソッド呼び出しのメンバーの名前を取得しようとしています。、<c>網掛け</c>列挙体の基になる値は 1 です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-611">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="1d7fe-612">メソッドは、"Gray"または「灰色」のいずれかを返すことができ、コードはどの文字列が返されるすべての前提にしないようにします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-612">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
 [!code-csharp[System.Enum.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#2)]
 [!code-vb[System.Enum.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1d7fe-613">(互換性のために残されています)</span><span class="sxs-lookup"><span data-stu-id="1d7fe-613">(obsolete)</span></span></param>
        <summary><span data-ttu-id="1d7fe-614">このメソッドのオーバーロードは今後使用しません。代わりに <see cref="M:System.Enum.ToString" /> を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-614">This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-615">このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-615">The string representation of the value of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="1d7fe-616">書式指定文字列。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-616">A format string.</span></span></param>
        <summary><span data-ttu-id="1d7fe-617">指定した書式を使用して、このインスタンスの値をそれと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-617">Converts the value of this instance to its equivalent string representation using the specified format.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-618"><paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-618">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-619">`format`パラメーターは、"G"または"g"、"D"または"d"、"X"または"x"と"F"または"f"書式指定文字列 (書式指定文字列は区別されません) を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-619">The `format` parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</span></span> <span data-ttu-id="1d7fe-620">場合`format`は`null`または空の文字列 ("")、一般書式指定子 ("G") を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-620">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="1d7fe-621">列挙型書式指定文字列と書式設定の列挙値の詳細については、次を参照してください。[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-621">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="1d7fe-622">一般に書式設定に関する詳細については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-622">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d7fe-623">次の例では、列挙型の値を文字列に変換する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-623">The following example demonstrates how to convert an enumerated value to a string.</span></span>  
  
 [!code-cpp[enum.tostring#1](~/samples/snippets/cpp/VS_Snippets_CLR/enum.tostring/CPP/tostr.cpp#1)]
 [!code-csharp[enum.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/enum.tostring/CS/tostr.cs#1)]
 [!code-vb[enum.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enum.tostring/VB/tostr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="1d7fe-624"><paramref name="format" /> に無効な指定が含まれています。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-624"><paramref name="format" /> contains an invalid specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1d7fe-625"><paramref name="format" /> は "X"と等しいですが、列挙型は不明です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-625"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="1d7fe-626">複数の列挙体メンバーは、同じ基になる値を持つ、その基になる値に基づいた列挙体のメンバーの名前の文字列形式を取得しようとする場合は、コードが、メソッドが返すどの名に関するすべての前提を加えないでください。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-626">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="1d7fe-627">たとえば、次の列挙には、2 つのメンバーを定義します。 <c>Shade.Gray</c>と<c>Shade.Grey</c>、基になる値が同じであること。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-627">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
 [!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)]
 [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]  
  
 <span data-ttu-id="1d7fe-628">次のメソッド呼び出しのメンバーの名前を取得しようとしています。、<c>網掛け</c>列挙体の基になる値は 1 です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-628">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="1d7fe-629">メソッドは、"Gray"または「灰色」のいずれかを返すことができ、コードはどの文字列が返されるすべての前提にしないようにします。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-629">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
 [!code-csharp[System.Enum.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#3)]
 [!code-vb[System.Enum.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#3)]</para>
        </block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
        <altmember cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="1d7fe-630">書式指定。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-630">A format specification.</span></span></param>
        <param name="provider"><span data-ttu-id="1d7fe-631">(現在不使用。)</span><span class="sxs-lookup"><span data-stu-id="1d7fe-631">(Obsolete.)</span></span></param>
        <summary><span data-ttu-id="1d7fe-632">このメソッドのオーバーロードは今後使用しません。代わりに <see cref="M:System.Enum.ToString(System.String)" /> を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-632">This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="1d7fe-633"><paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-633">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-634">`format`パラメーターは、"G"または"g"、"D"または"d"、"X"または"x"と"F"または"f"書式指定文字列 (書式指定文字列は区別されません) を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-634">The `format` parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</span></span> <span data-ttu-id="1d7fe-635">場合`format`は`null`または空の文字列 ("")、一般書式指定子 ("G") を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-635">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="1d7fe-636">列挙型書式指定文字列と書式設定の列挙値の詳細については、次を参照してください。[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-636">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="1d7fe-637">一般に書式設定に関する詳細については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-637">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="1d7fe-638">のみを指定`format`;`provider`パラメーターは今後使用しません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-638">Specify only `format`; the `provider` parameter is obsolete.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="1d7fe-639"><paramref name="format" /> に有効な書式指定が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-639"><paramref name="format" /> does not contain a valid format specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1d7fe-640"><paramref name="format" /> は "X"と等しいですが、列挙型は不明です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-640"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1d7fe-641">文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-641">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="1d7fe-642">戻り値は、変換が成功したかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-642">The return value indicates whether the conversion succeeded.</span></span></summary>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, bool ignoreCase, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, bool ignoreCase, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Boolean,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ignoreCase As Boolean, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="TEnum&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="1d7fe-643">列挙型に変換する<c>値</c>です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-643">The enumeration type to which to convert <c>value</c>.</span></span></typeparam>
        <param name="value"><span data-ttu-id="1d7fe-644">変換する列挙定数の名前または基になる値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-644">The string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="result"><span data-ttu-id="1d7fe-645">このメソッドから制御が戻るときに、<c>result</c> には、解析操作が成功した場合に値が <c>value</c> で表される <c>TEnum</c> 型のオブジェクトが格納されます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-645">When this method returns, <c>result</c> contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds.</span></span> <span data-ttu-id="1d7fe-646">解析操作が失敗した場合、<c>result</c> には <c>TEnum</c> の基になる型の既定値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-646">If the parse operation fails, <c>result</c> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="1d7fe-647">この値が <c>TEnum</c> 列挙型のメンバーである必要がないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-647">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="1d7fe-648">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-648">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="1d7fe-649">文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-649">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="1d7fe-650">戻り値は、変換が成功したかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-650">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns>
          <span data-ttu-id="1d7fe-651"><paramref name="value" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-651"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-652"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> 同じですが、<xref:System.Enum.Parse%28System.Type%2CSystem.String%29>以外を返しますが、例外をスローする代わりに、メソッド`false`変換に失敗する場合。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-652"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="1d7fe-653">これにより、例外処理の列挙値の文字列形式を解析するときの必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-653">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="1d7fe-654">`value`パラメーターには、列挙体のメンバーの基になる値や名前付き定数の文字列表現が含まれているか、名前付き定数または基になる値の一覧がコンマ (,) で区切られます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-654">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="1d7fe-655">場合`value`が複数には含まれていますという名前の定数または値 1 つ以上の空白文字の前にしたり、以下の各値、名前、またはコンマで`value`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-655">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="1d7fe-656">場合`value`一覧、 `result` 、指定した名前の値を反映またはビットごとと組み合わせて使用する値を基になる`OR`操作します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-656">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="1d7fe-657">場合`value`列挙値を比較した結果の名前の文字列形式を`value`列挙型名は大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-657">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names is case-sensitive.</span></span>  
  
 <span data-ttu-id="1d7fe-658">場合`value`の名前付き定数に対応していない名前は、 `TEnum`、メソッドを返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-658">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="1d7fe-659">場合`value`の基になる値を表していないを整数の文字列表現です、`TEnum`列挙型、メソッドは、基になる値が列挙体のメンバーを返します`value`整数型に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-659">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="1d7fe-660">この動作が望ましくない場合は、呼び出し、<xref:System.Enum.IsDefined%2A>整数の特定の文字列表現が実際のメンバーであることを確認するメソッド`TEnum`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-660">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d7fe-661">次の例では定義、`Colors`列挙型、呼び出し、 <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> 、対応する列挙値、および呼び出し文字列に変換するメソッド、<xref:System.Enum.IsDefined%2A>の値が特定の整数値が基になることを確認する方法、`Colors`列挙します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-661">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Enum.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-662"><paramref name="TEnum" /> が列挙型ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-662"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, bool ignoreCase, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ignoreCase As Boolean, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="TEnum&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="1d7fe-663">列挙型に変換する<c>値</c>です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-663">The enumeration type to which to convert <c>value</c>.</span></span></typeparam>
        <param name="value"><span data-ttu-id="1d7fe-664">変換する列挙定数の名前または基になる値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-664">The string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="1d7fe-665">大文字と小文字を区別しない場合は <see langword="true" />。大文字と小文字を区別する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-665"><see langword="true" /> to ignore case; <see langword="false" /> to consider case.</span></span></param>
        <param name="result"><span data-ttu-id="1d7fe-666">このメソッドから制御が戻るときに、<c>result</c> には、解析操作が成功した場合に値が <c>value</c> で表される <c>TEnum</c> 型のオブジェクトが格納されます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-666">When this method returns, <c>result</c> contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds.</span></span> <span data-ttu-id="1d7fe-667">解析操作が失敗した場合、<c>result</c> には <c>TEnum</c> の基になる型の既定値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-667">If the parse operation fails, <c>result</c> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="1d7fe-668">この値が <c>TEnum</c> 列挙型のメンバーである必要がないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-668">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="1d7fe-669">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-669">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="1d7fe-670">文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-670">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="1d7fe-671">演算で大文字と小文字を区別するかどうかをパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-671">A parameter specifies whether the operation is case-sensitive.</span></span> <span data-ttu-id="1d7fe-672">戻り値は、変換が成功したかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-672">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns>
          <span data-ttu-id="1d7fe-673"><paramref name="value" /> パラメーターが正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-673"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1d7fe-674"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> 同じですが、<xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29>以外を返しますが、例外をスローする代わりに、メソッド`false`変換に失敗する場合。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-674"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="1d7fe-675">これにより、例外処理の列挙値の文字列形式を解析するときの必要があります。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-675">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="1d7fe-676">`value`パラメーターには、列挙体のメンバーの基になる値や名前付き定数の文字列表現が含まれているか、名前付き定数または基になる値の一覧がコンマ (,) で区切られます。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-676">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="1d7fe-677">場合`value`が複数には含まれていますという名前の定数または値 1 つ以上の空白文字の前にしたり、以下の各値、名前、またはコンマで`value`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-677">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="1d7fe-678">場合`value`一覧、 `result` 、指定した名前の値を反映またはビットごとと組み合わせて使用する値を基になる`OR`操作します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-678">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="1d7fe-679">場合`value`列挙値を比較した結果の名前の文字列形式を`value`列挙型名によって異なります、`ignoreCase`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-679">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names depends on the `ignoreCase` parameter.</span></span> <span data-ttu-id="1d7fe-680">場合`true`、比較では、大文字と小文字以外の場合は`false`は大文字小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-680">If `true`, the comparison is case-insensitive; if `false`, it is case-sensitive.</span></span>  
  
 <span data-ttu-id="1d7fe-681">場合`value`の名前付き定数に対応していない名前は、 `TEnum`、メソッドを返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-681">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="1d7fe-682">場合`value`の基になる値を表していないを整数の文字列表現です、`TEnum`列挙型、メソッドは、基になる値が列挙体のメンバーを返します`value`整数型に変換します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-682">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="1d7fe-683">この動作が望ましくない場合は、呼び出し、<xref:System.Enum.IsDefined%2A>整数の特定の文字列表現が実際のメンバーであることを確認するメソッド`TEnum`です。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-683">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1d7fe-684">次の例では定義、`Colors`列挙型、呼び出し、 <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> 、対応する列挙値、および呼び出し文字列に変換するメソッド、<xref:System.Enum.IsDefined%2A>の値が特定の整数値が基になることを確認する方法、`Colors`列挙します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-684">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span> <span data-ttu-id="1d7fe-685"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29>を等価の列挙値に定数をという名前の文字列形式に変換しようとしています。 メソッドは大文字と小文字を使用します。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-685">The <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse2.cs#2)]
 [!code-vb[System.Enum.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1d7fe-686"><paramref name="TEnum" /> が列挙型ではありません。</span><span class="sxs-lookup"><span data-stu-id="1d7fe-686"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>