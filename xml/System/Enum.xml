<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Enum.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c259900d33a657adba6285794460c21b0e374f2a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c259900d33a657adba6285794460c21b0e374f2a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>Provides the base class for enumerations.</source>
          <target state="translated">列挙体の基底クラスを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>An enumeration is a set of named constants whose underlying type is any integral type.</source>
          <target state="translated">列挙型は、基になる型は任意の整数型、名前付き定数のセットです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>If no underlying type is explicitly declared, <ph id="ph1">&lt;xref:System.Int32&gt;</ph> is used.</source>
          <target state="translated">基になる型が明示的に宣言されていない場合<ph id="ph1">&lt;xref:System.Int32&gt;</ph>を使用します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><ph id="ph1">&lt;xref:System.Enum&gt;</ph> is the base class for all enumerations in the .NET Framework.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum&gt;</ph> .NET Framework のすべての列挙体の基本クラスです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Enumeration types are defined by the <ph id="ph1">`enum`</ph> keyword in C# and the <ph id="ph2">`Enum`</ph>...<ph id="ph3">`End Enum`</ph> construct in Visual Basic.</source>
          <target state="translated">列挙型がで定義されている、<ph id="ph1">`enum`</ph>キーワード (C#) および<ph id="ph2">`Enum`</ph>しています.<ph id="ph3">`End Enum`</ph> Visual Basic で作成します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><ph id="ph1">&lt;xref:System.Enum&gt;</ph> provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum&gt;</ph> このクラスのインスタンスを比較する、インスタンスの値を文字列形式に変換する、数値の文字列形式をこのクラスのインスタンスに変換すると、指定した列挙体と値のインスタンスを作成するには、メソッドを提供します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can also treat an enumeration as a bit field.</source>
          <target state="translated">列挙型ビット フィールドとして扱うこともできます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For more information, see the <bpt id="p1">[</bpt>Non-Exclusive Members and the Flags Attribute<ept id="p1">](#Flags)</ept> section and the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> topic.</source>
          <target state="translated">詳細については、次を参照してください。、<bpt id="p1">[</bpt>非排他的なメンバーと Flags 属性<ept id="p1">](#Flags)</ept>セクションおよび<ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph>トピックです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>In this topic:</source>
          <target state="translated">このトピックの内容:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Creating an enumeration type<ept id="p1">](#Creating)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>列挙型を作成します。<ept id="p1">](#Creating)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Instantiating an enumeration type<ept id="p1">](#Instantiating)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>列挙型をインスタンス化します。<ept id="p1">](#Instantiating)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Enumeration best practices<ept id="p1">](#BestPractices)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>列挙体のベスト プラクティス<ept id="p1">](#BestPractices)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Performing operations with enumerations<ept id="p1">](#Operations)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>列挙体で操作を実行します。<ept id="p1">](#Operations)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Performing conversions<ept id="p1">](#conversions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>変換を実行します。<ept id="p1">](#conversions)</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Parsing enumeration values<ept id="p1">](#parsing)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>列挙値の解析<ept id="p1">](#parsing)</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Formatting enumeration values<ept id="p1">](#formatting)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>列挙値の書式設定<ept id="p1">](#formatting)</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Iterating enumeration members<ept id="p1">](#iterating)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>列挙型のメンバーを反復処理します。<ept id="p1">](#iterating)</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Non-exclusive members and the Flags attribute<ept id="p1">](#Flags)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>非排他的なメンバーと Flags 属性<ept id="p1">](#Flags)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Adding enumeration methods<ept id="p1">](#methods)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>列挙メソッドを追加します。<ept id="p1">](#methods)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Creating an enumeration type</source>
          <target state="translated">列挙型を作成します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Programming languages typically provide syntax to declare an enumeration that consists of a set of named constants and their values.</source>
          <target state="translated">プログラミング言語は、通常、名前付き定数とその値のセットで構成される列挙体を宣言するための構文を提供します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example illustrates the syntax used by C# and Visual Basic to define an enumeration.</source>
          <target state="translated">次の例は、列挙体を定義する c# および Visual Basic で使用される構文を示しています。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>It creates an enumeration named <ph id="ph1">`ArrivalStatus`</ph> that has three members: <ph id="ph2">`ArrivalStatus.Early`</ph>, <ph id="ph3">`ArrivalStatus.OnTime`</ph>, and <ph id="ph4">`ArrivalStatus.Late`</ph>.</source>
          <target state="translated">という名前の列挙を作成<ph id="ph1">`ArrivalStatus`</ph>3 つのメンバーを持つ: <ph id="ph2">`ArrivalStatus.Early`</ph>、 <ph id="ph3">`ArrivalStatus.OnTime`</ph>、および<ph id="ph4">`ArrivalStatus.Late`</ph>です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Note that in both cases, the enumeration does not explicitly inherit from <ph id="ph1">&lt;xref:System.Enum&gt;</ph>; the inheritance relationship is handled implicitly by the compiler.</source>
          <target state="translated">どちらの場合、列挙型に明示的に継承していないことからに注意してください<ph id="ph1">&lt;xref:System.Enum&gt;</ph>; コンパイラによって暗黙的に継承関係を処理します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You should never create an enumeration type whose underlying type is non-integral or <ph id="ph1">&lt;xref:System.Char&gt;</ph>.</source>
          <target state="translated">基になる型が整数以外の列挙型は作成しないでまたは<ph id="ph1">&lt;xref:System.Char&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Although you can create such an enumeration type by using reflection, method calls that use the resulting type are unreliable and may also throw additional exceptions.</source>
          <target state="translated">列挙型を作成するには、リフレクションを使用して、、追加の例外をスローする可能性がもと、結果の型を使用するメソッド呼び出しは信頼性の高いではありません。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Instantiating an enumeration type</source>
          <target state="translated">列挙型をインスタンス化します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can instantiate an enumeration type just as you instantiate any other value type: by declaring a variable and assigning one of the enumeration's constants to it.</source>
          <target state="translated">他の任意の値型のインスタンスを作成すると同様に、列挙型がインスタンス化できます。 変数を宣言すると、そこを割り当てる列挙型の定数のいずれかでします。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example instantiates an <ph id="ph1">`ArrivalStatus`</ph> whose value is <ph id="ph2">`ArrivalStatus.OnTime`</ph>.</source>
          <target state="translated">次の例のインスタンスを作成、<ph id="ph1">`ArrivalStatus`</ph>値がある<ph id="ph2">`ArrivalStatus.OnTime`</ph>です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can also instantiate an enumeration value in the following ways:</source>
          <target state="translated">次の方法で列挙値をインスタンス化することができますも。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>By using a particular programming language's features to cast (as in C#) or convert (as in Visual Basic) an integer value to an enumeration value.</source>
          <target state="translated">特定のプログラミング言語の機能を使用する (c# の場合と) にキャスト (Visual Basic の場合) のように整数値の列挙値に変換します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example creates an <ph id="ph1">`ArrivalStatus`</ph> object whose value is <ph id="ph2">`ArrivalStatus.Early`</ph> in this way.</source>
          <target state="translated">次の例を作成、<ph id="ph1">`ArrivalStatus`</ph>値があるオブジェクト<ph id="ph2">`ArrivalStatus.Early`</ph>この方法でします。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>By calling its implicit default constructor.</source>
          <target state="translated">暗黙的な既定のコンス トラクターを呼び出します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>As the following example shows, in this case the underlying value of the enumeration instance is 0.</source>
          <target state="translated">次の例に示す、ここでは、基になるインスタンスの値、列挙が 0 です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>However, this is not necessarily the value of a valid constant in the enumeration.</source>
          <target state="translated">ただし、これとは限りません列挙体の有効な定数の値です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>By calling the <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Enum.TryParse%2A&gt;</ph> method to parse a string that contains the name of a constant in the enumeration.</source>
          <target state="translated">呼び出して、<ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Enum.TryParse%2A&gt;</ph>列挙体の定数の名前を表す文字列を解析します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For more information, see the <bpt id="p1">[</bpt>Parsing Enumeration Values<ept id="p1">](#parsing)</ept> section.</source>
          <target state="translated">詳細については、次を参照してください。、<bpt id="p1">[</bpt>列挙値の解析<ept id="p1">](#parsing)</ept>セクションです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>By calling the <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> method to convert an integral value to an enumeration type.</source>
          <target state="translated">呼び出して、<ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph>列挙型を整数値に変換します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For more information, see the <bpt id="p1">[</bpt>Performing Conversions<ept id="p1">](#conversions)</ept> section.</source>
          <target state="translated">詳細については、次を参照してください。、<bpt id="p1">[</bpt>を実行する変換<ept id="p1">](#conversions)</ept>セクションです。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Enumeration best practices</source>
          <target state="translated">列挙体のベスト プラクティス</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>We recommend that you use the following best practices when you define enumeration types:</source>
          <target state="translated">列挙型を定義する場合は、次のベスト プラクティスを使用することをお勧めします。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>If you have not defined an enumeration member whose value is 0, consider creating a <ph id="ph1">`None`</ph> enumerated constant.</source>
          <target state="translated">値が 0 列挙体のメンバーを定義していない場合は、作成することを検討してください、<ph id="ph1">`None`</ph>列挙型定数。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>By default, the memory used for the enumeration is initialized to zero by the common language runtime.</source>
          <target state="translated">既定では、列挙体に使用するメモリが 0 に初期化される、共通言語ランタイムによってです。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</source>
          <target state="translated">その結果、値が 0 の定数を定義していない場合が作成されるとき、列挙体は値が無効含まれます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>If there is an obvious default case that your application has to represent, consider using an enumerated constant whose value is zero to represent it.</source>
          <target state="translated">表す列挙を使用して、アプリケーションがある、明確な既定のケースがある場合の値が定数表現するために 0 です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>If there is no default case, consider using an enumerated constant whose value is zero to specify the case that is not represented by any of the other enumerated constants.</source>
          <target state="translated">既定のケースがない場合は、によってその他の列挙定数のいずれかの値が 0 表されないケースを指定する列挙定数の使用を検討してください。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Do not specify enumerated constants that are reserved for future use.</source>
          <target state="translated">将来使用するために予約されている列挙型定数は指定しません。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>When you define a method or property that takes an enumerated constant as a value, consider validating the value.</source>
          <target state="translated">メソッドまたは値として列挙型定数は、プロパティを定義するときは、値の検証を検討してください。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</source>
          <target state="translated">理由は、その数値の値が列挙体で定義されていない場合でも、列挙型の数値にキャストすることです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Additional best practices for enumeration types whose constants are bit fields are listed in the <bpt id="p1">[</bpt>Non-Exclusive Members and the Flags Attribute<ept id="p1">](#Flags)</ept> section.</source>
          <target state="translated">列挙型の定数はビット フィールドの追加のベスト プラクティスが記載されて、<bpt id="p1">[</bpt>非排他的なメンバーと Flags 属性<ept id="p1">](#Flags)</ept>セクションです。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Performing operations with enumerations</source>
          <target state="translated">列挙体で操作を実行します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You cannot define new methods when you are creating an enumeration.</source>
          <target state="translated">列挙体を作成するときに新しいメソッドを定義することはできません。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>However, an enumeration type inherits a complete set of static and instance methods from the <ph id="ph1">&lt;xref:System.Enum&gt;</ph> class.</source>
          <target state="translated">ただし、列挙型は、静的の完全なセットとからインスタンス メソッドを継承、<ph id="ph1">&lt;xref:System.Enum&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following sections survey most of these methods, in addition to several other methods that are commonly used when working with enumeration values.</source>
          <target state="translated">次のセクションでは、列挙値を使用する場合によく使用されるその他のいくつかのメソッドだけでなく、これらのメソッドのほとんどを調査します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Performing conversions</source>
          <target state="translated">変換を実行します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can convert between an enumeration member and its underlying type by using a casting (in C#) or conversion (in Visual Basic) operator.</source>
          <target state="translated">キャスト (C# の場合) または (Visual Basic) の変換演算子を使用して、列挙体のメンバーとその基になる型の間で変換することができます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example uses casting or conversion operators to perform conversions both from an integer to an enumeration value and from an enumeration value to an integer.</source>
          <target state="translated">次の例では、キャスト演算または変換演算子を使用して、列挙値の整数と列挙値を整数に変換を実行します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">&lt;xref:System.Enum&gt;</ph> class also includes a <ph id="ph2">&lt;xref:System.Enum.ToObject%2A&gt;</ph> method that converts a value of any integral type to an enumeration value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum&gt;</ph>クラスも含まれます、<ph id="ph2">&lt;xref:System.Enum.ToObject%2A&gt;</ph>メソッドを任意の整数型の値を列挙値に変換します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29&gt;</ph> method to convert an <ph id="ph2">&lt;xref:System.Int32&gt;</ph> to an <ph id="ph3">`ArrivalStatus`</ph> value.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29&gt;</ph>に変換する方法、<ph id="ph2">&lt;xref:System.Int32&gt;</ph>を<ph id="ph3">`ArrivalStatus`</ph>値。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Note that, because the <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> returns a value of type <ph id="ph2">&lt;xref:System.Object&gt;</ph>, the use of a casting or conversion operator may still be necessary to cast the object to the enumeration type.</source>
          <target state="translated">なお、ため、<ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph>型の値を返します<ph id="ph2">&lt;xref:System.Object&gt;</ph>、キャスト演算または変換演算子の使用、オブジェクトは、列挙型にキャストする必要があります。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>When converting an integer to an enumeration value, it is possible to assign a value that is not actually a member of the enumeration.</source>
          <target state="translated">整数を列挙値に変換するときは、実際には、列挙体のメンバーではない値を代入することです。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>To prevent this, you can pass the integer to the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method before performing the conversion.</source>
          <target state="translated">これを回避するには整数を渡すことができます、<ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>メソッドの変換を実行する前にします。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example uses this method to determine whether the elements in an array of integer values can be converted to <ph id="ph1">`ArrivalStatus`</ph> values.</source>
          <target state="translated">次の例では、このメソッドを使用する整数値の配列内の要素を変換できるかどうかを決定する<ph id="ph1">`ArrivalStatus`</ph>値。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Although the <ph id="ph1">&lt;xref:System.Enum&gt;</ph> class provides explicit interface implementations of the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface for converting from an enumeration value to an integral type, you should use the methods of the <ph id="ph3">&lt;xref:System.Convert&gt;</ph> class, such as <ph id="ph4">&lt;xref:System.Convert.ToInt32%2A&gt;</ph>, to perform these conversions.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum&gt;</ph>クラスの明示的なインターフェイス実装を提供する、<ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>インターフェイス列挙値から整数型に変換する、用のメソッドを使用する必要があります、<ph id="ph3">&lt;xref:System.Convert&gt;</ph>クラスなど<ph id="ph4">&lt;xref:System.Convert.ToInt32%2A&gt;</ph>をこれらの変換を実行します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example illustrates how you can use the <ph id="ph1">&lt;xref:System.Enum.GetUnderlyingType%2A&gt;</ph> method along with the <ph id="ph2">&lt;xref:System.Convert.ChangeType%2A?displayProperty=nameWithType&gt;</ph> method to convert an enumeration value to its underlying type.</source>
          <target state="translated">次の例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Enum.GetUnderlyingType%2A&gt;</ph>メソッドと共に、<ph id="ph2">&lt;xref:System.Convert.ChangeType%2A?displayProperty=nameWithType&gt;</ph>列挙値を基になる型に変換します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Note that this example does not require the underlying type of the enumeration to be known at compile time.</source>
          <target state="translated">この例に、コンパイル時に既知である列挙体の基になる型が必要としないことに注意してください。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Parsing enumeration values</source>
          <target state="translated">列挙値の解析</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Enum.TryParse%2A&gt;</ph> methods allow you to convert the string representation of an enumeration value to that value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Enum.TryParse%2A&gt;</ph>メソッドを使用すると、その値を列挙値の文字列形式に変換します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The string representation can be either the name or the underlying value of an enumeration constant.</source>
          <target state="translated">文字列形式には、名前または列挙定数の基になる値のいずれかを指定できます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Note that the parsing methods will successfully convert string representations of numbers that are not members of a particular enumeration if the strings can be converted to a value of the enumeration's underlying type.</source>
          <target state="translated">解析のメソッドが列挙体の基になる型の値に文字列を変換できる場合、特定の列挙体のメンバーではない数字の文字列形式に変換されますが正常に注意してください。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>To prevent this, the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method can be called to ensure that the result of the parsing method is a valid enumeration value.</source>
          <target state="translated">これを防ぐため、<ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>解析メソッドの結果が有効な列挙値であることを確認するメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The example illustrates this approach and demonstrates calls to both the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">この例は、この方法を示していて、両方への呼び出しを示しています、<ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph>と<ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Note that the non-generic parsing method returns an object that you may have to cast (in C#) or convert (in Visual Basic) to the appropriate enumeration type.</source>
          <target state="translated">非ジェネリックの解析方法がキャスト (c#) または (Visual Basic) の適切な列挙型に変換する必要のあるオブジェクトを返すことに注意してください。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Formatting enumeration values</source>
          <target state="translated">列挙値の書式設定</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can convert enumeration values to their string representations by calling the static <ph id="ph1">&lt;xref:System.Enum.Format%2A&gt;</ph> method, as well as the overloads of the instance <ph id="ph2">&lt;xref:System.Enum.ToString%2A&gt;</ph> method.</source>
          <target state="translated">列挙値をそれぞれの文字列表現に変換するには、静的なを呼び出すことによって<ph id="ph1">&lt;xref:System.Enum.Format%2A&gt;</ph>メソッドだけでなく、インスタンスのオーバー ロード<ph id="ph2">&lt;xref:System.Enum.ToString%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can use a format string to control the precise way in which an enumeration value is represented as a string.</source>
          <target state="translated">文字列として表される列挙値の正確な方法を制御するのに書式指定文字列を使用することができます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For more information, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>列挙型書式指定文字列<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example uses each of the supported enumeration format strings ("G" or "g", "D" or "d", "X" or "x", and "F" or "f" ) to convert a member of the <ph id="ph1">`ArrivalStatus`</ph> enumeration to its string representations.</source>
          <target state="translated">次の例を使用して、サポートされている列挙型書式指定文字列 ("G"または"g"、"D"または"d"、"X"または"x"と"F"または"f") の各変換のメンバー、<ph id="ph1">`ArrivalStatus`</ph>文字列形式を列挙します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Iterating enumeration members</source>
          <target state="translated">列挙型のメンバーを反復処理します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">&lt;xref:System.Enum&gt;</ph> type does not implement the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, which would enable you to iterate members of a collection by using a <ph id="ph4">`foreach`</ph> (in C#) or <ph id="ph5">`For Each`</ph> (in Visual Basic) construct.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum&gt;</ph>型を実装しません、<ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>または<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>インターフェイスを使用して、コレクションのメンバーを反復処理することを可能にすると、 <ph id="ph4">`foreach`</ph> (C# の場合) または<ph id="ph5">`For Each`</ph>(Visual Basic) で構築します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>However, you can enumerate members in either of two ways.</source>
          <target state="translated">ただし、2 つの方法のいずれかのメンバーを列挙できます。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can call the <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method to retrieve a string array containing the names of the enumeration members.</source>
          <target state="translated">呼び出すことができます、<ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph>列挙体メンバーの名前を含む文字列配列を取得します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Next, for each element of the string array, you can call the <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> method to convert the string to its equivalent enumeration value.</source>
          <target state="translated">次に、文字列配列の各要素に対してを呼び出すことができます、<ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph>を等価の列挙の値に文字列に変換します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example illustrates this approach.</source>
          <target state="translated">このアプローチの例を次に示します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can call the <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method to retrieve an array that contains the underlying values in the enumeration.</source>
          <target state="translated">呼び出すことができます、<ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph>列挙体の値は、基になるを格納する配列を取得します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Next, for each element of the array, you can call the <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> method to convert the integer to its equivalent enumeration value.</source>
          <target state="translated">次に、配列の各要素に対してを呼び出すことができます、<ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph>を等価の列挙の値に整数に変換します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example illustrates this approach.</source>
          <target state="translated">このアプローチの例を次に示します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Non-exclusive members and the Flags attribute</source>
          <target state="translated">非排他的なメンバーと Flags 属性</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>One common use of an enumeration is to represent a set of mutually exclusive values.</source>
          <target state="translated">列挙型の 1 つの一般的な用途は、相互に排他的な値のセットを表してです。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For example, an <ph id="ph1">`ArrivalStatus`</ph> instance can have a value of <ph id="ph2">`Early`</ph>, <ph id="ph3">`OnTime`</ph>, or <ph id="ph4">`Late`</ph>.</source>
          <target state="translated">たとえば、<ph id="ph1">`ArrivalStatus`</ph>インスタンスの値をとります。 <ph id="ph2">`Early`</ph>、 <ph id="ph3">`OnTime`</ph>、または<ph id="ph4">`Late`</ph>です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>It makes no sense for the value of an <ph id="ph1">`ArrivalStatus`</ph> instance to reflect more than one enumeration constant.</source>
          <target state="translated">値の意味がない、<ph id="ph1">`ArrivalStatus`</ph>インスタンス 1 つ以上の列挙定数を反映するようにします。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>In other cases, however, the value of an enumeration object can include multiple enumeration members, and each member represents a bit field in the enumeration value.</source>
          <target state="translated">ただし、それ以外の場合、列挙型のオブジェクトの値は、複数の列挙型メンバーを含めることができます、各メンバーは、列挙値のビット フィールドを表します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute can be used to indicate that the enumeration consists of bit fields.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph>属性は、ビット フィールドの列挙体で構成されているを示すために使用できます。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For example, an enumeration named <ph id="ph1">`Pets`</ph> might be used to indicate the kinds of pets in a household.</source>
          <target state="translated">たとえば、という名前の列挙<ph id="ph1">`Pets`</ph>世帯でペットの種類を示すために使用される可能性があります。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>It can be defined as follows.</source>
          <target state="translated">次のように定義できます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">`Pets`</ph> enumeration can then be used as shown in the following example.</source>
          <target state="translated"><ph id="ph1">`Pets`</ph>列挙体は、次の例で示すようにし、使用できます。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following best practices should be used when defining a bitwise enumeration and applying the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute.</source>
          <target state="translated">ビット単位を定義するときに、次のベスト プラクティスを使用する必要があります列挙体を適用する、<ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Use the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph>ビットごとの演算 (AND、OR の排他的 OR) は、数値の値に対して実行する場合にのみ列挙型のカスタム属性です。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</source>
          <target state="translated">つまり、1、2、4、8、およびよびな 2 の累乗で列挙定数を定義します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>This means the individual flags in combined enumeration constants do not overlap.</source>
          <target state="translated">これは、結合された列挙定数の各フラグが重複しないことを意味します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Consider creating an enumerated constant for commonly used flag combinations.</source>
          <target state="translated">一般的に使用されるフラグの組み合わせに対して列挙定数を作成することを検討します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For example, if you have an enumeration used for file I/O operations that contains the enumerated constants <ph id="ph1">`Read = 1`</ph> and <ph id="ph2">`Write = 2`</ph>, consider creating the enumerated constant <ph id="ph3">`ReadWrite = Read OR Write`</ph>, which combines the <ph id="ph4">`Read`</ph> and <ph id="ph5">`Write`</ph> flags.</source>
          <target state="translated">たとえば、ファイル I/O 操作に使用する列挙体がある場合を含む列挙型定数<ph id="ph1">`Read = 1`</ph>と<ph id="ph2">`Write = 2`</ph>、列挙型定数の作成を検討して<ph id="ph3">`ReadWrite = Read OR Write`</ph>、どの結合、<ph id="ph4">`Read`</ph>と<ph id="ph5">`Write`</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</source>
          <target state="translated">さらに、フラグの組み合わせに使用されるビットごとの OR 演算することはできません、単純なタスクをいくつかの状況での高度な概念と見なされる可能性があります。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</source>
          <target state="translated">多くのフラグの位置は 1 では、可能性があります、コードが複雑になる場合容易させ、コーディング エラーに設定する可能性がありますので、フラグの列挙定数として負の数を定義する場合は、注意を使用します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>A convenient way to test whether a flag is set in a numeric value is to call the instance <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">数値の値で、フラグが設定されているかどうかをテストする便利な方法は、インスタンスの呼び出しを<ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph>メソッドを次の例で示すようにします。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>It is equivalent to performing a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, and then testing whether the result of that operation is equal to the flag enumerated constant.</source>
          <target state="translated">これは、数値の値とすべてのビットを設定すると、フラグに対応していないゼロに対応する数値で、フラグ列挙型定数のビットごとの AND 演算を実行して、その操作の結果がフラグの列挙型定数と等しいかどうかをテストしてに相当します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>This is illustrated in the following example.</source>
          <target state="translated">このことを次の例で説明します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Use <ph id="ph1">`None`</ph> as the name of the flag enumerated constant whose value is zero.</source>
          <target state="translated">使用して<ph id="ph1">`None`</ph>フラグの名前は列挙定数の値が 0 として。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You cannot use the <ph id="ph1">`None`</ph> enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</source>
          <target state="translated">使用することはできません、<ph id="ph1">`None`</ph>のため、結果は常に 0 フラグをテストするビットごとの AND 演算で列挙型定数。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>However, you can perform a logical, not a bitwise, comparison between the numeric value and the <ph id="ph1">`None`</ph> enumerated constant to determine whether any bits in the numeric value are set.</source>
          <target state="translated">ただし、行うことができます、論理、数値の値の間でビット演算子、比較ではありません、<ph id="ph1">`None`</ph>数値の値のビットを設定するかどうかを決定する列挙型定数。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>This is illustrated in the following example.</source>
          <target state="translated">このことを次の例で説明します。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Do not define an enumeration value solely to mirror the state of the enumeration itself.</source>
          <target state="translated">列挙体自体の状態を反映するだけの列挙値を定義しません。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For example, do not define an enumerated constant that merely marks the end of the enumeration.</source>
          <target state="translated">たとえば、列挙の終了をマークするだけの列挙定数を定義してください。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>If you need to determine the last value of the enumeration, check for that value explicitly.</source>
          <target state="translated">列挙体の最後の値を決定する必要がある場合は、その値を明示的に確認します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</source>
          <target state="translated">さらに、範囲内のすべての値は有効な場合は、最初と最後の列挙型定数の範囲チェックを実行できます。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Adding enumeration methods</source>
          <target state="translated">列挙メソッドを追加します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Because enumeration types are defined by language structures, such as <ph id="ph1">`enum`</ph> (C#) and <ph id="ph2">`Enum`</ph> (Visual Basic), you cannot define custom methods for an enumeration type other than those methods inherited from the <ph id="ph3">&lt;xref:System.Enum&gt;</ph> class.</source>
          <target state="translated">列挙型がなどの言語構造体によって定義されるため<ph id="ph1">`enum`</ph>(c#) および<ph id="ph2">`Enum`</ph>(Visual Basic) 列挙型から継承されたこれらのメソッド以外のカスタム メソッドを定義することはできません、<ph id="ph3">&lt;xref:System.Enum&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>However, you can use extension methods to add functionality to a particular enumeration type.</source>
          <target state="translated">ただし、機能を特定の列挙型に追加するのに拡張メソッドを使用することができます。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>In the following example, the <ph id="ph1">`Grades`</ph> enumeration represents the possible letter grades that a student may receive in a class.</source>
          <target state="translated">次の例では、<ph id="ph1">`Grades`</ph> 列挙型は学生が授業で受け取る成績評価を表わしています。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>An extension method named <ph id="ph1">`Passing`</ph> is added to the <ph id="ph2">`Grades`</ph> type so that each instance of that type now "knows" whether it represents a passing grade or not.</source>
          <target state="translated"><ph id="ph1">`Passing`</ph> という名前の拡張機能メソッドが <ph id="ph2">`Grades`</ph> 型に追加されていて、この型の各インスタンスが合格点を表しているかどうかを自ら "認識" できるようになっています。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">`Extensions`</ph> class also contains a static read-write variable that defines the minimum passing grade.</source>
          <target state="translated"><ph id="ph1">`Extensions`</ph>クラスには、最小合格を定義する静的な読み取り/書き込み変数も含まれています。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The return value of the <ph id="ph1">`Passing`</ph> extension method reflects the current value of that variable.</source>
          <target state="translated">戻り値、<ph id="ph1">`Passing`</ph>拡張メソッドには、その変数の現在の値が反映されます。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example demonstrates using an enumeration to represent named values and another enumeration to represent named bit fields.</source>
          <target state="translated">次の例では、名前付きの値と別の名前付きビット フィールドを表す列挙体を表す列挙体を使用してを示しています。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>This type is thread safe.</source>
          <target state="translated">この型はスレッド セーフです。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Enum.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Enum" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Enum" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source>An object to compare, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">比較対象のオブジェクト、または <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source>Compares this instance to a specified object and returns an indication of their relative values.</source>
          <target state="translated">指定したオブジェクトとこのインスタンスを比較し、これらの相対値を示す値を返します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source>A signed number that indicates the relative values of this instance and <ph id="ph1">&lt;paramref name="target" /&gt;</ph>.</source>
          <target state="translated">このインスタンスと <ph id="ph1">&lt;paramref name="target" /&gt;</ph> の相対値を示す符号付き数値。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 値</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Meaning</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 意味</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0 より小さい値</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The value of this instance is less than the value of <ph id="ph3">&lt;paramref name="target" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> このインスタンスの値が <ph id="ph3">&lt;paramref name="target" /&gt;</ph> より小さい値です。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The value of this instance is equal to the value of <ph id="ph3">&lt;paramref name="target" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> このインスタンスの値が <ph id="ph3">&lt;paramref name="target" /&gt;</ph> の値と同じです。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0 より大きい値</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The value of this instance is greater than the value of <ph id="ph3">&lt;paramref name="target" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> このインスタンスの値が <ph id="ph3">&lt;paramref name="target" /&gt;</ph> より大きい値です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.CompareTo(System.Object)">
          <source>The following example illustrates the use of <ph id="ph1">`CompareTo`</ph> in the context of <ph id="ph2">`Enum`</ph>.</source>
          <target state="translated">次の例は、の使用を示しています。<ph id="ph1">`CompareTo`</ph>のコンテキストで<ph id="ph2">`Enum`</ph>です。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> and this instance are not the same type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> とこのインスタンスは型が異なっています。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source>This instance is not type <ph id="ph1">&lt;see cref="T:System.SByte" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.Int16" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Int32" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Int64" /&gt;</ph>, <ph id="ph5">&lt;see cref="T:System.Byte" /&gt;</ph>, <ph id="ph6">&lt;see cref="T:System.UInt16" /&gt;</ph>, <ph id="ph7">&lt;see cref="T:System.UInt32" /&gt;</ph>, or <ph id="ph8">&lt;see cref="T:System.UInt64" /&gt;</ph>.</source>
          <target state="translated">このインスタンスの型が、<ph id="ph1">&lt;see cref="T:System.SByte" /&gt;</ph>、<ph id="ph2">&lt;see cref="T:System.Int16" /&gt;</ph>、<ph id="ph3">&lt;see cref="T:System.Int32" /&gt;</ph>、<ph id="ph4">&lt;see cref="T:System.Int64" /&gt;</ph>、<ph id="ph5">&lt;see cref="T:System.Byte" /&gt;</ph>、<ph id="ph6">&lt;see cref="T:System.UInt16" /&gt;</ph>、<ph id="ph7">&lt;see cref="T:System.UInt32" /&gt;</ph>、または <ph id="ph8">&lt;see cref="T:System.UInt64" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Enum.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">対象のインスタンスと比較する対象のオブジェクト、または <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Enum.Equals(System.Object)">
          <source>Returns a value indicating whether this instance is equal to a specified object.</source>
          <target state="translated">このインスタンスが指定されたオブジェクトに等しいかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Enum.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="obj" /&gt;</ph> が同じ型の列挙体値で、基になる値がこのインスタンスと同じである場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>、それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method overrides <ph id="ph2">&lt;xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> to define how enumeration members are evaluated for equality.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>メソッドのオーバーライド<ph id="ph2">&lt;xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>を等価の列挙型のメンバーを評価する方法を定義します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The following example defines two enumeration types, <ph id="ph1">`SledDog`</ph> and <ph id="ph2">`WorkDog`</ph>.</source>
          <target state="translated">次の例は、次の 2 つの列挙型を定義<ph id="ph1">`SledDog`</ph>と<ph id="ph2">`WorkDog`</ph>です。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The <ph id="ph1">`SledDog`</ph> enumeration has two members, <ph id="ph2">`SledDog.AlaskanMalamute`</ph> and <ph id="ph3">`SledDog.Malamute`</ph>, that have the same underlying value.</source>
          <target state="translated"><ph id="ph1">`SledDog`</ph>列挙体には 2 つのメンバー、<ph id="ph2">`SledDog.AlaskanMalamute`</ph>と<ph id="ph3">`SledDog.Malamute`</ph>、基になる値が同じであること。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The call to the <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> method indicates that these values are equal because their underlying values are the same.</source>
          <target state="translated">呼び出し、<ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph>メソッドでは、その基になる値が同じなのでこれらの値が等しいことを示します。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The <ph id="ph1">`SledDog.Malamute`</ph> and <ph id="ph2">`WorkDog.Newfoundland`</ph> members have the same underlying value, although they represent different enumeration types.</source>
          <target state="translated"><ph id="ph1">`SledDog.Malamute`</ph>と<ph id="ph2">`WorkDog.Newfoundland`</ph>異なる列挙型であるが、基になる値が同じをメンバーであります。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>A call to the <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> method indicates that these values are not equal.</source>
          <target state="translated">呼び出し、<ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph>メソッドでは、これらの値が等しくないことを示します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The enumeration type of the value to convert.</source>
          <target state="translated">変換する値の列挙型。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The value to convert.</source>
          <target state="translated">変換する値。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The output format to use.</source>
          <target state="translated">使用する出力形式。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</source>
          <target state="translated">指定した形式に従って、指定した列挙型の指定した値をそれと等価の文字列形式に変換します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>A string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> の文字列形式。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The following table shows the valid values for the <ph id="ph1">`format`</ph> parameter.</source>
          <target state="translated">次の表に有効な値を示しています、<ph id="ph1">`format`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Format</source>
          <target state="translated">形式</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Description</source>
          <target state="translated">説明</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>"G" or "g"</source>
          <target state="translated">"G" または "g"</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>If <ph id="ph1">`value`</ph> is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of <ph id="ph2">`value`</ph> is returned.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>は名前付きの列挙型定数に等しく、その定数の名前を返します。 それ以外の場合、10 進数表<ph id="ph2">`value`</ph>が返されます。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>For example, suppose the only enumerated constant is named Red, and its value is 1.</source>
          <target state="translated">たとえば、唯一の列挙定数が赤をという名前し、その値は 1 です。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>If <ph id="ph1">`value`</ph> is specified as 1, this format returns "Red".</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>は 1 で指定、この形式は"Red"を返します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>However, if <ph id="ph1">`value`</ph> is specified as 2, this format returns "2".</source>
          <target state="translated">ただし場合、 <ph id="ph1">`value`</ph> 2 として指定されて、この形式は「2」を返します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>If the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> custom attribute is applied to the enumeration, <ph id="ph2">`value`</ph> is treated as a bit field that contains one or more flags that consist of one or more bits.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph>カスタム属性が、列挙型に適用される<ph id="ph2">`value`</ph>は 1 つ以上のビットで構成される 1 つまたは複数のフラグが含まれているビット フィールドとして扱われます。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>If <ph id="ph1">`value`</ph> is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>列挙定数の名前の組み合わせと等しいかどうかが、これらの定数の名前のコンマ区切りのリストが返されます。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source><ph id="ph1">`value`</ph> is searched for flags, going from the flag with the largest value to the smallest value.</source>
          <target state="translated"><ph id="ph1">`value`</ph> 最大値を含むフラグから最小値へと向かうフラグが検索されます。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>For each flag that corresponds to a bit field in <ph id="ph1">`value`</ph>, the name of the constant is concatenated to the delimiter-separated list.</source>
          <target state="translated">内のビット フィールドに対応する各フラグの<ph id="ph1">`value`</ph>、区切り記号で区切られたリストに定数の名前を連結します。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The value of that flag is then excluded from further consideration, and the search continues for the next flag.</source>
          <target state="translated">そのフラグの値は、さらに考慮対象から除外し、次のフラグから検索を続行します。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>If <ph id="ph1">`value`</ph> is not equal to a combination of named enumerated constants, the decimal equivalent of <ph id="ph2">`value`</ph> is returned.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>は等しくありませんの組み合わせと等価の 10 進の等価の列挙定数をという名前<ph id="ph2">`value`</ph>が返されます。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>"X" or "x"</source>
          <target state="translated">"X" または "x"</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Represents <ph id="ph1">`value`</ph> in hexadecimal format without a leading "0x".</source>
          <target state="translated">表す<ph id="ph1">`value`</ph>先頭に"0 x"のない 16 進数形式でします。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>"D" or "d"</source>
          <target state="translated">"D" または "d"</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Represents <ph id="ph1">`value`</ph> in decimal form.</source>
          <target state="translated">表す<ph id="ph1">`value`</ph>10 進数。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>"F" or "f"</source>
          <target state="translated">"F" または "f"</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Behaves identically to "G" or "g", except that the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> is not required to be present on the <ph id="ph2">&lt;xref:System.Enum&gt;</ph> declaration.</source>
          <target state="translated">"G"または"g"、同じように動作する点を除いて、<ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph>に存在している必要はありません、<ph id="ph2">&lt;xref:System.Enum&gt;</ph>宣言します。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The following example illustrates the use of <ph id="ph1">`Format`</ph> in the context of <ph id="ph2">`Enum`</ph>.</source>
          <target state="translated">次の例は、の使用を示しています。<ph id="ph1">`Format`</ph>のコンテキストで<ph id="ph2">`Enum`</ph>です。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>, <ph id="ph2">&lt;paramref name="value" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="format" /&gt;</ph> parameter is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>、<ph id="ph2">&lt;paramref name="value" /&gt;</ph>、または <ph id="ph3">&lt;paramref name="format" /&gt;</ph> パラメーターが <ph id="ph4">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> parameter is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> 型ではありません。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is from an enumeration that differs in type from <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> は、<ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> とは型の異なる列挙体からの値です。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The type of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not an underlying type of <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> の型が、<ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> の基になる型ではありません。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="format" /&gt;</ph> parameter contains an invalid value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> パラメーターには無効な値が含まれています。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> equals "X", but the enumeration type is unknown.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> は "X"と等しいですが、列挙型は不明です。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Enum.GetHashCode">
          <source>Returns the hash code for the value of this instance.</source>
          <target state="translated">このインスタンスの値のハッシュ コードを返します。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Enum.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 ビット符号付き整数ハッシュ コード。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>An enumeration type.</source>
          <target state="translated">列挙型。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>The value of a particular enumerated constant in terms of its underlying type.</source>
          <target state="translated">基になる型に関連する特定の列挙型定数の値。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>Retrieves the name of the constant in the specified enumeration that has the specified value.</source>
          <target state="translated">指定した値を持つ指定した列挙体にある定数の名前を取得します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>A string containing the name of the enumerated constant in <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> whose value is <ph id="ph2">&lt;paramref name="value" /&gt;</ph>; or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if no such constant is found.</source>
          <target state="translated">値が <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> である <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 内にある列挙型定数の名前が含まれた文字列。そのような定数が見つからない場合は、<ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>If multiple enumeration members have the same underlying value, the <ph id="ph1">&lt;xref:System.Enum.GetName%2A&gt;</ph> method guarantees that it will return the name of one of those enumeration members.</source>
          <target state="translated">複数の列挙メンバー値がある場合、同じ基になる、<ph id="ph1">&lt;xref:System.Enum.GetName%2A&gt;</ph>メソッドは、その列挙体メンバーのいずれかの名前が返されることを保証します。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>However, it does not guarantee that it will always return the name of the same enumeration member.</source>
          <target state="translated">ただし、これは保証されないことが常に返される同じ列挙型メンバーの名前。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member's name.</source>
          <target state="translated">結果として、複数の列挙体メンバーの値が同じ場合は、アプリケーション コード必要がありますしないによって異なります特定メンバーの名前を返すメソッド。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>The following example illustrates the use of <ph id="ph1">`GetName`</ph>.</source>
          <target state="translated">次の例は、の使用を示しています。<ph id="ph1">`GetName`</ph>です。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> または <ph id="ph2">&lt;paramref name="value" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is neither of type <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> nor does it have the same underlying type as <ph id="ph3">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> の型が <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> ではなく、基になる型も <ph id="ph3">&lt;paramref name="enumType" /&gt;</ph> と同じではありません。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Enum.GetNames(System.Type)">
          <source>An enumeration type.</source>
          <target state="translated">列挙型。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Enum.GetNames(System.Type)">
          <source>Retrieves an array of the names of the constants in a specified enumeration.</source>
          <target state="translated">指定した列挙体に含まれている定数の名前の配列を取得します。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Enum.GetNames(System.Type)">
          <source>A string array of the names of the constants in <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> に含まれている定数の名前の文字列配列。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetNames(System.Type)">
          <source>The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude).</source>
          <target state="translated">戻り値の配列の要素は、列挙型定数のバイナリ値で並べ替えられます (つまり、その符号なしの大きさによって)。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetNames(System.Type)">
          <source>The following example provides displays information about the array returned by the <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method for an enumeration that includes a negative, zero, and a positive value.</source>
          <target state="translated">次の例は、によって返される配列に関する情報を表示、<ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph>負の値や 0、正の値を含む列挙体のメソッドです。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetNames(System.Type)">
          <source>If there are enumerated constants with same value, the order of their corresponding names is unspecified.</source>
          <target state="translated">同じ値を持つ列挙定数がある場合は、対応する名前の順序は指定されません。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetNames(System.Type)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> メソッドの使用例を次に示します。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Enum.GetNames(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Enum.GetNames(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> parameter is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Enum.GetTypeCode">
          <source>Returns the type code of the underlying type of this enumeration member.</source>
          <target state="translated">この列挙メンバーの基になる型の型コードを返します。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Enum.GetTypeCode">
          <source>The type code of the underlying type of this instance.</source>
          <target state="translated">このインスタンスの基になる型の型コードを返します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Enum.GetTypeCode">
          <source>The enumeration type is unknown.</source>
          <target state="translated">列挙型が不明です。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>The enumeration whose underlying type will be retrieved.</source>
          <target state="translated">基になる型が取得される列挙。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>Returns the underlying type of the specified enumeration.</source>
          <target state="translated">指定した列挙体の基になる型を返します。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>The underlying type of <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> の基になる型。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Enum&gt;</ph> structure enables values to be represented as named constants.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum&gt;</ph>構造により、名前付き定数として表現されている値。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>The data type of the enumeration's values is known as its underlying type.</source>
          <target state="translated">列挙型の値のデータ型は、基になる型と呼ばれます。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>For example, the underlying type of the <ph id="ph1">&lt;xref:System.DayOfWeek&gt;</ph> enumeration, which consists of constants that represent each day of the week (<ph id="ph2">&lt;xref:System.DayOfWeek.Monday?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType&gt;</ph>, and so on), is <ph id="ph4">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">たとえば、基になる型の<ph id="ph1">&lt;xref:System.DayOfWeek&gt;</ph>列挙体は、各曜日を表す定数で構成されます (<ph id="ph2">&lt;xref:System.DayOfWeek.Monday?displayProperty=nameWithType&gt;</ph>、<ph id="ph3">&lt;xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType&gt;</ph>など) は<ph id="ph4">&lt;xref:System.Int32&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Enum.GetUnderlyingType%2A&gt;</ph> method to display the underlying type of some enumeration members.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Enum.GetUnderlyingType%2A&gt;</ph>メソッドをいくつかの列挙メンバーの基になる型を表示します。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source>An enumeration type.</source>
          <target state="translated">列挙型。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source>Retrieves an array of the values of the constants in a specified enumeration.</source>
          <target state="translated">指定した列挙体に含まれている定数の値の配列を取得します。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source>An array that contains the values of the constants in <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> に含まれている定数の値を格納する配列。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude).</source>
          <target state="translated">配列の要素は列挙定数のバイナリ値に基づいて並べ替えられます (つまり、その符号なしの大きさによって)。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The following example displays information about the array returned by the <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method for an enumeration that includes a negative value, zero, and a positive value.</source>
          <target state="translated">次の例は、によって返される配列に関する情報を表示、<ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph>負の値や 0、正の値を含む列挙体のメソッドです。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method returns an array that contains a value for each member of the <ph id="ph2">`enumType`</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph>メソッドの各メンバーの値を含む配列を返します、<ph id="ph2">`enumType`</ph>列挙します。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>If multiple members have the same value, the returned array includes duplicate values.</source>
          <target state="translated">複数のメンバーの値が同じ場合は、返される配列には、重複する値が含まれています。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>In this case, calling the <ph id="ph1">&lt;xref:System.Enum.GetName%2A&gt;</ph> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values.</source>
          <target state="translated">この場合、呼び出し、<ph id="ph1">&lt;xref:System.Enum.GetName%2A&gt;</ph>返される配列内の各値を持つメソッドが重複する値を持つメンバーに割り当てられた一意の名前を復元できません。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>To retrieve all the names of enumeration members successfully, call the <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method.</source>
          <target state="translated">すべての列挙体メンバーの名前を正常に取得する、<ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method cannot be invoked by using reflection in a reflection-only context.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph>リフレクションのみのコンテキストでリフレクションを使用してメソッドを呼び出すことができません。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>Instead, you can retrieve the value of all enumeration members by using the <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> method to get an array of <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects that represent enumeration members and then call the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType&gt;</ph> method on each element of the array.</source>
          <target state="translated">使用してすべての列挙体メンバーの値を取得する代わりに、<ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph>の配列を取得するメソッド<ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph>列挙型のメンバーを表すオブジェクトを呼び出す、<ph id="ph3">&lt;xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType&gt;</ph>配列の各要素に対してメソッドです。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The following example illustrates this technique.</source>
          <target state="translated">次の例では、この方法を示します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>It requires that you define the following enumeration in an assembly named Enumerations.dll:</source>
          <target state="translated">これは、Enumerations.dll をという名前のアセンブリでは、次の列挙型を定義することが必要です。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The assembly is loaded in a reflection-only context, a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">`Pets`</ph> enumeration is instantiated, an array of <ph id="ph3">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects is retrieved, and the field values are displayed to the console.</source>
          <target state="translated">アセンブリがリフレクションのみのコンテキストに読み込まれている、<ph id="ph1">&lt;xref:System.Type&gt;</ph>を表すオブジェクト、<ph id="ph2">`Pets`</ph>列挙型がインスタンス化の配列<ph id="ph3">&lt;xref:System.Reflection.FieldInfo&gt;</ph>オブジェクトを取得し、フィールドの値がコンソールに表示されます。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The following example illustrates the use of <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph>.</source>
          <target state="translated">次の例は、の使用を示しています。<ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source>The method is invoked by reflection in a reflection-only context,</source>
          <target state="translated">リフレクションのみのコンテキストでのリフレクションによって、メソッドが呼び出されます</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is a type from an assembly loaded in a reflection-only context.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> はリフレクションのみのコンテキストに読み込まれたアセンブリからの型です。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>An enumeration value.</source>
          <target state="translated">列挙値。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>Determines whether one or more bit fields are set in the current instance.</source>
          <target state="translated">現在のインスタンスで 1 つ以上のビット フィールドが設定されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Enum.HasFlag(System.Enum)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the bit field or bit fields that are set in <ph id="ph2">&lt;paramref name="flag" /&gt;</ph> are also set in the current instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="flag" /&gt;</ph> に設定されているビット フィールドが現在のインスタンスでも設定されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method returns the result of the following Boolean expression.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph>メソッドには、次のブール式の結果が返されます。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>If the underlying value of <ph id="ph1">`flag`</ph> is zero, the method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">場合の基になる値<ph id="ph1">`flag`</ph>0 の場合は、メソッドが返される<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>If this behavior is not desirable, you can use the <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> method to test for equality with zero and call <ph id="ph2">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> only if the underlying value of <ph id="ph3">`flag`</ph> is non-zero, as the following example illustrates.</source>
          <target state="translated">この動作が望ましくない場合を使用できます、 <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> 0 や呼び出しとの等価性をテストするメソッド<ph id="ph2">&lt;xref:System.Enum.HasFlag%2A&gt;</ph>場合にのみの基になる値<ph id="ph3">`flag`</ph>0 以外の場合は、次の例に示すようにします。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method is designed to be used with enumeration types that are marked with the <ph id="ph2">&lt;xref:System.FlagsAttribute&gt;</ph> attribute and can be used to determine whether multiple bit fields are set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph>でマークされた列挙型で使用するメソッドが設計されています、<ph id="ph2">&lt;xref:System.FlagsAttribute&gt;</ph>属性し、複数のビット フィールドが設定されているかどうかを確認するために使用できます。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>For enumeration types that are not marked with the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute, call either the <ph id="ph2">&lt;xref:System.Enum.Equals%2A&gt;</ph> method or the <ph id="ph3">&lt;xref:System.Enum.CompareTo%2A&gt;</ph> method.</source>
          <target state="translated">マークされていない列挙型の<ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph>属性、いずれかを呼び出す、<ph id="ph2">&lt;xref:System.Enum.Equals%2A&gt;</ph>メソッドまたは<ph id="ph3">&lt;xref:System.Enum.CompareTo%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>The following example defines an <ph id="ph1">`ItemsOrdered`</ph> enumeration that reflects categories of items that a customer can order in a restaurant.</source>
          <target state="translated">次の例では定義、<ph id="ph1">`ItemsOrdered`</ph>顧客がレストランで注文できます項目のカテゴリを表す列挙。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>The example tests whether the customer has ordered both an entrée and a beverage.</source>
          <target state="translated">この例では、前菜と飲み物の両方の顧客が注文があるかどうかをテストします。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Enum.HasFlag(System.Enum)">
          <source><ph id="ph1">&lt;paramref name="flag" /&gt;</ph> is a different type than the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="flag" /&gt;</ph> の型が、現在のインスタンスの型と異なっています。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>An enumeration type.</source>
          <target state="translated">列挙型。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The value or name of a constant in <bpt id="p1">&lt;c&gt;</bpt>enumType<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>enumType<ept id="p1">&lt;/c&gt;</ept> 内の定数の値または名前。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>Returns an indication whether a constant with a specified value exists in a specified enumeration.</source>
          <target state="translated">指定した値を持つ定数が指定した列挙体に存在するかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a constant in <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> has a value equal to <ph id="ph3">&lt;paramref name="value" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> 内の定数の値が <ph id="ph3">&lt;paramref name="value" /&gt;</ph> と等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The <ph id="ph1">`value`</ph> parameter can be any of the following:</source>
          <target state="translated"><ph id="ph1">`value`</ph>パラメーターには、次のいずれかを指定できます。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>Any member of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">型のメンバーはすべて<ph id="ph1">`enumType`</ph>です。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>A variable whose value is an enumeration member of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">値が型の列挙体のメンバーである変数<ph id="ph1">`enumType`</ph>です。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The string representation of the name of an enumeration member.</source>
          <target state="translated">列挙体のメンバーの名前の文字列形式。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The characters in the string must have the same case as the enumeration member name.</source>
          <target state="translated">文字列の文字には、列挙メンバー名として同じ大文字と小文字が必要です。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>A value of the underlying type of <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">基になる型の値<ph id="ph1">`enumType`</ph>です。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>If the constants in <ph id="ph1">`enumType`</ph> define a set of bit fields and <ph id="ph2">`value`</ph> contains the values, names, or underlying values of multiple bit fields, the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">場合の定数は、<ph id="ph1">`enumType`</ph>ビット フィールドのセットを定義および<ph id="ph2">`value`</ph>値、名、または複数のビット フィールドの基になる値が含まれています、<ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>メソッドを返します。<ph id="ph4">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration.</source>
          <target state="translated">つまり、列挙型ビット フィールドのセットを定義するを判断するメソッドのみ 1 ビット フィールドが列挙体に属しているかどうか。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>To determine whether multiple bit fields are set in an enumeration type that is tagged with the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute, you can call the <ph id="ph2">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method.</source>
          <target state="translated">タグ付けされた列挙型で複数のビット フィールドが設定されているかどうかを決定する、<ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph>呼び出すことができます、属性、<ph id="ph2">&lt;xref:System.Enum.HasFlag%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The following example defines an enumeration named <ph id="ph1">`PetType`</ph> that consists of individual bit fields.</source>
          <target state="translated">次の例は、という名前の列挙を定義<ph id="ph1">`PetType`</ph>個別のフィールドで構成されます。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method with possible underlying enumeration values, string names, and composite values that result from setting multiple bit fields.</source>
          <target state="translated">呼び出して、<ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>列挙値、文字列名、および複数のビット フィールドの設定に起因する複合型の値を基になる、できる限りメソッドです。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> または <ph id="ph2">&lt;paramref name="value" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see langword="Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> が <ph id="ph2">&lt;see langword="Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The type of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is an enumeration, but it is not an enumeration of type <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> の型は列挙体ですが、型 <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> 型の列挙体ではありません。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The type of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not an underlying type of <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> の型が、<ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> の基になる型ではありません。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not type <ph id="ph2">&lt;see cref="T:System.SByte" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Int16" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Int32" /&gt;</ph>, <ph id="ph5">&lt;see cref="T:System.Int64" /&gt;</ph>, <ph id="ph6">&lt;see cref="T:System.Byte" /&gt;</ph>, <ph id="ph7">&lt;see cref="T:System.UInt16" /&gt;</ph>, <ph id="ph8">&lt;see cref="T:System.UInt32" /&gt;</ph>, or <ph id="ph9">&lt;see cref="T:System.UInt64" /&gt;</ph>, or <ph id="ph10">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> の型が <ph id="ph2">&lt;see cref="T:System.SByte" /&gt;</ph>、<ph id="ph3">&lt;see cref="T:System.Int16" /&gt;</ph>、<ph id="ph4">&lt;see cref="T:System.Int32" /&gt;</ph>、<ph id="ph5">&lt;see cref="T:System.Int64" /&gt;</ph>、<ph id="ph6">&lt;see cref="T:System.Byte" /&gt;</ph>、<ph id="ph7">&lt;see cref="T:System.UInt16" /&gt;</ph>、<ph id="ph8">&lt;see cref="T:System.UInt32" /&gt;</ph>、<ph id="ph9">&lt;see cref="T:System.UInt64" /&gt;</ph>、<ph id="ph10">&lt;see cref="T:System.String" /&gt;</ph> のどれでもありません。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>If <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is an enumeration that is defined by using the <ph id="ph2">&lt;see cref="T:System.FlagsAttribute" /&gt;</ph> attribute, the method returns <ph id="ph3">&lt;see langword="false" /&gt;</ph> if multiple bit fields in <ph id="ph4">&lt;paramref name="value" /&gt;</ph> are set but <ph id="ph5">&lt;paramref name="value" /&gt;</ph> does not correspond to a composite enumeration value, or if <ph id="ph6">&lt;paramref name="value" /&gt;</ph> is a string concatenation of the names of multiple bit flags.</source>
          <target state="translated">場合<ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>を使用して定義されている列挙体です、<ph id="ph2">&lt;see cref="T:System.FlagsAttribute" /&gt;</ph>属性、メソッドを返します<ph id="ph3">&lt;see langword="false" /&gt;</ph>場合は、複数のビット フィールドで<ph id="ph4">&lt;paramref name="value" /&gt;</ph>設定されますが、<ph id="ph5">&lt;paramref name="value" /&gt;</ph>複合列挙値に対応していない場合、または<ph id="ph6">&lt;paramref name="value" /&gt;</ph>は、複数のビット フラグの名前の文字列の連結。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>In the following example, a <bpt id="p1">&lt;c&gt;</bpt>Pets<ept id="p1">&lt;/c&gt;</ept> enumeration is defined with the <ph id="ph1">&lt;see cref="T:System.FlagsAttribute" /&gt;</ph> attribute.</source>
          <target state="translated">次の例で、<bpt id="p1">&lt;c&gt;</bpt>ペット<ept id="p1">&lt;/c&gt;</ept>の列挙が定義されて、<ph id="ph1">&lt;see cref="T:System.FlagsAttribute" /&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /&gt;</ph> method returns <ph id="ph2">&lt;see langword="false" /&gt;</ph> when you pass it an enumeration value that has two bit fields (<bpt id="p1">&lt;c&gt;</bpt>Pets.Dog<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>Pets.Cat<ept id="p2">&lt;/c&gt;</ept>) set, and when you pass it the string representation of that enumeration value ("Dog, Cat").</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /&gt;</ph>メソッドを返します<ph id="ph2">&lt;see langword="false" /&gt;</ph>を渡す場合、2 つのビット フィールドが含まれる列挙値 (<bpt id="p1">&lt;c&gt;</bpt>Pets.Dog<ept id="p1">&lt;/c&gt;</ept>と<bpt id="p2">&lt;c&gt;</bpt>Pets.Cat<ept id="p2">&lt;/c&gt;</ept>) 設定、やり取りするとき、その文字列形式を、。列挙値 (「Dog, Cat」) です。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>You can determine whether multiple bit fields are set by calling the <ph id="ph1">&lt;see cref="M:System.Enum.HasFlag(System.Enum)" /&gt;</ph> method.</source>
          <target state="translated">呼び出すことによって複数のビット フィールドを設定するかどうかを決定できます、<ph id="ph1">&lt;see cref="M:System.Enum.HasFlag(System.Enum)" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>An enumeration type.</source>
          <target state="translated">列挙型。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>A string containing the name or value to convert.</source>
          <target state="translated">変換する名前または値が含まれている文字列。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>An object of type <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> whose value is represented by <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">値が <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> により表される <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 型のオブジェクト。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</source>
          <target state="translated"><ph id="ph1">`value`</ph>パラメーターには、列挙体のメンバーの基になる値や名前付き定数の文字列表現が含まれているかの一覧がコンマ (,) で区切られた定数をという名前です。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>One or more blank spaces can precede or follow each value, name, or comma in <ph id="ph1">`value`</ph>.</source>
          <target state="translated">1 つ以上の空白文字が前または次の各値、名前、またはコンマで<ph id="ph1">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>If <ph id="ph1">`value`</ph> is a list, the return value is the value of the specified names combined with a bitwise <ph id="ph2">`OR`</ph> operation.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>リストで、戻り値は、ビットごとと組み合わせて、指定した名前の値<ph id="ph2">`OR`</ph>操作します。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`enumType`</ph>, the method throws an <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>の名前付き定数に対応していない名前は、<ph id="ph2">`enumType`</ph>がスローされます、<ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`enumType`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>の基になる値を表していないを整数の文字列表現です、<ph id="ph2">`enumType`</ph>列挙型、メソッドは、基になる値が列挙体のメンバーを返します<ph id="ph3">`value`</ph>整数型に変換します。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`enumType`</ph>.</source>
          <target state="translated">この動作が望ましくない場合は、呼び出し、<ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>整数の特定の文字列表現が実際のメンバーであることを確認するメソッド<ph id="ph2">`enumType`</ph>です。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>The following example defines a <ph id="ph1">`Colors`</ph> enumeration, calls the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method to convert strings to their corresponding enumeration values, and calls the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that particular integral values are underlying values in the <ph id="ph4">`Colors`</ph> enumeration.</source>
          <target state="translated">次の例では定義、<ph id="ph1">`Colors`</ph>列挙型、呼び出し、 <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> 、対応する列挙値、および呼び出し文字列に変換するメソッド、<ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>の値が特定の整数値が基になることを確認する方法、<ph id="ph4">`Colors`</ph>列挙します。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>This operation is case-sensitive.</source>
          <target state="translated">この操作は、大文字小文字を区別します。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method to parse an array of strings that are created by calling the <ph id="ph2">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph>メソッドを呼び出すことによって作成される文字列の配列を解析、<ph id="ph2">&lt;xref:System.Enum.GetNames%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>It also uses the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method to parse an enumeration value that consists of a bit field.</source>
          <target state="translated">また、使用、<ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph>ビット フィールドで構成される列挙値を解析します。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> または <ph id="ph2">&lt;paramref name="value" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is either an empty string or only contains white space.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> が空の文字列であるか、または空白しか含まれていません。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is a name, but not one of the named constants defined for the enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> は名前ですが、列挙体に対して定義された名前付き定数ではありません。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is outside the range of the underlying type of <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> が <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> の基になる型の範囲外の値です。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>An enumeration type.</source>
          <target state="translated">列挙型。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>A string containing the name or value to convert.</source>
          <target state="translated">変換する名前または値が含まれている文字列。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to ignore case; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to regard case.</source>
          <target state="translated">大文字と小文字を区別しない場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。大文字と小文字を区別する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>A parameter specifies whether the operation is case-insensitive.</source>
          <target state="translated">演算で大文字と小文字を区別しないかどうかをパラメーターで指定します。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>An object of type <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> whose value is represented by <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">値が <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> により表される <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 型のオブジェクト。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</source>
          <target state="translated"><ph id="ph1">`value`</ph>パラメーターには、列挙体のメンバーの基になる値や名前付き定数の文字列表現が含まれているかの一覧がコンマ (,) で区切られた定数をという名前です。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>One or more blank spaces can precede or follow each value, name, or comma in <ph id="ph1">`value`</ph>.</source>
          <target state="translated">1 つ以上の空白文字が前または次の各値、名前、またはコンマで<ph id="ph1">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>If <ph id="ph1">`value`</ph> is a list, the return value is the value of the specified names combined with a bitwise <ph id="ph2">`OR`</ph> operation.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>リストで、戻り値は、ビットごとと組み合わせて、指定した名前の値<ph id="ph2">`OR`</ph>操作します。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`enumType`</ph>, the method throws an <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>の名前付き定数に対応していない名前は、<ph id="ph2">`enumType`</ph>がスローされます、<ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`enumType`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>の基になる値を表していないを整数の文字列表現です、<ph id="ph2">`enumType`</ph>列挙型、メソッドは、基になる値が列挙体のメンバーを返します<ph id="ph3">`value`</ph>整数型に変換します。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`enumType`</ph>.</source>
          <target state="translated">この動作が望ましくない場合は、呼び出し、<ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>整数の特定の文字列表現が実際のメンバーであることを確認するメソッド<ph id="ph2">`enumType`</ph>です。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>The following example defines a <ph id="ph1">`Colors`</ph> enumeration, calls the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> method to convert strings to their corresponding enumeration values, and calls the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that particular integral values are underlying values in the <ph id="ph4">`Colors`</ph> enumeration.</source>
          <target state="translated">次の例では定義、<ph id="ph1">`Colors`</ph>列挙型、呼び出し、 <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> 、対応する列挙値、および呼び出し文字列に変換するメソッド、<ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>の値が特定の整数値が基になることを確認する方法、<ph id="ph4">`Colors`</ph>列挙します。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>The <ph id="ph1">`ignoreCase`</ph> parameter specifies whether this operation is case-sensitive.</source>
          <target state="translated"><ph id="ph1">`ignoreCase`</ph>パラメーターは、この操作は、大文字小文字を区別するかどうかを指定します。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> method to parse an array of strings that are created by calling the <ph id="ph2">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph>メソッドを呼び出すことによって作成される文字列の配列を解析、<ph id="ph2">&lt;xref:System.Enum.GetNames%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>It also uses the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method to parse an enumeration value that consists of a bit field.</source>
          <target state="translated">また、使用、<ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph>ビット フィールドで構成される列挙値を解析します。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> または <ph id="ph2">&lt;paramref name="value" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is either an empty string ("") or only contains white space.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> が空の文字列 ("") であるか、または空白しか含まれていません。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is a name, but not one of the named constants defined for the enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> は名前ですが、列挙体に対して定義された名前付き定数ではありません。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is outside the range of the underlying type of <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> が <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> の基になる型の範囲外の値です。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">カルチャ固有の書式情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>Converts the current value to a Boolean value based on the underlying type.</source>
          <target state="translated">基になる型に基づいて、現在の値をブール値に変換します。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">このメンバーは常に例外をスローします。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">現在、実装されていません。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">常に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">すべての場合。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">カルチャ固有の書式情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>Converts the current value to an 8-bit unsigned integer based on the underlying type.</source>
          <target state="translated">基になる型に基づいて、現在の値を 8 ビット符号なし整数に変換します。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">変換された値。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Convert&gt;</ph>変換を実行します。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">カルチャ固有の書式情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>Converts the current value to a Unicode character based on the underlying type.</source>
          <target state="translated">基になる型に基づいて、現在の値を Unicode 文字に変換します。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">このメンバーは常に例外をスローします。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">現在、実装されていません。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">常に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">すべての場合。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">カルチャ固有の書式情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>Converts the current value to a <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> based on the underlying type.</source>
          <target state="translated">基になる型に基づいて、現在の値を <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> に変換します。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">このメンバーは常に例外をスローします。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">現在、実装されていません。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">常に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">すべての場合。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">カルチャ固有の書式情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>Converts the current value to a <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> based on the underlying type.</source>
          <target state="translated">基になる型に基づいて、現在の値を <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> に変換します。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">このメンバーは常に例外をスローします。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">現在、実装されていません。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">常に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">すべての場合。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">カルチャ固有の書式情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>Converts the current value to a double-precision floating point number based on the underlying type.</source>
          <target state="translated">基になる型に基づいて、現在の値を倍精度浮動小数点数に変換します。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">このメンバーは常に例外をスローします。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">現在、実装されていません。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">常に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">すべての場合。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">カルチャ固有の書式情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>Converts the current value to a 16-bit signed integer based on the underlying type.</source>
          <target state="translated">基になる型に基づいて、現在の値を 16 ビット符号付き整数に変換します。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">変換された値。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Convert&gt;</ph>変換を実行します。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">カルチャ固有の書式情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>Converts the current value to a 32-bit signed integer based on the underlying type.</source>
          <target state="translated">基になる型に基づいて、現在の値を 32 ビット符号付き整数に変換します。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">変換された値。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Convert&gt;</ph>変換を実行します。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">カルチャ固有の書式情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>Converts the current value to a 64-bit signed integer based on the underlying type.</source>
          <target state="translated">基になる型に基づいて、現在の値を 64 ビット符号付き整数に変換します。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">変換された値。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Convert&gt;</ph>変換を実行します。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">カルチャ固有の書式情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>Converts the current value to an 8-bit signed integer based on the underlying type.</source>
          <target state="translated">基になる型に基づいて、現在の値を 8 ビット符号付き整数に変換します。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">変換された値。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Convert&gt;</ph>変換を実行します。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">カルチャ固有の書式情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>Converts the current value to a single-precision floating-point number based on the underlying type.</source>
          <target state="translated">基になる型に基づいて、現在の値を単精度浮動小数点数に変換します。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">このメンバーは常に例外をスローします。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">現在、実装されていません。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">常に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">すべての場合。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>The type to convert to.</source>
          <target state="translated">変換後の型。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">カルチャ固有の書式情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>Converts the current value to a specified type based on the underlying type.</source>
          <target state="translated">基になる型に基づいて、現在の値を指定した型に変換します。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">変換された値。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Convert&gt;</ph>変換を実行します。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">カルチャ固有の書式情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>Converts the current value to a 16-bit unsigned integer based on the underlying type.</source>
          <target state="translated">基になる型に基づいて、現在の値を 16 ビット符号なし整数に変換します。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">変換された値。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Convert&gt;</ph>変換を実行します。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">カルチャ固有の書式情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>Converts the current value to a 32-bit unsigned integer based on the underlying type.</source>
          <target state="translated">基になる型に基づいて、現在の値を 32 ビット符号なし整数に変換します。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">変換された値。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Convert&gt;</ph>変換を実行します。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">カルチャ固有の書式情報を提供するオブジェクト。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>Converts the current value to a 64-bit unsigned integer based on the underlying type.</source>
          <target state="translated">基になる型に基づいて、現在の値を 64 ビット符号なし整数に変換します。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">変換された値。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Convert&gt;</ph>変換を実行します。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>Converts a specified integer value to an enumeration member.</source>
          <target state="translated">指定した整数値を列挙メンバーに変換します。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>The enumeration type to return.</source>
          <target state="translated">返される列挙型。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">列挙メンバーへと変換する値。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>Converts the specified 8-bit unsigned integer to an enumeration member.</source>
          <target state="translated">指定した 8 ビット符号なし整数を列挙メンバーに変換します。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> に設定される列挙体のインスタンス。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29&gt;</ph>メソッドに変換<ph id="ph2">`value`</ph>を基になる値を列挙メンバー<ph id="ph3">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">値がの境界の外側にある場合でも、変換が成功したことに注意してください<ph id="ph1">`enumType`</ph>メンバー。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">いることを確認する<ph id="ph1">`value`</ph>の有効な基になる値は、<ph id="ph2">`enumType`</ph>列挙体に渡すこと、<ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">この変換メソッドが型の値を返します<ph id="ph1">&lt;xref:System.Object&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">キャスト、型のオブジェクトに変換したり<ph id="ph1">`enumType`</ph>です。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>The enumeration type to return.</source>
          <target state="translated">返される列挙型。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">列挙メンバーへと変換する値。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>Converts the specified 16-bit signed integer to an enumeration member.</source>
          <target state="translated">指定した 16 ビット符号付き整数を列挙メンバーに変換します。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> に設定される列挙体のインスタンス。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29&gt;</ph>メソッドに変換<ph id="ph2">`value`</ph>を基になる値を列挙メンバー<ph id="ph3">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">値がの境界の外側にある場合でも、変換が成功したことに注意してください<ph id="ph1">`enumType`</ph>メンバー。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">いることを確認する<ph id="ph1">`value`</ph>の有効な基になる値は、<ph id="ph2">`enumType`</ph>列挙体に渡すこと、<ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">この変換メソッドが型の値を返します<ph id="ph1">&lt;xref:System.Object&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">キャスト、型のオブジェクトに変換したり<ph id="ph1">`enumType`</ph>です。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>The enumeration type to return.</source>
          <target state="translated">返される列挙型。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">列挙メンバーへと変換する値。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>Converts the specified 32-bit signed integer to an enumeration member.</source>
          <target state="translated">指定した 32 ビット符号付き整数を列挙メンバーに変換します。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> に設定される列挙体のインスタンス。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29&gt;</ph>メソッドに変換<ph id="ph2">`value`</ph>を基になる値を列挙メンバー<ph id="ph3">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">値がの境界の外側にある場合でも、変換が成功したことに注意してください<ph id="ph1">`enumType`</ph>メンバー。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">いることを確認する<ph id="ph1">`value`</ph>の有効な基になる値は、<ph id="ph2">`enumType`</ph>列挙体に渡すこと、<ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">この変換メソッドが型の値を返します<ph id="ph1">&lt;xref:System.Object&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">キャスト、型のオブジェクトに変換したり<ph id="ph1">`enumType`</ph>です。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>The enumeration type to return.</source>
          <target state="translated">返される列挙型。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">列挙メンバーへと変換する値。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>Converts the specified 64-bit signed integer to an enumeration member.</source>
          <target state="translated">指定した 64 ビット符号付き整数を列挙メンバーに変換します。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> に設定される列挙体のインスタンス。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29&gt;</ph>メソッドに変換<ph id="ph2">`value`</ph>を基になる値を列挙メンバー<ph id="ph3">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">値がの境界の外側にある場合でも、変換が成功したことに注意してください<ph id="ph1">`enumType`</ph>メンバー。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">いることを確認する<ph id="ph1">`value`</ph>の有効な基になる値は、<ph id="ph2">`enumType`</ph>列挙体に渡すこと、<ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">この変換メソッドが型の値を返します<ph id="ph1">&lt;xref:System.Object&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">キャスト、型のオブジェクトに変換したり<ph id="ph1">`enumType`</ph>です。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>The enumeration type to return.</source>
          <target state="translated">返される列挙型。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>The value convert to an enumeration member.</source>
          <target state="translated">列挙メンバーへと変換する値。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>Converts the specified object with an integer value to an enumeration member.</source>
          <target state="translated">整数値を持つ指定したオブジェクトを列挙メンバーに変換します。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>An enumeration object whose value is <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">値が <ph id="ph1">&lt;paramref name="value" /&gt;</ph> である列挙オブジェクト。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29&gt;</ph> method converts the integral value <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29&gt;</ph>メソッドは、整数値を変換します。<ph id="ph2">`value`</ph>を基になる値を列挙メンバー<ph id="ph3">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">値がの境界の外側にある場合でも、変換が成功したことに注意してください<ph id="ph1">`enumType`</ph>メンバー。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">いることを確認する<ph id="ph1">`value`</ph>の有効な基になる値は、<ph id="ph2">`enumType`</ph>列挙体に渡すこと、<ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">この変換メソッドが型の値を返します<ph id="ph1">&lt;xref:System.Object&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">キャスト、型のオブジェクトに変換したり<ph id="ph1">`enumType`</ph>です。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> または <ph id="ph2">&lt;paramref name="value" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not type <ph id="ph2">&lt;see cref="T:System.SByte" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Int16" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Int32" /&gt;</ph>, <ph id="ph5">&lt;see cref="T:System.Int64" /&gt;</ph>, <ph id="ph6">&lt;see cref="T:System.Byte" /&gt;</ph>, <ph id="ph7">&lt;see cref="T:System.UInt16" /&gt;</ph>, <ph id="ph8">&lt;see cref="T:System.UInt32" /&gt;</ph>, or <ph id="ph9">&lt;see cref="T:System.UInt64" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> が型 <ph id="ph2">&lt;see cref="T:System.SByte" /&gt;</ph>、<ph id="ph3">&lt;see cref="T:System.Int16" /&gt;</ph>、<ph id="ph4">&lt;see cref="T:System.Int32" /&gt;</ph>、<ph id="ph5">&lt;see cref="T:System.Int64" /&gt;</ph>、<ph id="ph6">&lt;see cref="T:System.Byte" /&gt;</ph>、<ph id="ph7">&lt;see cref="T:System.UInt16" /&gt;</ph>、<ph id="ph8">&lt;see cref="T:System.UInt32" /&gt;</ph>、または <ph id="ph9">&lt;see cref="T:System.UInt64" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>The enumeration type to return.</source>
          <target state="translated">返される列挙型。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">列挙メンバーへと変換する値。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>Converts the specified 8-bit signed integer value to an enumeration member.</source>
          <target state="translated">指定した 8 ビット符号付き整数値を列挙メンバーに変換します。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> に設定される列挙体のインスタンス。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29&gt;</ph>メソッドに変換<ph id="ph2">`value`</ph>を基になる値を列挙メンバー<ph id="ph3">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">値がの境界の外側にある場合でも、変換が成功したことに注意してください<ph id="ph1">`enumType`</ph>メンバー。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">いることを確認する<ph id="ph1">`value`</ph>の有効な基になる値は、<ph id="ph2">`enumType`</ph>列挙体に渡すこと、<ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">この変換メソッドが型の値を返します<ph id="ph1">&lt;xref:System.Object&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">キャスト、型のオブジェクトに変換したり<ph id="ph1">`enumType`</ph>です。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>The enumeration type to return.</source>
          <target state="translated">返される列挙型。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">列挙メンバーへと変換する値。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>Converts the specified 16-bit unsigned integer value to an enumeration member.</source>
          <target state="translated">指定した 16 ビット符号なし整数値を列挙メンバーに変換します。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> に設定される列挙体のインスタンス。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29&gt;</ph>メソッドに変換<ph id="ph2">`value`</ph>を基になる値を列挙メンバー<ph id="ph3">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">値がの境界の外側にある場合でも、変換が成功したことに注意してください<ph id="ph1">`enumType`</ph>メンバー。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">いることを確認する<ph id="ph1">`value`</ph>の有効な基になる値は、<ph id="ph2">`enumType`</ph>列挙体に渡すこと、<ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">この変換メソッドが型の値を返します<ph id="ph1">&lt;xref:System.Object&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">キャスト、型のオブジェクトに変換したり<ph id="ph1">`enumType`</ph>です。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>The enumeration type to return.</source>
          <target state="translated">返される列挙型。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">列挙メンバーへと変換する値。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>Converts the specified 32-bit unsigned integer value to an enumeration member.</source>
          <target state="translated">指定した 32 ビット符号なし整数値を列挙メンバーに変換します。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> に設定される列挙体のインスタンス。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29&gt;</ph>メソッドに変換<ph id="ph2">`value`</ph>を基になる値を列挙メンバー<ph id="ph3">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">値がの境界の外側にある場合でも、変換が成功したことに注意してください<ph id="ph1">`enumType`</ph>メンバー。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">いることを確認する<ph id="ph1">`value`</ph>の有効な基になる値は、<ph id="ph2">`enumType`</ph>列挙体に渡すこと、<ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">この変換メソッドが型の値を返します<ph id="ph1">&lt;xref:System.Object&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">キャスト、型のオブジェクトに変換したり<ph id="ph1">`enumType`</ph>です。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>The enumeration type to return.</source>
          <target state="translated">返される列挙型。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">列挙メンバーへと変換する値。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>Converts the specified 64-bit unsigned integer value to an enumeration member.</source>
          <target state="translated">指定した 64 ビット符号なし整数値を列挙メンバーに変換します。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> に設定される列挙体のインスタンス。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29&gt;</ph>メソッドに変換<ph id="ph2">`value`</ph>を基になる値を列挙メンバー<ph id="ph3">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">値がの境界の外側にある場合でも、変換が成功したことに注意してください<ph id="ph1">`enumType`</ph>メンバー。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">いることを確認する<ph id="ph1">`value`</ph>の有効な基になる値は、<ph id="ph2">`enumType`</ph>列挙体に渡すこと、<ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">この変換メソッドが型の値を返します<ph id="ph1">&lt;xref:System.Object&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">キャスト、型のオブジェクトに変換したり<ph id="ph1">`enumType`</ph>です。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>Converts the value of this instance to its equivalent string representation.</source>
          <target state="translated">このインスタンスの値を、それと等価の文字列形式に変換します。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString">
          <source>Converts the value of this instance to its equivalent string representation.</source>
          <target state="translated">このインスタンスの値を、それと等価の文字列形式に変換します。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString">
          <source>The string representation of the value of this instance.</source>
          <target state="translated">このインスタンスの値の文字列形式。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>The return value is formatted with the general format specifier ("G").</source>
          <target state="translated">戻り値には、一般書式指定子 ("G") が表示されます。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>That is, if the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant.</source>
          <target state="translated">つまり場合、<ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph>には適用されませんこの列挙型、名前付き定数と等しい、このインスタンスの値があるし、戻り値は、定数の名前を含む文字列。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>If the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph>が適用される 1 つまたは複数の名前付き定数の組み合わせがある、このインスタンスの値と同じにし、戻り値は、定数の名前のコンマ区切りのリストを含む文字列。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>Otherwise, the return value is the string representation of the numeric value of this instance.</source>
          <target state="translated">それ以外の場合、戻り値は、このインスタンスの数値の文字列形式です。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>For more information about formatting enumeration values, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">列挙値の書式設定の詳細については、次を参照してください。<bpt id="p1">[</bpt>列挙型書式指定文字列<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>For more information about formatting in general, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">一般に書式設定に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>型の書式設定<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>The following example demonstrates converting an enumerated value to a string.</source>
          <target state="translated">次の例では、列挙型の値を文字列に変換するを示しています。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</source>
          <target state="translated">複数の列挙体メンバーは、同じ基になる値を持つ、その基になる値に基づいた列挙体のメンバーの名前の文字列形式を取得しようとする場合は、コードが、メソッドが返すどの名に関するすべての前提を加えないでください。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>For example, the following enumeration defines two members, <bpt id="p1">&lt;c&gt;</bpt>Shade.Gray<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>Shade.Grey<ept id="p2">&lt;/c&gt;</ept>, that have the same underlying value.</source>
          <target state="translated">たとえば、次の列挙には、2 つのメンバーを定義します。 <bpt id="p1">&lt;c&gt;</bpt>Shade.Gray<ept id="p1">&lt;/c&gt;</ept>と<bpt id="p2">&lt;c&gt;</bpt>Shade.Grey<ept id="p2">&lt;/c&gt;</ept>、基になる値が同じであること。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>The following method call attempts to retrieve the name of a member of the <bpt id="p1">&lt;c&gt;</bpt>Shade<ept id="p1">&lt;/c&gt;</ept> enumeration whose underlying value is 1.</source>
          <target state="translated">次のメソッド呼び出しのメンバーの名前を取得しようとしています。、<bpt id="p1">&lt;c&gt;</bpt>網掛け<ept id="p1">&lt;/c&gt;</ept>列挙体の基になる値は 1 です。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</source>
          <target state="translated">メソッドは、"Gray"または「灰色」のいずれかを返すことができ、コードはどの文字列が返されるすべての前提にしないようにします。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.IFormatProvider)">
          <source>(obsolete)</source>
          <target state="translated">(互換性のために残されています)</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.IFormatProvider)">
          <source>This method overload is obsolete; use <ph id="ph1">&lt;see cref="M:System.Enum.ToString" /&gt;</ph>.</source>
          <target state="translated">このメソッドのオーバーロードは今後使用しません。代わりに <ph id="ph1">&lt;see cref="M:System.Enum.ToString" /&gt;</ph> を使用します。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.IFormatProvider)">
          <source>The string representation of the value of this instance.</source>
          <target state="translated">このインスタンスの値の文字列形式。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String)">
          <source>A format string.</source>
          <target state="translated">書式指定文字列。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String)">
          <source>Converts the value of this instance to its equivalent string representation using the specified format.</source>
          <target state="translated">指定した書式を使用して、このインスタンスの値をそれと等価な文字列形式に変換します。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String)">
          <source>The string representation of the value of this instance as specified by <ph id="ph1">&lt;paramref name="format" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> で指定された、このインスタンスの値の文字列形式。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>The <ph id="ph1">`format`</ph> parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</source>
          <target state="translated"><ph id="ph1">`format`</ph>パラメーターは、"G"または"g"、"D"または"d"、"X"または"x"と"F"または"f"書式指定文字列 (書式指定文字列は区別されません) を含めることができます。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph> or an empty string (""), the general format specifier ("G") is used.</source>
          <target state="translated">場合<ph id="ph1">`format`</ph>は<ph id="ph2">`null`</ph>または空の文字列 ("")、一般書式指定子 ("G") を使用します。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>For more information about the enumeration format strings and formatting enumeration values, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">列挙型書式指定文字列と書式設定の列挙値の詳細については、次を参照してください。<bpt id="p1">[</bpt>列挙型書式指定文字列<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>For more information about formatting in general, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">一般に書式設定に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>型の書式設定<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>The following example demonstrates how to convert an enumerated value to a string.</source>
          <target state="translated">次の例では、列挙型の値を文字列に変換する方法を示します。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> contains an invalid specification.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> に無効な指定が含まれています。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> equals "X", but the enumeration type is unknown.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> は "X"と等しいですが、列挙型は不明です。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</source>
          <target state="translated">複数の列挙体メンバーは、同じ基になる値を持つ、その基になる値に基づいた列挙体のメンバーの名前の文字列形式を取得しようとする場合は、コードが、メソッドが返すどの名に関するすべての前提を加えないでください。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>For example, the following enumeration defines two members, <bpt id="p1">&lt;c&gt;</bpt>Shade.Gray<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>Shade.Grey<ept id="p2">&lt;/c&gt;</ept>, that have the same underlying value.</source>
          <target state="translated">たとえば、次の列挙には、2 つのメンバーを定義します。 <bpt id="p1">&lt;c&gt;</bpt>Shade.Gray<ept id="p1">&lt;/c&gt;</ept>と<bpt id="p2">&lt;c&gt;</bpt>Shade.Grey<ept id="p2">&lt;/c&gt;</ept>、基になる値が同じであること。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>The following method call attempts to retrieve the name of a member of the <bpt id="p1">&lt;c&gt;</bpt>Shade<ept id="p1">&lt;/c&gt;</ept> enumeration whose underlying value is 1.</source>
          <target state="translated">次のメソッド呼び出しのメンバーの名前を取得しようとしています。、<bpt id="p1">&lt;c&gt;</bpt>網掛け<ept id="p1">&lt;/c&gt;</ept>列挙体の基になる値は 1 です。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</source>
          <target state="translated">メソッドは、"Gray"または「灰色」のいずれかを返すことができ、コードはどの文字列が返されるすべての前提にしないようにします。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>A format specification.</source>
          <target state="translated">書式指定。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>(Obsolete.)</source>
          <target state="translated">(現在不使用。)</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>This method overload is obsolete; use <ph id="ph1">&lt;see cref="M:System.Enum.ToString(System.String)" /&gt;</ph>.</source>
          <target state="translated">このメソッドのオーバーロードは今後使用しません。代わりに <ph id="ph1">&lt;see cref="M:System.Enum.ToString(System.String)" /&gt;</ph> を使用します。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>The string representation of the value of this instance as specified by <ph id="ph1">&lt;paramref name="format" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> で指定された、このインスタンスの値の文字列形式。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">`format`</ph> parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</source>
          <target state="translated"><ph id="ph1">`format`</ph>パラメーターは、"G"または"g"、"D"または"d"、"X"または"x"と"F"または"f"書式指定文字列 (書式指定文字列は区別されません) を含めることができます。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph> or an empty string (""), the general format specifier ("G") is used.</source>
          <target state="translated">場合<ph id="ph1">`format`</ph>は<ph id="ph2">`null`</ph>または空の文字列 ("")、一般書式指定子 ("G") を使用します。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>For more information about the enumeration format strings and formatting enumeration values, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">列挙型書式指定文字列と書式設定の列挙値の詳細については、次を参照してください。<bpt id="p1">[</bpt>列挙型書式指定文字列<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>For more information about formatting in general, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">一般に書式設定に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>型の書式設定<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>Specify only <ph id="ph1">`format`</ph>; the <ph id="ph2">`provider`</ph> parameter is obsolete.</source>
          <target state="translated">のみを指定<ph id="ph1">`format`</ph>;<ph id="ph2">`provider`</ph>パラメーターは今後使用しません。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> does not contain a valid format specification.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> に有効な書式指定が含まれていません。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> equals "X", but the enumeration type is unknown.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> は "X"と等しいですが、列挙型は不明です。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>The return value indicates whether the conversion succeeded.</source>
          <target state="translated">戻り値は、変換が成功したかどうかを示します。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>The enumeration type to which to convert <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">列挙型に変換する<bpt id="p1">&lt;c&gt;</bpt>値<ept id="p1">&lt;/c&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>The string representation of the enumeration name or underlying value to convert.</source>
          <target state="translated">変換する列挙定数の名前または基になる値の文字列形式。</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>When this method returns, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains an object of type <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept> whose value is represented by <bpt id="p3">&lt;c&gt;</bpt>value<ept id="p3">&lt;/c&gt;</ept> if the parse operation succeeds.</source>
          <target state="translated">このメソッドから制御が戻るときに、<bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> には、解析操作が成功した場合に値が <bpt id="p3">&lt;c&gt;</bpt>value<ept id="p3">&lt;/c&gt;</ept> で表される <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept> 型のオブジェクトが格納されます。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If the parse operation fails, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains the default value of the underlying type of <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">解析操作が失敗した場合、<bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> には <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept> の基になる型の既定値が格納されます。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>Note that this value need not be a member of the <bpt id="p1">&lt;c&gt;</bpt>TEnum<ept id="p1">&lt;/c&gt;</ept> enumeration.</source>
          <target state="translated">この値が <bpt id="p1">&lt;c&gt;</bpt>TEnum<ept id="p1">&lt;/c&gt;</ept> 列挙型のメンバーである必要がないことに注意してください。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">このパラメーターは初期化せずに渡されます。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>The return value indicates whether the conversion succeeded.</source>
          <target state="translated">戻り値は、変換が成功したかどうかを示します。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter was converted successfully; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="value" /&gt;</ph> パラメーターが正常に変換された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29&gt;</ph> is identical to the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method, except that instead of throwing an exception, it returns <ph id="ph3">`false`</ph> if the conversion fails.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29&gt;</ph> 同じですが、<ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph>以外を返しますが、例外をスローする代わりに、メソッド<ph id="ph3">`false`</ph>変換に失敗する場合。</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>It eliminates the need for exception handling when parsing the string representation of an enumeration value.</source>
          <target state="translated">これにより、例外処理の列挙値の文字列形式を解析するときの必要があります。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</source>
          <target state="translated"><ph id="ph1">`value`</ph>パラメーターには、列挙体のメンバーの基になる値や名前付き定数の文字列表現が含まれているか、名前付き定数または基になる値の一覧がコンマ (,) で区切られます。</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If <ph id="ph1">`value`</ph> includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in <ph id="ph2">`value`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>が複数には含まれていますという名前の定数または値 1 つ以上の空白文字の前にしたり、以下の各値、名前、またはコンマで<ph id="ph2">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If <ph id="ph1">`value`</ph> is a list, <ph id="ph2">`result`</ph> reflects the value of the specified names or underlying values combined with a bitwise <ph id="ph3">`OR`</ph> operation.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>一覧、 <ph id="ph2">`result`</ph> 、指定した名前の値を反映またはビットごとと組み合わせて使用する値を基になる<ph id="ph3">`OR`</ph>操作します。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of the name of an enumeration value, the comparison of <ph id="ph2">`value`</ph> with enumeration names is case-sensitive.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>列挙値を比較した結果の名前の文字列形式を<ph id="ph2">`value`</ph>列挙型名は大文字小文字を区別します。</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`TEnum`</ph>, the method returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>の名前付き定数に対応していない名前は、 <ph id="ph2">`TEnum`</ph>、メソッドを返します<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`TEnum`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>の基になる値を表していないを整数の文字列表現です、<ph id="ph2">`TEnum`</ph>列挙型、メソッドは、基になる値が列挙体のメンバーを返します<ph id="ph3">`value`</ph>整数型に変換します。</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`TEnum`</ph>.</source>
          <target state="translated">この動作が望ましくない場合は、呼び出し、<ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>整数の特定の文字列表現が実際のメンバーであることを確認するメソッド<ph id="ph2">`TEnum`</ph>です。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>The following example defines a <ph id="ph1">`Colors`</ph> enumeration, calls the <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29&gt;</ph> method to convert strings to their corresponding enumeration values, and calls the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that particular integral values are underlying values in the <ph id="ph4">`Colors`</ph> enumeration.</source>
          <target state="translated">次の例では定義、<ph id="ph1">`Colors`</ph>列挙型、呼び出し、 <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29&gt;</ph> 、対応する列挙値、および呼び出し文字列に変換するメソッド、<ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>の値が特定の整数値が基になることを確認する方法、<ph id="ph4">`Colors`</ph>列挙します。</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source><ph id="ph1">&lt;paramref name="TEnum" /&gt;</ph> is not an enumeration type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TEnum" /&gt;</ph> が列挙型ではありません。</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The enumeration type to which to convert <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">列挙型に変換する<bpt id="p1">&lt;c&gt;</bpt>値<ept id="p1">&lt;/c&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The string representation of the enumeration name or underlying value to convert.</source>
          <target state="translated">変換する列挙定数の名前または基になる値の文字列形式。</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to ignore case; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to consider case.</source>
          <target state="translated">大文字と小文字を区別しない場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。大文字と小文字を区別する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>When this method returns, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains an object of type <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept> whose value is represented by <bpt id="p3">&lt;c&gt;</bpt>value<ept id="p3">&lt;/c&gt;</ept> if the parse operation succeeds.</source>
          <target state="translated">このメソッドから制御が戻るときに、<bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> には、解析操作が成功した場合に値が <bpt id="p3">&lt;c&gt;</bpt>value<ept id="p3">&lt;/c&gt;</ept> で表される <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept> 型のオブジェクトが格納されます。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If the parse operation fails, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains the default value of the underlying type of <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">解析操作が失敗した場合、<bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> には <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept> の基になる型の既定値が格納されます。</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>Note that this value need not be a member of the <bpt id="p1">&lt;c&gt;</bpt>TEnum<ept id="p1">&lt;/c&gt;</ept> enumeration.</source>
          <target state="translated">この値が <bpt id="p1">&lt;c&gt;</bpt>TEnum<ept id="p1">&lt;/c&gt;</ept> 列挙型のメンバーである必要がないことに注意してください。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">このパラメーターは初期化せずに渡されます。</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">文字列形式での 1 つ以上の列挙定数の名前または数値を、等価の列挙オブジェクトに変換します。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>A parameter specifies whether the operation is case-sensitive.</source>
          <target state="translated">演算で大文字と小文字を区別するかどうかをパラメーターで指定します。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The return value indicates whether the conversion succeeded.</source>
          <target state="translated">戻り値は、変換が成功したかどうかを示します。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter was converted successfully; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="value" /&gt;</ph> パラメーターが正常に変換された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> is identical to the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> method, except that instead of throwing an exception, it returns <ph id="ph3">`false`</ph> if the conversion fails.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> 同じですが、<ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph>以外を返しますが、例外をスローする代わりに、メソッド<ph id="ph3">`false`</ph>変換に失敗する場合。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>It eliminates the need for exception handling when parsing the string representation of an enumeration value.</source>
          <target state="translated">これにより、例外処理の列挙値の文字列形式を解析するときの必要があります。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</source>
          <target state="translated"><ph id="ph1">`value`</ph>パラメーターには、列挙体のメンバーの基になる値や名前付き定数の文字列表現が含まれているか、名前付き定数または基になる値の一覧がコンマ (,) で区切られます。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`value`</ph> includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in <ph id="ph2">`value`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>が複数には含まれていますという名前の定数または値 1 つ以上の空白文字の前にしたり、以下の各値、名前、またはコンマで<ph id="ph2">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`value`</ph> is a list, <ph id="ph2">`result`</ph> reflects the value of the specified names or underlying values combined with a bitwise <ph id="ph3">`OR`</ph> operation.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>一覧、 <ph id="ph2">`result`</ph> 、指定した名前の値を反映またはビットごとと組み合わせて使用する値を基になる<ph id="ph3">`OR`</ph>操作します。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of the name of an enumeration value, the comparison of <ph id="ph2">`value`</ph> with enumeration names depends on the <ph id="ph3">`ignoreCase`</ph> parameter.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>列挙値を比較した結果の名前の文字列形式を<ph id="ph2">`value`</ph>列挙型名によって異なります、<ph id="ph3">`ignoreCase`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`true`</ph>, the comparison is case-insensitive; if <ph id="ph2">`false`</ph>, it is case-sensitive.</source>
          <target state="translated">場合<ph id="ph1">`true`</ph>、比較では、大文字と小文字以外の場合は<ph id="ph2">`false`</ph>は大文字小文字を区別します。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`TEnum`</ph>, the method returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>の名前付き定数に対応していない名前は、 <ph id="ph2">`TEnum`</ph>、メソッドを返します<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`TEnum`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>の基になる値を表していないを整数の文字列表現です、<ph id="ph2">`TEnum`</ph>列挙型、メソッドは、基になる値が列挙体のメンバーを返します<ph id="ph3">`value`</ph>整数型に変換します。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`TEnum`</ph>.</source>
          <target state="translated">この動作が望ましくない場合は、呼び出し、<ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>整数の特定の文字列表現が実際のメンバーであることを確認するメソッド<ph id="ph2">`TEnum`</ph>です。</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The following example defines a <ph id="ph1">`Colors`</ph> enumeration, calls the <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> method to convert strings to their corresponding enumeration values, and calls the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that particular integral values are underlying values in the <ph id="ph4">`Colors`</ph> enumeration.</source>
          <target state="translated">次の例では定義、<ph id="ph1">`Colors`</ph>列挙型、呼び出し、 <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> 、対応する列挙値、および呼び出し文字列に変換するメソッド、<ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph>の値が特定の整数値が基になることを確認する方法、<ph id="ph4">`Colors`</ph>列挙します。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph>を等価の列挙値に定数をという名前の文字列形式に変換しようとしています。 メソッドは大文字と小文字を使用します。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source><ph id="ph1">&lt;paramref name="TEnum" /&gt;</ph> is not an enumeration type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TEnum" /&gt;</ph> が列挙型ではありません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>