<Type Name="Math" FullName="System.Math">
  <TypeSignature Language="C#" Value="public static class Math" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Math extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Math" />
  <TypeSignature Language="VB.NET" Value="Public Class Math" />
  <TypeSignature Language="C++ CLI" Value="public ref class Math abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b1802-101">三角関数や対数関数などの一般的な数値関数の定数と静的メソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="b1802-101">Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-102">次の例では、いくつか数学関数と三角関数から、<xref:System.Math>台形の内部の角度を計算するクラス。</span><span class="sxs-lookup"><span data-stu-id="b1802-102">The following example uses several mathematical and trigonometric functions from the <xref:System.Math> class to calculate the inner angles of a trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Abs">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1802-103">指定された数値の絶対値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-103">Returns the absolute value of a specified number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static decimal Abs (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Abs(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Abs(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-104"><see cref="F:System.Decimal.MinValue" /> 以上で、<see cref="F:System.Decimal.MaxValue" /> 以下の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-104">A number that is greater than or equal to <see cref="F:System.Decimal.MinValue" />, but less than or equal to <see cref="F:System.Decimal.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="b1802-105"><see cref="T:System.Decimal" /> 数値の絶対値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-105">Returns the absolute value of a <see cref="T:System.Decimal" /> number.</span></span></summary>
        <returns><span data-ttu-id="b1802-106">0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" /> の 10 進数 x。</span><span class="sxs-lookup"><span data-stu-id="b1802-106">A decimal number, x, such that 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-107">絶対値を<xref:System.Decimal>符号なし数値の値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-107">The absolute value of a <xref:System.Decimal> is its numeric value without its sign.</span></span> <span data-ttu-id="b1802-108">たとえば、1.2 および-1.2 の両方の絶対値は、1.2 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-108">For example, the absolute value of both 1.2 and -1.2 is 1.2.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-109">次の例では、<xref:System.Math.Abs%28System.Decimal%29>の数値の絶対値を取得するメソッド<xref:System.Decimal>値。</span><span class="sxs-lookup"><span data-stu-id="b1802-109">The following example uses the <xref:System.Math.Abs%28System.Decimal%29> method to get the absolute value of a number of <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/Abs1.cs#1)]
 [!code-vb[System.Math.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/Abs1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static double Abs (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Abs(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Abs(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-110"><see cref="F:System.Double.MinValue" /> 以上で、<see cref="F:System.Double.MaxValue" /> 以下の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-110">A number that is greater than or equal to <see cref="F:System.Double.MinValue" />, but less than or equal to <see cref="F:System.Double.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="b1802-111">倍精度浮動小数点数の絶対値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-111">Returns the absolute value of a double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="b1802-112">0 ≤ x ≤<see cref="F:System.Double.MaxValue" /> の倍精度浮動小数点数 x。</span><span class="sxs-lookup"><span data-stu-id="b1802-112">A double-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Double.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-113">絶対値を<xref:System.Double>符号なし数値の値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-113">The absolute value of a <xref:System.Double> is its numeric value without its sign.</span></span> <span data-ttu-id="b1802-114">たとえば、1.2e03 と 1.2e03 の両方の絶対値は、1.2e03 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-114">For example, the absolute value of both 1.2e03 and -1.2e03 is 1.2e03.</span></span>  
  
 <span data-ttu-id="b1802-115">場合`value`と等しい<xref:System.Double.NegativeInfinity>または<xref:System.Double.PositiveInfinity>、戻り値は<xref:System.Double.PositiveInfinity>します。</span><span class="sxs-lookup"><span data-stu-id="b1802-115">If `value` is equal to <xref:System.Double.NegativeInfinity> or <xref:System.Double.PositiveInfinity>, the return value is <xref:System.Double.PositiveInfinity>.</span></span> <span data-ttu-id="b1802-116">場合`value`と等しい<xref:System.Double.NaN>、戻り値は<xref:System.Double.NaN>します。</span><span class="sxs-lookup"><span data-stu-id="b1802-116">If `value` is equal to <xref:System.Double.NaN>, the return value is <xref:System.Double.NaN>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-117">次の例では、<xref:System.Math.Abs%28System.Double%29>の数値の絶対値を取得するメソッド<xref:System.Double>値。</span><span class="sxs-lookup"><span data-stu-id="b1802-117">The following example uses the <xref:System.Math.Abs%28System.Double%29> method to get the absolute value of a number of <xref:System.Double> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs2.cs#2)]
 [!code-vb[System.Math.Abs#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static short Abs (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Abs(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Abs(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-118"><see cref="F:System.Int16.MinValue" /> より大きく、<see cref="F:System.Int16.MaxValue" /> 以下の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-118">A number that is greater than <see cref="F:System.Int16.MinValue" />, but less than or equal to <see cref="F:System.Int16.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="b1802-119">16 ビット符号付き整数の絶対値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-119">Returns the absolute value of a 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="b1802-120">0 ≤ x ≤<see cref="F:System.Int16.MaxValue" /> である 16 ビット符号付き整数 x。</span><span class="sxs-lookup"><span data-stu-id="b1802-120">A 16-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int16.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-121">絶対値、<xref:System.Int16>符号なし数値の値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-121">The absolute value of an <xref:System.Int16> is its numeric value without its sign.</span></span> <span data-ttu-id="b1802-122">たとえば、123 と-123 の両方の絶対値は 123 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-122">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-123">次の例では、<xref:System.Math.Abs%28System.Int16%29>の数値の絶対値を取得するメソッド<xref:System.Int16>値。</span><span class="sxs-lookup"><span data-stu-id="b1802-123">The following example uses the <xref:System.Math.Abs%28System.Int16%29> method to get the absolute value of a number of <xref:System.Int16> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs3.cs#3)]
 [!code-vb[System.Math.Abs#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="b1802-124"><paramref name="value" /> と <see cref="F:System.Int16.MinValue" /> は等しい。</span><span class="sxs-lookup"><span data-stu-id="b1802-124"><paramref name="value" /> equals <see cref="F:System.Int16.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static int Abs (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Abs(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Abs(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-125"><see cref="F:System.Int32.MinValue" /> より大きく、<see cref="F:System.Int32.MaxValue" /> 以下の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-125">A number that is greater than <see cref="F:System.Int32.MinValue" />, but less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="b1802-126">32 ビット符号付き整数の絶対値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-126">Returns the absolute value of a 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="b1802-127">0 ≤ x ≤<see cref="F:System.Int32.MaxValue" /> である 32 ビット符号付き整数 x。</span><span class="sxs-lookup"><span data-stu-id="b1802-127">A 32-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int32.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-128">絶対値、<xref:System.Int32>符号なし数値の値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-128">The absolute value of an <xref:System.Int32> is its numeric value without its sign.</span></span> <span data-ttu-id="b1802-129">たとえば、123 と-123 の両方の絶対値は 123 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-129">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-130">次の例では、<xref:System.Math.Abs%28System.Int32%29>の数値の絶対値を取得するメソッド<xref:System.Int32>値。</span><span class="sxs-lookup"><span data-stu-id="b1802-130">The following example uses the <xref:System.Math.Abs%28System.Int32%29> method to get the absolute value of a number of <xref:System.Int32> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs4.cs#4)]
 [!code-vb[System.Math.Abs#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="b1802-131"><paramref name="value" /> と <see cref="F:System.Int32.MinValue" /> は等しい。</span><span class="sxs-lookup"><span data-stu-id="b1802-131"><paramref name="value" /> equals <see cref="F:System.Int32.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static long Abs (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Abs(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Abs(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-132"><see cref="F:System.Int64.MinValue" /> より大きく、<see cref="F:System.Int64.MaxValue" /> 以下の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-132">A number that is greater than <see cref="F:System.Int64.MinValue" />, but less than or equal to <see cref="F:System.Int64.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="b1802-133">64 ビット符号付き整数の絶対値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-133">Returns the absolute value of a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="b1802-134">0 ≤ x ≤<see cref="F:System.Int64.MaxValue" /> である 64 ビット符号付き整数 x。</span><span class="sxs-lookup"><span data-stu-id="b1802-134">A 64-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int64.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-135">絶対値、<xref:System.Int64>符号なし数値の値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-135">The absolute value of an <xref:System.Int64> is its numeric value without its sign.</span></span> <span data-ttu-id="b1802-136">たとえば、123 と-123 の両方の絶対値は 123 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-136">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-137">次の例では、<xref:System.Math.Abs%28System.Int64%29>の数値の絶対値を取得するメソッド<xref:System.Int64>値。</span><span class="sxs-lookup"><span data-stu-id="b1802-137">The following example uses the <xref:System.Math.Abs%28System.Int64%29> method to get the absolute value of a number of <xref:System.Int64> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs5.cs#5)]
 [!code-vb[System.Math.Abs#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="b1802-138"><paramref name="value" /> と <see cref="F:System.Int64.MinValue" /> は等しい。</span><span class="sxs-lookup"><span data-stu-id="b1802-138"><paramref name="value" /> equals <see cref="F:System.Int64.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static sbyte Abs (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Abs(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Abs(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-139"><see cref="F:System.SByte.MinValue" /> より大きく、<see cref="F:System.SByte.MaxValue" /> 以下の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-139">A number that is greater than <see cref="F:System.SByte.MinValue" />, but less than or equal to <see cref="F:System.SByte.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="b1802-140">8 ビット符号付き整数の絶対値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-140">Returns the absolute value of an 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="b1802-141">0 ≤ x ≤<see cref="F:System.SByte.MaxValue" /> である 8 ビット符号付き整数 x。</span><span class="sxs-lookup"><span data-stu-id="b1802-141">An 8-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.SByte.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-142">符号付きバイトの絶対値は、符号なし数値の値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-142">The absolute value of a signed byte is its numeric value without its sign.</span></span> <span data-ttu-id="b1802-143">たとえば、12 と-12 の両方の絶対値は 12 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-143">For example, the absolute value of both 12 and -12 is 12.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-144">次の例では、<xref:System.Math.Abs%28System.SByte%29>の数値の絶対値を取得するメソッド<xref:System.SByte>値。</span><span class="sxs-lookup"><span data-stu-id="b1802-144">The following example uses the <xref:System.Math.Abs%28System.SByte%29> method to get the absolute value of a number of <xref:System.SByte> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs6.cs#6)]
 [!code-vb[System.Math.Abs#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="b1802-145"><paramref name="value" /> と <see cref="F:System.SByte.MinValue" /> は等しい。</span><span class="sxs-lookup"><span data-stu-id="b1802-145"><paramref name="value" /> equals <see cref="F:System.SByte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static float Abs (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Abs(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Abs(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-146"><see cref="F:System.Single.MinValue" /> 以上で、<see cref="F:System.Single.MaxValue" /> 以下の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-146">A number that is greater than or equal to <see cref="F:System.Single.MinValue" />, but less than or equal to <see cref="F:System.Single.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="b1802-147">単精度浮動小数点数の絶対値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-147">Returns the absolute value of a single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="b1802-148">0 ≤ x ≤<see cref="F:System.Single.MaxValue" /> の単精度浮動小数点数 x。</span><span class="sxs-lookup"><span data-stu-id="b1802-148">A single-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-149">絶対値を<xref:System.Single>符号なし数値の値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-149">The absolute value of a <xref:System.Single> is its numeric value without its sign.</span></span> <span data-ttu-id="b1802-150">たとえば、値の絶対値両方 1.2 e-03 と 1.2e03 は 1.2e03 します。</span><span class="sxs-lookup"><span data-stu-id="b1802-150">For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.</span></span>  
  
 <span data-ttu-id="b1802-151">場合`value`と等しい<xref:System.Single.NegativeInfinity>または<xref:System.Single.PositiveInfinity>、戻り値は<xref:System.Single.PositiveInfinity>します。</span><span class="sxs-lookup"><span data-stu-id="b1802-151">If `value` is equal to <xref:System.Single.NegativeInfinity> or <xref:System.Single.PositiveInfinity>, the return value is <xref:System.Single.PositiveInfinity>.</span></span> <span data-ttu-id="b1802-152">場合`value`と等しい<xref:System.Single.NaN>、戻り値は<xref:System.Single.NaN>します。</span><span class="sxs-lookup"><span data-stu-id="b1802-152">If `value` is equal to <xref:System.Single.NaN>, the return value is <xref:System.Single.NaN>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-153">次の例では、<xref:System.Math.Abs%28System.Single%29>の数値の絶対値を取得するメソッド<xref:System.Single>値。</span><span class="sxs-lookup"><span data-stu-id="b1802-153">The following example uses the <xref:System.Math.Abs%28System.Single%29> method to get the absolute value of a number of <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs7.cs#7)]
 [!code-vb[System.Math.Abs#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs7.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public static double Acos (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Acos(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Acos(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-154">コサインを表す数で、<c>d</c> が -1 以上 1 以下である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1802-154">A number representing a cosine, where <c>d</c> must be greater than or equal to -1, but less than or equal to 1.</span></span></param>
        <summary><span data-ttu-id="b1802-155">コサインが指定数となる角度を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-155">Returns the angle whose cosine is the specified number.</span></span></summary>
        <returns><span data-ttu-id="b1802-156">0 ≤θ≤π の、ラジアンで表した角度 θ。</span><span class="sxs-lookup"><span data-stu-id="b1802-156">An angle, θ, measured in radians, such that 0 ≤θ≤π</span></span>  
  
 <span data-ttu-id="b1802-157">- または -</span><span class="sxs-lookup"><span data-stu-id="b1802-157">-or-</span></span>  
  
 <span data-ttu-id="b1802-158"><paramref name="d" /> &lt; -1 または <paramref name="d" /> &gt; 1、あるいは <paramref name="d" /> が <see cref="F:System.Double.NaN" /> と等しい場合は、<see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="b1802-158"><see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1 or <paramref name="d" /> equals <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-159">戻り値を乗算 180/<xref:System.Math.PI?displayProperty=nameWithType>ラジアンから度に変換します。</span><span class="sxs-lookup"><span data-stu-id="b1802-159">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-160">次の例では、<xref:System.Math.Acos%2A>特定台形の内部の角度の計算を支援するメソッド。</span><span class="sxs-lookup"><span data-stu-id="b1802-160">The following example uses the <xref:System.Math.Acos%2A> method to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public static double Acosh (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Acosh(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acosh (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Acosh(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public static double Asin (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Asin(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Asin(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-161">サインを表す数で、<c>d</c> が -1 以上 1 以下である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1802-161">A number representing a sine, where <c>d</c> must be greater than or equal to -1, but less than or equal to 1.</span></span></param>
        <summary><span data-ttu-id="b1802-162">サインが指定数となる角度を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-162">Returns the angle whose sine is the specified number.</span></span></summary>
        <returns><span data-ttu-id="b1802-163">-π/2 ≤θ≤π/2 の、ラジアンで表した角度 θ。</span><span class="sxs-lookup"><span data-stu-id="b1802-163">An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2</span></span>  
  
 <span data-ttu-id="b1802-164">- または -</span><span class="sxs-lookup"><span data-stu-id="b1802-164">-or-</span></span>  
  
 <span data-ttu-id="b1802-165"><paramref name="d" /> &lt; -1 または <paramref name="d" /> &gt; 1、あるいは <paramref name="d" /> が <see cref="F:System.Double.NaN" /> と等しい場合は、<see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="b1802-165"><see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1 or <paramref name="d" /> equals <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-166">戻り値が正の値が x 軸から反時計回りに回転角度を表す負の値の戻り値は、時計回りの角度を表します。</span><span class="sxs-lookup"><span data-stu-id="b1802-166">A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</span></span>  
  
 <span data-ttu-id="b1802-167">戻り値を乗算 180/<xref:System.Math.PI?displayProperty=nameWithType>ラジアンから度に変換します。</span><span class="sxs-lookup"><span data-stu-id="b1802-167">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-168">次の例では<xref:System.Math.Asin%2A>特定台形の内部の角度の計算を支援します。</span><span class="sxs-lookup"><span data-stu-id="b1802-168">The following example uses <xref:System.Math.Asin%2A> to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public static double Asinh (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Asinh(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asinh (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Asinh(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public static double Atan (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atan(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atan(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-169">タンジェントを表す数。</span><span class="sxs-lookup"><span data-stu-id="b1802-169">A number representing a tangent.</span></span></param>
        <summary><span data-ttu-id="b1802-170">タンジェントが指定数となる角度を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-170">Returns the angle whose tangent is the specified number.</span></span></summary>
        <returns><span data-ttu-id="b1802-171">-π/2 ≤θ≤π/2 の、ラジアンで表した角度 θ。</span><span class="sxs-lookup"><span data-stu-id="b1802-171">An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.</span></span>  
  
 <span data-ttu-id="b1802-172">- または -</span><span class="sxs-lookup"><span data-stu-id="b1802-172">-or-</span></span>  
  
 <span data-ttu-id="b1802-173"><paramref name="d" /> が <see cref="F:System.Double.NaN" /> に等しい場合は <see cref="F:System.Double.NaN" />。<paramref name="d" /> が <see cref="F:System.Double.NegativeInfinity" /> に等しい場合は、倍精度に丸めた -π/2 (-1.5707963267949)。<paramref name="d" /> が <see cref="F:System.Double.PositiveInfinity" /> に等しい場合は、倍精度に丸めた π/2 (1.5707963267949)。</span><span class="sxs-lookup"><span data-stu-id="b1802-173"><see cref="F:System.Double.NaN" /> if <paramref name="d" /> equals <see cref="F:System.Double.NaN" />, -π/2 rounded to double precision (-1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, or π/2 rounded to double precision (1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.PositiveInfinity" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-174">戻り値が正の値が x 軸から反時計回りに回転角度を表す負の値の戻り値は、時計回りの角度を表します。</span><span class="sxs-lookup"><span data-stu-id="b1802-174">A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</span></span>  
  
 <span data-ttu-id="b1802-175">戻り値を乗算 180/<xref:System.Math.PI?displayProperty=nameWithType>ラジアンから度に変換します。</span><span class="sxs-lookup"><span data-stu-id="b1802-175">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-176">次の例では、値の逆正接を計算し、それをコンソールに表示する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-176">The following example demonstrates how to calculate the arctangent of a value and display it to the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public static double Atan2 (double y, double x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan2(float64 y, float64 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan2 (y As Double, x As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atan2(double y, double x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="x" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="y"><span data-ttu-id="b1802-177">点の y 座標。</span><span class="sxs-lookup"><span data-stu-id="b1802-177">The y coordinate of a point.</span></span></param>
        <param name="x"><span data-ttu-id="b1802-178">点の x 座標。</span><span class="sxs-lookup"><span data-stu-id="b1802-178">The x coordinate of a point.</span></span></param>
        <summary><span data-ttu-id="b1802-179">タンジェントが 2 つの指定された数の商である角度を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-179">Returns the angle whose tangent is the quotient of two specified numbers.</span></span></summary>
        <returns><span data-ttu-id="b1802-180">-π≤θ≤π および tan(θ) = <paramref name="y" /> / <paramref name="x" /> の、ラジアンで示した角度 θ。(<paramref name="x" />, <paramref name="y" />) は、デカルト座標の点を示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-180">An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <paramref name="y" /> / <paramref name="x" />, where (<paramref name="x" />, <paramref name="y" />) is a point in the Cartesian plane.</span></span> <span data-ttu-id="b1802-181">次の点に注意してください。</span><span class="sxs-lookup"><span data-stu-id="b1802-181">Observe the following:</span></span>  
  
-   <span data-ttu-id="b1802-182">クワドラント 1 の (<paramref name="x" />, <paramref name="y" />) の場合は、0 &lt; θ &lt; π/2。</span><span class="sxs-lookup"><span data-stu-id="b1802-182">For (<paramref name="x" />, <paramref name="y" />) in quadrant 1, 0 &lt; θ &lt; π/2.</span></span>  
  
-   <span data-ttu-id="b1802-183">クワドラント 2 の (<paramref name="x" />, <paramref name="y" />) の場合は、π/2 &lt; θ≤π。</span><span class="sxs-lookup"><span data-stu-id="b1802-183">For (<paramref name="x" />, <paramref name="y" />) in quadrant 2, π/2 &lt; θ≤π.</span></span>  
  
-   <span data-ttu-id="b1802-184">クワドラント 3 の (<paramref name="x" />, <paramref name="y" />) の場合は、-π &lt; θ &lt; -π/2。</span><span class="sxs-lookup"><span data-stu-id="b1802-184">For (<paramref name="x" />, <paramref name="y" />) in quadrant 3, -π &lt; θ &lt; -π/2.</span></span>  
  
-   <span data-ttu-id="b1802-185">クワドラント 4 の (<paramref name="x" />, <paramref name="y" />) の場合は、-π/2 &lt; θ &lt; 0。</span><span class="sxs-lookup"><span data-stu-id="b1802-185">For (<paramref name="x" />, <paramref name="y" />) in quadrant 4, -π/2 &lt; θ &lt; 0.</span></span>  
  
 <span data-ttu-id="b1802-186">クワドラント間の境界上にある点の場合は、次の戻り値になります。</span><span class="sxs-lookup"><span data-stu-id="b1802-186">For points on the boundaries of the quadrants, the return value is the following:</span></span>  
  
-   <span data-ttu-id="b1802-187">y が 0 で x が負数でない場合は、θ = 0。</span><span class="sxs-lookup"><span data-stu-id="b1802-187">If y is 0 and x is not negative, θ = 0.</span></span>  
  
-   <span data-ttu-id="b1802-188">y が 0 で x が負の場合は、θ = π。</span><span class="sxs-lookup"><span data-stu-id="b1802-188">If y is 0 and x is negative, θ = π.</span></span>  
  
-   <span data-ttu-id="b1802-189">y が正で x が 0 の場合は、θ = π/2。</span><span class="sxs-lookup"><span data-stu-id="b1802-189">If y is positive and x is 0, θ = π/2.</span></span>  
  
-   <span data-ttu-id="b1802-190">y が負数で x が 0 の場合は、θ = -π/2。</span><span class="sxs-lookup"><span data-stu-id="b1802-190">If y is negative and x is 0, θ = -π/2.</span></span>  
  
-   <span data-ttu-id="b1802-191">y が 0 かつ x が 0 の場合は、θ = 0。</span><span class="sxs-lookup"><span data-stu-id="b1802-191">If y is 0 and x is 0, θ = 0.</span></span>  
  
 <span data-ttu-id="b1802-192"><paramref name="x" /> または <paramref name="y" /> が <see cref="F:System.Double.NaN" /> であるか、<paramref name="x" /> または <paramref name="y" /> が <see cref="F:System.Double.PositiveInfinity" /> または <see cref="F:System.Double.NegativeInfinity" /> のいずれである場合、メソッドは <see cref="F:System.Double.NaN" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-192">If <paramref name="x" /> or <paramref name="y" /> is <see cref="F:System.Double.NaN" />, or if <paramref name="x" /> and <paramref name="y" /> are either <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />, the method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-193">戻り値は、デカルト座標で、x 軸と原点 (0, 0) から開始し、ポイント、(x, y) で終了してベクターの角度です。</span><span class="sxs-lookup"><span data-stu-id="b1802-193">The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (x,y).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-194">次の例では、角度とベクターの逆正接を計算する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-194">The following example demonstrates how to calculate the arctangent of an angle and a vector.</span></span> <span data-ttu-id="b1802-195">結果の値は、コンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-195">The resulting value is displayed in the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public static double Atanh (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atanh(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atanh (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atanh(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BigMul">
      <MemberSignature Language="C#" Value="public static long BigMul (int a, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 BigMul(int32 a, int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.BigMul(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BigMul (a As Integer, b As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long BigMul(int a, int b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="b1802-196">乗算対象の最初の数。</span><span class="sxs-lookup"><span data-stu-id="b1802-196">The first number to multiply.</span></span></param>
        <param name="b"><span data-ttu-id="b1802-197">乗算対象の 2 番目の数。</span><span class="sxs-lookup"><span data-stu-id="b1802-197">The second number to multiply.</span></span></param>
        <summary><span data-ttu-id="b1802-198">2 つの 32 ビット数値の完全な積を生成します。</span><span class="sxs-lookup"><span data-stu-id="b1802-198">Produces the full product of two 32-bit numbers.</span></span></summary>
        <returns><span data-ttu-id="b1802-199">指定した数値の積を含む数。</span><span class="sxs-lookup"><span data-stu-id="b1802-199">The number containing the product of the specified numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-200">次の例での使用、<xref:System.Math.BigMul%2A>メソッドを 2 つの整数値の積を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1802-200">The following example demonstrates the use of the <xref:System.Math.BigMul%2A> method to calculate the product of two integer values.</span></span>  
  
 [!code-cpp[math.bigmul#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.bigmul/CPP/bigmul.cpp#1)]
 [!code-csharp[math.bigmul#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.bigmul/CS/bigmul.cs#1)]
 [!code-vb[math.bigmul#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.bigmul/VB/bigmul.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cbrt">
      <MemberSignature Language="C#" Value="public static double Cbrt (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cbrt(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cbrt(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cbrt (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cbrt(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Ceiling">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1802-201">指定した数以上の数のうち、最小の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-201">Returns the smallest integral value greater than or equal to the specified number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-202">このメソッドの動作は IEEE 標準 754、セクション 4 に従います。</span><span class="sxs-lookup"><span data-stu-id="b1802-202">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="b1802-203">この種の丸め処理を行うには、正の無限大に向かって丸め処理を行うことがあります呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-203">This kind of rounding is sometimes called rounding toward positive infinity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static decimal Ceiling (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Ceiling(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Ceiling(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Ceiling(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-204">10 進数。</span><span class="sxs-lookup"><span data-stu-id="b1802-204">A decimal number.</span></span></param>
        <summary><span data-ttu-id="b1802-205">指定した 10 進数以上の数のうち、最小の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-205">Returns the smallest integral value that is greater than or equal to the specified decimal number.</span></span></summary>
        <returns><span data-ttu-id="b1802-206"><paramref name="d" /> 以上の最小の整数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-206">The smallest integral value that is greater than or equal to <paramref name="d" />.</span></span> <span data-ttu-id="b1802-207">このメソッドは、整数型ではなく <see cref="T:System.Decimal" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-207">Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-208">このメソッドの動作は IEEE 標準 754、セクション 4 に従います。</span><span class="sxs-lookup"><span data-stu-id="b1802-208">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="b1802-209">この種の丸め処理を行うには、正の無限大に向かって丸め処理を行うことがあります呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-209">This kind of rounding is sometimes called rounding toward positive infinity.</span></span> <span data-ttu-id="b1802-210">つまり場合、`d`が正の値の小数部の原因が存在する`d`を次に大きい整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b1802-210">In other words, if `d` is positive, the presence of any fractional component causes `d` to be rounded to the next highest integer.</span></span> <span data-ttu-id="b1802-211">場合`d`は負の場合、丸め処理によりの小数部`d`破棄されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-211">If `d` is negative, the rounding operation causes any fractional component of `d` to be discarded.</span></span> <span data-ttu-id="b1802-212">このメソッドの動作と異なります、<xref:System.Math.Floor%28System.Decimal%29>メソッドで、負の無限大方向に丸め処理をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="b1802-212">The operation of this method differs from the <xref:System.Math.Floor%28System.Decimal%29> method, which supports rounding toward negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-213">次の例を示しています、<xref:System.Math.Ceiling%28System.Decimal%29?displayProperty=nameWithType>メソッドとの比較、<xref:System.Math.Floor%28System.Decimal%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1802-213">The following example illustrates the <xref:System.Math.Ceiling%28System.Decimal%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Floor%28System.Decimal%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#1)]
 [!code-vb[System.Math.Ceiling#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static double Ceiling (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Ceiling(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Ceiling(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Ceiling(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="b1802-214">倍精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="b1802-214">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="b1802-215">指定した倍精度浮動小数点数以上の数のうち、最小の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-215">Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="b1802-216"><paramref name="a" /> 以上の最小の整数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-216">The smallest integral value that is greater than or equal to <paramref name="a" />.</span></span> <span data-ttu-id="b1802-217"><paramref name="a" /> が <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> のいずれかに等しい場合は、その値が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-217">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span></span> <span data-ttu-id="b1802-218">このメソッドは、整数型ではなく <see cref="T:System.Double" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-218">Note that this method returns a <see cref="T:System.Double" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-219">このメソッドの動作は IEEE 標準 754、セクション 4 に従います。</span><span class="sxs-lookup"><span data-stu-id="b1802-219">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="b1802-220">この種の丸め処理を行うには、正の無限大に向かって丸め処理を行うことがあります呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-220">This kind of rounding is sometimes called rounding toward positive infinity.</span></span> <span data-ttu-id="b1802-221">つまり場合、`a`が正の値の小数部の原因が存在する`a`を次に大きい整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b1802-221">In other words, if `a` is positive, the presence of any fractional component causes `a` to be rounded to the next highest integer.</span></span> <span data-ttu-id="b1802-222">場合`a`は負の場合、丸め処理によりの小数部`a`破棄されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-222">If `a` is negative, the rounding operation causes any fractional component of `a` to be discarded.</span></span> <span data-ttu-id="b1802-223">このメソッドの動作と異なります、<xref:System.Math.Floor%28System.Double%29>メソッドで、負の無限大方向に丸め処理をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="b1802-223">The operation of this method differs from the <xref:System.Math.Floor%28System.Double%29> method, which supports rounding toward negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-224">次の例を示しています、<xref:System.Math.Ceiling%28System.Double%29?displayProperty=nameWithType>メソッドとの比較、<xref:System.Math.Floor%28System.Double%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1802-224">The following example illustrates the <xref:System.Math.Ceiling%28System.Double%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Floor%28System.Double%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#2)]
 [!code-vb[System.Math.Ceiling#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static byte Clamp (byte value, byte min, byte max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Clamp(unsigned int8 value, unsigned int8 min, unsigned int8 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Byte,System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Byte, min As Byte, max As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Clamp(System::Byte value, System::Byte min, System::Byte max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="min" Type="System.Byte" />
        <Parameter Name="max" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static decimal Clamp (decimal value, decimal min, decimal max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Clamp(valuetype System.Decimal value, valuetype System.Decimal min, valuetype System.Decimal max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Decimal, min As Decimal, max As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Clamp(System::Decimal value, System::Decimal min, System::Decimal max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="min" Type="System.Decimal" />
        <Parameter Name="max" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static double Clamp (double value, double min, double max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Clamp(float64 value, float64 min, float64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Double, min As Double, max As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Clamp(double value, double min, double max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="min" Type="System.Double" />
        <Parameter Name="max" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static short Clamp (short value, short min, short max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Clamp(int16 value, int16 min, int16 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int16,System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Short, min As Short, max As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Clamp(short value, short min, short max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="min" Type="System.Int16" />
        <Parameter Name="max" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static int Clamp (int value, int min, int max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Clamp(int32 value, int32 min, int32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Integer, min As Integer, max As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Clamp(int value, int min, int max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="max" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static long Clamp (long value, long min, long max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Clamp(int64 value, int64 min, int64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Long, min As Long, max As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Clamp(long value, long min, long max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="min" Type="System.Int64" />
        <Parameter Name="max" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static sbyte Clamp (sbyte value, sbyte min, sbyte max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Clamp(int8 value, int8 min, int8 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.SByte,System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As SByte, min As SByte, max As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Clamp(System::SByte value, System::SByte min, System::SByte max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="min" Type="System.SByte" />
        <Parameter Name="max" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static float Clamp (float value, float min, float max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Clamp(float32 value, float32 min, float32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Single, min As Single, max As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Clamp(float value, float min, float max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="min" Type="System.Single" />
        <Parameter Name="max" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static ushort Clamp (ushort value, ushort min, ushort max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Clamp(unsigned int16 value, unsigned int16 min, unsigned int16 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As UShort, min As UShort, max As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Clamp(System::UInt16 value, System::UInt16 min, System::UInt16 max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="min" Type="System.UInt16" />
        <Parameter Name="max" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static uint Clamp (uint value, uint min, uint max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Clamp(unsigned int32 value, unsigned int32 min, unsigned int32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As UInteger, min As UInteger, max As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Clamp(System::UInt32 value, System::UInt32 min, System::UInt32 max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="min" Type="System.UInt32" />
        <Parameter Name="max" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static ulong Clamp (ulong value, ulong min, ulong max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Clamp(unsigned int64 value, unsigned int64 min, unsigned int64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As ULong, min As ULong, max As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Clamp(System::UInt64 value, System::UInt64 min, System::UInt64 max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="min" Type="System.UInt64" />
        <Parameter Name="max" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public static double Cos (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cos(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cos(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-225">ラジアンで表した角度。</span><span class="sxs-lookup"><span data-stu-id="b1802-225">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="b1802-226">指定された角度のコサインを返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-226">Returns the cosine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="b1802-227"><paramref name="d" /> のコサイン。</span><span class="sxs-lookup"><span data-stu-id="b1802-227">The cosine of <paramref name="d" />.</span></span> <span data-ttu-id="b1802-228"><paramref name="d" /> が <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> のいずれかに等しい場合、このメソッドは <see cref="F:System.Double.NaN" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-228">If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-229">角度を`d`ラジアンである必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1802-229">The angle, `d`, must be in radians.</span></span> <span data-ttu-id="b1802-230">乗算 <xref:System.Math.PI?displayProperty=nameWithType> /180 度をラジアンに変換します。</span><span class="sxs-lookup"><span data-stu-id="b1802-230">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 <span data-ttu-id="b1802-231">使用できる値の`d`約-9223372036854775295 約 9223372036854775295 の範囲です。</span><span class="sxs-lookup"><span data-stu-id="b1802-231">Acceptable values of `d` range from approximately -9223372036854775295 to approximately 9223372036854775295.</span></span> <span data-ttu-id="b1802-232">この範囲外の値を<xref:System.Math.Cos%2A>メソッドを返します。`d`例外をスローするのではなく変更されません。</span><span class="sxs-lookup"><span data-stu-id="b1802-232">For values outside this range, the <xref:System.Math.Cos%2A> method returns `d` unchanged rather than throwing an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-233">次の例では<xref:System.Math.Cos%2A>を選択した角度の三角関数の特定の id を評価します。</span><span class="sxs-lookup"><span data-stu-id="b1802-233">The following example uses <xref:System.Math.Cos%2A> to evaluate certain trigonometric identities for selected angles.</span></span>  
  
 [!code-cpp[System.Math.SinCos#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinCos/CPP/sincos.cpp#1)]
 [!code-csharp[System.Math.SinCos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinCos/CS/sincos.cs#1)]
 [!code-vb[System.Math.SinCos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinCos/VB/sincos.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public static double Cosh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cosh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cosh(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-234">ラジアンで表した角度。</span><span class="sxs-lookup"><span data-stu-id="b1802-234">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="b1802-235">指定された角度のハイパーボリック コサインを返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-235">Returns the hyperbolic cosine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="b1802-236"><paramref name="value" /> のハイパーボリック コサイン。</span><span class="sxs-lookup"><span data-stu-id="b1802-236">The hyperbolic cosine of <paramref name="value" />.</span></span> <span data-ttu-id="b1802-237"><paramref name="value" /> が <see cref="F:System.Double.NegativeInfinity" /> または <see cref="F:System.Double.PositiveInfinity" /> に等しい場合は、<see cref="F:System.Double.PositiveInfinity" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-237">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" /> or <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> is returned.</span></span> <span data-ttu-id="b1802-238"><paramref name="value" /> が <see cref="F:System.Double.NaN" /> に等しい場合は、<see cref="F:System.Double.NaN" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-238">If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-239">角度を`value`ラジアンである必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1802-239">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="b1802-240">乗算 <xref:System.Math.PI?displayProperty=nameWithType> /180 度をラジアンに変換します。</span><span class="sxs-lookup"><span data-stu-id="b1802-240">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-241">次の例では<xref:System.Math.Cosh%2A>を選択した値の特定の双曲線 id を評価します。</span><span class="sxs-lookup"><span data-stu-id="b1802-241">The following example uses <xref:System.Math.Cosh%2A> to evaluate certain hyperbolic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.SinhCosh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinhCosh/CPP/sinhcosh.cpp#1)]
 [!code-csharp[System.Math.SinhCosh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinhCosh/CS/sinhcosh.cs#1)]
 [!code-vb[System.Math.SinhCosh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinhCosh/VB/sinhcosh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DivRem">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1802-242">2 つの数値の商を計算し、出力パラメーターの剰余を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-242">Calculates the quotient of two numbers and also returns the remainder in an output parameter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static int DivRem (int a, int b, out int result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DivRem(int32 a, int32 b, [out] int32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (a As Integer, b As Integer, ByRef result As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DivRem(int a, int b, [Runtime::InteropServices::Out] int % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
        <Parameter Name="result" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="b1802-243">被除数。</span><span class="sxs-lookup"><span data-stu-id="b1802-243">The dividend.</span></span></param>
        <param name="b"><span data-ttu-id="b1802-244">除数。</span><span class="sxs-lookup"><span data-stu-id="b1802-244">The divisor.</span></span></param>
        <param name="result"><span data-ttu-id="b1802-245">剰余。</span><span class="sxs-lookup"><span data-stu-id="b1802-245">The remainder.</span></span></param>
        <summary><span data-ttu-id="b1802-246">2 つの 32 ビット符号付き整数の商を計算し、出力パラメーターの剰余を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-246">Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.</span></span></summary>
        <returns><span data-ttu-id="b1802-247">指定した数値の商。</span><span class="sxs-lookup"><span data-stu-id="b1802-247">The quotient of the specified numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-248">残りの部分は、剰余演算を使用して計算されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-248">The remainder is calculated by using the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-249">次の例で、<xref:System.Math.DivRem%28System.Int32%2CSystem.Int32%2CSystem.Int32%40%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1802-249">The following example demonstrates the <xref:System.Math.DivRem%28System.Int32%2CSystem.Int32%2CSystem.Int32%40%29> method.</span></span>  
  
 [!code-csharp[System.Math.DivRem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.divrem/cs/divrem1.cs#1)]
 [!code-vb[System.Math.DivRem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.divrem/vb/divrem1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="b1802-250"><paramref name="b" /> が 0 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-250"><paramref name="b" /> is zero.</span></span></exception>
        <altmember cref="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static long DivRem (long a, long b, out long result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 DivRem(int64 a, int64 b, [out] int64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (a As Long, b As Long, ByRef result As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long DivRem(long a, long b, [Runtime::InteropServices::Out] long % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
        <Parameter Name="b" Type="System.Int64" />
        <Parameter Name="result" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="b1802-251">被除数。</span><span class="sxs-lookup"><span data-stu-id="b1802-251">The dividend.</span></span></param>
        <param name="b"><span data-ttu-id="b1802-252">除数。</span><span class="sxs-lookup"><span data-stu-id="b1802-252">The divisor.</span></span></param>
        <param name="result"><span data-ttu-id="b1802-253">剰余。</span><span class="sxs-lookup"><span data-stu-id="b1802-253">The remainder.</span></span></param>
        <summary><span data-ttu-id="b1802-254">2 つの 64 ビット符号付き整数の商を計算し、出力パラメーターの剰余を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-254">Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.</span></span></summary>
        <returns><span data-ttu-id="b1802-255">指定した数値の商。</span><span class="sxs-lookup"><span data-stu-id="b1802-255">The quotient of the specified numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-256">残りの部分は、剰余演算を使用して計算されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-256">The remainder is calculated by using the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-257">次の例で、<xref:System.Math.DivRem%28System.Int64%2CSystem.Int64%2CSystem.Int64%40%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1802-257">The following example demonstrates the <xref:System.Math.DivRem%28System.Int64%2CSystem.Int64%2CSystem.Int64%40%29> method.</span></span>  
  
 [!code-csharp[System.Math.DivRem#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.divrem/cs/divrem2.cs#2)]
 [!code-vb[System.Math.DivRem#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.divrem/vb/divrem2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="b1802-258"><paramref name="b" /> が 0 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-258"><paramref name="b" /> is zero.</span></span></exception>
        <altmember cref="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="E">
      <MemberSignature Language="C#" Value="public const double E = 2.71828182845905;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 E = (2.71828182845905)" />
      <MemberSignature Language="DocId" Value="F:System.Math.E" />
      <MemberSignature Language="VB.NET" Value="Public Const E As Double  = 2.71828182845905" />
      <MemberSignature Language="C++ CLI" Value="public: double E = 2.71828182845905;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>2.71828182845905</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b1802-259">定数 <see langword="e" /> によって示される、自然対数の底を表します。</span><span class="sxs-lookup"><span data-stu-id="b1802-259">Represents the natural logarithmic base, specified by the constant, <see langword="e" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-260">このフィールドの値は、2.7182818284590452354 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-260">The value of this field is 2.7182818284590452354.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-261">次の例を比較して<xref:System.Math.E>power 系列から計算された値を使用します。</span><span class="sxs-lookup"><span data-stu-id="b1802-261">The following example compares <xref:System.Math.E> with the value calculated from a power series.</span></span>  
  
 [!code-cpp[System.Math.E#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.E/CPP/efield.cpp#1)]
 [!code-csharp[System.Math.E#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.E/CS/efield.cs#1)]
 [!code-vb[System.Math.E#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.E/VB/efield.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static double Exp (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Exp(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Exp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Exp(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-262">累乗を指定する数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-262">A number specifying a power.</span></span></param>
        <summary><span data-ttu-id="b1802-263">指定した値で <see langword="e" /> を累乗した値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-263">Returns <see langword="e" /> raised to the specified power.</span></span></summary>
        <returns><span data-ttu-id="b1802-264">数値 <see langword="e" /> を <paramref name="d" /> で累乗した値。</span><span class="sxs-lookup"><span data-stu-id="b1802-264">The number <see langword="e" /> raised to the power <paramref name="d" />.</span></span> <span data-ttu-id="b1802-265"><paramref name="d" /> が <see cref="F:System.Double.NaN" /> または <see cref="F:System.Double.PositiveInfinity" /> のいずれかに等しい場合は、その値が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-265">If <paramref name="d" /> equals <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span></span> <span data-ttu-id="b1802-266"><paramref name="d" /> が <see cref="F:System.Double.NegativeInfinity" /> に等しい場合は、0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-266">If <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, 0 is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-267">`e` 値を持つは約 2.71828 数学定数です。</span><span class="sxs-lookup"><span data-stu-id="b1802-267">`e` is a mathematical constant whose value is approximately 2.71828.</span></span>  
  
 <span data-ttu-id="b1802-268">使用して、<xref:System.Math.Pow%2A>メソッドを他のベースのべき乗を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1802-268">Use the <xref:System.Math.Pow%2A> method to calculate powers of other bases.</span></span>  
  
 <span data-ttu-id="b1802-269"><xref:System.Math.Exp%2A> 逆関数は、<xref:System.Math.Log%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b1802-269"><xref:System.Math.Exp%2A> is the inverse of <xref:System.Math.Log%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-270">次の例では<xref:System.Math.Exp%2A>を選択した値の特定の指数と対数 id を評価します。</span><span class="sxs-lookup"><span data-stu-id="b1802-270">The following example uses <xref:System.Math.Exp%2A> to evaluate certain exponential and logarithmic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Exp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Exp/CPP/exp.cpp#1)]
 [!code-csharp[System.Math.Exp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Exp/CS/exp.cs#1)]
 [!code-vb[System.Math.Exp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Exp/VB/exp.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Math.E" />
        <altmember cref="M:System.Math.Pow(System.Double,System.Double)" />
        <altmember cref="M:System.Math.Log(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Floor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1802-271">指定した数以下の数のうち、最大の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-271">Returns the largest integral value less than or equal to the specified number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-272">このメソッドの動作は IEEE 標準 754、セクション 4 に従います。</span><span class="sxs-lookup"><span data-stu-id="b1802-272">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="b1802-273">このような丸めと呼ぶことが負の無限大に丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-273">This kind of rounding is sometimes called rounding toward negative infinity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static decimal Floor (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Floor(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Floor(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Floor(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-274">10 進数。</span><span class="sxs-lookup"><span data-stu-id="b1802-274">A decimal number.</span></span></param>
        <summary><span data-ttu-id="b1802-275">指定した 10 進数以下の数のうち、最大の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-275">Returns the largest integral value less than or equal to the specified decimal number.</span></span></summary>
        <returns><span data-ttu-id="b1802-276"><paramref name="d" /> 以下の最大の整数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-276">The largest integral value less than or equal to <paramref name="d" />.</span></span>  <span data-ttu-id="b1802-277">このメソッドは、<see cref="T:System.Decimal" /> 型の整数値を返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="b1802-277">Note that the method returns an integral value of type <see cref="T:System.Decimal" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-278">このメソッドの動作は IEEE 標準 754、セクション 4 に従います。</span><span class="sxs-lookup"><span data-stu-id="b1802-278">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="b1802-279">このような丸めと呼ぶことが負の無限大に丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-279">This kind of rounding is sometimes called rounding toward negative infinity.</span></span> <span data-ttu-id="b1802-280">つまり場合、`d`が正の値、小数部が切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="b1802-280">In other words, if `d` is positive, any fractional component is truncated.</span></span> <span data-ttu-id="b1802-281">場合`d`は負の場合、小数部が存在するより小さい整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b1802-281">If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer.</span></span> <span data-ttu-id="b1802-282">このメソッドの動作と異なります、<xref:System.Math.Ceiling%2A>メソッドで、正の無限大に向かって丸め処理をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="b1802-282">The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-283">次の例を示しています、<xref:System.Math.Floor%28System.Decimal%29?displayProperty=nameWithType>メソッドとの比較、<xref:System.Math.Ceiling%28System.Decimal%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1802-283">The following example illustrates the <xref:System.Math.Floor%28System.Decimal%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Ceiling%28System.Decimal%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#1)]
 [!code-vb[System.Math.Ceiling#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Decimal.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static double Floor (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Floor(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Floor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Floor(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-284">倍精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="b1802-284">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="b1802-285">指定した倍精度浮動小数点数以下の数のうち、最大の整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-285">Returns the largest integral value less than or equal to the specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="b1802-286"><paramref name="d" /> 以下の最大の整数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-286">The largest integral value less than or equal to <paramref name="d" />.</span></span> <span data-ttu-id="b1802-287"><paramref name="d" /> が <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> のいずれかに等しい場合は、その値が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-287">If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-288">このメソッドの動作は IEEE 標準 754、セクション 4 に従います。</span><span class="sxs-lookup"><span data-stu-id="b1802-288">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="b1802-289">このような丸めと呼ぶことが負の無限大に丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-289">This kind of rounding is sometimes called rounding toward negative infinity.</span></span> <span data-ttu-id="b1802-290">つまり場合、`d`が正の値、小数部が切り捨てられます。</span><span class="sxs-lookup"><span data-stu-id="b1802-290">In other words, if `d` is positive, any fractional component is truncated.</span></span> <span data-ttu-id="b1802-291">場合`d`は負の場合、小数部が存在するより小さい整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b1802-291">If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer.</span></span> <span data-ttu-id="b1802-292">このメソッドの動作と異なります、<xref:System.Math.Ceiling%2A>メソッドで、正の無限大に向かって丸め処理をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="b1802-292">The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-293">次の例を示しています、<xref:System.Math.Floor%28System.Double%29?displayProperty=nameWithType>メソッドとの比較、<xref:System.Math.Ceiling%28System.Double%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1802-293">The following example illustrates the <xref:System.Math.Floor%28System.Double%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Ceiling%28System.Double%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#2)]
 [!code-vb[System.Math.Ceiling#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="IEEERemainder">
      <MemberSignature Language="C#" Value="public static double IEEERemainder (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 IEEERemainder(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IEEERemainder (x As Double, y As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double IEEERemainder(double x, double y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="b1802-294">被除数。</span><span class="sxs-lookup"><span data-stu-id="b1802-294">A dividend.</span></span></param>
        <param name="y"><span data-ttu-id="b1802-295">除数。</span><span class="sxs-lookup"><span data-stu-id="b1802-295">A divisor.</span></span></param>
        <summary><span data-ttu-id="b1802-296">指定した数を別の指定数で除算した結果の剰余を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-296">Returns the remainder resulting from the division of a specified number by another specified number.</span></span></summary>
        <returns><span data-ttu-id="b1802-297"><paramref name="x" /> - (<paramref name="y" /> Q) に等しい数値。Q は <paramref name="x" /> / <paramref name="y" /> の商を丸めた近似整数を示します。<paramref name="x" /> / <paramref name="y" /> が 2 つの整数の中間に位置する場合は、偶数の整数が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-297">A number equal to <paramref name="x" /> - (<paramref name="y" /> Q), where Q is the quotient of <paramref name="x" /> / <paramref name="y" /> rounded to the nearest integer (if <paramref name="x" /> / <paramref name="y" /> falls halfway between two integers, the even integer is returned).</span></span>  
  
 <span data-ttu-id="b1802-298"><paramref name="x" /> - (<paramref name="y" /> Q) がゼロのとき、<paramref name="x" /> が正である場合は値 +0、<paramref name="x" /> が負である場合は -0 が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-298">If <paramref name="x" /> - (<paramref name="y" /> Q) is zero, the value +0 is returned if <paramref name="x" /> is positive, or -0 if <paramref name="x" /> is negative.</span></span>  
  
 <span data-ttu-id="b1802-299"><paramref name="y" /> = 0 の場合は、<see cref="F:System.Double.NaN" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-299">If <paramref name="y" /> = 0, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-300">この操作は、ANSI/IEEE Std 754-1985; のセクション 5.1 で定義されている剰余演算に準拠していますIEEE 標準バイナリ浮動小数点演算です。Institute of Electrical と Electronics Engineers, Inc です。1985 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-300">This operation complies with the remainder operation defined in Section 5.1 of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic; Institute of Electrical and Electronics Engineers, Inc; 1985.</span></span>  
  
 <span data-ttu-id="b1802-301"><xref:System.Math.IEEERemainder%2A>メソッドは、剰余演算子と同じではありません。</span><span class="sxs-lookup"><span data-stu-id="b1802-301">The <xref:System.Math.IEEERemainder%2A> method is not the same as the modulus operator.</span></span> <span data-ttu-id="b1802-302">除算の後、残りの部分を返す両方を使用する数式は異なります。</span><span class="sxs-lookup"><span data-stu-id="b1802-302">Although both return the remainder after division, the formulas they use are different.</span></span> <span data-ttu-id="b1802-303">式、<xref:System.Math.IEEERemainder%2A>メソッドは。</span><span class="sxs-lookup"><span data-stu-id="b1802-303">The formula for the <xref:System.Math.IEEERemainder%2A> method is:</span></span>  
  
```  
IEEERemainder = dividend - (divisor * Math.Round(dividend / divisor))  
```  
  
 <span data-ttu-id="b1802-304">これに対し、剰余演算子の数式は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="b1802-304">In contrast, the formula for the modulus operator is:</span></span>  
  
```  
Modulus = (Math.Abs(dividend) - (Math.Abs(divisor) *   
          (Math.Floor(Math.Abs(dividend) / Math.Abs(divisor))))) *   
          Math.Sign(dividend)  
```  
  
   
  
## Examples  
 <span data-ttu-id="b1802-305">によって返される残りの部分を比較する次の例、<xref:System.Math.IEEERemainder%2A>剰余除算演算子によって返される残りの部分を持つメソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1802-305">The following example contrasts the remainder returned by the <xref:System.Math.IEEERemainder%2A> method with the remainder returned by the modulus division operator.</span></span>  
  
 [!code-csharp[System.Math.IEEERemainder#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.ieeeremainder/cs/ieeeremainder1.cs#1)]
 [!code-vb[System.Math.IEEERemainder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.ieeeremainder/vb/ieeeremainder1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1802-306">指定した数の対数を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-306">Returns the logarithm of a specified number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-307">対数を求める対象の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-307">The number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="b1802-308">指定した数の自然 (底 <see langword="e" />) 対数を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-308">Returns the natural (base <see langword="e" />) logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="b1802-309">次の表に示した値のいずれか</span><span class="sxs-lookup"><span data-stu-id="b1802-309">One of the values in the following table.</span></span>  
  
 <span data-ttu-id="b1802-310"><list type="table"><listheader><term><paramref name="d" /> パラメーター</span><span class="sxs-lookup"><span data-stu-id="b1802-310"><list type="table"><listheader><term><paramref name="d" /> parameter</span></span>  
  
 <span data-ttu-id="b1802-311"></term><description> 戻り値</span><span class="sxs-lookup"><span data-stu-id="b1802-311"></term><description> Return value</span></span>  
  
 <span data-ttu-id="b1802-312"></description></listheader><item><term> 正</span><span class="sxs-lookup"><span data-stu-id="b1802-312"></description></listheader><item><term> Positive</span></span>  
  
 <span data-ttu-id="b1802-313"></term><description> <paramref name="d" /> の自然の対数。つまり、ln <paramref name="d" /> または log e <paramref name="d" /></description></item><item><term> 0。</span><span class="sxs-lookup"><span data-stu-id="b1802-313"></term><description> The natural logarithm of <paramref name="d" />; that is, ln <paramref name="d" />, or log e <paramref name="d" /></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="b1802-314"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> 負</span><span class="sxs-lookup"><span data-stu-id="b1802-314"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> Negative</span></span>  
  
 <span data-ttu-id="b1802-315"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> に等しい <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list> に等しい</span><span class="sxs-lookup"><span data-stu-id="b1802-315"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-316">パラメーター`d`底 10 の数値として指定されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-316">Parameter `d` is specified as a base 10 number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-317">次の例を示しています、<xref:System.Math.Log%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1802-317">The following example illustrates the <xref:System.Math.Log%2A> method.</span></span>  
  
 [!code-csharp[System.Math.Log_Overloads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CS/log1.cs#2)]
 [!code-vb[System.Math.Log_Overloads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log_Overloads/VB/log1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Math.E" />
        <altmember cref="M:System.Math.Exp(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (double a, double newBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(float64 a, float64 newBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (a As Double, newBase As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(double a, double newBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="newBase" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="b1802-318">対数を求める対象の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-318">The number whose logarithm is to be found.</span></span></param>
        <param name="newBase"><span data-ttu-id="b1802-319">対数の底。</span><span class="sxs-lookup"><span data-stu-id="b1802-319">The base of the logarithm.</span></span></param>
        <summary><span data-ttu-id="b1802-320">指定した数値の指定した底での対数を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-320">Returns the logarithm of a specified number in a specified base.</span></span></summary>
        <returns><span data-ttu-id="b1802-321">次の表に示した値のいずれか</span><span class="sxs-lookup"><span data-stu-id="b1802-321">One of the values in the following table.</span></span> <span data-ttu-id="b1802-322">(+Infinity は <see cref="F:System.Double.PositiveInfinity" />、-Infinity は <see cref="F:System.Double.NegativeInfinity" />、NaN は <see cref="F:System.Double.NaN" /> をそれぞれ示しています。)</span><span class="sxs-lookup"><span data-stu-id="b1802-322">(+Infinity denotes <see cref="F:System.Double.PositiveInfinity" />, -Infinity denotes <see cref="F:System.Double.NegativeInfinity" />, and NaN denotes <see cref="F:System.Double.NaN" />.)</span></span>  
  
 <span data-ttu-id="b1802-323"><list type="table"><listheader><term><paramref name="a" /></term><description><paramref name="newBase" /></description><description> 戻り値</span><span class="sxs-lookup"><span data-stu-id="b1802-323"><list type="table"><listheader><term><paramref name="a" /></term><description><paramref name="newBase" /></description><description> Return value</span></span>  
  
 <span data-ttu-id="b1802-324"></description></listheader><item><term><paramref name="a" />&gt; 0</span><span class="sxs-lookup"><span data-stu-id="b1802-324"></description></listheader><item><term><paramref name="a" />&gt; 0</span></span>  
  
 <span data-ttu-id="b1802-325"></term><description> (0 &lt;<paramref name="newBase" />&lt; 1) - または -(<paramref name="newBase" />&gt; 1)</span><span class="sxs-lookup"><span data-stu-id="b1802-325"></term><description> (0 &lt;<paramref name="newBase" />&lt; 1) -or-(<paramref name="newBase" />&gt; 1)</span></span>  
  
 <span data-ttu-id="b1802-326"></description><description> lognewBase(a)</span><span class="sxs-lookup"><span data-stu-id="b1802-326"></description><description> lognewBase(a)</span></span>  
  
 <span data-ttu-id="b1802-327"></description></item><item><term><paramref name="a" />&lt; 0</span><span class="sxs-lookup"><span data-stu-id="b1802-327"></description></item><item><term><paramref name="a" />&lt; 0</span></span>  
  
 <span data-ttu-id="b1802-328"></term><description> (任意の値)</span><span class="sxs-lookup"><span data-stu-id="b1802-328"></term><description> (any value)</span></span>  
  
 <span data-ttu-id="b1802-329"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="b1802-329"></description><description> NaN</span></span>  
  
 <span data-ttu-id="b1802-330"></description></item><item><term> (任意の値)</span><span class="sxs-lookup"><span data-stu-id="b1802-330"></description></item><item><term> (any value)</span></span>  
  
 <span data-ttu-id="b1802-331"></term><description><paramref name="newBase" />&lt; 0</span><span class="sxs-lookup"><span data-stu-id="b1802-331"></term><description><paramref name="newBase" />&lt; 0</span></span>  
  
 <span data-ttu-id="b1802-332"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="b1802-332"></description><description> NaN</span></span>  
  
 <span data-ttu-id="b1802-333"></description></item><item><term><paramref name="a" /> != 1</span><span class="sxs-lookup"><span data-stu-id="b1802-333"></description></item><item><term><paramref name="a" /> != 1</span></span>  
  
 <span data-ttu-id="b1802-334"></term><description><paramref name="newBase" /> = 0</span><span class="sxs-lookup"><span data-stu-id="b1802-334"></term><description><paramref name="newBase" /> = 0</span></span>  
  
 <span data-ttu-id="b1802-335"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="b1802-335"></description><description> NaN</span></span>  
  
 <span data-ttu-id="b1802-336"></description></item><item><term><paramref name="a" /> != 1</span><span class="sxs-lookup"><span data-stu-id="b1802-336"></description></item><item><term><paramref name="a" /> != 1</span></span>  
  
 <span data-ttu-id="b1802-337"></term><description><paramref name="newBase" /> = +無限大</span><span class="sxs-lookup"><span data-stu-id="b1802-337"></term><description><paramref name="newBase" /> = +Infinity</span></span>  
  
 <span data-ttu-id="b1802-338"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="b1802-338"></description><description> NaN</span></span>  
  
 <span data-ttu-id="b1802-339"></description></item><item><term><paramref name="a" /> = NaN</span><span class="sxs-lookup"><span data-stu-id="b1802-339"></description></item><item><term><paramref name="a" /> = NaN</span></span>  
  
 <span data-ttu-id="b1802-340"></term><description> (任意の値)</span><span class="sxs-lookup"><span data-stu-id="b1802-340"></term><description> (any value)</span></span>  
  
 <span data-ttu-id="b1802-341"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="b1802-341"></description><description> NaN</span></span>  
  
 <span data-ttu-id="b1802-342"></description></item><item><term> (任意の値)</span><span class="sxs-lookup"><span data-stu-id="b1802-342"></description></item><item><term> (any value)</span></span>  
  
 <span data-ttu-id="b1802-343"></term><description><paramref name="newBase" /> = NaN</span><span class="sxs-lookup"><span data-stu-id="b1802-343"></term><description><paramref name="newBase" /> = NaN</span></span>  
  
 <span data-ttu-id="b1802-344"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="b1802-344"></description><description> NaN</span></span>  
  
 <span data-ttu-id="b1802-345"></description></item><item><term> (任意の値)</span><span class="sxs-lookup"><span data-stu-id="b1802-345"></description></item><item><term> (any value)</span></span>  
  
 <span data-ttu-id="b1802-346"></term><description><paramref name="newBase" /> = 1</span><span class="sxs-lookup"><span data-stu-id="b1802-346"></term><description><paramref name="newBase" /> = 1</span></span>  
  
 <span data-ttu-id="b1802-347"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="b1802-347"></description><description> NaN</span></span>  
  
 <span data-ttu-id="b1802-348"></description></item><item><term><paramref name="a" /> = 0</span><span class="sxs-lookup"><span data-stu-id="b1802-348"></description></item><item><term><paramref name="a" /> = 0</span></span>  
  
 <span data-ttu-id="b1802-349"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span><span class="sxs-lookup"><span data-stu-id="b1802-349"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span></span>  
  
 <span data-ttu-id="b1802-350"></description><description> +無限大</span><span class="sxs-lookup"><span data-stu-id="b1802-350"></description><description> +Infinity</span></span>  
  
 <span data-ttu-id="b1802-351"></description></item><item><term><paramref name="a" /> = 0</span><span class="sxs-lookup"><span data-stu-id="b1802-351"></description></item><item><term><paramref name="a" /> = 0</span></span>  
  
 <span data-ttu-id="b1802-352"></term><description><paramref name="newBase" />&gt; 1</span><span class="sxs-lookup"><span data-stu-id="b1802-352"></term><description><paramref name="newBase" />&gt; 1</span></span>  
  
 <span data-ttu-id="b1802-353"></description><description> -無限大</span><span class="sxs-lookup"><span data-stu-id="b1802-353"></description><description> -Infinity</span></span>  
  
 <span data-ttu-id="b1802-354"></description></item><item><term><paramref name="a" /> =  +無限大</span><span class="sxs-lookup"><span data-stu-id="b1802-354"></description></item><item><term><paramref name="a" /> =  +Infinity</span></span>  
  
 <span data-ttu-id="b1802-355"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span><span class="sxs-lookup"><span data-stu-id="b1802-355"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span></span>  
  
 <span data-ttu-id="b1802-356"></description><description> -無限大</span><span class="sxs-lookup"><span data-stu-id="b1802-356"></description><description> -Infinity</span></span>  
  
 <span data-ttu-id="b1802-357"></description></item><item><term><paramref name="a" /> =  +無限大</span><span class="sxs-lookup"><span data-stu-id="b1802-357"></description></item><item><term><paramref name="a" /> =  +Infinity</span></span>  
  
 <span data-ttu-id="b1802-358"></term><description><paramref name="newBase" />&gt; 1</span><span class="sxs-lookup"><span data-stu-id="b1802-358"></term><description><paramref name="newBase" />&gt; 1</span></span>  
  
 <span data-ttu-id="b1802-359"></description><description> +無限大</span><span class="sxs-lookup"><span data-stu-id="b1802-359"></description><description> +Infinity</span></span>  
  
 <span data-ttu-id="b1802-360"></description></item><item><term><paramref name="a" /> = 1</span><span class="sxs-lookup"><span data-stu-id="b1802-360"></description></item><item><term><paramref name="a" /> = 1</span></span>  
  
 <span data-ttu-id="b1802-361"></term><description><paramref name="newBase" /> = 0</span><span class="sxs-lookup"><span data-stu-id="b1802-361"></term><description><paramref name="newBase" /> = 0</span></span>  
  
 <span data-ttu-id="b1802-362"></description><description> 0</span><span class="sxs-lookup"><span data-stu-id="b1802-362"></description><description> 0</span></span>  
  
 <span data-ttu-id="b1802-363"></description></item><item><term><paramref name="a" /> = 1</span><span class="sxs-lookup"><span data-stu-id="b1802-363"></description></item><item><term><paramref name="a" /> = 1</span></span>  
  
 <span data-ttu-id="b1802-364"></term><description><paramref name="newBase" /> = +無限大</span><span class="sxs-lookup"><span data-stu-id="b1802-364"></term><description><paramref name="newBase" /> = +Infinity</span></span>  
  
 <span data-ttu-id="b1802-365"></description><description> 0</span><span class="sxs-lookup"><span data-stu-id="b1802-365"></description><description> 0</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-366">次の例では<xref:System.Math.Log%2A>を選択した値の対数の特定の id を評価します。</span><span class="sxs-lookup"><span data-stu-id="b1802-366">The following example uses <xref:System.Math.Log%2A> to evaluate certain logarithmic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Log_Overloads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CPP/loggen.cpp#1)]
 [!code-csharp[System.Math.Log_Overloads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CS/loggen.cs#1)]
 [!code-vb[System.Math.Log_Overloads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log_Overloads/VB/loggen.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static double Log10 (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log10(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log10(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-367">対数を検索する対象の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-367">A number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="b1802-368">指定した数の底 10 の対数を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-368">Returns the base 10 logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="b1802-369">次の表に示した値のいずれか</span><span class="sxs-lookup"><span data-stu-id="b1802-369">One of the values in the following table.</span></span>  
  
 <span data-ttu-id="b1802-370"><list type="table"><listheader><term><paramref name="d" /> パラメーター</span><span class="sxs-lookup"><span data-stu-id="b1802-370"><list type="table"><listheader><term><paramref name="d" /> parameter</span></span>  
  
 <span data-ttu-id="b1802-371"></term><description> 戻り値</span><span class="sxs-lookup"><span data-stu-id="b1802-371"></term><description> Return value</span></span>  
  
 <span data-ttu-id="b1802-372"></description></listheader><item><term> 正</span><span class="sxs-lookup"><span data-stu-id="b1802-372"></description></listheader><item><term> Positive</span></span>  
  
 <span data-ttu-id="b1802-373"></term><description> <paramref name="d" /> の底 10 の log。つまり、log 10<paramref name="d" />。</span><span class="sxs-lookup"><span data-stu-id="b1802-373"></term><description> The base 10 log of <paramref name="d" />; that is, log 10<paramref name="d" />.</span></span>  
  
 <span data-ttu-id="b1802-374"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="b1802-374"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="b1802-375"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> 負</span><span class="sxs-lookup"><span data-stu-id="b1802-375"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> Negative</span></span>  
  
 <span data-ttu-id="b1802-376"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> に等しい <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list> に等しい</span><span class="sxs-lookup"><span data-stu-id="b1802-376"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-377">パラメーター`d`底 10 の数値として指定されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-377">Parameter `d` is specified as a base 10 number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-378">次の例では、<xref:System.Math.Log10%2A>選択された値の底 10 の対数を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-378">The following example uses the <xref:System.Math.Log10%2A> method to return the base 10 logarithm for selected values.</span></span>  
  
 [!code-csharp[System.Math.Log10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log10/CS/log10.cs#1)]
 [!code-vb[System.Math.Log10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log10/VB/log10.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Max">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1802-379">指定された 2 つの数のうち、大きい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-379">Returns the larger of two specified numbers.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static byte Max (byte val1, byte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Max(unsigned int8 val1, unsigned int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Byte, val2 As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Max(System::Byte val1, System::Byte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Byte" />
        <Parameter Name="val2" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-380">比較する 2 つの 8 ビット符号なし整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-380">The first of two 8-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-381">比較する 2 つの 8 ビット符号なし整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-381">The second of two 8-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-382">2 つの 8 ビット符号なし整数のうち、大きな方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-382">Returns the larger of two 8-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-383">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-383">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-384">次の例で使用する方法、<xref:System.Math.Max%2A>メソッドを返し、2 つの変数の大きい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-384">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static decimal Max (decimal val1, decimal val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(valuetype System.Decimal val1, valuetype System.Decimal val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Decimal, val2 As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Max(System::Decimal val1, System::Decimal val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Decimal" />
        <Parameter Name="val2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-385">比較する 2 つの 10 進数の最初の数。</span><span class="sxs-lookup"><span data-stu-id="b1802-385">The first of two decimal numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-386">比較する 2 つの 10 進数の 2 番目の数。</span><span class="sxs-lookup"><span data-stu-id="b1802-386">The second of two decimal numbers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-387">2 つの 10 進数のうち、大きい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-387">Returns the larger of two decimal numbers.</span></span></summary>
        <returns><span data-ttu-id="b1802-388">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-388">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-389">次の例で使用する方法、<xref:System.Math.Max%2A>メソッドを返し、2 つの変数の大きい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-389">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static double Max (double val1, double val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(float64 val1, float64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Double, val2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Max(double val1, double val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Double" />
        <Parameter Name="val2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-390">比較する 2 つの倍精度浮動小数点数の最初の数。</span><span class="sxs-lookup"><span data-stu-id="b1802-390">The first of two double-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-391">比較する 2 つの倍精度浮動小数点数の 2 番目の数。</span><span class="sxs-lookup"><span data-stu-id="b1802-391">The second of two double-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-392">2 つの倍精度浮動小数点数のうち、大きい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-392">Returns the larger of two double-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="b1802-393">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-393">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span> <span data-ttu-id="b1802-394"><paramref name="val1" />、<paramref name="val2" />、または <paramref name="val1" /> と <paramref name="val2" /> の両方が <see cref="F:System.Double.NaN" /> に等しい場合、<see cref="F:System.Double.NaN" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-394">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-395">次の例で使用する方法、<xref:System.Math.Max%2A>メソッドを返し、2 つの変数の大きい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-395">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static short Max (short val1, short val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Max(int16 val1, int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Short, val2 As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Max(short val1, short val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int16" />
        <Parameter Name="val2" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-396">比較する 2 つの 16 ビット符号付き整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-396">The first of two 16-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-397">比較する 2 つの 16 ビット符号付き整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-397">The second of two 16-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-398">2 つの 16 ビット符号付き整数のうち、大きい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-398">Returns the larger of two 16-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-399">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-399">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-400">次の例で使用する方法、<xref:System.Math.Max%2A>メソッドを返し、2 つの変数の大きい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-400">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static int Max (int val1, int val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(int32 val1, int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Integer, val2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Max(int val1, int val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int32" />
        <Parameter Name="val2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-401">比較する 2 つの 32 ビット符号付き整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-401">The first of two 32-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-402">比較する 2 つの 32 ビット符号付き整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-402">The second of two 32-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-403">2 つの 32 ビット符号付き整数のうち、大きい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-403">Returns the larger of two 32-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-404">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-404">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-405">次の例で使用する方法、<xref:System.Math.Max%2A>メソッドを返し、2 つの変数の大きい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-405">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static long Max (long val1, long val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(int64 val1, int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Long, val2 As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Max(long val1, long val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int64" />
        <Parameter Name="val2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-406">比較する 2 つの 64 ビット符号付き整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-406">The first of two 64-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-407">比較する 2 つの 64 ビット符号付き整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-407">The second of two 64-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-408">2 つの 64 ビット符号付き整数のうち、大きい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-408">Returns the larger of two 64-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-409">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-409">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-410">次の例で使用する方法、<xref:System.Math.Max%2A>メソッドを返し、2 つの変数の大きい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-410">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static sbyte Max (sbyte val1, sbyte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Max(int8 val1, int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As SByte, val2 As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Max(System::SByte val1, System::SByte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.SByte" />
        <Parameter Name="val2" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-411">比較する 2 つの 8 ビット符号付き整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-411">The first of two 8-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-412">比較する 2 つの 8 ビット符号付き整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-412">The second of two 8-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-413">2 つの 8 ビット符号付き整数のうち、大きい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-413">Returns the larger of two 8-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-414">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-414">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-415">次の例で使用する方法、<xref:System.Math.Max%2A>メソッドを返し、2 つの変数の大きい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-415">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (float val1, float val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(float32 val1, float32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Single, val2 As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Max(float val1, float val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Single" />
        <Parameter Name="val2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-416">比較する 2 つの単精度浮動小数点数の最初の数。</span><span class="sxs-lookup"><span data-stu-id="b1802-416">The first of two single-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-417">比較する 2 つの単精度浮動小数点数の 2 番目の数。</span><span class="sxs-lookup"><span data-stu-id="b1802-417">The second of two single-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-418">2 つの単精度浮動小数点数のうち、大きい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-418">Returns the larger of two single-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="b1802-419">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-419">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span> <span data-ttu-id="b1802-420"><paramref name="val1" />、または <paramref name="val2" />、または <paramref name="val1" /> と <paramref name="val2" /> の両方が <see cref="F:System.Single.NaN" /> に等しい場合、<see cref="F:System.Single.NaN" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-420">If <paramref name="val1" />, or <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-421">次の例で使用する方法、<xref:System.Math.Max%2A>メソッドを返し、2 つの変数の大きい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-421">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static ushort Max (ushort val1, ushort val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Max(unsigned int16 val1, unsigned int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As UShort, val2 As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Max(System::UInt16 val1, System::UInt16 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt16" />
        <Parameter Name="val2" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-422">比較する 2 つの 16 ビット符号なし整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-422">The first of two 16-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-423">比較する 2 つの 16 ビット符号なし整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-423">The second of two 16-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-424">2 つの 16 ビット符号なし整数のうち、大きな方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-424">Returns the larger of two 16-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-425">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-425">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-426">次の例で使用する方法、<xref:System.Math.Max%2A>メソッドを返し、2 つの変数の大きい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-426">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static uint Max (uint val1, uint val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Max(unsigned int32 val1, unsigned int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As UInteger, val2 As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Max(System::UInt32 val1, System::UInt32 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt32" />
        <Parameter Name="val2" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-427">比較する 2 つの 32 ビット符号なし整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-427">The first of two 32-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-428">比較する 2 つの 32 ビット符号なし整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-428">The second of two 32-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-429">2 つの 32 ビット符号なし整数のうち、大きな方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-429">Returns the larger of two 32-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-430">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-430">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-431">次の例で使用する方法、<xref:System.Math.Max%2A>メソッドを返し、2 つの変数の大きい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-431">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static ulong Max (ulong val1, ulong val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Max(unsigned int64 val1, unsigned int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As ULong, val2 As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Max(System::UInt64 val1, System::UInt64 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt64" />
        <Parameter Name="val2" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-432">比較する 2 つの 64 ビット符号なし整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-432">The first of two 64-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-433">比較する 2 つの 64 ビット符号なし整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-433">The second of two 64-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-434">2 つの 64 ビット符号なし整数のうち、大きな方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-434">Returns the larger of two 64-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-435">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか大きい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-435">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-436">次の例で使用する方法、<xref:System.Math.Max%2A>メソッドを返し、2 つの変数の大きい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-436">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Min">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1802-437">2 つの数のうち、小さい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-437">Returns the smaller of two numbers.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static byte Min (byte val1, byte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Min(unsigned int8 val1, unsigned int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Byte, val2 As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Min(System::Byte val1, System::Byte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Byte" />
        <Parameter Name="val2" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-438">比較する 2 つの 8 ビット符号なし整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-438">The first of two 8-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-439">比較する 2 つの 8 ビット符号なし整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-439">The second of two 8-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-440">2 つの 8 ビット符号なし整数のうち、小さい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-440">Returns the smaller of two 8-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-441">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-441">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-442">次の例で使用する方法、<xref:System.Math.Min%2A>メソッドを返し、2 つの変数のいずれか小さい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-442">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static decimal Min (decimal val1, decimal val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(valuetype System.Decimal val1, valuetype System.Decimal val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Decimal, val2 As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Min(System::Decimal val1, System::Decimal val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Decimal" />
        <Parameter Name="val2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-443">比較する 2 つの 10 進数の最初の数。</span><span class="sxs-lookup"><span data-stu-id="b1802-443">The first of two decimal numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-444">比較する 2 つの 10 進数の 2 番目の数。</span><span class="sxs-lookup"><span data-stu-id="b1802-444">The second of two decimal numbers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-445">2 つの 10 進数のうち、小さい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-445">Returns the smaller of two decimal numbers.</span></span></summary>
        <returns><span data-ttu-id="b1802-446">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-446">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-447">次の例で使用する方法、<xref:System.Math.Min%2A>メソッドを返し、2 つの変数のいずれか小さい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-447">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static double Min (double val1, double val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(float64 val1, float64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Double, val2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Min(double val1, double val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Double" />
        <Parameter Name="val2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-448">比較する 2 つの倍精度浮動小数点数の最初の数。</span><span class="sxs-lookup"><span data-stu-id="b1802-448">The first of two double-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-449">比較する 2 つの倍精度浮動小数点数の 2 番目の数。</span><span class="sxs-lookup"><span data-stu-id="b1802-449">The second of two double-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-450">2 つの倍精度浮動小数点数のうち、小さい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-450">Returns the smaller of two double-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="b1802-451">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-451">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span> <span data-ttu-id="b1802-452"><paramref name="val1" />、<paramref name="val2" />、または <paramref name="val1" /> と <paramref name="val2" /> の両方が <see cref="F:System.Double.NaN" /> に等しい場合、<see cref="F:System.Double.NaN" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-452">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-453">次の例で使用する方法、<xref:System.Math.Min%2A>メソッドを返し、2 つの変数のいずれか小さい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-453">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static short Min (short val1, short val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Min(int16 val1, int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Short, val2 As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Min(short val1, short val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int16" />
        <Parameter Name="val2" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-454">比較する 2 つの 16 ビット符号付き整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-454">The first of two 16-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-455">比較する 2 つの 16 ビット符号付き整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-455">The second of two 16-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-456">2 つの 16 ビット符号付き整数のうち、小さい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-456">Returns the smaller of two 16-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-457">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-457">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-458">次の例で使用する方法、<xref:System.Math.Min%2A>メソッドを返し、2 つの変数のいずれか小さい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-458">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static int Min (int val1, int val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(int32 val1, int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Integer, val2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Min(int val1, int val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int32" />
        <Parameter Name="val2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-459">比較する 2 つの 32 ビット符号付き整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-459">The first of two 32-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-460">比較する 2 つの 32 ビット符号付き整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-460">The second of two 32-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-461">2 つの 32 ビット符号付き整数のうち、小さい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-461">Returns the smaller of two 32-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-462">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-462">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-463">次の例で使用する方法、<xref:System.Math.Min%2A>メソッドを返し、2 つの変数のいずれか小さい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-463">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static long Min (long val1, long val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(int64 val1, int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Long, val2 As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Min(long val1, long val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int64" />
        <Parameter Name="val2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-464">比較する 2 つの 64 ビット符号付き整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-464">The first of two 64-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-465">比較する 2 つの 64 ビット符号付き整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-465">The second of two 64-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-466">2 つの 64 ビット符号付き整数のうち、小さい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-466">Returns the smaller of two 64-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-467">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-467">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-468">次の例で使用する方法、<xref:System.Math.Min%2A>メソッドを返し、2 つの変数のいずれか小さい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-468">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static sbyte Min (sbyte val1, sbyte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Min(int8 val1, int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As SByte, val2 As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Min(System::SByte val1, System::SByte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.SByte" />
        <Parameter Name="val2" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-469">比較する 2 つの 8 ビット符号付き整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-469">The first of two 8-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-470">比較する 2 つの 8 ビット符号付き整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-470">The second of two 8-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-471">2 つの 8 ビット符号付き整数のうち、小さい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-471">Returns the smaller of two 8-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-472">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-472">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-473">次の例で使用する方法、<xref:System.Math.Min%2A>メソッドを返し、2 つの変数のいずれか小さい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-473">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (float val1, float val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(float32 val1, float32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Single, val2 As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Min(float val1, float val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Single" />
        <Parameter Name="val2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-474">比較する 2 つの単精度浮動小数点数の最初の数。</span><span class="sxs-lookup"><span data-stu-id="b1802-474">The first of two single-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-475">比較する 2 つの単精度浮動小数点数の 2 番目の数。</span><span class="sxs-lookup"><span data-stu-id="b1802-475">The second of two single-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-476">2 つの単精度浮動小数点数のうち、小さい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-476">Returns the smaller of two single-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="b1802-477">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-477">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span> <span data-ttu-id="b1802-478"><paramref name="val1" />、<paramref name="val2" />、または <paramref name="val1" /> と <paramref name="val2" /> の両方が <see cref="F:System.Single.NaN" /> に等しい場合、<see cref="F:System.Single.NaN" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-478">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-479">次の例で使用する方法、<xref:System.Math.Min%2A>メソッドを返し、2 つの変数のいずれか小さい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-479">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static ushort Min (ushort val1, ushort val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Min(unsigned int16 val1, unsigned int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As UShort, val2 As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Min(System::UInt16 val1, System::UInt16 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt16" />
        <Parameter Name="val2" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-480">比較する 2 つの 16 ビット符号なし整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-480">The first of two 16-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-481">比較する 2 つの 16 ビット符号なし整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-481">The second of two 16-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-482">2 つの 16 ビット符号なし整数のうち、小さい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-482">Returns the smaller of two 16-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-483">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-483">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-484">次の例で使用する方法、<xref:System.Math.Min%2A>メソッドを返し、2 つの変数のいずれか小さい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-484">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static uint Min (uint val1, uint val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Min(unsigned int32 val1, unsigned int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As UInteger, val2 As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Min(System::UInt32 val1, System::UInt32 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt32" />
        <Parameter Name="val2" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-485">比較する 2 つの 32 ビット符号なし整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-485">The first of two 32-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-486">比較する 2 つの 32 ビット符号なし整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-486">The second of two 32-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-487">2 つの 32 ビット符号なし整数のうち、小さい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-487">Returns the smaller of two 32-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-488">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-488">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-489">次の例で使用する方法、<xref:System.Math.Min%2A>メソッドを返し、2 つの変数のいずれか小さい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-489">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static ulong Min (ulong val1, ulong val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Min(unsigned int64 val1, unsigned int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As ULong, val2 As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Min(System::UInt64 val1, System::UInt64 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt64" />
        <Parameter Name="val2" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="b1802-490">比較する 2 つの 64 ビット符号なし整数の最初の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-490">The first of two 64-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="b1802-491">比較する 2 つの 64 ビット符号なし整数の 2 番目の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-491">The second of two 64-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="b1802-492">2 つの 64 ビット符号なし整数のうち、小さい方を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-492">Returns the smaller of two 64-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="b1802-493">パラメーター <paramref name="val1" /> または <paramref name="val2" /> のいずれか小さい方。</span><span class="sxs-lookup"><span data-stu-id="b1802-493">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-494">次の例で使用する方法、<xref:System.Math.Min%2A>メソッドを返し、2 つの変数のいずれか小さい方を表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-494">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PI">
      <MemberSignature Language="C#" Value="public const double PI = 3.14159265358979;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 PI = (3.14159265358979)" />
      <MemberSignature Language="DocId" Value="F:System.Math.PI" />
      <MemberSignature Language="VB.NET" Value="Public Const PI As Double  = 3.14159265358979" />
      <MemberSignature Language="C++ CLI" Value="public: double PI = 3.14159265358979;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>3.14159265358979</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b1802-495">定数 (π) を指定して、円の直径に対する円周の割合を表します。</span><span class="sxs-lookup"><span data-stu-id="b1802-495">Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-496">このフィールドの値は、3.14159265358979323846 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-496">The value of this field is 3.14159265358979323846.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-497">次の例では<xref:System.Math.PI>特定台形の内部の角度の計算を支援します。</span><span class="sxs-lookup"><span data-stu-id="b1802-497">The following example uses <xref:System.Math.PI> to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static double Pow (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Pow(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Pow(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (x As Double, y As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Pow(double x, double y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="b1802-498">累乗対象の倍精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="b1802-498">A double-precision floating-point number to be raised to a power.</span></span></param>
        <param name="y"><span data-ttu-id="b1802-499">累乗を指定する倍精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="b1802-499">A double-precision floating-point number that specifies a power.</span></span></param>
        <summary><span data-ttu-id="b1802-500">指定の数値を指定した値で累乗した値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-500">Returns a specified number raised to the specified power.</span></span></summary>
        <returns><span data-ttu-id="b1802-501">数値 <paramref name="x" /> を <paramref name="y" /> で累乗した値。</span><span class="sxs-lookup"><span data-stu-id="b1802-501">The number <paramref name="x" /> raised to the power <paramref name="y" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-502">次の表は、さまざまな値または値の範囲がに対して指定した場合に、戻り値を示します、`x`と`y`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b1802-502">The following table indicates the return value when various values or ranges of values are specified for the `x` and `y` parameters.</span></span> <span data-ttu-id="b1802-503">詳細については、「<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>「<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>および「<xref:System.Double.NaN?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b1802-503">For more information, see <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, and <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="b1802-504">パラメーター</span><span class="sxs-lookup"><span data-stu-id="b1802-504">Parameters</span></span>|<span data-ttu-id="b1802-505">戻り値</span><span class="sxs-lookup"><span data-stu-id="b1802-505">Return value</span></span>|  
|----------------|------------------|  
|<span data-ttu-id="b1802-506">`x` または`y`  = `NaN`です。</span><span class="sxs-lookup"><span data-stu-id="b1802-506">`x` or `y` = `NaN`.</span></span>|`NaN`|  
|<span data-ttu-id="b1802-507">`x` = すべての値を除く`NaN`です。`y` 0 を = です。</span><span class="sxs-lookup"><span data-stu-id="b1802-507">`x` = Any value except `NaN`; `y` = 0.</span></span>|<span data-ttu-id="b1802-508">1</span><span class="sxs-lookup"><span data-stu-id="b1802-508">1</span></span>|  
|<span data-ttu-id="b1802-509">`x` = `NegativeInfinity`; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="b1802-509">`x` = `NegativeInfinity`; `y` < 0.</span></span>|<span data-ttu-id="b1802-510">0</span><span class="sxs-lookup"><span data-stu-id="b1802-510">0</span></span>|  
|<span data-ttu-id="b1802-511">`x` = `NegativeInfinity`;`y`が奇数の正の整数。</span><span class="sxs-lookup"><span data-stu-id="b1802-511">`x` = `NegativeInfinity`; `y` is a positive odd integer.</span></span>|`NegativeInfinity`|  
|<span data-ttu-id="b1802-512">`x` = `NegativeInfinity`;`y`は正の値が奇数の整数ではありません。</span><span class="sxs-lookup"><span data-stu-id="b1802-512">`x` = `NegativeInfinity`; `y` is positive but not an odd integer.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="b1802-513">`x` < 0 は対象外`NegativeInfinity`です。`y` 、整数ではない`NegativeInfinity`、または`PositiveInfinity`です。</span><span class="sxs-lookup"><span data-stu-id="b1802-513">`x` < 0 but not `NegativeInfinity`; `y` is not an integer, `NegativeInfinity`, or `PositiveInfinity`.</span></span>|`NaN`|  
|<span data-ttu-id="b1802-514">`x` =-1 です。`y`  =  `NegativeInfinity`または`PositiveInfinity`です。</span><span class="sxs-lookup"><span data-stu-id="b1802-514">`x` = -1; `y` = `NegativeInfinity` or `PositiveInfinity`.</span></span>|`NaN`|  
|<span data-ttu-id="b1802-515">-1 < `x` < 1 になります`y` = `NegativeInfinity`.</span><span class="sxs-lookup"><span data-stu-id="b1802-515">-1 < `x` < 1; `y` = `NegativeInfinity`.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="b1802-516">-1 < `x` < 1 になります`y` = `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="b1802-516">-1 < `x` < 1; `y` = `PositiveInfinity`.</span></span>|<span data-ttu-id="b1802-517">0</span><span class="sxs-lookup"><span data-stu-id="b1802-517">0</span></span>|  
|<span data-ttu-id="b1802-518">`x` <-1 または`x`> 1 になります;`y` = `NegativeInfinity`.</span><span class="sxs-lookup"><span data-stu-id="b1802-518">`x` < -1 or `x` > 1; `y` = `NegativeInfinity`.</span></span>|<span data-ttu-id="b1802-519">0</span><span class="sxs-lookup"><span data-stu-id="b1802-519">0</span></span>|  
|<span data-ttu-id="b1802-520">`x` <-1 または`x`> 1 になります;`y` = `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="b1802-520">`x` < -1 or `x` > 1; `y` = `PositiveInfinity`.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="b1802-521">`x` = 0; `y` &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="b1802-521">`x` = 0; `y` < 0.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="b1802-522">`x` = 0; `y` &gt; 0.</span><span class="sxs-lookup"><span data-stu-id="b1802-522">`x` = 0; `y` > 0.</span></span>|<span data-ttu-id="b1802-523">0</span><span class="sxs-lookup"><span data-stu-id="b1802-523">0</span></span>|  
|<span data-ttu-id="b1802-524">`x` = 1 です。`y`以外の値は、`NaN`です。</span><span class="sxs-lookup"><span data-stu-id="b1802-524">`x` = 1; `y` is any value except `NaN`.</span></span>|<span data-ttu-id="b1802-525">1</span><span class="sxs-lookup"><span data-stu-id="b1802-525">1</span></span>|  
|<span data-ttu-id="b1802-526">`x` = `PositiveInfinity`; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="b1802-526">`x` = `PositiveInfinity`; `y` < 0.</span></span>|<span data-ttu-id="b1802-527">0</span><span class="sxs-lookup"><span data-stu-id="b1802-527">0</span></span>|  
|<span data-ttu-id="b1802-528">`x` = `PositiveInfinity`;`y` > 0 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-528">`x` = `PositiveInfinity`; `y` > 0.</span></span>|`PositiveInfinity`|  
  
   
  
## Examples  
 <span data-ttu-id="b1802-529">次の例では、<xref:System.Math.Pow%2A>させると、0 ~ 32 の電源を 2 から結果の値を計算する方法です。</span><span class="sxs-lookup"><span data-stu-id="b1802-529">The following example uses the <xref:System.Math.Pow%2A> method to calculate the value that results from raising 2 to a power ranging from 0 to 32.</span></span>  
  
 [!code-csharp[System.Math.Pow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.pow/cs/pow1.cs#1)]
 [!code-vb[System.Math.Pow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.pow/vb/pow1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Sqrt(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Round">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1802-530">最も近い整数または指定した小数点以下の桁数に値を丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-530">Rounds a value to the nearest integer or to the specified number of fractional digits.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-531">このセクションの内容:</span><span class="sxs-lookup"><span data-stu-id="b1802-531">In this section:</span></span>  
  
 <span data-ttu-id="b1802-532">[オーバー ロードされたメソッドの構文](#Syntax) </span><span class="sxs-lookup"><span data-stu-id="b1802-532">[Overloaded method syntax](#Syntax) </span></span>  
 <span data-ttu-id="b1802-533">[パラメーター](#Params) </span><span class="sxs-lookup"><span data-stu-id="b1802-533">[Parameters](#Params) </span></span>  
 <span data-ttu-id="b1802-534">[戻り値](#Returns) </span><span class="sxs-lookup"><span data-stu-id="b1802-534">[Return value](#Returns) </span></span>  
 <span data-ttu-id="b1802-535">[例外](#Exceptions) </span><span class="sxs-lookup"><span data-stu-id="b1802-535">[Exceptions](#Exceptions) </span></span>  
 <span data-ttu-id="b1802-536">[どのメソッドが呼び出ししますか。](#Tasks) </span><span class="sxs-lookup"><span data-stu-id="b1802-536">[Which method do I call?](#Tasks) </span></span>  
 <span data-ttu-id="b1802-537">[中間値と丸め処理を行う規則](#Midpoint) </span><span class="sxs-lookup"><span data-stu-id="b1802-537">[Midpoint values and rounding conventions](#Midpoint) </span></span>  
 <span data-ttu-id="b1802-538">[丸め処理や有効桁数](#Precision) </span><span class="sxs-lookup"><span data-stu-id="b1802-538">[Rounding and precision](#Precision) </span></span>  
 <span data-ttu-id="b1802-539">[丸めと単精度浮動小数点値](#Single) </span><span class="sxs-lookup"><span data-stu-id="b1802-539">[Rounding and single-precision floating-point values](#Single) </span></span>  
 <span data-ttu-id="b1802-540">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-540">Examples:</span></span>   
 [<span data-ttu-id="b1802-541">Math.Round(Decimal)</span><span class="sxs-lookup"><span data-stu-id="b1802-541">Math.Round(Decimal)</span></span>](#Round1_Example)  
 [<span data-ttu-id="b1802-542">Math.Round(Double)</span><span class="sxs-lookup"><span data-stu-id="b1802-542">Math.Round(Double)</span></span>](#Round2_Example)  
 [<span data-ttu-id="b1802-543">Math.Round (10 進数、int32 型)</span><span class="sxs-lookup"><span data-stu-id="b1802-543">Math.Round(Decimal, Int32)</span></span>](#Round3_Example)  
 [<span data-ttu-id="b1802-544">Math.Round (10 進数、MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="b1802-544">Math.Round(Decimal, MidpointRounding)</span></span>](#Round4_Example)  
 [<span data-ttu-id="b1802-545">Math.Round (Double、int32 型)</span><span class="sxs-lookup"><span data-stu-id="b1802-545">Math.Round(Double, Int32)</span></span>](#Round5_Example)  
 [<span data-ttu-id="b1802-546">Math.Round (Double、MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="b1802-546">Math.Round(Double, MidpointRounding)</span></span>](#Round6_Example)  
 [<span data-ttu-id="b1802-547">Math.Round (10 進数、Int32、MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="b1802-547">Math.Round(Decimal, Int32, MidpointRounding)</span></span>](#Round7_Example)  
 [<span data-ttu-id="b1802-548">Math.Round (Double、Int32、MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="b1802-548">Math.Round(Double, Int32, MidpointRounding)</span></span>](#Round8_Example)  
[<span data-ttu-id="b1802-549">バージョン情報</span><span class="sxs-lookup"><span data-stu-id="b1802-549">Version information</span></span>](#Round_Versions)  
  
<a name="Syntax"></a>   
## <a name="overloaded-method-syntax"></a><span data-ttu-id="b1802-550">オーバー ロードされたメソッドの構文</span><span class="sxs-lookup"><span data-stu-id="b1802-550">Overloaded method syntax</span></span>  
 <span data-ttu-id="b1802-551">オーバー ロードを選択するための追加のガイダンスについては、次を参照してください[どのメソッドが呼び出ししますか?。](#Tasks)</span><span class="sxs-lookup"><span data-stu-id="b1802-551">For additional guidance on choosing an overload, see [Which method do I call?](#Tasks)</span></span>  
  
 <span data-ttu-id="b1802-552">`Decimal Math.Round(Decimal` `d` `)`</span><span class="sxs-lookup"><span data-stu-id="b1802-552">`Decimal Math.Round(Decimal` `d` `)`</span></span>  
 <span data-ttu-id="b1802-553">10 進数の値を最も近い整数に丸め、最も近い偶数に中間値を丸めます ([例](#Round1_Example))。</span><span class="sxs-lookup"><span data-stu-id="b1802-553">Rounds a decimal value to the nearest integer, and rounds midpoint values to the nearest even number ([example](#Round1_Example)).</span></span>  
  
 <span data-ttu-id="b1802-554">`Double Math.Round(Double` `a` `)`</span><span class="sxs-lookup"><span data-stu-id="b1802-554">`Double Math.Round(Double` `a` `)`</span></span>  
 <span data-ttu-id="b1802-555">倍精度浮動小数点値を最も近い整数に丸め、最も近い偶数に中間値を丸めます ([例](#Round2_Example))。</span><span class="sxs-lookup"><span data-stu-id="b1802-555">Rounds a double-precision floating-point value to the nearest integer, and rounds midpoint values to the nearest even number ([example](#Round2_Example)).</span></span>  
  
 <span data-ttu-id="b1802-556">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `)`</span><span class="sxs-lookup"><span data-stu-id="b1802-556">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `)`</span></span>  
 <span data-ttu-id="b1802-557">指定した小数部の桁の 10 進値に丸め、最も近い偶数に中間値を丸めます ([例](#Round3_Example))。</span><span class="sxs-lookup"><span data-stu-id="b1802-557">Rounds a decimal value to a specified number of fractional digits, and rounds midpoint values to the nearest even number ([example](#Round3_Example)).</span></span>  
  
 <span data-ttu-id="b1802-558">`Double Math.Round(Double` `value` `, Int32`  `digits` `)`</span><span class="sxs-lookup"><span data-stu-id="b1802-558">`Double Math.Round(Double` `value` `, Int32`  `digits` `)`</span></span>  
 <span data-ttu-id="b1802-559">指定された数の小数部の桁を倍精度浮動小数点値に丸めますおよび最も近い偶数に中間値に丸めます ([例](#Round4_Example))。</span><span class="sxs-lookup"><span data-stu-id="b1802-559">Rounds a double-precision floating-point value to a specified number of fractional digits, and rounds midpoint values to the nearest even number ([example](#Round4_Example)).</span></span>  
  
 <span data-ttu-id="b1802-560">`Decimal Math.Round(Decimal` `d` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="b1802-560">`Decimal Math.Round(Decimal` `d` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="b1802-561">10 進数の値を最も近い整数に丸めます、中間値を指定した丸め処理を行う規則を使用して ([例](#Round5_Example))。</span><span class="sxs-lookup"><span data-stu-id="b1802-561">Rounds a decimal value to the nearest integer, and uses the specified rounding convention for midpoint values ([example](#Round5_Example)).</span></span>  
  
 <span data-ttu-id="b1802-562">`Double Math.Round(Double` `value` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="b1802-562">`Double Math.Round(Double` `value` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="b1802-563">倍精度浮動小数点値を最も近い整数に丸めます、中間値を指定した丸め処理を行う規則を使用して ([例](#Round6_Example))。</span><span class="sxs-lookup"><span data-stu-id="b1802-563">Rounds a double-precision floating-point value to the nearest integer, and uses the specified rounding convention for midpoint values ([example](#Round6_Example)).</span></span>  
  
 <span data-ttu-id="b1802-564">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="b1802-564">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="b1802-565">指定した小数部の桁の 10 進数値を四捨五入し、中間値の指定の丸め処理を行う規則を使用 ([例](#Round7_Example))。</span><span class="sxs-lookup"><span data-stu-id="b1802-565">Rounds a decimal value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values ([example](#Round7_Example)).</span></span>  
  
 <span data-ttu-id="b1802-566">`Double Math.Round(Double` `value` `, Int32`  `digits` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="b1802-566">`Double Math.Round(Double` `value` `, Int32`  `digits` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="b1802-567">指定された数の小数部の桁を倍精度浮動小数点値に丸めますおよび中間値の指定の丸め処理を行う規則を使用 ([例](#Round8_Example))。</span><span class="sxs-lookup"><span data-stu-id="b1802-567">Rounds a double-precision floating-point value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values ([example](#Round8_Example)).</span></span>  
  
<a name="Params"></a>   
## <a name="parameters"></a><span data-ttu-id="b1802-568">パラメーター</span><span class="sxs-lookup"><span data-stu-id="b1802-568">Parameters</span></span>  
 <span data-ttu-id="b1802-569">これは、パラメーターの完全な一覧、<xref:System.Math.Round%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1802-569">This is a complete list of parameters for the <xref:System.Math.Round%2A> method.</span></span> <span data-ttu-id="b1802-570">各オーバー ロードで使用するパラメーター、上記のオーバー ロードの構文を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b1802-570">For the parameters used by each overload, see the overload syntax above.</span></span>  
  
|<span data-ttu-id="b1802-571">パラメーター</span><span class="sxs-lookup"><span data-stu-id="b1802-571">Parameter</span></span>|<span data-ttu-id="b1802-572">型</span><span class="sxs-lookup"><span data-stu-id="b1802-572">Type</span></span>|<span data-ttu-id="b1802-573">説明</span><span class="sxs-lookup"><span data-stu-id="b1802-573">Description</span></span>|  
|---------------|----------|-----------------|  
|`d`|<xref:System.Decimal>|<span data-ttu-id="b1802-574">丸め対象の数です。</span><span class="sxs-lookup"><span data-stu-id="b1802-574">A number to be rounded.</span></span>|  
|`a`<br /><br /> <span data-ttu-id="b1802-575">- または -</span><span class="sxs-lookup"><span data-stu-id="b1802-575">-or-</span></span><br /><br /> `value`|<xref:System.Double>|<span data-ttu-id="b1802-576">丸め対象の倍精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="b1802-576">A double-precision floating-point number to be rounded.</span></span>|  
|`decimals`<br /><br /> <span data-ttu-id="b1802-577">- または -</span><span class="sxs-lookup"><span data-stu-id="b1802-577">-or-</span></span><br /><br /> `digits`|<xref:System.Int32>|<span data-ttu-id="b1802-578">戻り値の小数部の桁数。</span><span class="sxs-lookup"><span data-stu-id="b1802-578">The number of fractional digits in the return value.</span></span> <span data-ttu-id="b1802-579"><xref:System.Decimal>値、その範囲は 0 ~ 28 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-579">For <xref:System.Decimal> values, it can range from 0 to 28.</span></span> <span data-ttu-id="b1802-580"><xref:System.Double>値、その範囲は 0 ~ 15 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-580">For <xref:System.Double> values, it can range from 0 to 15.</span></span> <span data-ttu-id="b1802-581">サポートされている整数部と小数部の桁数の最大数は、15、<xref:System.Double>型です。</span><span class="sxs-lookup"><span data-stu-id="b1802-581">Note that 15 is the maximum number of integral and fractional digits supported by the <xref:System.Double> type.</span></span><br /><br /> <span data-ttu-id="b1802-582">既定値: 0 で、整数に丸められます</span><span class="sxs-lookup"><span data-stu-id="b1802-582">Default value: 0, which rounds to an integer</span></span>|  
|`mode`|<xref:System.MidpointRounding>|<span data-ttu-id="b1802-583">中間の値を丸めるに使用する規則を指定するフラグ。</span><span class="sxs-lookup"><span data-stu-id="b1802-583">A flag that specifies the convention to use for rounding midpoint values.</span></span> <span data-ttu-id="b1802-584">参照してください[中間値と丸め処理を行う規則](#Midpoint)です。</span><span class="sxs-lookup"><span data-stu-id="b1802-584">See [Midpoint values and rounding conventions](#Midpoint).</span></span><br /><br /> <span data-ttu-id="b1802-585">既定値: <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="b1802-585">Default value: <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType></span></span>|  
  
<a name="Returns"></a>   
## <a name="return-value"></a><span data-ttu-id="b1802-586">戻り値</span><span class="sxs-lookup"><span data-stu-id="b1802-586">Return value</span></span>  
 <span data-ttu-id="b1802-587">型:<xref:System.Decimal>または<xref:System.Double>丸め対象の値の型に応じて、します。</span><span class="sxs-lookup"><span data-stu-id="b1802-587">Type: <xref:System.Decimal> or <xref:System.Double>, depending on the type of the value to be rounded.</span></span>   
<span data-ttu-id="b1802-588">同じ型の数値`d`、 `a`、または`value`、整数または指定した 10 進数のいずれかが丸みのあります。</span><span class="sxs-lookup"><span data-stu-id="b1802-588">A numeric value of the same type as `d`, `a`, or `value`, but rounded either to an integer or to the specified number of decimal digits.</span></span> <span data-ttu-id="b1802-589">参照してください[中間値と丸め処理を行う規則](#Midpoint)については、中間値を持つ数値丸め処理を行います。</span><span class="sxs-lookup"><span data-stu-id="b1802-589">See [Midpoint values and rounding conventions](#Midpoint) for information about rounding numbers with midpoint values.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="b1802-590">中間値を丸め、丸め、アルゴリズムは、等値テストを実行します。</span><span class="sxs-lookup"><span data-stu-id="b1802-590">When rounding midpoint values, the rounding algorithm performs an equality test.</span></span> <span data-ttu-id="b1802-591">バイナリ表現と精度浮動小数点形式での問題、原因は、メソッドによって返される値を予期できないことができます。</span><span class="sxs-lookup"><span data-stu-id="b1802-591">Because of problems of binary representation and precision in the floating-point format, the value returned by the method can be unexpected.</span></span> <span data-ttu-id="b1802-592">詳細については、次を参照してください。[丸めと精度](#Precision)です。</span><span class="sxs-lookup"><span data-stu-id="b1802-592">For more information, see [Rounding and precision](#Precision).</span></span>  
  
 <span data-ttu-id="b1802-593">オーバー ロードの場合、<xref:System.Double>パラメーターがで呼び出された<xref:System.Double.NaN?displayProperty=nameWithType>、メソッドを返します<xref:System.Double.NaN?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="b1802-593">If an overload with a <xref:System.Double> parameter is called with <xref:System.Double.NaN?displayProperty=nameWithType>, the method returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b1802-594">使用して呼び出した場合<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>、メソッドを返します<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>または<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="b1802-594">If it is called with <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, the method returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
<a name="Exceptions"></a>   
## <a name="exceptions"></a><span data-ttu-id="b1802-595">例外</span><span class="sxs-lookup"><span data-stu-id="b1802-595">Exceptions</span></span>  
  
|<span data-ttu-id="b1802-596">例外</span><span class="sxs-lookup"><span data-stu-id="b1802-596">Exception</span></span>|<span data-ttu-id="b1802-597">条件</span><span class="sxs-lookup"><span data-stu-id="b1802-597">Condition</span></span>|<span data-ttu-id="b1802-598">によってスローされます。</span><span class="sxs-lookup"><span data-stu-id="b1802-598">Thrown by</span></span>|  
|---------------|---------------|---------------|  
|<xref:System.OverflowException>|<span data-ttu-id="b1802-599">結果は、範囲の<xref:System.Decimal>型です。</span><span class="sxs-lookup"><span data-stu-id="b1802-599">The result is outside the range of the <xref:System.Decimal> type.</span></span>|<xref:System.Math.Round%28System.Decimal%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="b1802-600">`decimals` が 0 未満か、28 を超えています。</span><span class="sxs-lookup"><span data-stu-id="b1802-600">`decimals` is less than 0 or greater than 28.</span></span><br /><br /> <span data-ttu-id="b1802-601">- または -</span><span class="sxs-lookup"><span data-stu-id="b1802-601">-or-</span></span><br /><br /> <span data-ttu-id="b1802-602">`digits` が 0 より小さいか、15 を超えています。</span><span class="sxs-lookup"><span data-stu-id="b1802-602">`digits` is less than 0 or greater than 15.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<xref:System.ArgumentException>|<span data-ttu-id="b1802-603">`mode` が有効な <xref:System.MidpointRounding> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="b1802-603">`mode` is not a valid value of <xref:System.MidpointRounding>.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
  
<a name="Tasks"></a>   
## <a name="which-method-do-i-call"></a><span data-ttu-id="b1802-604">どのメソッドが呼び出ししますか。</span><span class="sxs-lookup"><span data-stu-id="b1802-604">Which method do I call?</span></span>  
  
|<span data-ttu-id="b1802-605">終了</span><span class="sxs-lookup"><span data-stu-id="b1802-605">To</span></span>|<span data-ttu-id="b1802-606">Call</span><span class="sxs-lookup"><span data-stu-id="b1802-606">Call</span></span>|  
|--------|----------|  
|<span data-ttu-id="b1802-607">最も近い規則に丸め処理を使用して整数の数値を丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-607">Round a number to an integer by using the rounding to nearest convention.</span></span>|<xref:System.Math.Round%28System.Decimal%29><br /><br /> <span data-ttu-id="b1802-608">- または -</span><span class="sxs-lookup"><span data-stu-id="b1802-608">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%29>|  
|<span data-ttu-id="b1802-609">円形の数値を指定されたを使用して、整数丸めの規約です。</span><span class="sxs-lookup"><span data-stu-id="b1802-609">Round a number to an integer by using a specified rounding convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <span data-ttu-id="b1802-610">- または -</span><span class="sxs-lookup"><span data-stu-id="b1802-610">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>|  
|<span data-ttu-id="b1802-611">最も近い規則に丸め処理を使用して指定した小数部の桁数に数値を丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-611">Round a number to a specified number of fractional digits by using the rounding to nearest convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <span data-ttu-id="b1802-612">- または -</span><span class="sxs-lookup"><span data-stu-id="b1802-612">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%29>|  
|<span data-ttu-id="b1802-613">指定した小数部の桁数の指定を使用してに数値を丸め規約丸め処理します。</span><span class="sxs-lookup"><span data-stu-id="b1802-613">Round a number to a specified number of fractional digits by using a specified rounding convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <span data-ttu-id="b1802-614">- または -</span><span class="sxs-lookup"><span data-stu-id="b1802-614">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<span data-ttu-id="b1802-615">Round、<xref:System.Single>値を指定した小数部の桁数とを使用して、指定された規約の丸め処理を行う有効桁数の損失を最小限に抑えられます。</span><span class="sxs-lookup"><span data-stu-id="b1802-615">Round a <xref:System.Single> value to a specified number of fractional digits by using a specified rounding convention and minimizing the loss of precision.</span></span>|<span data-ttu-id="b1802-616">変換、<xref:System.Single>を<xref:System.Decimal>を呼び出すと<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>です。</span><span class="sxs-lookup"><span data-stu-id="b1802-616">Convert the <xref:System.Single> to a <xref:System.Decimal> and call <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>.</span></span>|  
|<span data-ttu-id="b1802-617">中間の値を丸めるの精度の問題を最小限に抑えながらを指定した小数部の桁数の数値を丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-617">Round a number to a specified number of fractional digits while minimizing problems of precision in rounding midpoint values.</span></span>|<span data-ttu-id="b1802-618">「以上にほぼ等しい」比較を実装する丸め処理を行うメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b1802-618">Call a rounding method that implements a "greater than or approximately equal to" comparison.</span></span> <span data-ttu-id="b1802-619">参照してください[丸めと精度](#Precision)です。</span><span class="sxs-lookup"><span data-stu-id="b1802-619">See [Rounding and precision](#Precision).</span></span>|  
|<span data-ttu-id="b1802-620">小数部の値を整数ラウンド小数部の値よりも大きいです。</span><span class="sxs-lookup"><span data-stu-id="b1802-620">Round a fractional value to an integer that is greater than the fractional value.</span></span> <span data-ttu-id="b1802-621">たとえば、round 3.1 ~ 4 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-621">For example, round 3.1 to 4.</span></span>|<xref:System.Math.Ceiling%2A>|  
|<span data-ttu-id="b1802-622">小数部の値を整数 round は小数部の値よりも小さいです。</span><span class="sxs-lookup"><span data-stu-id="b1802-622">Round a fractional value to an integer that is less than the fractional value.</span></span> <span data-ttu-id="b1802-623">たとえば、3.9. ~ 3. を丸められます。</span><span class="sxs-lookup"><span data-stu-id="b1802-623">For example, round 3.9 to 3.</span></span>|<xref:System.Math.Floor%2A>|  
  
<a name="Midpoint"></a>   
## <a name="midpoint-values-and-rounding-conventions"></a><span data-ttu-id="b1802-624">中間値と丸め処理を行う規則</span><span class="sxs-lookup"><span data-stu-id="b1802-624">Midpoint values and rounding conventions</span></span>  
 <span data-ttu-id="b1802-625">丸め処理を行うには、精度が低いと最も近い値に指定された有効桁数を持つ数値の値を変換するが含まれます。</span><span class="sxs-lookup"><span data-stu-id="b1802-625">Rounding involves converting a numeric value with a specified precision to the nearest value with less precision.</span></span> <span data-ttu-id="b1802-626">たとえば、使用することができます、 <xref:System.Math.Round%28System.Double%29> 3.4 3.0 への値を丸めるメソッドおよび<xref:System.Math.Round%28System.Double%2CSystem.Int32%29>3.579 に 3.58 の値を丸めるメソッド。</span><span class="sxs-lookup"><span data-stu-id="b1802-626">For example, you can use the <xref:System.Math.Round%28System.Double%29> method to round a value of 3.4 to 3.0, and the <xref:System.Math.Round%28System.Double%2CSystem.Int32%29> method to round a value of 3.579 to 3.58.</span></span>  
  
 <span data-ttu-id="b1802-627">中間値では、結果の最下位の数字の後の値は 2 つの数値の中間正確にします。</span><span class="sxs-lookup"><span data-stu-id="b1802-627">In a midpoint value, the value after the least significant digit in the result is precisely half way between two numbers.</span></span> <span data-ttu-id="b1802-628">たとえば、3.47500 は、中間の値である場合に 2 つの小数点以下桁数が丸められますや 7.500 中間の値は整数に丸め 場合です。</span><span class="sxs-lookup"><span data-stu-id="b1802-628">For example, 3.47500 is a midpoint value if it is to be rounded two decimal places, and 7.500 is a midpoint value if it is to be rounded to an integer.</span></span> <span data-ttu-id="b1802-629">このような場合は、最も近い値簡単に識別できません丸め方法なし。</span><span class="sxs-lookup"><span data-stu-id="b1802-629">In these cases, the nearest value can't be easily identified without a rounding convention.</span></span>  
  
 <span data-ttu-id="b1802-630"><xref:System.Math.Round%2A>メソッドは、中間値を処理するための丸め処理を行う 2 つの規則をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="b1802-630">The <xref:System.Math.Round%2A> method supports two rounding conventions for handling midpoint values:</span></span>  
  
 <span data-ttu-id="b1802-631">**ゼロから離れる方向に丸め処理**</span><span class="sxs-lookup"><span data-stu-id="b1802-631">**Rounding away from zero**</span></span>  
 <span data-ttu-id="b1802-632">中間値は、次の番号をゼロから離れる方向に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b1802-632">Midpoint values are rounded to the next number away from zero.</span></span> <span data-ttu-id="b1802-633">3.8 に 3.75 が次の例では、四捨五入-3.8 に 3.9 に 3.85 ラウンド-3.75 丸める-3.9 に丸められます-3.85 とします。</span><span class="sxs-lookup"><span data-stu-id="b1802-633">For example, 3.75 rounds to 3.8, 3.85 rounds to 3.9, -3.75 rounds to -3.8, and -3.85 rounds to -3.9.</span></span> <span data-ttu-id="b1802-634">この形式の丸めがによって表される、<xref:System.MidpointRounding.AwayFromZero?displayProperty=nameWithType>列挙体のメンバーです。</span><span class="sxs-lookup"><span data-stu-id="b1802-634">This form of rounding is represented by the <xref:System.MidpointRounding.AwayFromZero?displayProperty=nameWithType> enumeration member.</span></span>  
  
 <span data-ttu-id="b1802-635">ゼロから離れる方向に丸め処理は、丸めた最もよく知られた形式です。</span><span class="sxs-lookup"><span data-stu-id="b1802-635">Rounding away from zero is the most widely known form of rounding.</span></span>  
  
 <span data-ttu-id="b1802-636">**、近似値に丸め処理や銀行型丸め方式**</span><span class="sxs-lookup"><span data-stu-id="b1802-636">**Rounding to nearest, or banker's rounding**</span></span>  
 <span data-ttu-id="b1802-637">中間値は、最も近い偶数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b1802-637">Midpoint values are rounded to the nearest even number.</span></span> <span data-ttu-id="b1802-638">たとえば、3.75 と 3.85 の両方が 3.8 に丸める、-3.75 と-3.85 の両方が-3.8 に丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-638">For example, both 3.75 and 3.85 round to 3.8, and both -3.75 and -3.85 round to -3.8.</span></span> <span data-ttu-id="b1802-639">この形式の丸めがによって表される、<xref:System.MidpointRounding.ToEven?displayProperty=nameWithType>列挙体のメンバーです。</span><span class="sxs-lookup"><span data-stu-id="b1802-639">This form of rounding is represented by the <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType> enumeration member.</span></span>  
  
 <span data-ttu-id="b1802-640">近似値に丸め処理は、財務や統計に関する操作で使用される丸め処理の標準的な形式です。</span><span class="sxs-lookup"><span data-stu-id="b1802-640">Rounding to nearest is the standard form of rounding used in financial and statistical operations.</span></span> <span data-ttu-id="b1802-641">IEEE 標準 754、セクション 4 に準拠しています。</span><span class="sxs-lookup"><span data-stu-id="b1802-641">It conforms to IEEE Standard 754, section 4.</span></span> <span data-ttu-id="b1802-642">複数の丸め処理で使用する場合、常に中間値を単一方向に丸めるによって引き起こされる出る丸めの誤差が減少します。</span><span class="sxs-lookup"><span data-stu-id="b1802-642">When used in multiple rounding operations, it reduces the rounding error that is caused by consistently rounding midpoint values in a single direction.</span></span> <span data-ttu-id="b1802-643">場合によっては、この丸めエラーを重要なことがあります。</span><span class="sxs-lookup"><span data-stu-id="b1802-643">In some cases, this rounding error can be significant.</span></span>  
  
 <span data-ttu-id="b1802-644">次の例は、常に中間値を単一方向に丸めるに生じるバイアスを示しています。</span><span class="sxs-lookup"><span data-stu-id="b1802-644">The following example illustrates the bias that can result from consistently rounding midpoint values in a single direction.</span></span> <span data-ttu-id="b1802-645">例では、配列の真の平均を計算する<xref:System.Decimal>値、および 2 つの規則を使用して、配列内の値が丸められる場合、平均を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1802-645">The example computes the true mean of an array of <xref:System.Decimal> values, and then computes the mean when the values in the array are rounded by using the two conventions.</span></span> <span data-ttu-id="b1802-646">この例では真の平均および近似値に丸め処理を行うときに結果の平均は同じです。</span><span class="sxs-lookup"><span data-stu-id="b1802-646">In this example, the true mean and the mean that results when rounding to nearest are the same.</span></span> <span data-ttu-id="b1802-647">ただし、ゼロから離れる方向丸め処理を行うときに結果を平均値とは異なります.05 (または 3.6%) 真の平均です。</span><span class="sxs-lookup"><span data-stu-id="b1802-647">However, the mean that results when rounding away from zero differs by .05 (or by 3.6%) from the true mean.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/mean1.cs#2)]
 [!code-vb[System.Math.Round.Overload#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/mean1.vb#2)]  
  
 <span data-ttu-id="b1802-648">既定では、<xref:System.Math.Round%2A>メソッドは、最も近い規則に丸めを使用します。</span><span class="sxs-lookup"><span data-stu-id="b1802-648">By default, the <xref:System.Math.Round%2A> method uses the rounding to nearest convention.</span></span> <span data-ttu-id="b1802-649">次の表のオーバー ロードの一覧、<xref:System.Math.Round%2A>メソッドおよび丸め規約それぞれ使用します。</span><span class="sxs-lookup"><span data-stu-id="b1802-649">The following table lists the overloads of the <xref:System.Math.Round%2A> method and the rounding convention that each uses.</span></span>  
  
|<span data-ttu-id="b1802-650">オーバーロード</span><span class="sxs-lookup"><span data-stu-id="b1802-650">Overload</span></span>|<span data-ttu-id="b1802-651">規則の丸め処理を行う</span><span class="sxs-lookup"><span data-stu-id="b1802-651">Rounding convention</span></span>|  
|--------------|-------------------------|  
|<xref:System.Math.Round%28System.Decimal%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Double%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Double%2CSystem.Int32%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29>|<span data-ttu-id="b1802-652">によって決定`mode`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b1802-652">Determined by `mode` parameter.</span></span>|  
|<xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>|<span data-ttu-id="b1802-653">によって決定`mode`パラメーター</span><span class="sxs-lookup"><span data-stu-id="b1802-653">Determined by `mode` parameter</span></span>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>|<span data-ttu-id="b1802-654">によって決定`mode`パラメーター</span><span class="sxs-lookup"><span data-stu-id="b1802-654">Determined by `mode` parameter</span></span>|  
|<xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|<span data-ttu-id="b1802-655">によって決定`mode`パラメーター</span><span class="sxs-lookup"><span data-stu-id="b1802-655">Determined by `mode` parameter</span></span>|  
  
<a name="Precision"></a>   
## <a name="rounding-and-precision"></a><span data-ttu-id="b1802-656">丸め処理や有効桁数</span><span class="sxs-lookup"><span data-stu-id="b1802-656">Rounding and precision</span></span>  
 <span data-ttu-id="b1802-657">丸め操作は、中間値かどうかを判断するため、<xref:System.Math.Round%2A>メソッドは元の値が 10 で切り捨てられます、乗算<sup>n</sup>ここで、 *n*小数部の必要な数です戻り値、数字、値の残りの小数部が.5 以上かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="b1802-657">In order to determine whether a rounding operation involves a midpoint value, the <xref:System.Math.Round%2A> method multiplies the original value to be rounded by 10<sup>n</sup>, where *n* is the desired number of fractional digits in the return value, and then determines whether the remaining fractional portion of the value is greater than or equal to .5.</span></span> <span data-ttu-id="b1802-658">これは、「テストの等値」セクションに等しいかどうか、および説明したようにテストを少し変えたバリエーションとして、<xref:System.Double>リファレンス トピックでは、浮動小数点値の等価性のテストが問題になるバイナリ浮動小数点の書式の問題のため形式と有効桁数です。</span><span class="sxs-lookup"><span data-stu-id="b1802-658">This is a slight variation on a test for equality, and as discussed in the "Testing for Equality" section of the <xref:System.Double> reference topic, tests for equality with floating-point values are problematic because of the floating-point format's issues with binary representation and precision.</span></span> <span data-ttu-id="b1802-659">これは、こと (精度が低下する) ため .5 よりもやや少ない数値の任意の小数部は丸められません上方向を意味します。</span><span class="sxs-lookup"><span data-stu-id="b1802-659">This means that any fractional portion of a number that is slightly less than .5 (because of a loss of precision) will not be rounded upward.</span></span>  
  
 <span data-ttu-id="b1802-660">この問題を説明する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-660">The following example illustrates the problem.</span></span> <span data-ttu-id="b1802-661">繰り返し、.1 のどちらに 11.0 を追加し、結果を最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-661">It repeatedly adds .1 to 11.0 and rounds the result to the nearest integer.</span></span> <span data-ttu-id="b1802-662">丸めの方法に関係なく 11.5 は 12 に丸める必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1802-662">Regardless of the rounding convention, 11.5 should round to 12.</span></span> <span data-ttu-id="b1802-663">ただしの例から出力として存在しません。</span><span class="sxs-lookup"><span data-stu-id="b1802-663">However, as the output from the example shows, it does not.</span></span> <span data-ttu-id="b1802-664">例では、"R"を使用して[標準数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)を表示する、浮動小数点値の完全な精度、丸め対象の値が繰り返しの追加中に有効桁数を失ったことを示していますし、その値が実際には11.499999999999998 です。</span><span class="sxs-lookup"><span data-stu-id="b1802-664">The example uses the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) to display the floating point value's full precision, and shows that the value to be rounded has lost precision during repeated additions, and its value is actually 11.499999999999998.</span></span> <span data-ttu-id="b1802-665">.499999999999998 が.5 より小さいであるために、値は次に大きい整数に丸められません。</span><span class="sxs-lookup"><span data-stu-id="b1802-665">Because .499999999999998 is less than .5, the value is not rounded to the next highest integer.</span></span> <span data-ttu-id="b1802-666">定数値 11.5 に割り当てているだけの場合、例に示すもこの問題は発生しません、<xref:System.Double>変数。</span><span class="sxs-lookup"><span data-stu-id="b1802-666">As the example also shows, this problem does not occur if we simply assign the constant value 11.5 to a <xref:System.Double> variable.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/precision1.cs#7)]
 [!code-vb[System.Math.Round.Overload#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/precision1.vb#7)]  
  
 <span data-ttu-id="b1802-667">中間の値を丸めるの精度の問題は、次の条件が発生する可能性が最も高いです。</span><span class="sxs-lookup"><span data-stu-id="b1802-667">Problems of precision in rounding midpoint values are most likely to arise in the following conditions:</span></span>  
  
-   <span data-ttu-id="b1802-668">ときに、浮動小数点型のバイナリ形式で正確に小数部の値は表現できません。</span><span class="sxs-lookup"><span data-stu-id="b1802-668">When a fractional value cannot be expressed precisely in the floating-point type's binary format.</span></span>  
  
-   <span data-ttu-id="b1802-669">ときに値が切り捨てられますが、1 つまたは複数の浮動小数点演算から計算されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-669">When the value to be rounded is calculated from one or more floating-point operations.</span></span>  
  
-   <span data-ttu-id="b1802-670">丸め対象の値がの場合、<xref:System.Single>ではなく、<xref:System.Double>または<xref:System.Decimal>です。</span><span class="sxs-lookup"><span data-stu-id="b1802-670">When the value to be rounded is a <xref:System.Single> rather than a <xref:System.Double> or <xref:System.Decimal>.</span></span> <span data-ttu-id="b1802-671">詳細については、次のセクションを参照してください。[丸めと単精度浮動小数点値](#Single)です。</span><span class="sxs-lookup"><span data-stu-id="b1802-671">For more information, see the next section, [Rounding and single-precision floating-point values](#Single).</span></span>  
  
 <span data-ttu-id="b1802-672">丸め操作の精度の不足が問題のある場合には、次の操作を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="b1802-672">In cases where the lack of precision in rounding operations is problematic, you can do the following:</span></span>  
  
-   <span data-ttu-id="b1802-673">丸め操作は、四捨五入するオーバー ロードを呼び出す場合、<xref:System.Double>値を変更できます、<xref:System.Double>を<xref:System.Decimal>値および丸くオーバー ロードを呼び出して、<xref:System.Decimal>値の代わりにします。</span><span class="sxs-lookup"><span data-stu-id="b1802-673">If the rounding operation calls an overload that rounds a <xref:System.Double> value, you can change the <xref:System.Double> to a <xref:System.Decimal> value and call an overload that rounds a <xref:System.Decimal> value instead.</span></span> <span data-ttu-id="b1802-674">ただし、<xref:System.Decimal>データ型は、有効桁数の損失と表現の問題にもに、これらの問題ははるかにあまり一般的です。</span><span class="sxs-lookup"><span data-stu-id="b1802-674">Although the <xref:System.Decimal> data type also has problems of representation and loss of precision, these issues are far less common.</span></span>  
  
-   <span data-ttu-id="b1802-675">丸め対象の値が許容可能な中間値に近いかを判断する「とほぼ同じ」テストを実行するカスタムの丸め処理を行うアルゴリズムを定義します。</span><span class="sxs-lookup"><span data-stu-id="b1802-675">Define a custom rounding algorithm that performs a "nearly equal" test to determine whether the value to be rounded is acceptably close to a midpoint value.</span></span> <span data-ttu-id="b1802-676">次の例では定義、`RoundApproximate`小数部の値が中間丸め処理を行う対象となることに中間値の近くに十分かどうかを検査するメソッド。</span><span class="sxs-lookup"><span data-stu-id="b1802-676">The following example defines a `RoundApproximate` method that examines whether a fractional value is sufficiently near to a midpoint value to be subject to midpoint rounding.</span></span> <span data-ttu-id="b1802-677">例の出力では、前の例に示すように丸めの問題を修正します。</span><span class="sxs-lookup"><span data-stu-id="b1802-677">As the output from the example shows, it corrects the rounding problem shown in the previous example.</span></span>  
  
     [!code-csharp[System.Math.Round.Overload#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/precision2.cs#8)]
     [!code-vb[System.Math.Round.Overload#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/precision2.vb#8)]  
  
<a name="Single"></a>   
## <a name="rounding-and-single-precision-floating-point-values"></a><span data-ttu-id="b1802-678">丸めと単精度浮動小数点値</span><span class="sxs-lookup"><span data-stu-id="b1802-678">Rounding and single-precision floating-point values</span></span>  
 <span data-ttu-id="b1802-679"><xref:System.Math.Round%2A>メソッドには、型の引数を受け入れるオーバー ロードが含まれています。<xref:System.Decimal>と<xref:System.Double>です。</span><span class="sxs-lookup"><span data-stu-id="b1802-679">The <xref:System.Math.Round%2A> method includes overloads that accept arguments of type <xref:System.Decimal> and <xref:System.Double>.</span></span> <span data-ttu-id="b1802-680">型の値を丸める方法がない<xref:System.Single>です。</span><span class="sxs-lookup"><span data-stu-id="b1802-680">There are no methods that round values of type <xref:System.Single>.</span></span> <span data-ttu-id="b1802-681">渡す場合、<xref:System.Single>のオーバー ロードのいずれかの値、<xref:System.Math.Round%2A>にキャスト (C# の場合) は、メソッド、またはに (Visual Basic) の変換、<xref:System.Double>と、対応する<xref:System.Math.Round%2A>を持つオーバー ロード、<xref:System.Double>パラメーターと呼びます。</span><span class="sxs-lookup"><span data-stu-id="b1802-681">If you pass a <xref:System.Single> value to one of the overloads of the <xref:System.Math.Round%2A> method, it is cast (in C#) or converted (in Visual Basic) to a <xref:System.Double>, and the corresponding <xref:System.Math.Round%2A> overload with a <xref:System.Double> parameter is called.</span></span> <span data-ttu-id="b1802-682">これは、拡大変換が、多くの場合に関係する、有効桁数の損失次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="b1802-682">Although this is a widening conversion, it often involves a loss of precision, as the following example illustrates.</span></span> <span data-ttu-id="b1802-683">ときに、 <xref:System.Single> 16.325 の値は、<xref:System.Math.Round%2A>メソッドされ、結果は 16.32 の 16.33、されません、期待される結果を最も近い規則に丸め処理を使用して 2 つの小数点以下桁数に丸められます、します。</span><span class="sxs-lookup"><span data-stu-id="b1802-683">When a <xref:System.Single> value of 16.325 is passed to the <xref:System.Math.Round%2A> method and rounded to two decimal places using the rounding to nearest convention, the result is 16.33 and not the expected result of 16.32.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/single1.cs#1)]
 [!code-vb[System.Math.Round.Overload#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/single1.vb#1)]  
  
 <span data-ttu-id="b1802-684">この予期しない結果がへの変換の精度の損失によるは、<xref:System.Single>値を<xref:System.Double>です。</span><span class="sxs-lookup"><span data-stu-id="b1802-684">This unexpected result is due to a loss of precision in the conversion of the <xref:System.Single> value to a <xref:System.Double>.</span></span> <span data-ttu-id="b1802-685">結果として得られる<xref:System.Double>16.325000762939453 の値の中間値ではありません 16.325 より大きい、上方向へ常に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b1802-685">Because the resulting <xref:System.Double> value of 16.325000762939453 is not a midpoint value and is greater than 16.325, it is always rounded upward.</span></span>  
  
 <span data-ttu-id="b1802-686">多くの場合、例のように、精度が失われることが最小化またはキャストまたは変換で削除されました、<xref:System.Single>値を<xref:System.Decimal>です。</span><span class="sxs-lookup"><span data-stu-id="b1802-686">In many cases, as the example illustrates, the loss of precision can be minimized or eliminated by casting or converting the <xref:System.Single> value to a <xref:System.Decimal>.</span></span> <span data-ttu-id="b1802-687">これは縮小変換であるため、必要でキャスト演算子を使用して、または変換メソッドを呼び出すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="b1802-687">Note that, because this is a narrowing conversion, it requires using a cast operator or calling a conversion method.</span></span>  
  
<a name="Round1_Example"></a>   
## <a name="mathrounddecimal-example"></a><span data-ttu-id="b1802-688">Math.Round(Decimal) 例</span><span class="sxs-lookup"><span data-stu-id="b1802-688">Math.Round(Decimal) example</span></span>  
 <span data-ttu-id="b1802-689">次の例で、<xref:System.Math.Round%28System.Decimal%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="b1802-689">The following example demonstrates the <xref:System.Math.Round%28System.Decimal%29> method.</span></span> <span data-ttu-id="b1802-690">なお、<xref:System.Decimal>このオーバー ロードは、既定値を使用するために、4.5 の値が 5 ではなく 4 に丸める<xref:System.MidpointRounding.ToEven>規則。</span><span class="sxs-lookup"><span data-stu-id="b1802-690">Note that the <xref:System.Decimal> value of 4.5 rounds to 4 rather than 5, because this overload uses the default <xref:System.MidpointRounding.ToEven> convention.</span></span>  
  
 [!code-csharp[System.Math.Round#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/rounddecimal1.cs#6)]
 [!code-vb[System.Math.Round#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/rounddecimal1.vb#6)]  
  
<a name="Round2_Example"></a>   
## <a name="mathrounddouble-example"></a><span data-ttu-id="b1802-691">Math.Round(Double) 例</span><span class="sxs-lookup"><span data-stu-id="b1802-691">Math.Round(Double) example</span></span>  
 <span data-ttu-id="b1802-692">次の例では、最も近い整数に丸め処理を示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-692">The following example demonstrates rounding to the nearest integer value.</span></span>  
  
 [!code-cpp[Classic Math.Round Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Math.Round Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Math.Round Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Math.Round Example/CS/source.cs#1)]
 [!code-vb[Classic Math.Round Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Math.Round Example/VB/source.vb#1)]  
  
<a name="Round3_Example"></a>   
## <a name="mathrounddecimal-int32-example"></a><span data-ttu-id="b1802-693">Math.Round (10 進数、int32 型) の例</span><span class="sxs-lookup"><span data-stu-id="b1802-693">Math.Round(Decimal, Int32) example</span></span>  
 <span data-ttu-id="b1802-694">次の例では、2 桁の小数部を 1 つの桁の小数部を持つ値を含む 10 進数値を丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-694">The following example rounds decimal values with two fractional digits to values that have a single fractional digit.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/source.cs#3)]
 [!code-vb[System.Math.Round.Overload#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/source.vb#3)]  
  
<a name="Round4_Example"></a>   
## <a name="mathrounddouble-int32-example"></a><span data-ttu-id="b1802-695">Math.Round (Double、int32 型) の例</span><span class="sxs-lookup"><span data-stu-id="b1802-695">Math.Round(Double, Int32) example</span></span>  
 <span data-ttu-id="b1802-696">次の例を 1 つの桁の小数部を持つ 1 個の double を 2 桁の小数部の数字を倍精度値に丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-696">The following example rounds double values with two fractional digits to doubles that have a single fractional digit.</span></span>  
  
 [!code-cpp[Classic Math.Round2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Math.Round2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Math.Round2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Math.Round2 Example/CS/source.cs#1)]
 [!code-vb[Classic Math.Round2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Math.Round2 Example/VB/source.vb#1)]  
  
<a name="Round5_Example"></a>   
## <a name="mathrounddecimal-midpointrounding-example"></a><span data-ttu-id="b1802-697">Math.Round (10 進数、MidpointRounding) の例</span><span class="sxs-lookup"><span data-stu-id="b1802-697">Math.Round(Decimal, MidpointRounding) example</span></span>  
 <span data-ttu-id="b1802-698">次の例は、によって返される値を表示、<xref:System.Math.Round%28System.Decimal%29>メソッド、<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29>メソッドを`mode`の引数<xref:System.MidpointRounding.ToEven>、および<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29>メソッドを`mode`の引数<xref:System.MidpointRounding.AwayFromZero>です。</span><span class="sxs-lookup"><span data-stu-id="b1802-698">The following example displays values returned by the <xref:System.Math.Round%28System.Decimal%29> method, the <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.ToEven>, and the <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.AwayFromZero>.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/midpoint1.cs#5)]
 [!code-vb[System.Math.Round.Overload#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/midpoint1.vb#5)]  
  
<a name="Round6_Example"></a>   
## <a name="mathrounddouble-midpointrounding-example"></a><span data-ttu-id="b1802-699">Math.Round (Double、MidpointRounding) の例</span><span class="sxs-lookup"><span data-stu-id="b1802-699">Math.Round(Double, MidpointRounding) example</span></span>  
 <span data-ttu-id="b1802-700">次の例は、によって返される値を表示、<xref:System.Math.Round%28System.Double%29>メソッド、<xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>メソッドを`mode`の引数<xref:System.MidpointRounding.ToEven>、および<xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>メソッドを`mode`の引数<xref:System.MidpointRounding.AwayFromZero>です。</span><span class="sxs-lookup"><span data-stu-id="b1802-700">The following example displays values returned by the <xref:System.Math.Round%28System.Double%29> method, the <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.ToEven>, and the <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.AwayFromZero>.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/midpoint2.cs#6)]
 [!code-vb[System.Math.Round.Overload#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/midpoint2.vb#6)]  
  
<a name="Round7_Example"></a>   
## <a name="mathrounddecimal-int32-midpointrounding-example"></a><span data-ttu-id="b1802-701">Math.Round (10 進数、Int32、MidpointRounding) の例</span><span class="sxs-lookup"><span data-stu-id="b1802-701">Math.Round(Decimal, Int32, MidpointRounding) example</span></span>  
 <span data-ttu-id="b1802-702">次の例で使用する方法、<xref:System.Math.Round%2A>メソッドを<xref:System.MidpointRounding>列挙します。</span><span class="sxs-lookup"><span data-stu-id="b1802-702">The following example demonstrates how to use the <xref:System.Math.Round%2A> method with the <xref:System.MidpointRounding> enumeration.</span></span>  
  
 [!code-cpp[math.midpointrounding#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.midpointrounding/cpp/mpr.cpp#1)]
 [!code-csharp[math.midpointrounding#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.midpointrounding/CS/mpr.cs#1)]
 [!code-vb[math.midpointrounding#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.midpointrounding/VB/mpr.vb#1)]  
  
<a name="Round8_Example"></a>   
## <a name="mathrounddouble-int32-midpointrounding-example"></a><span data-ttu-id="b1802-703">Math.Round (Double、Int32、MidpointRounding) の例</span><span class="sxs-lookup"><span data-stu-id="b1802-703">Math.Round(Double, Int32, MidpointRounding) example</span></span>  
 <span data-ttu-id="b1802-704">次の例で使用する方法、<xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>メソッドを<xref:System.MidpointRounding>列挙します。</span><span class="sxs-lookup"><span data-stu-id="b1802-704">The following example demonstrates how to use the <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29> method with the <xref:System.MidpointRounding> enumeration.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/mpr.cs#4)]
 [!code-vb[System.Math.Round.Overload#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/mpr.vb#4)]  
  
<a name="Round_Versions"></a>   
## <a name="version-information"></a><span data-ttu-id="b1802-705">バージョン情報</span><span class="sxs-lookup"><span data-stu-id="b1802-705">Version information</span></span>  
 <span data-ttu-id="b1802-706">.NET Framework</span><span class="sxs-lookup"><span data-stu-id="b1802-706">.NET Framework</span></span>  
 <span data-ttu-id="b1802-707">せずオーバー ロード、<xref:System.MidpointRounding>でパラメーターがサポートされます: 4.5、4、3.5、3.0、2.0、1.1、1.0</span><span class="sxs-lookup"><span data-stu-id="b1802-707">Overloads without a <xref:System.MidpointRounding> parameter are supported in: 4.5, 4, 3.5, 3.0, 2.0, 1.1, 1.0</span></span>  
<span data-ttu-id="b1802-708">オーバー ロード、<xref:System.MidpointRounding>でパラメーターがサポートされます: 4.5、4、3.5、3.0、2.0</span><span class="sxs-lookup"><span data-stu-id="b1802-708">Overloads with a <xref:System.MidpointRounding> parameter are supported in: 4.5, 4, 3.5, 3.0, 2.0</span></span>  
  
 <span data-ttu-id="b1802-709">.NET Framework Client Profile</span><span class="sxs-lookup"><span data-stu-id="b1802-709">.NET Framework Client Profile</span></span>  
 <span data-ttu-id="b1802-710">すべてのオーバー ロードではサポートされて: 4、3.5 SP1</span><span class="sxs-lookup"><span data-stu-id="b1802-710">All overloads are supported in: 4, 3.5 SP1</span></span>  
  
 <span data-ttu-id="b1802-711">ポータブル クラス ライブラリ</span><span class="sxs-lookup"><span data-stu-id="b1802-711">Portable Class Library</span></span>  
 <span data-ttu-id="b1802-712">すべてのオーバー ロードがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="b1802-712">All overloads are supported</span></span>  
  
 <span data-ttu-id="b1802-713">Windows ストア アプリ用 .NET</span><span class="sxs-lookup"><span data-stu-id="b1802-713">.NET for Windows Store apps</span></span>  
 <span data-ttu-id="b1802-714">すべてのオーバー ロードではサポートされて: Windows 8</span><span class="sxs-lookup"><span data-stu-id="b1802-714">All overloads are supported in: Windows 8</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
        <altmember cref="M:System.Math.Truncate(System.Decimal)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-715">丸め対象の 10 進数。</span><span class="sxs-lookup"><span data-stu-id="b1802-715">A decimal number to be rounded.</span></span></param>
        <summary><span data-ttu-id="b1802-716">10 進値を最も近い整数値に丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-716">Rounds a decimal value to the nearest integral value.</span></span></summary>
        <returns><span data-ttu-id="b1802-717">パラメーター <paramref name="d" /> に最も近い整数。</span><span class="sxs-lookup"><span data-stu-id="b1802-717">The integer nearest parameter <paramref name="d" />.</span></span> <span data-ttu-id="b1802-718"><paramref name="d" /> の小数部が 2 つの整数 (一方が偶数で、もう一方が奇数) の中間にある場合は、偶数が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-718">If the fractional component of <paramref name="d" /> is halfway between two integers, one of which is even and the other odd, the even number is returned.</span></span> <span data-ttu-id="b1802-719">このメソッドは、整数型ではなく <see cref="T:System.Decimal" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-719">Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b1802-720">例と包括的な使用状況についての他のオーバー ロードは、`Round`メソッドを参照してください、<xref:System.Math.Round%2A>リファレンス ページ。</span><span class="sxs-lookup"><span data-stu-id="b1802-720">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b1802-721">結果が <see cref="T:System.Decimal" /> の範囲外です。</span><span class="sxs-lookup"><span data-stu-id="b1802-721">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="b1802-722">丸め対象の倍精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="b1802-722">A double-precision floating-point number to be rounded.</span></span></param>
        <summary><span data-ttu-id="b1802-723">倍精度浮動小数点値を最も近い整数値に丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-723">Rounds a double-precision floating-point value to the nearest integral value.</span></span></summary>
        <returns><span data-ttu-id="b1802-724"><paramref name="a" /> に最も近い整数。</span><span class="sxs-lookup"><span data-stu-id="b1802-724">The integer nearest <paramref name="a" />.</span></span> <span data-ttu-id="b1802-725"><paramref name="a" /> の小数部が 2 つの整数 (一方が偶数で、もう一方が奇数) の中間にある場合は、偶数が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-725">If the fractional component of <paramref name="a" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned.</span></span> <span data-ttu-id="b1802-726">このメソッドは、整数型ではなく <see cref="T:System.Double" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-726">Note that this method returns a <see cref="T:System.Double" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b1802-727">例と包括的な使用状況についての他のオーバー ロードは、`Round`メソッドを参照してください、<xref:System.Math.Round%2A>リファレンス ページ。</span><span class="sxs-lookup"><span data-stu-id="b1802-727">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="b1802-728">単精度浮動小数点数としての 10 進数の値を表すまたは場合によっては、浮動小数点値に対する算術演算を実行することができますの失われたのため、<see cref="M:System.Math.Round(System.Double)" />を中間値を丸めるには、メソッドは含めることはできません、近い偶数の整数。</span><span class="sxs-lookup"><span data-stu-id="b1802-728">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double)" /> method may not appear to round midpoint values to the nearest even integer.</span></span> <span data-ttu-id="b1802-729">次の例では、浮動小数点値.1 は有限のバイナリ表現があるないため、最初の呼び出しで、 <see cref="M:System.Math.Round(System.Double)" /> 11.5 の値を持つメソッドには、12 の代わりに 11 が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-729">In the following example, because the floating-point value .1 has no finite binary representation, the first call to the <see cref="M:System.Math.Round(System.Double)" /> method with a value of 11.5 returns 11 instead of 12.</span></span>  
  
 [!code-csharp[System.Math.Round#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round2.cs#1)]
 [!code-vb[System.Math.Round#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round2.vb#1)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, decimals As Integer) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, int decimals);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-730">丸め対象の 10 進数。</span><span class="sxs-lookup"><span data-stu-id="b1802-730">A decimal number to be rounded.</span></span></param>
        <param name="decimals"><span data-ttu-id="b1802-731">戻り値の小数部の桁数。</span><span class="sxs-lookup"><span data-stu-id="b1802-731">The number of decimal places in the return value.</span></span></param>
        <summary><span data-ttu-id="b1802-732">10 進値を、指定した小数部の桁数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-732">Rounds a decimal value to a specified number of fractional digits.</span></span></summary>
        <returns><span data-ttu-id="b1802-733"><paramref name="d" /> に等しい小数部の桁数を格納する <paramref name="decimals" /> に最も近い数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-733">The number nearest to <paramref name="d" /> that contains a number of fractional digits equal to <paramref name="decimals" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b1802-734">例と包括的な使用状況についての他のオーバー ロードは、`Round`メソッドを参照してください、<xref:System.Math.Round%2A>リファレンス ページ。</span><span class="sxs-lookup"><span data-stu-id="b1802-734">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1802-735"><paramref name="decimals" /> が 0 未満か、28 を超えています。</span><span class="sxs-lookup"><span data-stu-id="b1802-735"><paramref name="decimals" /> is less than 0 or greater than 28.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b1802-736">結果が <see cref="T:System.Decimal" /> の範囲外です。</span><span class="sxs-lookup"><span data-stu-id="b1802-736">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, mode As MidpointRounding) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-737">丸め対象の 10 進数。</span><span class="sxs-lookup"><span data-stu-id="b1802-737">A decimal number to be rounded.</span></span></param>
        <param name="mode"><span data-ttu-id="b1802-738"><c>d</c> が 2 つの数値の中間にある場合に丸める方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="b1802-738">Specification for how to round <c>d</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="b1802-739">10 進値を最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-739">Rounds a decimal value to the nearest integer.</span></span> <span data-ttu-id="b1802-740">値が 2 つの数値の中間にある場合にその値を丸める方法をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="b1802-740">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="b1802-741"><paramref name="d" /> に最も近い整数。</span><span class="sxs-lookup"><span data-stu-id="b1802-741">The integer nearest <paramref name="d" />.</span></span> <span data-ttu-id="b1802-742"><paramref name="d" /> が 2 つの数値 (一方が偶数でもう一方が奇数) の中間にある場合、<paramref name="mode" /> によって 2 つの数値のどちらが返されるかが決まります。</span><span class="sxs-lookup"><span data-stu-id="b1802-742">If <paramref name="d" /> is halfway between two numbers, one of which is even and the other odd, then <paramref name="mode" /> determines which of the two is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b1802-743">例と包括的な使用状況についての他のオーバー ロードは、`Round`メソッドを参照してください、<xref:System.Math.Round%2A>リファレンス ページ。</span><span class="sxs-lookup"><span data-stu-id="b1802-743">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b1802-744"><paramref name="mode" /> が有効な <see cref="T:System.MidpointRounding" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="b1802-744"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b1802-745">結果が <see cref="T:System.Decimal" /> の範囲外です。</span><span class="sxs-lookup"><span data-stu-id="b1802-745">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, int digits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, int32 digits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, digits As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, int digits);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="digits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-746">丸め対象の倍精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="b1802-746">A double-precision floating-point number to be rounded.</span></span></param>
        <param name="digits"><span data-ttu-id="b1802-747">戻り値の小数部の桁数。</span><span class="sxs-lookup"><span data-stu-id="b1802-747">The number of fractional digits in the return value.</span></span></param>
        <summary><span data-ttu-id="b1802-748">倍精度浮動小数点値を指定した小数部の桁数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-748">Rounds a double-precision floating-point value to a specified number of fractional digits.</span></span></summary>
        <returns><span data-ttu-id="b1802-749"><paramref name="value" /> に等しい小数部の桁数を格納する <paramref name="digits" /> に最も近い数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-749">The number nearest to <paramref name="value" /> that contains a number of fractional digits equal to <paramref name="digits" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b1802-750">例と包括的な使用状況についての他のオーバー ロードは、`Round`メソッドを参照してください、<xref:System.Math.Round%2A>リファレンス ページ。</span><span class="sxs-lookup"><span data-stu-id="b1802-750">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1802-751"><paramref name="digits" /> が 0 より小さいか、15 を超えています。</span><span class="sxs-lookup"><span data-stu-id="b1802-751"><paramref name="digits" /> is less than 0 or greater than 15.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="b1802-752">単精度浮動小数点数としての 10 進数の値を表すまたは場合によっては、浮動小数点値に対する算術演算を実行することができますの失われたのため、<see cref="M:System.Math.Round(System.Double,System.Int32)" />を中間値を丸めるには、メソッドは含めることはできません、最も近い偶数の値で、<paramref name="digits" />小数部の位置。</span><span class="sxs-lookup"><span data-stu-id="b1802-752">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.Int32)" /> method may not appear to round midpoint values to the nearest even value in the <paramref name="digits" /> decimal position.</span></span> <span data-ttu-id="b1802-753">これにより、2.135 は 2.14 ではなく 2.13 に丸められますここで、次の例を示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-753">This is illustrated in the following example, where 2.135 is rounded to 2.13 instead of 2.14.</span></span> <span data-ttu-id="b1802-754">これは、内部的には、メソッドは、乗算<paramref name="value" />10<sup>桁</sup>、し、乗算操作は、有効桁数の損失からここでは低下します。</span><span class="sxs-lookup"><span data-stu-id="b1802-754">This occurs because internally the method multiplies <paramref name="value" /> by 10<sup>digits</sup>, and the multiplication operation in this case suffers from a loss of precision.</span></span>  
  
 [!code-csharp[System.Math.Round#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round3.cs#2)]
 [!code-vb[System.Math.Round#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round3.vb#2)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, mode As MidpointRounding) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-755">丸め対象の倍精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="b1802-755">A double-precision floating-point number to be rounded.</span></span></param>
        <param name="mode"><span data-ttu-id="b1802-756"><c>value</c> が 2 つの数値の中間にある場合に丸める方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="b1802-756">Specification for how to round <c>value</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="b1802-757">倍精度浮動小数点値を最も近い整数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-757">Rounds a double-precision floating-point value to the nearest integer.</span></span> <span data-ttu-id="b1802-758">値が 2 つの数値の中間にある場合にその値を丸める方法をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="b1802-758">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="b1802-759"><paramref name="value" /> に最も近い整数。</span><span class="sxs-lookup"><span data-stu-id="b1802-759">The integer nearest <paramref name="value" />.</span></span> <span data-ttu-id="b1802-760"><paramref name="value" /> が 2 つの整数 (一方が偶数でもう一方が奇数) の中間にある場合、<paramref name="mode" /> によって 2 つの数値のどちらが返されるかが決まります。</span><span class="sxs-lookup"><span data-stu-id="b1802-760">If <paramref name="value" /> is halfway between two integers, one of which is even and the other odd, then <paramref name="mode" /> determines which of the two is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b1802-761">例と包括的な使用状況についての他のオーバー ロードは、`Round`メソッドを参照してください、<xref:System.Math.Round%2A>リファレンス ページ。</span><span class="sxs-lookup"><span data-stu-id="b1802-761">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b1802-762"><paramref name="mode" /> が有効な <see cref="T:System.MidpointRounding" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="b1802-762"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="b1802-763">単精度浮動小数点数としての 10 進数の値を表すまたは場合によっては、浮動小数点値に対する算術演算を実行することができますの失われたのため、<see cref="M:System.Math.Round(System.Double,System.MidpointRounding)" />を中間値を丸めるには、メソッドは含めることはできません、近い偶数の整数。</span><span class="sxs-lookup"><span data-stu-id="b1802-763">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.MidpointRounding)" /> method may not appear to round midpoint values to the nearest even integer.</span></span> <span data-ttu-id="b1802-764">次の例では、浮動小数点値.1 は有限のバイナリ表現があるないため、最初の呼び出しで、 <see cref="M:System.Math.Round(System.Double)" /> 11.5 の値を持つメソッドには、12 の代わりに 11 が返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-764">In the following example, because the floating-point value .1 has no finite binary representation, the first call to the <see cref="M:System.Math.Round(System.Double)" /> method with a value of 11.5 returns 11 instead of 12.</span></span>  
  
 [!code-csharp[System.Math.Round#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round5.cs#4)]
 [!code-vb[System.Math.Round#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round5.vb#4)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, decimals As Integer, mode As MidpointRounding) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, int decimals, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-765">丸め対象の 10 進数。</span><span class="sxs-lookup"><span data-stu-id="b1802-765">A decimal number to be rounded.</span></span></param>
        <param name="decimals"><span data-ttu-id="b1802-766">戻り値の小数部の桁数。</span><span class="sxs-lookup"><span data-stu-id="b1802-766">The number of decimal places in the return value.</span></span></param>
        <param name="mode"><span data-ttu-id="b1802-767"><c>d</c> が 2 つの数値の中間にある場合に丸める方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="b1802-767">Specification for how to round <c>d</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="b1802-768">10 進値を、指定した小数部の桁数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-768">Rounds a decimal value to a specified number of fractional digits.</span></span> <span data-ttu-id="b1802-769">値が 2 つの数値の中間にある場合にその値を丸める方法をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="b1802-769">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="b1802-770"><paramref name="d" /> に等しい小数部の桁数を格納する <paramref name="decimals" /> に最も近い数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-770">The number nearest to <paramref name="d" /> that contains a number of fractional digits equal to <paramref name="decimals" />.</span></span> <span data-ttu-id="b1802-771"><paramref name="d" /> の小数部の桁数が <paramref name="decimals" /> よりも少ない場合、<paramref name="d" /> がそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-771">If <paramref name="d" /> has fewer fractional digits than <paramref name="decimals" />, <paramref name="d" /> is returned unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b1802-772">例と包括的な使用状況についての他のオーバー ロードは、`Round`メソッドを参照してください、<xref:System.Math.Round%2A>リファレンス ページ。</span><span class="sxs-lookup"><span data-stu-id="b1802-772">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1802-773"><paramref name="decimals" /> が 0 未満か、28 を超えています。</span><span class="sxs-lookup"><span data-stu-id="b1802-773"><paramref name="decimals" /> is less than 0 or greater than 28.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b1802-774"><paramref name="mode" /> が有効な <see cref="T:System.MidpointRounding" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="b1802-774"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="b1802-775">結果が <see cref="T:System.Decimal" /> の範囲外です。</span><span class="sxs-lookup"><span data-stu-id="b1802-775">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, int digits, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, int32 digits, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, digits As Integer, mode As MidpointRounding) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, int digits, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="digits" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-776">丸め対象の倍精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="b1802-776">A double-precision floating-point number to be rounded.</span></span></param>
        <param name="digits"><span data-ttu-id="b1802-777">戻り値の小数部の桁数。</span><span class="sxs-lookup"><span data-stu-id="b1802-777">The number of fractional digits in the return value.</span></span></param>
        <param name="mode"><span data-ttu-id="b1802-778"><c>value</c> が 2 つの数値の中間にある場合に丸める方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="b1802-778">Specification for how to round <c>value</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="b1802-779">倍精度浮動小数点値を指定した小数部の桁数に丸めます。</span><span class="sxs-lookup"><span data-stu-id="b1802-779">Rounds a double-precision floating-point value to a specified number of fractional digits.</span></span> <span data-ttu-id="b1802-780">値が 2 つの数値の中間にある場合にその値を丸める方法をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="b1802-780">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="b1802-781"><paramref name="digits" /> に等しい小数部の桁数を格納する <paramref name="value" /> に最も近い数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-781">The number nearest to <paramref name="value" /> that has a number of fractional digits equal to <paramref name="digits" />.</span></span> <span data-ttu-id="b1802-782"><paramref name="value" /> の小数部の桁数が <paramref name="digits" /> よりも少ない場合、<paramref name="value" /> がそのまま返されます。</span><span class="sxs-lookup"><span data-stu-id="b1802-782">If <paramref name="value" /> has fewer fractional digits than <paramref name="digits" />, <paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b1802-783">例と包括的な使用状況についての他のオーバー ロードは、`Round`メソッドを参照してください、<xref:System.Math.Round%2A>リファレンス ページ。</span><span class="sxs-lookup"><span data-stu-id="b1802-783">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b1802-784"><paramref name="digits" /> が 0 より小さいか、15 を超えています。</span><span class="sxs-lookup"><span data-stu-id="b1802-784"><paramref name="digits" /> is less than 0 or greater than 15.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b1802-785"><paramref name="mode" /> が有効な <see cref="T:System.MidpointRounding" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="b1802-785"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="b1802-786">単精度浮動小数点数としての 10 進数の値を表すまたは場合によっては、浮動小数点値に対する算術演算を実行することができますの失われたのため、<see cref="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" />メソッドが指定された中間値を丸めるされない可能性がありますによって、<paramref name="mode" />パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b1802-786">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" /> method may not appear to round midpoint values as specified by the <paramref name="mode" /> parameter.</span></span> <span data-ttu-id="b1802-787">これにより、2.135 は 2.14 ではなく 2.13 に丸められますここで、次の例を示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-787">This is illustrated in the following example, where 2.135 is rounded to 2.13 instead of 2.14.</span></span> <span data-ttu-id="b1802-788">これは、内部的には、メソッドは、乗算<paramref name="value" />10<sup>桁</sup>、し、乗算操作は、有効桁数の損失からここでは低下します。</span><span class="sxs-lookup"><span data-stu-id="b1802-788">This occurs because internally the method multiplies <paramref name="value" /> by 10<sup>digits</sup>, and the multiplication operation in this case suffers from a loss of precision.</span></span>  
  
 [!code-csharp[System.Math.Round#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round4.cs#3)]
 [!code-vb[System.Math.Round#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round4.vb#3)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Sign">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1802-789">数の符号を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-789">Returns an integer that indicates the sign of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-790">符号付きの 10 進数。</span><span class="sxs-lookup"><span data-stu-id="b1802-790">A signed decimal number.</span></span></param>
        <summary><span data-ttu-id="b1802-791">10 進数の符号を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-791">Returns an integer that indicates the sign of a decimal number.</span></span></summary>
        <returns><span data-ttu-id="b1802-792"><paramref name="value" /> の符号を示す数値 (次の表を参照)。</span><span class="sxs-lookup"><span data-stu-id="b1802-792">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="b1802-793"><list type="table"><listheader><term> 戻り値</span><span class="sxs-lookup"><span data-stu-id="b1802-793"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="b1802-794"></term><description> 意味</span><span class="sxs-lookup"><span data-stu-id="b1802-794"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="b1802-795"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="b1802-795"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="b1802-796"></term><description><paramref name="value" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1802-796"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="b1802-797"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="b1802-797"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="b1802-798"></term><description><paramref name="value" /> が 0 に等しい値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-798"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="b1802-799"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="b1802-799"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="b1802-800"></term><description><paramref name="value" /> が 0 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-800"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-801">次の例で使用する方法、<xref:System.Math.Sign%28System.Decimal%29>の符号を判断するメソッド、<xref:System.Decimal>値し、それをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-801">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Decimal%29> method to determine the sign of a <xref:System.Decimal> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-802">符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-802">A signed number.</span></span></param>
        <summary><span data-ttu-id="b1802-803">倍精度浮動小数点数の符号を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-803">Returns an integer that indicates the sign of a double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="b1802-804"><paramref name="value" /> の符号を示す数値 (次の表を参照)。</span><span class="sxs-lookup"><span data-stu-id="b1802-804">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="b1802-805"><list type="table"><listheader><term> 戻り値</span><span class="sxs-lookup"><span data-stu-id="b1802-805"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="b1802-806"></term><description> 意味</span><span class="sxs-lookup"><span data-stu-id="b1802-806"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="b1802-807"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="b1802-807"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="b1802-808"></term><description><paramref name="value" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1802-808"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="b1802-809"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="b1802-809"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="b1802-810"></term><description><paramref name="value" /> が 0 に等しい値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-810"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="b1802-811"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="b1802-811"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="b1802-812"></term><description><paramref name="value" /> が 0 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-812"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-813">次の例で使用する方法、<xref:System.Math.Sign%28System.Double%29>の符号を判断するメソッド、<xref:System.Double>値し、それをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-813">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Double%29> method to determine the sign of a <xref:System.Double> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArithmeticException">
          <span data-ttu-id="b1802-814"><paramref name="value" /> と <see cref="F:System.Double.NaN" /> が等価です。</span><span class="sxs-lookup"><span data-stu-id="b1802-814"><paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-815">符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-815">A signed number.</span></span></param>
        <summary><span data-ttu-id="b1802-816">16 ビット符号付き整数の符号を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-816">Returns an integer that indicates the sign of a 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="b1802-817"><paramref name="value" /> の符号を示す数値 (次の表を参照)。</span><span class="sxs-lookup"><span data-stu-id="b1802-817">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="b1802-818"><list type="table"><listheader><term> 戻り値</span><span class="sxs-lookup"><span data-stu-id="b1802-818"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="b1802-819"></term><description> 意味</span><span class="sxs-lookup"><span data-stu-id="b1802-819"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="b1802-820"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="b1802-820"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="b1802-821"></term><description><paramref name="value" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1802-821"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="b1802-822"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="b1802-822"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="b1802-823"></term><description><paramref name="value" /> が 0 に等しい値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-823"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="b1802-824"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="b1802-824"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="b1802-825"></term><description><paramref name="value" /> が 0 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-825"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-826">次の例で使用する方法、<xref:System.Math.Sign%28System.Int16%29>の符号を判断するメソッド、<xref:System.Int16>値し、それをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-826">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int16%29> method to determine the sign of an <xref:System.Int16> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-827">符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-827">A signed number.</span></span></param>
        <summary><span data-ttu-id="b1802-828">32 ビット符号付き整数の符号を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-828">Returns an integer that indicates the sign of a 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="b1802-829"><paramref name="value" /> の符号を示す数値 (次の表を参照)。</span><span class="sxs-lookup"><span data-stu-id="b1802-829">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="b1802-830"><list type="table"><listheader><term> 戻り値</span><span class="sxs-lookup"><span data-stu-id="b1802-830"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="b1802-831"></term><description> 意味</span><span class="sxs-lookup"><span data-stu-id="b1802-831"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="b1802-832"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="b1802-832"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="b1802-833"></term><description><paramref name="value" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1802-833"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="b1802-834"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="b1802-834"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="b1802-835"></term><description><paramref name="value" /> が 0 に等しい値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-835"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="b1802-836"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="b1802-836"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="b1802-837"></term><description><paramref name="value" /> が 0 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-837"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-838">次の例で使用する方法、<xref:System.Math.Sign%28System.Int32%29>の符号を判断するメソッド、<xref:System.Int32>値し、それをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-838">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int32%29> method to determine the sign of an <xref:System.Int32> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-839">符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-839">A signed number.</span></span></param>
        <summary><span data-ttu-id="b1802-840">64 ビット符号付き整数の符号を示す正数を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-840">Returns an integer that indicates the sign of a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="b1802-841"><paramref name="value" /> の符号を示す数値 (次の表を参照)。</span><span class="sxs-lookup"><span data-stu-id="b1802-841">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="b1802-842"><list type="table"><listheader><term> 戻り値</span><span class="sxs-lookup"><span data-stu-id="b1802-842"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="b1802-843"></term><description> 意味</span><span class="sxs-lookup"><span data-stu-id="b1802-843"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="b1802-844"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="b1802-844"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="b1802-845"></term><description><paramref name="value" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1802-845"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="b1802-846"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="b1802-846"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="b1802-847"></term><description><paramref name="value" /> が 0 に等しい値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-847"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="b1802-848"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="b1802-848"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="b1802-849"></term><description><paramref name="value" /> が 0 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-849"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-850">次の例で使用する方法、<xref:System.Math.Sign%28System.Int64%29>の符号を判断するメソッド、<xref:System.Int64>値し、それをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-850">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int64%29> method to determine the sign of an <xref:System.Int64> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-851">符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-851">A signed number.</span></span></param>
        <summary><span data-ttu-id="b1802-852">8 ビット符号付き整数の符号を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-852">Returns an integer that indicates the sign of an 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="b1802-853"><paramref name="value" /> の符号を示す数値 (次の表を参照)。</span><span class="sxs-lookup"><span data-stu-id="b1802-853">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="b1802-854"><list type="table"><listheader><term> 戻り値</span><span class="sxs-lookup"><span data-stu-id="b1802-854"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="b1802-855"></term><description> 意味</span><span class="sxs-lookup"><span data-stu-id="b1802-855"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="b1802-856"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="b1802-856"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="b1802-857"></term><description><paramref name="value" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1802-857"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="b1802-858"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="b1802-858"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="b1802-859"></term><description><paramref name="value" /> が 0 に等しい値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-859"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="b1802-860"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="b1802-860"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="b1802-861"></term><description><paramref name="value" /> が 0 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-861"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-862">次の例で使用する方法、<xref:System.Math.Sign%28System.SByte%29>の符号を判断するメソッド、<xref:System.SByte>値し、それをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-862">The following example demonstrates how to use the <xref:System.Math.Sign%28System.SByte%29> method to determine the sign of an <xref:System.SByte> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-863">符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-863">A signed number.</span></span></param>
        <summary><span data-ttu-id="b1802-864">単精度浮動小数点数の符号を示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-864">Returns an integer that indicates the sign of a single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="b1802-865"><paramref name="value" /> の符号を示す数値 (次の表を参照)。</span><span class="sxs-lookup"><span data-stu-id="b1802-865">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="b1802-866"><list type="table"><listheader><term> 戻り値</span><span class="sxs-lookup"><span data-stu-id="b1802-866"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="b1802-867"></term><description> 意味</span><span class="sxs-lookup"><span data-stu-id="b1802-867"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="b1802-868"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="b1802-868"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="b1802-869"></term><description><paramref name="value" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="b1802-869"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="b1802-870"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="b1802-870"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="b1802-871"></term><description><paramref name="value" /> が 0 に等しい値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-871"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="b1802-872"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="b1802-872"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="b1802-873"></term><description><paramref name="value" /> が 0 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="b1802-873"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-874">次の例で使用する方法、<xref:System.Math.Sign%28System.Single%29>の符号を判断するメソッド、<xref:System.Single>値し、それをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-874">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Single%29> method to determine the sign of a <xref:System.Single> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArithmeticException">
          <span data-ttu-id="b1802-875"><paramref name="value" /> と <see cref="F:System.Single.NaN" /> が等価です。</span><span class="sxs-lookup"><span data-stu-id="b1802-875"><paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public static double Sin (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sin(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sin(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="b1802-876">ラジアンで表した角度。</span><span class="sxs-lookup"><span data-stu-id="b1802-876">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="b1802-877">指定された角度のサインを返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-877">Returns the sine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="b1802-878"><paramref name="a" /> のサイン。</span><span class="sxs-lookup"><span data-stu-id="b1802-878">The sine of <paramref name="a" />.</span></span> <span data-ttu-id="b1802-879"><paramref name="a" /> が <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> のいずれかに等しい場合、このメソッドは <see cref="F:System.Double.NaN" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-879">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-880">角度を`a`ラジアンである必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1802-880">The angle, `a`, must be in radians.</span></span> <span data-ttu-id="b1802-881">乗算 <xref:System.Math.PI?displayProperty=nameWithType> /180 度をラジアンに変換します。</span><span class="sxs-lookup"><span data-stu-id="b1802-881">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 <span data-ttu-id="b1802-882">使用できる値の`a`約-9223372036854775295 約 9223372036854775295 の範囲です。</span><span class="sxs-lookup"><span data-stu-id="b1802-882">Acceptable values of `a` range from approximately -9223372036854775295 to approximately 9223372036854775295.</span></span> <span data-ttu-id="b1802-883">この範囲外の値を<xref:System.Math.Sin%2A>メソッドを返します。`a`例外をスローするのではなく変更されません。</span><span class="sxs-lookup"><span data-stu-id="b1802-883">For values outside of this range, the <xref:System.Math.Sin%2A> method returns `a` unchanged rather than throwing an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-884">次の例では<xref:System.Math.Sin%2A>を選択した角度の三角関数の特定の id を評価します。</span><span class="sxs-lookup"><span data-stu-id="b1802-884">The following example uses <xref:System.Math.Sin%2A> to evaluate certain trigonometric identities for selected angles.</span></span>  
  
 [!code-cpp[System.Math.SinCos#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinCos/CPP/sincos.cpp#1)]
 [!code-csharp[System.Math.SinCos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinCos/CS/sincos.cs#1)]
 [!code-vb[System.Math.SinCos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinCos/VB/sincos.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public static double Sinh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sinh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sinh(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-885">ラジアンで表した角度。</span><span class="sxs-lookup"><span data-stu-id="b1802-885">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="b1802-886">指定された角度のハイパーボリック サインを返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-886">Returns the hyperbolic sine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="b1802-887"><paramref name="value" /> のハイパーボリック サイン。</span><span class="sxs-lookup"><span data-stu-id="b1802-887">The hyperbolic sine of <paramref name="value" />.</span></span> <span data-ttu-id="b1802-888"><paramref name="value" /> が <see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" />、または <see cref="F:System.Double.NaN" /> のいずれかに等しい場合、このメソッドは <paramref name="value" /> に等しい <see cref="T:System.Double" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-888">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns a <see cref="T:System.Double" /> equal to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-889">角度を`value`ラジアンである必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1802-889">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="b1802-890">乗算 <xref:System.Math.PI?displayProperty=nameWithType> /180 度をラジアンに変換します。</span><span class="sxs-lookup"><span data-stu-id="b1802-890">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-891">次の例では<xref:System.Math.Sinh%2A>を選択した値の特定の双曲線 id を評価します。</span><span class="sxs-lookup"><span data-stu-id="b1802-891">The following example uses <xref:System.Math.Sinh%2A> to evaluate certain hyperbolic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.SinhCosh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinhCosh/CPP/sinhcosh.cpp#1)]
 [!code-csharp[System.Math.SinhCosh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinhCosh/CS/sinhcosh.cs#1)]
 [!code-vb[System.Math.SinhCosh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinhCosh/VB/sinhcosh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static double Sqrt (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sqrt(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sqrt(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sqrt(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-892">平方根を求める対象の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-892">The number whose square root is to be found.</span></span></param>
        <summary><span data-ttu-id="b1802-893">指定された数値の平方根を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-893">Returns the square root of a specified number.</span></span></summary>
        <returns><span data-ttu-id="b1802-894">次の表に示した値のいずれか</span><span class="sxs-lookup"><span data-stu-id="b1802-894">One of the values in the following table.</span></span>  
  
 <span data-ttu-id="b1802-895"><list type="table"><listheader><term><paramref name="d" /> パラメーター</span><span class="sxs-lookup"><span data-stu-id="b1802-895"><list type="table"><listheader><term><paramref name="d" /> parameter</span></span>  
  
 <span data-ttu-id="b1802-896"></term><description> 戻り値</span><span class="sxs-lookup"><span data-stu-id="b1802-896"></term><description> Return value</span></span>  
  
 <span data-ttu-id="b1802-897"></description></listheader><item><term> 0 または正</span><span class="sxs-lookup"><span data-stu-id="b1802-897"></description></listheader><item><term> Zero or positive</span></span>  
  
 <span data-ttu-id="b1802-898"></term><description> <paramref name="d" /> の正の平方根。</span><span class="sxs-lookup"><span data-stu-id="b1802-898"></term><description> The positive square root of <paramref name="d" />.</span></span>  
  
 <span data-ttu-id="b1802-899"></description></item><item><term> 負</span><span class="sxs-lookup"><span data-stu-id="b1802-899"></description></item><item><term> Negative</span></span>  
  
 <span data-ttu-id="b1802-900"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> 等しい <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> 等しい <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span><span class="sxs-lookup"><span data-stu-id="b1802-900"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equals <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equals <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b1802-901">正方形の領域の平方根では、任意の正方形の辺の長さを表します。</span><span class="sxs-lookup"><span data-stu-id="b1802-901">The square root of the area of a square represents the length of any side of the square.</span></span> <span data-ttu-id="b1802-902">次の例では、米国の都市一部の領域を表示し、四角形で表示された場合は、各都市のサイズのような印象を提供します。</span><span class="sxs-lookup"><span data-stu-id="b1802-902">The following example displays the area of some cities in the United States and gives an impression of each city's size if it were represented by a square.</span></span>  
  
 [!code-csharp[System.Math.Sqrt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.sqrt/cs/sqrt1.cs#1)]
 [!code-vb[System.Math.Sqrt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.sqrt/vb/sqrt1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Pow(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public static double Tan (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tan(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Tan(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Tan(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="b1802-903">ラジアンで表した角度。</span><span class="sxs-lookup"><span data-stu-id="b1802-903">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="b1802-904">指定された角度のタンジェントを返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-904">Returns the tangent of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="b1802-905"><paramref name="a" /> のタンジェント。</span><span class="sxs-lookup"><span data-stu-id="b1802-905">The tangent of <paramref name="a" />.</span></span> <span data-ttu-id="b1802-906"><paramref name="a" /> が <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> のいずれかに等しい場合、このメソッドは <see cref="F:System.Double.NaN" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-906">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-907">角度を`a`ラジアンである必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1802-907">The angle, `a`, must be in radians.</span></span> <span data-ttu-id="b1802-908">乗算 <xref:System.Math.PI?displayProperty=nameWithType> /180 度をラジアンに変換します。</span><span class="sxs-lookup"><span data-stu-id="b1802-908">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-909">次の例では、指定した角度のタンジェントを計算し、それをコンソールに表示する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b1802-909">The following example demonstrates how to calculate the tangent of an angle and display it to the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public static double Tanh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tanh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Tanh(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b1802-910">ラジアンで表した角度。</span><span class="sxs-lookup"><span data-stu-id="b1802-910">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="b1802-911">指定された角度のハイパーボリック タンジェントを返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-911">Returns the hyperbolic tangent of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="b1802-912"><paramref name="value" /> のハイパーボリック タンジェント。</span><span class="sxs-lookup"><span data-stu-id="b1802-912">The hyperbolic tangent of <paramref name="value" />.</span></span> <span data-ttu-id="b1802-913"><paramref name="value" /> が <see cref="F:System.Double.NegativeInfinity" /> に等しい場合、このメソッドは -1 を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-913">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, this method returns -1.</span></span> <span data-ttu-id="b1802-914">値が <see cref="F:System.Double.PositiveInfinity" /> に等しい場合、このメソッドは 1 を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-914">If value is equal to <see cref="F:System.Double.PositiveInfinity" />, this method returns 1.</span></span> <span data-ttu-id="b1802-915"><paramref name="value" /> が <see cref="F:System.Double.NaN" /> に等しい場合、このメソッドは <see cref="F:System.Double.NaN" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b1802-915">If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-916">角度を`value`ラジアンである必要があります。</span><span class="sxs-lookup"><span data-stu-id="b1802-916">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="b1802-917">乗算 <xref:System.Math.PI?displayProperty=nameWithType> /180 度をラジアンに変換します。</span><span class="sxs-lookup"><span data-stu-id="b1802-917">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-918">次の例では<xref:System.Math.Tanh%2A>を特定の双曲線正接 id の選択した値を評価します。</span><span class="sxs-lookup"><span data-stu-id="b1802-918">The following example uses <xref:System.Math.Tanh%2A> to evaluate certain hyperbolic tangent identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Tanh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Tanh/CPP/tanh.cpp#1)]
 [!code-csharp[System.Math.Tanh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Tanh/CS/tanh.cs#1)]
 [!code-vb[System.Math.Tanh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Tanh/VB/tanh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Truncate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b1802-919">数値の整数部を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1802-919">Calculates the integral part of a number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-920">0 方向に最も近い整数に丸められます。</span><span class="sxs-lookup"><span data-stu-id="b1802-920">The number is rounded to the nearest integer towards zero.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static decimal Truncate (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Truncate(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Truncate(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Truncate(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-921">切り捨て対象の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-921">A number to truncate.</span></span></param>
        <summary><span data-ttu-id="b1802-922">指定した 10 進数の整数部を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1802-922">Calculates the integral part of a specified decimal number.</span></span></summary>
        <returns><span data-ttu-id="b1802-923"><paramref name="d" /> の整数部。つまり、小数部の桁を破棄した後に残る数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-923">The integral part of <paramref name="d" />; that is, the number that remains after any fractional digits have been discarded.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-924"><xref:System.Math.Truncate%2A> 丸めます`d`0 方向に最も近い整数にします。</span><span class="sxs-lookup"><span data-stu-id="b1802-924"><xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-925">次の例では、<xref:System.Math.Truncate%28System.Decimal%29>を正および負の両方を切り捨てるメソッド<xref:System.Decimal>値。</span><span class="sxs-lookup"><span data-stu-id="b1802-925">The following example calls the <xref:System.Math.Truncate%28System.Decimal%29> method to truncate both a positive and a negative <xref:System.Decimal> value.</span></span>  
  
 [!code-csharp[System.Math.Truncate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Truncate/cs/Truncate1.cs#2)]
 [!code-vb[System.Math.Truncate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Truncate/vb/Truncate1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static double Truncate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Truncate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Truncate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Truncate(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b1802-926">切り捨て対象の数値。</span><span class="sxs-lookup"><span data-stu-id="b1802-926">A number to truncate.</span></span></param>
        <summary><span data-ttu-id="b1802-927">指定した倍精度浮動小数点数の整数部を計算します。</span><span class="sxs-lookup"><span data-stu-id="b1802-927">Calculates the integral part of a specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="b1802-928"><paramref name="d" /> の整数部。つまり、小数部の桁を破棄した後に残る数値 (次の表にリストされている値のいずれか)。</span><span class="sxs-lookup"><span data-stu-id="b1802-928">The integral part of <paramref name="d" />; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table.</span></span>  
  
 <span data-ttu-id="b1802-929"><list type="table"><listheader><term><paramref name="d" /></term><description> 戻り値</span><span class="sxs-lookup"><span data-stu-id="b1802-929"><list type="table"><listheader><term><paramref name="d" /></term><description> Return value</span></span>  
  
 </description></listheader><item><term><see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term><see cref="F:System.Double.NegativeInfinity" /></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term><see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1802-930"><xref:System.Math.Truncate%2A> 丸めます`d`0 方向に最も近い整数にします。</span><span class="sxs-lookup"><span data-stu-id="b1802-930"><xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b1802-931">次の例では、<xref:System.Math.Truncate%28System.Double%29>を正および負の両方を切り捨てるメソッド<xref:System.Double>値。</span><span class="sxs-lookup"><span data-stu-id="b1802-931">The following example calls the <xref:System.Math.Truncate%28System.Double%29> method to truncate both a positive and a negative <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Math.Truncate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Truncate/cs/Truncate1.cs#1)]
 [!code-vb[System.Math.Truncate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Truncate/vb/Truncate1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
      </Docs>
    </Member>
  </Members>
</Type>