<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Func`1.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac532bfd87c717460eeca143861ae42f3f64042f133.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32bfd87c717460eeca143861ae42f3f64042f133</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The type of the return value of the method that this delegate encapsulates.</source>
          <target state="translated">このデリゲートによってカプセル化されるメソッドの戻り値の型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Func`1">
          <source>Encapsulates a method that has no parameters and returns a value of the type specified by the <ph id="ph1">&lt;typeparamref name="TResult" /&gt;</ph> parameter.</source>
          <target state="translated">パラメーターを受け取らずに、<ph id="ph1">&lt;typeparamref name="TResult" /&gt;</ph> パラメーターに指定された型の値を返すメソッドをカプセル化します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Func`1">
          <source>The return value of the method that this delegate encapsulates.</source>
          <target state="translated">このデリゲートによってカプセル化されるメソッドの戻り値。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</source>
          <target state="translated">このデリゲートを使用して、明示的にカスタム デリゲートを宣言しなくても、パラメーターとして渡すことができるメソッドを表すことができます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The encapsulated method must correspond to the method signature that is defined by this delegate.</source>
          <target state="translated">カプセル化されるメソッドは、このデリゲートによって定義されているメソッドのシグネチャに対応する必要があります。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>This means that the encapsulated method must have no parameters and must return a value.</source>
          <target state="translated">つまり、カプセル化されるメソッドはパラメーターが必要ないと、値を返す必要があります。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>To reference a method that has no parameters and returns <ph id="ph1">`void`</ph> (or in Visual Basic, that is declared as a <ph id="ph2">`Sub`</ph> rather than as a <ph id="ph3">`Function`</ph>), use the <ph id="ph4">&lt;xref:System.Action&gt;</ph> delegate instead.</source>
          <target state="translated">パラメーターを持たないして返すメソッドを参照する<ph id="ph1">`void`</ph>(として宣言されている Visual basic、または、<ph id="ph2">`Sub`</ph>ではなく同様、 <ph id="ph3">`Function`</ph>)、使用して、<ph id="ph4">&lt;xref:System.Action&gt;</ph>代わりに委任します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>When you use the <ph id="ph1">&lt;xref:System.Func%601&gt;</ph> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method.</source>
          <target state="translated">使用すると、<ph id="ph1">&lt;xref:System.Func%601&gt;</ph>デリゲートがありませんを明示的にパラメーターなしのメソッドをカプセル化するデリゲートを定義します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>For example, the following code explicitly declares a delegate named <ph id="ph1">`WriteMethod`</ph> and assigns a reference to the <ph id="ph2">`OutputTarget.SendToFile`</ph> instance method to its delegate instance.</source>
          <target state="translated">たとえば、次のコードを明示的に宣言という名前のデリゲート<ph id="ph1">`WriteMethod`</ph>への参照を割り当てると、<ph id="ph2">`OutputTarget.SendToFile`</ph>インスタンス メソッドのデリゲートのインスタンスにします。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The following example simplifies this code by instantiating the <ph id="ph1">&lt;xref:System.Func%601&gt;</ph> delegate instead of explicitly defining a new delegate and assigning a named method to it.</source>
          <target state="translated">次の例は、インスタンス化してこのコードを簡略化、<ph id="ph1">&lt;xref:System.Func%601&gt;</ph>明示的に新しいデリゲートを定義して、名前付きメソッドをそこに割り当てるのではなくデリゲート。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>You can use the <ph id="ph1">&lt;xref:System.Func%601&gt;</ph> delegate with anonymous methods in C#, as the following example illustrates.</source>
          <target state="translated">使用することができます、<ph id="ph1">&lt;xref:System.Func%601&gt;</ph>次の例に示すように、C# の場合は、匿名メソッドを持つデリゲートします。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>(For an introduction to anonymous methods, see <bpt id="p1">[</bpt>Anonymous Methods<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.)</source>
          <target state="translated">(匿名メソッドの概要については、次を参照してください<bpt id="p1">[</bpt>匿名メソッド<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>。)。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>You can also assign a lambda expression to a <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate, as the following example illustrates.</source>
          <target state="translated">ラムダ式を割り当てることができます、<ph id="ph1">&lt;xref:System.Func%602&gt;</ph>デリゲート、次の例に示すようにします。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>(For an introduction to lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept> and <bpt id="p2">[</bpt>Lambda Expressions<ept id="p2">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.)</source>
          <target state="translated">(ラムダ式の概要については、次を参照してください<bpt id="p1">[</bpt>ラムダ式<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept>と<bpt id="p2">[</bpt>ラムダ式<ept id="p2">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>。)。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The underlying type of a lambda expression is one of the generic <ph id="ph1">`Func`</ph> delegates.</source>
          <target state="translated">ラムダ式の基になる型がジェネリックのいずれかの<ph id="ph1">`Func`</ph>デリゲート。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</source>
          <target state="translated">これによって、デリゲートを明示的に割り当てることがなく、ラムダ式をパラメーターとして渡します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>In particular, because many methods of types in the <ph id="ph1">&lt;xref:System.Linq&gt;</ph> namespace have <ph id="ph2">`Func`</ph> parameters, you can pass these methods a lambda expression without explicitly instantiating a <ph id="ph3">`Func`</ph> delegate.</source>
          <target state="translated">具体的には、ため内の型の多くのメソッド、<ph id="ph1">&lt;xref:System.Linq&gt;</ph>名前空間が<ph id="ph2">`Func`</ph>パラメーターを渡すことができますこれらのメソッド、ラムダ式に明示的にインスタンス化しなくても、<ph id="ph3">`Func`</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <ph id="ph1">&lt;xref:System.Func%601&gt;</ph> delegate.</source>
          <target state="translated">結果が実際に必要な場合にのみ実行する高負荷な計算がある場合は、高価な関数を割り当てることができます、<ph id="ph1">&lt;xref:System.Func%601&gt;</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The execution of the function can then be delayed until a property that accesses the value is used in an expression.</source>
          <target state="translated">値にアクセスするプロパティが式の中で使用されるまで、関数の実行を延期しことができます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The example in the next section demonstrates how to do this.</source>
          <target state="translated">次のセクションの例では、これを行う方法を示します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The following example demonstrates how to use a delegate that takes no parameters.</source>
          <target state="translated">次の例では、パラメーターをとらないデリゲートを使用する方法を示します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>This code creates a generic class named <ph id="ph1">`LazyValue`</ph> that has a field of type <ph id="ph2">&lt;xref:System.Func%601&gt;</ph>.</source>
          <target state="translated">このコードは、という名前のジェネリック クラスを作成します。<ph id="ph1">`LazyValue`</ph>型のフィールドを持つ<ph id="ph2">&lt;xref:System.Func%601&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>This delegate field can store a reference to any function that returns a value of the type that corresponds to the type parameter of the <ph id="ph1">`LazyValue`</ph> object.</source>
          <target state="translated">このデリゲート フィールドは、任意の型パラメーターに対応する型の値を返す関数への参照を格納できます、<ph id="ph1">`LazyValue`</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The <ph id="ph1">`LazyValue`</ph> type also has a <ph id="ph2">`Value`</ph> property that executes the function (if it has not already been executed) and returns the resulting value.</source>
          <target state="translated"><ph id="ph1">`LazyValue`</ph>型自体には、<ph id="ph2">`Value`</ph>プロパティです (これが既に実行されていない) 場合は、関数を実行し、結果の値を返します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The example creates two methods and instantiates two <ph id="ph1">`LazyValue`</ph> objects with lambda expressions that call these methods.</source>
          <target state="translated">この例は、2 つのメソッドを作成し、2 つのインスタンスを作成<ph id="ph1">`LazyValue`</ph>をこれらのメソッドを呼び出すラムダ式を持つオブジェクト。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The lambda expressions do not take parameters because they just need to call a method.</source>
          <target state="translated">ラムダ式は、メソッドを呼び出すだけなのでパラメーターになりません。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>As the output shows, the two methods are executed only when the value of each <ph id="ph1">`LazyValue`</ph> object is retrieved.</source>
          <target state="translated">出力を示しています、2 つのメソッドが実行される場合にのみの各値<ph id="ph1">`LazyValue`</ph>オブジェクトを取得します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>