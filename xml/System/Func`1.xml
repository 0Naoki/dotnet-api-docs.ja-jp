<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0599c71b76782f0ec10ee69ac1d90dd08f0035e5" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37727784" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">
      <span data-ttu-id="67871-101">このデリゲートによってカプセル化されるメソッドの戻り値の型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="67871-101">The type of the return value of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="67871-102">パラメーターを受け取らずに、<typeparamref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="67871-102">Encapsulates a method that has no parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="67871-103">このデリゲートによってカプセル化されるメソッドの戻り値。</span>
      <span class="sxs-lookup">
        <span data-stu-id="67871-103">The return value of the method that this delegate encapsulates.</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67871-104">このデリゲートを使用して、カスタム デリゲートを明示的に宣言することがなく、パラメーターとして渡すことができるメソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="67871-104">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="67871-105">カプセル化されるメソッドは、このデリゲートで定義されているメソッド シグネチャに対応する必要があります。</span><span class="sxs-lookup"><span data-stu-id="67871-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="67871-106">つまり、カプセル化されるメソッドはパラメーターが必要ないと、値を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="67871-106">This means that the encapsulated method must have no parameters and must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="67871-107">パラメーターを持たないを返すメソッドを参照する`void`(として宣言されている Visual basic、または、`Sub`ではなくとして、 `Function`)、使用、<xref:System.Action>代わりにデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="67871-107">To reference a method that has no parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the <xref:System.Action> delegate instead.</span></span>  
  
 <span data-ttu-id="67871-108">使用すると、<xref:System.Func%601>デリゲートがありませんをパラメーターなしのメソッドをカプセル化するデリゲートを明示的に定義します。</span><span class="sxs-lookup"><span data-stu-id="67871-108">When you use the <xref:System.Func%601> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method.</span></span> <span data-ttu-id="67871-109">たとえば、次のコードで明示的にという名前のデリゲートが宣言`WriteMethod`への参照を割り当てると、`OutputTarget.SendToFile`インスタンス メソッドのデリゲートのインスタンスにします。</span><span class="sxs-lookup"><span data-stu-id="67871-109">For example, the following code explicitly declares a delegate named `WriteMethod` and assigns a reference to the `OutputTarget.SendToFile` instance method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="67871-110">次の例では、インスタンス化してこのコードを簡略化、<xref:System.Func%601>明示的に新しいデリゲートを定義して、名前付きメソッドをそこに割り当てる代わりにデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="67871-110">The following example simplifies this code by instantiating the <xref:System.Func%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 <span data-ttu-id="67871-111">使用することができます、<xref:System.Func%601>次の例に示すように、c# の場合は、匿名メソッドを持つデリゲートします。</span><span class="sxs-lookup"><span data-stu-id="67871-111">You can use the <xref:System.Func%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="67871-112">(匿名メソッドの概要については、次を参照してください[匿名メソッド](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)。</span><span class="sxs-lookup"><span data-stu-id="67871-112">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="67871-113">ラムダ式を割り当てることもできます、<xref:System.Func%602>デリゲート、次の例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="67871-113">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="67871-114">(ラムダ式の概要については、次を参照してください[ラムダ式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)と[ラムダ式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)。</span><span class="sxs-lookup"><span data-stu-id="67871-114">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="67871-115">ラムダ式の基になる型がジェネリックのいずれかの`Func`デリゲート。</span><span class="sxs-lookup"><span data-stu-id="67871-115">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="67871-116">これによりを明示的にデリゲートに割り当てることがなく、パラメーターとしてラムダ式を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="67871-116">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="67871-117">具体的には、ため、型の多くのメソッド、<xref:System.Linq>名前空間が`Func`パラメーターを渡すことができますこれらのメソッド、ラムダ式に明示的にインスタンス化せず、`Func`を委任します。</span><span class="sxs-lookup"><span data-stu-id="67871-117">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
 <span data-ttu-id="67871-118">結果が実際に必要な場合にのみ実行するコストの計算がある場合は、高価な関数を割り当てることができます、<xref:System.Func%601>を委任します。</span><span class="sxs-lookup"><span data-stu-id="67871-118">If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref:System.Func%601> delegate.</span></span> <span data-ttu-id="67871-119">値にアクセスするプロパティが式で使用されるまで、関数の実行を延期しできます。</span><span class="sxs-lookup"><span data-stu-id="67871-119">The execution of the function can then be delayed until a property that accesses the value is used in an expression.</span></span> <span data-ttu-id="67871-120">次のセクションの例では、これを行う方法を示します。</span><span class="sxs-lookup"><span data-stu-id="67871-120">The example in the next section demonstrates how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="67871-121">次の例では、パラメーターをとらないデリゲートを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="67871-121">The following example demonstrates how to use a delegate that takes no parameters.</span></span> <span data-ttu-id="67871-122">このコードは、という名前のジェネリック クラスを作成します。`LazyValue`型のフィールドを持つ<xref:System.Func%601>します。</span><span class="sxs-lookup"><span data-stu-id="67871-122">This code creates a generic class named `LazyValue` that has a field of type <xref:System.Func%601>.</span></span> <span data-ttu-id="67871-123">このデリゲート フィールドの型パラメーターに対応する型の値を返す任意の関数への参照を格納できます、`LazyValue`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67871-123">This delegate field can store a reference to any function that returns a value of the type that corresponds to the type parameter of the `LazyValue` object.</span></span> <span data-ttu-id="67871-124">`LazyValue`型自体には、`Value`プロパティ (これが既に実行されていない場合)、関数を実行する結果の値を返します。</span><span class="sxs-lookup"><span data-stu-id="67871-124">The `LazyValue` type also has a `Value` property that executes the function (if it has not already been executed) and returns the resulting value.</span></span>  
  
 <span data-ttu-id="67871-125">この例は、2 つのメソッドを作成し、2 つのインスタンスを作成`LazyValue`をこれらのメソッドを呼び出すラムダ式を持つオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="67871-125">The example creates two methods and instantiates two `LazyValue` objects with lambda expressions that call these methods.</span></span> <span data-ttu-id="67871-126">ラムダ式は、メソッドを呼び出すだけなのでパラメーターになりません。</span><span class="sxs-lookup"><span data-stu-id="67871-126">The lambda expressions do not take parameters because they just need to call a method.</span></span> <span data-ttu-id="67871-127">出力を 2 つのメソッドが実行される場合にのみの各値`LazyValue`オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="67871-127">As the output shows, the two methods are executed only when the value of each `LazyValue` object is retrieved.</span></span>  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>