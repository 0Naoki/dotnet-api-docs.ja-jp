<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f2b5c1388338f890bf094d7848dc0b5cda8d4c3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431223" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
    <summary>パラメーターを受け取らずに、<typeparamref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
    <returns>このデリゲートによってカプセル化されるメソッドの戻り値。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このデリゲートを使用して、明示的にカスタム デリゲートを宣言しなくても、パラメーターとして渡すことができるメソッドを表すことができます。 カプセル化されるメソッドは、このデリゲートによって定義されているメソッドのシグネチャに対応する必要があります。 つまり、カプセル化されるメソッドはパラメーターが必要ないと、値を返す必要があります。  
  
> [!NOTE]
>  パラメーターを持たないして返すメソッドを参照する`void`(として宣言されている Visual basic、または、`Sub`ではなく同様、 `Function`)、使用して、<xref:System.Action>代わりに委任します。  
  
 使用すると、<xref:System.Func%601>デリゲートがありませんを明示的にパラメーターなしのメソッドをカプセル化するデリゲートを定義します。 たとえば、次のコードを明示的に宣言という名前のデリゲート`WriteMethod`への参照を割り当てると、`OutputTarget.SendToFile`インスタンス メソッドのデリゲートのインスタンスにします。  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 次の例は、インスタンス化してこのコードを簡略化、<xref:System.Func%601>明示的に新しいデリゲートを定義して、名前付きメソッドをそこに割り当てるのではなくデリゲート。  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 使用することができます、<xref:System.Func%601>次の例に示すように、C# の場合は、匿名メソッドを持つデリゲートします。 (匿名メソッドの概要については、次を参照してください[匿名メソッド](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)。  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 ラムダ式を割り当てることができます、<xref:System.Func%602>デリゲート、次の例に示すようにします。 (ラムダ式の概要については、次を参照してください[ラムダ式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)と[ラムダ式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)。  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 ラムダ式の基になる型がジェネリックのいずれかの`Func`デリゲート。 これによって、デリゲートを明示的に割り当てることがなく、ラムダ式をパラメーターとして渡します。 具体的には、ため内の型の多くのメソッド、<xref:System.Linq>名前空間が`Func`パラメーターを渡すことができますこれらのメソッド、ラムダ式に明示的にインスタンス化しなくても、`Func`を委任します。  
  
 結果が実際に必要な場合にのみ実行する高負荷な計算がある場合は、高価な関数を割り当てることができます、<xref:System.Func%601>を委任します。 値にアクセスするプロパティが式の中で使用されるまで、関数の実行を延期しことができます。 次のセクションの例では、これを行う方法を示します。  
  
   
  
## Examples  
 次の例では、パラメーターをとらないデリゲートを使用する方法を示します。 このコードは、という名前のジェネリック クラスを作成します。`LazyValue`型のフィールドを持つ<xref:System.Func%601>します。 このデリゲート フィールドは、任意の型パラメーターに対応する型の値を返す関数への参照を格納できます、`LazyValue`オブジェクト。 `LazyValue`型自体には、`Value`プロパティです (これが既に実行されていない) 場合は、関数を実行し、結果の値を返します。  
  
 この例は、2 つのメソッドを作成し、2 つのインスタンスを作成`LazyValue`をこれらのメソッドを呼び出すラムダ式を持つオブジェクト。 ラムダ式は、メソッドを呼び出すだけなのでパラメーターになりません。 出力を示しています、2 つのメソッドが実行される場合にのみの各値`LazyValue`オブジェクトを取得します。  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>