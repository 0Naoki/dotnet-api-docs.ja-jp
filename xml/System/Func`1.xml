<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="12c19fab871127dad68688aaa249b48d82668c35" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70724897" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">このデリゲートによってカプセル化されるメソッドの戻り値の型。</typeparam>
    <summary>パラメーターを受け取らずに、<typeparamref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</summary>
    <returns>このデリゲートによってカプセル化されるメソッドの戻り値。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このデリゲートを使用すると、カスタムデリゲートを明示的に宣言しなくてもパラメーターとして渡すことができるメソッドを表すことができます。 カプセル化されたメソッドは、このデリゲートで定義されているメソッドシグネチャに対応している必要があります。 これは、カプセル化されたメソッドにはパラメーターがなく、値を返す必要があることを意味します。  
  
> [!NOTE]
>  パラメーターを持たず`void` 、を返す (または Visual Basic ではなくと`Sub`して`Function`宣言されている) メソッドを参照するに<xref:System.Action>は、代わりにデリゲートを使用します。  
  
 <xref:System.Func%601>デリゲートを使用する場合は、パラメーターなしのメソッドをカプセル化するデリゲートを明示的に定義する必要はありません。 たとえば、次のコードでは、という名前`WriteMethod`のデリゲートを明示的に`OutputTarget.SendToFile`宣言し、インスタンスメソッドへの参照をそのデリゲートインスタンスに割り当てます。  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 次の例では、新しいデリゲートを<xref:System.Func%601>明示的に定義し、名前付きメソッドを割り当てるのではなく、デリゲートをインスタンス化することによって、このコードを簡略化します。  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 次の例に<xref:System.Func%601>示すようにC#、の匿名メソッドでデリゲートを使用できます。 (匿名メソッドの概要については、「[匿名メソッド](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)」を参照してください)。  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 次の例に示すように、ラムダ<xref:System.Func%602>式をデリゲートに割り当てることもできます。 (ラムダ式の概要については、「[ラムダ式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)」と「[ラムダ式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)」を参照してください)。  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 ラムダ式の基になる型は、汎用`Func`デリゲートの1つです。 これにより、ラムダ式をデリゲートに明示的に代入せずに、パラメーターとして渡すことができます。 特に、 <xref:System.Linq>名前空間の型の多くのメソッドに`Func`パラメーターがあるため、デリゲートを`Func`明示的にインスタンス化せずにこれらのメソッドをラムダ式に渡すことができます。  
  
 結果が実際に必要な場合にのみ実行する負荷の高い計算がある場合は、負荷の高い関数を<xref:System.Func%601>デリゲートに割り当てることができます。 その後、値にアクセスするプロパティが式で使用されるまで、関数の実行を遅延させることができます。 次のセクションの例では、これを行う方法を示します。  
  
   
  
## Examples  
 次の例は、パラメーターを受け取らないデリゲートを使用する方法を示しています。 このコードは、型`LazyValue` <xref:System.Func%601>のフィールドを持つという名前のジェネリッククラスを作成します。 このデリゲートフィールドには、 `LazyValue`オブジェクトの型パラメーターに対応する型の値を返す関数への参照を格納できます。 型`LazyValue` に `Value` は、(まだ実行されていない場合は) 関数を実行し、結果の値を返すプロパティもあります。  
  
 この例では、2つの`LazyValue`メソッドを作成し、これらのメソッドを呼び出すラムダ式を使用して2つのオブジェクトをインスタンス化します。 ラムダ式は、メソッドを呼び出す必要があるだけなので、パラメーターを受け取りません。 出力に示されているように、各`LazyValue`オブジェクトの値が取得された場合にのみ、2つのメソッドが実行されます。  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">ラムダ式 (C# プログラミング ガイド)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">ラムダ式</related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">デリゲート (C# プログラミング ガイド)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">Visual Basic 内のデリゲート</related>
  </Docs>
</Type>
