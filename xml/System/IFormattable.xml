<Type Name="IFormattable" FullName="System.IFormattable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b2576510961cb47b6ac9c492844f7dae58d8f64e" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48589817" /></Metadata><TypeSignature Language="C#" Value="public interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.IFormattable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormattable" />
  <TypeSignature Language="F#" Value="type IFormattable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>オブジェクトの値を文字列形式で書式設定する機能を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable>インターフェイス オブジェクトを書式指定文字列と書式プロバイダーに基づいて文字列表現に変換します。  
  
 書式指定文字列は、通常、オブジェクトの全体的な外観を定義します。 たとえば、.NET Framework は、次はサポートします。  
  
-   列挙値の書式を設定するための標準書式指定文字列 (を参照してください[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md))。  
  
-   数値の書式設定の標準およびカスタムの書式指定文字列 (を参照してください[Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md)と[Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md))。  
  
-   日付と時刻の値を書式設定するための標準およびカスタムの書式指定文字列 (を参照してください[Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[カスタム Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md))。  
  
-   時間間隔を書式設定するための標準およびカスタムの書式指定文字列 (を参照してください[標準 TimeSpan 書式指定文字列](~/docs/standard/base-types/standard-timespan-format-strings.md)と[カスタム TimeSpan 書式指定文字列](~/docs/standard/base-types/custom-timespan-format-strings.md))。  
  
 アプリケーション定義の型の書式設定をサポートするために、独自の書式指定文字列を定義することもできます。  
  
 書式プロバイダーは、通常オブジェクトを文字列形式に変換することで使用されるシンボルを定義する書式設定オブジェクトを返します。 たとえば、数値を通貨値に変換すると、書式プロバイダーは結果の文字列に通貨記号を定義します。 .NET Framework では、次の 3 つの書式プロバイダーを定義します。  
  
-   <xref:System.Globalization.CultureInfo?displayProperty=nameWithType>クラスは、どちらかを返します、 <xref:System.Globalization.NumberFormatInfo> 、数値を書式設定するためのオブジェクトまたは<xref:System.Globalization.DateTimeFormatInfo>の日付と時刻の値を書式設定オブジェクト。  
  
-   <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType>クラスは、数値を書式設定するためには、それ自体のインスタンスを返します。  
  
-   <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>クラスは、日付と時刻の値を書式設定するためには、それ自体のインスタンスを返します。  
  
 さらに、カルチャ固有の職業に固有を指定する、独自のカスタム書式プロバイダーを定義するまたは業界固有の情報は、書式設定に使用します。 カスタム書式プロバイダーを使用してカスタムの書式設定の実装の詳細については、次を参照してください。<xref:System.ICustomFormatter>します。  
  
 <xref:System.IFormattable>インターフェイスは、1 つのメソッドを定義します。 <xref:System.IFormattable.ToString%2A>、実装する型の書式指定サービスを提供します。 <xref:System.IFormattable.ToString%2A>メソッドを直接呼び出すことができます。 さらに、呼び出されたによって自動的に、<xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType>と<xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッド、および使用するメソッドによって、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)in .NET Framework です。 このようなメソッドを含める<xref:System.Console.WriteLine%28System.String%2CSystem.Object%29?displayProperty=nameWithType>、 <xref:System.String.Format%2A?displayProperty=nameWithType>、および<xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%29?displayProperty=nameWithType>、他のユーザーの間で。 <xref:System.IFormattable.ToString%2A>メソッドの書式指定文字列の各書式項目のメソッドが呼び出されます。  
  
 <xref:System.IFormattable>インターフェイス、基本データ型によって実装されます。  
  
   
  
## Examples  
 次の例では、 `Temperature` インターフェイスを実装する <xref:System.IFormattable> クラスを定義しています。 クラスは、次の 4 つの書式指定子をサポートしています:"G"および"C"、温度を摂氏で表示されることを示します"F"は、温度を華氏; に表示されることを示します"K"は、温度がケルビンで表示されることを示します。 さらに、<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>実装もある書式指定文字列を処理できる`null`または空です。 他の 2 つ`ToString`によって定義されたメソッド、`Temperature`クラスへの呼び出しを単純にラップする、<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>実装します。  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 次の例を呼び出して、<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>実装直接、または複合書式指定文字列を使用しています。  
  
 [!code-csharp[System.IFormattable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#2)]
 [!code-vb[System.IFormattable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>クラスをよりも文字列の書式設定制御を必要とする<see cref="M:System.Object.ToString" />提供を実装する必要があります<see cref="T:System.IFormattable" />します。  
  
実装するクラス<see cref="T:System.IFormattable" />"G"(一般) 書式指定子をサポートする必要があります。 "G"指定子だけでなく、クラスは、サポートされる書式指定子の一覧を定義できます。 クラスは、書式指定子を処理するために準備する必要ありますさらに、<see langword="null" />します。 書式設定して、コードの書式設定の詳細については、次を参照してください[型の書式設定。](~/docs/standard/base-types/formatting-types.md)</para></block>
    <altmember cref="T:System.IFormatProvider" />
    <altmember cref="M:System.Object.ToString" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
  </Docs>
  <Members>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member ToString : string * IFormatProvider -&gt; string" Usage="iFormattable.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">使用する書式。  
  
- または - 
<see cref="T:System.IFormattable" /> 実装の型に対して定義されている既定の書式を使用する場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />)。</param>
        <param name="formatProvider">値を書式設定するために使用するプロバイダー。  
  
- または - 
オペレーティング システムの現在のロケール設定から数値書式情報を取得する場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />)。</param>
        <summary>指定された書式を使用して現在のインスタンスの値を書式設定します。</summary>
        <returns>指定された書式の現在のインスタンスの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable.ToString%2A>メソッドは、複数の方法で表すことができる文字列形式に値を変換します。 その正確な形式は、特定の記号または特定のカルチャ、職業、または業界で定義されている指定された順序に依存します。 メソッドを直接呼び出すことができます。 によって自動的にも呼び出されます、<xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType>と<xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッド、および複合書式指定を使用するメソッドによって機能、.NET Framework でなど<xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>、 <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>、および<xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>します。 (詳細については、次を参照してください[複合書式指定](~/docs/standard/base-types/composite-formatting.md)。)。  
  
 複合メソッドの呼び出しを書式設定、<xref:System.IFormattable.ToString%2A>書式指定文字列の各書式項目に対して 1 回のメソッド。 メソッドに渡されるパラメーターは次のように固有の書式指定メソッドが呼び出されるおよび書式指定項目のコンテンツに依存します。  
  
-   書式指定項目が、書式指定文字列を含まないかどうか (書式指定項目は単に場合など、 `{0}`)、渡される`null`の値として、<xref:System.String?displayProperty=nameWithType>パラメーター。  
  
-   書式指定項目には、書式指定文字列が含まれている場合 (たとえば、 `{0:G}`) の値として書式設定文字列が渡されること、<xref:System.String?displayProperty=nameWithType>パラメーター。  
  
-   元のメソッド呼び出しが含まれていない場合、<xref:System.IFormatProvider?displayProperty=nameWithType>パラメーター、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>の値として渡される、<xref:System.IFormatProvider?displayProperty=nameWithType>パラメーター。  
  
-   元のメソッド呼び出しが含まれている場合、<xref:System.IFormatProvider?displayProperty=nameWithType>パラメーター、メソッド呼び出しで指定されているプロバイダーは、の値として渡される、<xref:System.IFormatProvider?displayProperty=nameWithType>パラメーター。  
  
> [!NOTE]
>  オブジェクトの<xref:System.IFormattable.ToString%2A>が渡されない場合にのみ、複合書式指定メソッドによって実装が呼び出されます、<xref:System.ICustomFormatter>書式プロバイダー、または、<xref:System.ICustomFormatter.Format%2A>カスタム書式プロバイダーのメソッドを返します`null`します。  
  
 .NET Framework には、3 つの書式プロバイダーすべての実装にはが含まれています、<xref:System.IFormatProvider>インターフェイス。  
  
-   <xref:System.Globalization.NumberFormatInfo> 数値を 10 進数には、グループ区切り記号文字などの情報を書式設定し、スペル チェックと通貨値の通貨記号の配置を提供します。  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 月、日、年の日付パターン内の位置など、日付に関連して、時間関連の書式情報を提供します。  
  
-   <xref:System.Globalization.CultureInfo> 既定書式の数値書式指定情報を含む、特定のカルチャの情報および日付に関連して、時間関連の書式設定情報にはが含まれています。  
  
 さらに、独自のカスタム書式プロバイダーを定義することができます。  
  
   
  
## Examples  
 次の例で、`Temperature`を実装するクラス、<xref:System.IFormattable.ToString%2A>メソッド。 このコード例が示されている例の一部、<xref:System.IFormattable>クラス。  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />メソッドは、"G"(一般) 書式指定子をサポートする必要があります。 "G"指定子だけでなく、クラスは、サポートされる書式指定子の一覧を定義できます。 クラスは、書式指定子を処理するために準備する必要ありますさらに、<see langword="null" />します。 書式設定して、コードの書式設定の詳細については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)します。</para></block>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>