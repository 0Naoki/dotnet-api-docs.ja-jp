<Type Name="ChangeOperationResponse" FullName="System.Data.Services.Client.ChangeOperationResponse">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="55e913b6ad3025295f412726f0d592958432cf22" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36682980" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ChangeOperationResponse : System.Data.Services.Client.OperationResponse" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ChangeOperationResponse extends System.Data.Services.Client.OperationResponse" />
  <TypeSignature Language="DocId" Value="T:System.Data.Services.Client.ChangeOperationResponse" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ChangeOperationResponse&#xA;Inherits OperationResponse" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeOperationResponse sealed : System::Data::Services::Client::OperationResponse" />
  <TypeSignature Language="F#" Value="type ChangeOperationResponse = class&#xA;    inherit OperationResponse" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Services.Client</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Services.Client.OperationResponse</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" /> クラスから返された操作応答を列挙するときに、<see cref="T:System.Data.Services.Client.DataServiceResponse" /> の呼び出しの後に返される結果。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Services.Client.ChangeOperationResponse> オブジェクトは、このライブラリのユーザーが直接構築するためのものではありません。 代わりに、<xref:System.Data.Services.Client.DataServiceResponse> クラスの列挙子を介して返された操作応答を列挙するときに、参照が返されます。  
  
 <xref:System.Data.Services.Client.DataServiceContext.SaveChanges%2A> は、<xref:System.Data.Services.Client.DataServiceContext> の最後の呼び出し以降に <xref:System.Data.Services.Client.DataServiceContext.SaveChanges%2A> によって収集された保留中の変更をデータ サービスに送信します。 変更は、<xref:System.Data.Services.Client.DataServiceContext.AddObject%2A>、<xref:System.Data.Services.Client.DataServiceContext.AddLink%2A>、<xref:System.Data.Services.Client.DataServiceContext.DeleteObject%2A>、<xref:System.Data.Services.Client.DataServiceContext.DeleteLink%2A>、<xref:System.Data.Services.Client.DataServiceContext.Detach%2A>、<xref:System.Data.Services.Client.DataServiceContext.DetachLink%2A> などのメソッドを呼び出すことでコンテキストに追加されます。  
  
 <xref:System.Data.Services.Client.DataServiceContext.SaveChanges%2A> は、データ サービスに送信されるすべての操作への応答を表す <xref:System.Data.Services.Client.DataServiceResponse> を返します。 <xref:System.Data.Services.Client.DataServiceResponse> オブジェクトには、<xref:System.Data.Services.Client.ChangeOperationResponse> オブジェクトのシーケンスが含まれます。さらに、これらの各オブジェクトには、永続化または試行された変更を表す、<xref:System.Data.Services.Client.EntityDescriptor> インスタンスまたは <xref:System.Data.Services.Client.LinkDescriptor> インスタンスのシーケンスが含まれます。  
  
   
  
## Examples  
 <xref:System.Data.Services.Client.DataServiceContext.SaveChanges%2A> の呼び出しの結果を処理する方法を次のコードに示します。  
  
```  
DataServiceContext service = new DataServiceContext(new Uri("http://myserviceroot"));  
  
// Do insert, update, delete, or attach operations.  
  
DataServiceResponse dsr;  
  
try  
{  
    dsr = service.SaveChanges(SaveChangesOptions.Batch);    
   // Or service.SaveChanges(SaveChangesOptions.ContinueOnError);   
   //Or service.SaveChanges();  
   // If there are no errors during save changes, process the results:  
  
    if (dsr.IsBatchResponse)  
    {  
           /*inspect HTTP artifacts associated with the entire batch:  
                             dsr.BatchHeaders, dsr.BatchStatusCode*/ }  
  
    foreach (ChangeOperationResponse cor in dsr)  
    {  
  
            if (cor.Descriptor is EntityDescriptor)  
            {  
                EntityDescriptor ed = (EntityDescriptor)cor.Descriptor;  
                // This should be the case if  
                // SaveChanges did not throw an exception.    
  
                // After an entity is processed by SaveChanges,  
                // it is always moved to the unchanged state.  
                System.Diagnostics.Debug.Assert(  
                           ed.State == EntityStates.Unchanged);    
                // This shows that the state should be unchanged if  
                // the result is success.  
  
                //process the entity in the response payload: ed.Entity  
            }  
            else if (cor.Descriptor is LinkDescriptor)  
            {  
                LinkDescriptor ld = (LinkDescriptor)cor.Descriptor;  
               // This should be the case if SaveChanges did not throw an exception.  
  
               // After an entity is processed by SaveChanges it  
               // is always moved to the unchanged state.  
                System.Diagnostics.Debug.Assert(  
                            ld.State == EntityStates.Unchanged);    
                // The state should be unchanged if the result is success.  
  
                //process the link in the response payload: ld.Source,  
                // ld.SourceProperty, or ld.Target.  
            }  
     }  
  
}  
catch (DataServiceSaveException se)  
{  
    // Error while saving changes  
    dsr = se.Response;  
  
    if (dsr.IsBatchResponse)   
    {   
        /*inspect HTTP artifacts associated with the entire batch:  
             dsr.BatchHeaders, dsr.BatchStatusCode*/   
}      
}  
  
    foreach (ChangeOperationResponse cor in dsr)  
    {  
        if (cor.Error != null)  
        {  
            //process error  
        }  
        else  
        {  
            // same success case processing as in the loop over DSRs results in   
            // the try block. You could put that processing in a method   
            // and call it from here.      
        }  
    }  
  
}  
  
 catch(Exception)  
 {  
    // Error while saving changes, but not thrown by the client library.  
  
    // Process ArgumentException, InvalidOperationException, or similar.  
}  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Descriptor">
      <MemberSignature Language="C#" Value="public System.Data.Services.Client.Descriptor Descriptor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Services.Client.Descriptor Descriptor" />
      <MemberSignature Language="DocId" Value="P:System.Data.Services.Client.ChangeOperationResponse.Descriptor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Descriptor As Descriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Services::Client::Descriptor ^ Descriptor { System::Data::Services::Client::Descriptor ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Descriptor : System.Data.Services.Client.Descriptor" Usage="System.Data.Services.Client.ChangeOperationResponse.Descriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Services.Client</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Services.Client.Descriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>変更操作で変更された <see cref="T:System.Data.Services.Client.EntityDescriptor" /> または <see cref="T:System.Data.Services.Client.LinkDescriptor" /> を取得します。</summary>
        <value>変更操作で変更された <see cref="T:System.Data.Services.Client.EntityDescriptor" /> または <see cref="T:System.Data.Services.Client.LinkDescriptor" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>