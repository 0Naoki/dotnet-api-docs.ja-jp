<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ResourceManager.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d18e0d0b21e593733c17a8ad1b69a3fc64a6cfda.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d18e0d0b21e593733c17a8ad1b69a3fc64a6cfda</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceManager">
          <source>Represents a resource manager that provides convenient access to culture-specific resources at run time.</source>
          <target state="translated">実行時にカルチャ固有のリソースにアクセスする便利な手段を提供するリソース マネージャーを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceManager">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept>: Calling methods in this class with untrusted data is a security risk.</source>
          <target state="translated"><bpt id="p1">**</bpt>セキュリティに関するメモ<ept id="p1">**</ept>: このクラスのメソッドを信頼できないデータを指定して呼び出すことには、セキュリティ上のリスクが伴います。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceManager">
          <source>Call the methods in the class only with trusted data.</source>
          <target state="translated">このクラスのメソッドの呼び出しは、信頼されたデータだけを指定して実行してください。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceManager">
          <source>For more information, see <bpt id="p1">[</bpt>Untrusted Data Security Risks<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>信頼されていないデータのセキュリティ リスク<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class retrieves resources from a binary .resources file that is embedded in an assembly or from a standalone .resources file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスがアセンブリに埋め込まれているバイナリ .resources ファイルまたはスタンドアロンの .resources ファイルから、リソースを取得します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If an app has been localized and localized resources have been deployed in <bpt id="p1">[</bpt>satellite assemblies<ept id="p1">](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept>, it looks up culture-specific resources, provides resource fallback when a localized resource does not exist, and supports resource serialization.</source>
          <target state="translated">アプリに合わせてローカライズ済みでローカライズされたリソースが配置されている場合<bpt id="p1">[</bpt>サテライト アセンブリ<ept id="p1">](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept>カルチャに固有のリソースを検索、ローカライズされたリソースが存在しないリソースのシリアル化をサポートしている場合は、リソース フォールバックを提供します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For more information about creating and managing resources in desktop apps and <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, see the following sections:</source>
          <target state="translated">作成して、デスクトップ アプリでリソースの管理の詳細については、<ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリでは、次のセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source><bpt id="p1">[</bpt>Desktop Apps<ept id="p1">](#desktop)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>デスクトップ アプリ<ept id="p1">](#desktop)</ept></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source><bpt id="p1">[</bpt>Creating Resources<ept id="p1">](#creating_resources)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>リソースを作成します。<ept id="p1">](#creating_resources)</ept></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source><bpt id="p1">[</bpt>Instantiating a ResourceManager Object<ept id="p1">](#instantiating)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ResourceManager オブジェクトをインスタンス化します。<ept id="p1">](#instantiating)</ept></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source><bpt id="p1">[</bpt>ResourceManager and Culture-Specific Resources<ept id="p1">](#CultureSpecific)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ResourceManager およびカルチャに固有のリソース<ept id="p1">](#CultureSpecific)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source><bpt id="p1">[</bpt>Retrieving Resources<ept id="p1">](#retrieving)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>リソースの取得<ept id="p1">](#retrieving)</ept></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source><bpt id="p1">[</bpt>Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions<ept id="p1">](#exception)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>MissingManifestResourceException および MissingSatelliteAssemblyException 例外の処理<ept id="p1">](#exception)</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source><bpt id="p1">[</bpt>Resource Versioning<ept id="p1">](#versioning)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>リソースのバージョン管理<ept id="p1">](#versioning)</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>satelliteassemblies&gt; Configuration File Node<ept id="p1">](#config)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>satelliteassemblies &gt; 構成ファイル ノード<ept id="p1">](#config)</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source><bpt id="p1">[</bpt>Windows Store Apps<ept id="p1">](#ws)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Windows ストア アプリ<ept id="p1">](#ws)</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Desktop Apps</source>
          <target state="translated">デスクトップ アプリ</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For desktop apps, the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class retrieves resources from binary resource (.resources) files.</source>
          <target state="translated">デスクトップ アプリの場合、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスは、バイナリ リソース (.resources) ファイルからリソースを取得します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Typically, a language compiler or the  <bpt id="p1">[</bpt>Assembly Linker (AL.exe)<ept id="p1">](~/docs/framework/tools/al-exe-assembly-linker.md)</ept> embeds these resource files in an assembly.</source>
          <target state="translated">言語コンパイラでは通常、または<bpt id="p1">[</bpt>アセンブリ リンカー (AL.exe)<ept id="p1">](~/docs/framework/tools/al-exe-assembly-linker.md)</ept>をアセンブリにこれらのリソース ファイルを埋め込みます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You can also use a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object to retrieve resources directly from a .resources file that is not embedded in an assembly, by calling the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A&gt;</ph> method.</source>
          <target state="translated">使用することも、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>リソースを呼び出すことによって、アセンブリに埋め込まれていない .resources ファイルから直接取得するオブジェクト、<ph id="ph2">&lt;xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Using standalone .resources files in an ASP.NET app will break XCOPY deployment, because the resources remain locked until they are explicitly released by the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.ReleaseAllResources%2A&gt;</ph> method.</source>
          <target state="translated">ASP.NET アプリで、スタンドアロンの .resources ファイルを使用してが中断 XCOPY 配置によって明示的にリリースされるまで、リソースがロックされたままであるため、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.ReleaseAllResources%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If you want to deploy resources with your ASP.NET apps, you should compile your .resources files into satellite assemblies.</source>
          <target state="translated">ASP.NET アプリでリソースをデプロイする場合は、サテライト アセンブリに、.resources ファイルをコンパイルする必要があります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>In a resource-based app, one .resources file contains the resources of the default culture whose resources are used if no culture-specific resources can be found.</source>
          <target state="translated">リソース ベースのアプリでは、1 つの .resources ファイルには、カルチャに固有のリソースが見つからない場合、そのリソースが使用される既定のカルチャのリソースが含まれています。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For example, if an app's default culture is English (en), the English language resources are used whenever localized resources cannot be found for a specific culture, such as English (United States) (en-US) or French (France) (fr-FR).</source>
          <target state="translated">たとえば、アプリの既定のカルチャが英語 (en) の場合は、英語の言語リソースが使用される英語 (米国) (EN-US) またはフランス語 (フランス) (FR-FR) などの特定のカルチャのローカライズされたリソースが見つかりません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Typically, the resources for the default culture are embedded in the main app assembly, and resources for other localized cultures are embedded in satellite assemblies.</source>
          <target state="translated">通常、既定のカルチャのリソースがメイン アプリケーション アセンブリに埋め込まれているし、他のカルチャのローカライズされたリソースのサテライト アセンブリに埋め込まれます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Satellite assemblies contain only resources.</source>
          <target state="translated">サテライト アセンブリでは、リソースだけを含めます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>They have the same root file name as the main assembly and an extension of .resources.dll.</source>
          <target state="translated">メインのアセンブリとの拡張機能として同じルート ファイル名がある。 resources.dll です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For apps whose assemblies are not registered in the global assembly cache, satellite assemblies are stored in an app subdirectory whose name corresponds to the assembly's culture.</source>
          <target state="translated">アプリのアセンブリがグローバル アセンブリ キャッシュに登録されていない場合は、サテライト アセンブリはアセンブリのカルチャに対応する名前のアプリ サブディレクトリに格納されます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Creating Resources</source>
          <target state="translated">リソースを作成します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>When you develop a resource-based app, you store resource information in text files (files that have a .txt or .restext extension) or XML files (files that have a .resx extension).</source>
          <target state="translated">リソース ベースのアプリを開発する場合は、テキスト ファイル (拡張子が .txt または .restext) または XML ファイル (拡張子が .resx ファイル) でリソース情報を格納します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You then compile the text or XML files with the  <bpt id="p1">[</bpt>Resource File Generator (Resgen.exe)<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> to create a binary .resources file.</source>
          <target state="translated">テキストまたは XML ファイルをコンパイルし、<bpt id="p1">[</bpt>リソース ファイル ジェネレーター (Resgen.exe)<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>バイナリ .resources ファイルを作成します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You can then embed the resulting .resources file in an executable or library by using a compiler option such as <ph id="ph1">`/resources`</ph> for the C# and Visual Basic compilers, or you can embed it in a satellite assembly by using the .</source>
          <target state="translated">埋め込むことができますし、結果として得られる .resources ファイルの実行可能ファイルまたはライブラリなどのコンパイラ オプションを使用して、<ph id="ph1">`/resources`</ph>にするか、c# および Visual Basic コンパイラ、埋め込むことができます、サテライト アセンブリを使用して、します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If you include a .resx file in your Visual Studio project, Visual Studio handles the compilation and embedding of default and localized resources automatically as part of the build process.</source>
          <target state="translated">.Resx ファイルを Visual Studio プロジェクトに含めると、Visual Studio はコンパイルと既定の埋め込みを処理し、ビルド プロセスの一部として自動的にローカライズされたリソース。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Ideally, you should create resources for every language your app supports, or at least for a meaningful subset of each language.</source>
          <target state="translated">理想的には、する必要がありますリソースを作成する言語ごとに、アプリをサポートするか、少なくとも意味のある各言語のサブセットをします。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The binary .resources file names follow the naming convention <bpt id="p1">*</bpt>basename<ept id="p1">*</ept>.<bpt id="p2">*</bpt>cultureName<ept id="p2">*</ept>.resources, where <bpt id="p3">*</bpt>basename<ept id="p3">*</ept> is the name of the app or the name of a class, depending on the level of detail you want.</source>
          <target state="translated">バイナリの .resources ファイル名が名前付け規則に従う<bpt id="p1">*</bpt>basename<ept id="p1">*</ept>.<bpt id="p2">*</bpt>cultureName<ept id="p2">*</ept>.resources、場所<bpt id="p3">*</bpt>basename<ept id="p3">*</ept>はアプリの名前か、必要な詳細レベルに応じて、クラスの名前。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType&gt;</ph> property is used to determine <bpt id="p1">*</bpt>cultureName<ept id="p1">*</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType&gt;</ph>プロパティの使用を決定<bpt id="p1">*</bpt>cultureName<ept id="p1">*</ept>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>A resource for the app's default culture should be named <bpt id="p1">*</bpt>basename<ept id="p1">*</ept>.resources.</source>
          <target state="translated">アプリの既定のカルチャのリソースに名前を付ける<bpt id="p1">*</bpt>basename<ept id="p1">*</ept>.resources です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For example, suppose that an assembly has several resources in a resource file that has the base name MyResources.</source>
          <target state="translated">たとえば、アセンブリが格納されていてベースの名前を持つリソース ファイルにいくつかのリソースを持つことがあるとします。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>These resource files should have names such as MyResources.ja-JP.resources for the Japan (Japanese) culture, MyResources.de.resources for the German culture, MyResources.zh-CHS.resources for the simplified Chinese culture, and MyResources.fr-BE.resources for the French (Belgium) culture.</source>
          <target state="translated">これらのリソース ファイルには、フランス語 (ベルギー) のカルチャの簡体字中国語カルチャ、および MyResources.fr BE.resources MyResources.ja-JP.resources 日本 (日本語) のカルチャ用、ドイツのカルチャの MyResources.de.resources、MyResources.zh CHS.resources などの名前が必要です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The default resource file should be named MyResources.resources.</source>
          <target state="translated">既定のリソース ファイルは、MyResources.resources を名前必要があります。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The culture-specific resource files are commonly packaged in satellite assemblies for each culture.</source>
          <target state="translated">カルチャ固有のリソース ファイルはよく、各カルチャのサテライト アセンブリにパッケージされます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The default resource file should be embedded in the app's main assembly.</source>
          <target state="translated">既定のリソース ファイルは、アプリのメイン アセンブリに埋め込む必要があります。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Note that  allows resources to be marked as private, but you should always mark them as public so they can be accessed by other assemblies.</source>
          <target state="translated">リソースをプライベートとしてマークすることができますに注意してくださいは常にマークを付けるパブリック他のアセンブリによってアクセスできるようにします。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>(Because a satellite assembly contains no code, resources that are marked as private are unavailable to your app through any mechanism.)</source>
          <target state="translated">(サテライト アセンブリにコードが含まれていないためプライベートとしてマークされているリソースは任意のメカニズムを使用してアプリを使用)</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For more information about creating, packaging, and deploying resources, see the articles <bpt id="p1">[</bpt>Creating Resource Files<ept id="p1">](~/docs/framework/resources/creating-resource-files-for-desktop-apps.md)</ept>, <bpt id="p2">[</bpt>Creating Satellite Assemblies<ept id="p2">](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept>, and <bpt id="p3">[</bpt>Packaging and Deploying Resources<ept id="p3">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>.</source>
          <target state="translated">作成の詳細については、パッケージ化、および、リソースの配置を参照してください、<bpt id="p1">[</bpt>リソース ファイルの作成<ept id="p1">](~/docs/framework/resources/creating-resource-files-for-desktop-apps.md)</ept>、<bpt id="p2">[</bpt>サテライト アセンブリの作成<ept id="p2">](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept>、および<bpt id="p3">[</bpt>パッケージ化と配置リソース<ept id="p3">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Instantiating a ResourceManager Object</source>
          <target state="translated">ResourceManager オブジェクトをインスタンス化します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object that retrieves resources from an embedded .resources file by calling one of its class constructor overloads.</source>
          <target state="translated">インスタンス化する、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラス コンス トラクター オーバー ロードの 1 つを呼び出して、埋め込みの .resources ファイルからリソースを取得するオブジェクト。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>This tightly couples a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object with a particular .resources file and with any associated localized .resources files in satellite assemblies.</source>
          <target state="translated">これを密に結合する<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>ローカライズされたサテライト アセンブリに .resources ファイルの特定の .resources ファイルと、関連付けられたすべてのオブジェクト。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The two most commonly called constructors are:</source>
          <target state="translated">2 つの最もよく呼び出されたコンス トラクターは次のとおりです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29&gt;</ph> looks up resources based on two pieces of information that you supply: the base name of the .resources file, and the assembly in which the default .resources file resides.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29&gt;</ph> 2 つの指定した情報に基づいてリソースを検索: .resources ファイル、および既定の .resources ファイルが存在するアセンブリのベース名です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The base name includes the namespace and root name of the .resources file, without its culture or extension.</source>
          <target state="translated">基本名には、そのカルチャまたは拡張機能のない、.resources ファイルの名前空間とルート名が含まれています。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Note that .resources files that are compiled from the command line typically do not include a namespace name, whereas .resources files that are created in the Visual Studio environment do.</source>
          <target state="translated">Visual Studio 環境で作成される .resources ファイルは、通常、コマンドラインからコンパイルされている .resources ファイルには、名前空間の名前が含まれていないことに注意してください。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For example, if a resource file is named MyCompany.StringResources.resources and the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> constructor is called from a static method named <ph id="ph2">`Example.Main`</ph>, the following code instantiates a <ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph> object that can retrieve resources from the .resources file:</source>
          <target state="translated">たとえば、MyCompany.StringResources.resources という名前のリソース ファイルは、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>コンス トラクターを呼び出すという名前の静的メソッドから<ph id="ph2">`Example.Main`</ph>、次のコードをインスタンス化、 <ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph> .resources ファイルからリソースを取得できるオブジェクト。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.Type%29&gt;</ph> looks up resources in satellite assemblies based on information from a type object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.Type%29&gt;</ph> 型のオブジェクトからの情報に基づいて、サテライト アセンブリにリソースを検索します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The type's fully qualified name corresponds to the base name of the .resources file without its file name extension.</source>
          <target state="translated">型の完全修飾名は、ファイル名拡張子の付かない .resources ファイルの基本名に対応します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>In desktop apps that are created by using the Visual Studio Resource Designer, Visual Studio creates a wrapper class whose fully qualified name is the same as the root name of the .resources file.</source>
          <target state="translated">Visual Studio リソース デザイナーを使用して作成したデスクトップ アプリでは、Visual Studio は、完全修飾名は .resources ファイルのルート名と同じラッパー クラスを作成します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For example, if a resource file is named MyCompany.StringResources.resources and there is a wrapper class named <ph id="ph1">`MyCompany.StringResources`</ph>, the following code instantiates a <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> object that can retrieve resources from the .resources file:</source>
          <target state="translated">たとえば、MyCompany.StringResources.resources という名前のリソース ファイルは、という名前のラッパー クラスがある場合<ph id="ph1">`MyCompany.StringResources`</ph>、次のコードをインスタンス化、 <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> .resources ファイルからリソースを取得できるオブジェクト。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If the appropriate resources cannot be found, the constructor call creates a valid <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object.</source>
          <target state="translated">コンス トラクターの呼び出しを作成、有効な場合は、適切なリソースが見つからない<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>However, the attempt to retrieve a resource throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception.</source>
          <target state="translated">ただし、リソースを取得しようとすると、スロー、<ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For information about dealing with the exception, see the <bpt id="p1">[</bpt>Handling MissingManifestResourceException and MissingSatelliteAssembly Exceptions<ept id="p1">](#exception)</ept> section later in this article.</source>
          <target state="translated">については、例外を処理する場合は、次を参照してください。、 <bpt id="p1">[</bpt>MissingManifestResourceException の処理と MissingSatelliteAssembly 例外<ept id="p1">](#exception)</ept>この記事で後述する「します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The following example shows how to instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object.</source>
          <target state="translated">次の例を示しています、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>It contains the source code for an executable named ShowTime.exe.</source>
          <target state="translated">ShowTime.exe を名前付き実行可能ファイルのソース コードが含まれています。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>It also includes the following text file named Strings.txt that contains a single string resource, <ph id="ph1">`TimeHeader`</ph>:</source>
          <target state="translated">1 つの文字列リソースを含む Strings.txt をという名前の次のテキスト ファイルも含まれています<ph id="ph1">`TimeHeader`</ph>:。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You can use a batch file to generate the resource file and embed it into the executable.</source>
          <target state="translated">バッチ ファイルを使用して、リソース ファイルを生成し、実行可能ファイルに埋め込むことができます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Here's the batch file to generate an executable by using the C# compiler:</source>
          <target state="translated">C# コンパイラを使用して、実行可能ファイルを生成するバッチ ファイルを次に示します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For the Visual Basic compiler, you can use the following batch file:</source>
          <target state="translated">Visual Basic コンパイラでは、次のバッチ ファイルを使用できます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>ResourceManager and Culture-Specific Resources</source>
          <target state="translated">ResourceManager およびカルチャに固有のリソース</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>A localized app requires resources to be deployed, as discussed in the article <bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>.</source>
          <target state="translated">ローカライズされたアプリでは、記事に説明したように、展開するリソースが必要です<bpt id="p1">[</bpt>パッケージ化と配置リソース<ept id="p1">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If the assemblies are properly configured, the resource manager determines which resources to retrieve based on the current thread's <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">リソース マネージャーが現在のスレッドのに基づいて、取得するリソースを決定場合は、アセンブリが正しく構成されて<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>(That property also returns the current thread's UI culture.) For example, if an app is compiled with default English language resources in the main assembly and with French and Russian language resources in two satellite assemblies, and the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property is set to fr-FR, the resource manager retrieves the French resources.</source>
          <target state="translated">(そのプロパティも戻ります、現在のスレッド UI カルチャ)。たとえば、アプリをコンパイルした場合の既定値と 2 つのサテライト アセンブリのフランス語とロシア語の言語リソースでメインのアセンブリ内の英語リソースと<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>を FR-FR に設定されているプロパティ、リソース マネージャーは、フランス語のリソースを取得します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You can set the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A&gt;</ph> property explicitly or implicitly.</source>
          <target state="translated">設定することができます、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A&gt;</ph>プロパティ明示的または暗黙的にします。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The way you set it determines how the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object retrieves resources based on culture:</source>
          <target state="translated">設定する方法を決定方法、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクトは、カルチャに基づいてリソースを取得します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If you explicitly set the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property to a specific culture, the resource manager always retrieves the resources for that culture, regardless of the user's browser or operating system language.</source>
          <target state="translated">明示的に設定する場合、<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>特定のカルチャを常に、リソース マネージャーにプロパティは、ユーザーがブラウザーまたはオペレーティング システムの言語に関係なく、そのカルチャのリソースを取得します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Consider an app that is compiled with default English language resources and three satellite assemblies that contain resources for English (United States), French (France), and Russian (Russia).</source>
          <target state="translated">既定の英語リソースと共にコンパイルされるアプリと英語 (米国)、フランス語 (フランス)、およびロシア語 (ロシア) 用のリソースを含む 3 つのサテライト アセンブリを検討してください。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A&gt;</ph> property is set to fr-FR, the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> object always retrieves the French (France) resources, even if the user's operating system language is not French.</source>
          <target state="translated">場合、 <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A&gt;</ph> 、FR-FR にプロパティが設定されている、<ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクトは、フランス語 (フランス) のリソースを常に取得、いなくても、ユーザーのオペレーティング システムの言語がフランス語ではありません。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Make sure that this is the desired behavior before you set the property explicitly.</source>
          <target state="translated">プロパティを明示的に設定する前に必要な設定があることを確認してください。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>In ASP.NET apps, you must set the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property explicitly, because it is unlikely that the setting on the server will match incoming client requests.</source>
          <target state="translated">ASP.NET アプリケーションで設定する必要があります、<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>プロパティを明示的になっていないために、サーバーの設定が入ってくるクライアント要求を一致する可能性があります。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>An ASP.NET app can set the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property explicitly to the user's browser accept language.</source>
          <target state="translated">ASP.NET アプリケーションを設定できる、<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>プロパティをユーザーのブラウザーに明示的に使用する言語。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Explicitly setting the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property defines the current UI culture for that thread.</source>
          <target state="translated">明示的に設定する、<ph id="ph1">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>プロパティは、そのスレッドの現在の UI カルチャを定義します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>It does not affect the current UI culture of any other threads in an app.</source>
          <target state="translated">アプリで他のスレッドの現在の UI カルチャは影響しません。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You can set the UI culture of all threads in an app domain by assigning a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents that culture to the static <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">アプリケーション ドメイン内のすべてのスレッド UI カルチャを設定するには割り当てることによって、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>カルチャを表すオブジェクトを静的な<ph id="ph2">&lt;xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If you do not explicitly set the current UI culture and you do not define a default culture for the current app domain, the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property is set implicitly by the Windows <ph id="ph2">`GetUserDefaultUILanguage`</ph> function.</source>
          <target state="translated">現在の UI カルチャが明示的に設定しないと、現在のアプリ ドメインの既定のカルチャを定義していない場合、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>プロパティは、Windows によって暗黙的に設定<ph id="ph2">`GetUserDefaultUILanguage`</ph>関数。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>This function is provided by the Multilingual User Interface (MUI), which enables the user to set the default language.</source>
          <target state="translated">この関数には、によって、Multilingual User Interface (MUI)、既定の言語を設定するには、そのユーザーは提供されます。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If the UI language is not set by the user, it defaults to the system-installed language, which is the language of operating system resources.</source>
          <target state="translated">UI 言語が、ユーザーが設定されていない場合の既定値は、システムにインストールされている言語、つまりオペレーティング システムのリソースの言語です。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The following simple "Hello world" example sets the current UI culture explicitly.</source>
          <target state="translated">次の単純な"Hello world"の例では、現在の UI カルチャを明示的に設定します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>It contains resources for three cultures: English (United States) or en-US, French (France) or fr-FR, and Russian (Russia) or ru-RU.</source>
          <target state="translated">次の 3 つのカルチャのリソースが含まれています: 英語 (米国) または EN-US、フランス語 (フランス)、または FR-FR、およびロシア語 (ロシア) または RU-RU です。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The en-US resources are contained in a text file named Greetings.txt:</source>
          <target state="translated">Greetings.txt をという名前のテキスト ファイルでは、EN-US リソースが含まれています。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The fr-FR resources are contained in a text file named Greetings.fr-FR.txt:</source>
          <target state="translated">FR-FR リソースが Greetings.fr をという名前のテキスト ファイルに含まれている-FR.txt:</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The ru-RU resources are contained in a text file named Greetings.ru-RU.txt:</source>
          <target state="translated">RU-RU リソースが Greetings.ru をという名前のテキスト ファイルに含まれている-RU.txt:</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Here's the source code for the example (Example.vb for the Visual Basic version or Example.cs for the C# version):</source>
          <target state="translated">たとえば、(Visual Basic バージョンの Example.vb) または Example.cs c# バージョンのソース コードを次に示します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>To compile this example, create a batch (.bat) file that contains the following commands and run it from the command prompt.</source>
          <target state="translated">この例をコンパイルするには、次のコマンドが含まれており、コマンド プロンプトから実行するバッチ (.bat) ファイルを作成します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If you're using C#, specify <ph id="ph1">`csc`</ph> instead of <ph id="ph2">`vbc`</ph> and <ph id="ph3">`Example.cs`</ph> instead of <ph id="ph4">`Example.vb`</ph>.</source>
          <target state="translated">C# を使用している場合は、指定<ph id="ph1">`csc`</ph>の代わりに<ph id="ph2">`vbc`</ph>と<ph id="ph3">`Example.cs`</ph>の代わりに<ph id="ph4">`Example.vb`</ph>です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Retrieving Resources</source>
          <target state="translated">リソースの取得</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%29&gt;</ph> methods to access a specific resource.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%29&gt;</ph>と<ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%29&gt;</ph>特定のリソースにアクセスするメソッド。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You can also call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetStream%28System.String%29&gt;</ph> method to retrieve non-string resources as a byte array.</source>
          <target state="translated">呼び出すことも、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetStream%28System.String%29&gt;</ph>バイト配列として文字列以外のリソースを取得します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>By default, in an app that has localized resources, these methods return the resource for the culture determined by the current UI culture of the thread that made the call.</source>
          <target state="translated">既定では、リソースがローカライズされているアプリでこれらのメソッドを返しますの呼び出しを行ったスレッドの現在の UI カルチャによって決まりますのカルチャのリソース。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>See the previous section, <bpt id="p1">[</bpt>ResourceManager and Culture-Specific Resources<ept id="p1">](#CultureSpecific)</ept>, for more information about how the current UI culture of a thread is defined.</source>
          <target state="translated">前のセクションを参照してください<bpt id="p1">[</bpt>ResourceManager およびカルチャに固有のリソース<ept id="p1">](#CultureSpecific)</ept>スレッドの現在の UI カルチャを定義する方法の詳細についてはします。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If the resource manager cannot find the resource for the current thread's UI culture, it uses a fallback process to retrieve the specified resource.</source>
          <target state="translated">リソース マネージャーは、現在のスレッドの UI カルチャのリソースを検索することはできません、指定したリソースを取得するのにフォールバック プロセスが使用されます。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If the resource manager cannot find any localized resources, it uses the resources of the default culture.</source>
          <target state="translated">リソース マネージャーは、すべてのローカライズされたリソースを見つけることができません、既定のカルチャのリソースが使用されます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For more information about resource fallback rules, see the "Resource Fallback Process" section of the article <bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>.</source>
          <target state="translated">リソース フォールバック規則の詳細については、アーティクルの「リソース フォールバック プロセス」セクションを参照して<bpt id="p1">[</bpt>パッケージ化と配置リソース<ept id="p1">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If the .resources file specified in the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class constructor cannot be found, the attempt to retrieve a resource throws a <ph id="ph2">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> or <ph id="ph3">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> exception.</source>
          <target state="translated">.Resources ファイルが指定されている場合、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスのコンス トラクターが見つかりません、リソースを取得しようとすると、スロー、<ph id="ph2">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph>または<ph id="ph3">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For information about dealing with the exception, see the <bpt id="p1">[</bpt>Handling  MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions<ept id="p1">](#exception)</ept> section later in this topic.</source>
          <target state="translated">については、例外を処理する場合は、次を参照してください。、 <bpt id="p1">[</bpt>MissingManifestResourceException の処理と MissingSatelliteAssemblyException 例外<ept id="p1">](#exception)</ept>このトピックで後述します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph> method to retrieve culture-specific resources.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph>カルチャに固有のリソースを取得します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>It consists of resources compiled from .txt files for the English (en), French (France) (fr-FR), and Russian (Russia) (ru-RU) cultures.</source>
          <target state="translated">英語 (en)、フランス語 (フランス) (FR-FR)、およびロシア語 (ロシア) (RU-RU) 用の .txt ファイルからコンパイルされたリソースのカルチャ。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The example changes the current culture and current UI culture to English (United States), French (France), Russian (Russia), and Swedish (Sweden).</source>
          <target state="translated">例は、英語 (米国)、フランス語 (フランス)、ロシア語 (ロシア)、およびスウェーデン語 (スウェーデン) に、現在のカルチャと現在の UI カルチャを変更します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph> method to retrieve the localized string, which it displays along with the current day and month.</source>
          <target state="translated">呼び出して、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph>および現在の日と月が表示されますが、ローカライズされた文字列を取得します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Notice that the output displays the appropriate localized string except when the current UI culture is Swedish (Sweden).</source>
          <target state="translated">出力がスウェーデン語 (スウェーデン) が現在の UI カルチャの場合を除き、適切なローカライズされた文字列を表示することに注意してください。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Because Swedish language resources are unavailable, the app instead uses the resources of the default culture, which is English.</source>
          <target state="translated">スウェーデン語の言語リソースが利用できないため、アプリは、英語は既定のカルチャのリソースを代わりに使用します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The example requires the text-based resource files listed in following table.</source>
          <target state="translated">この例では、次の表に記載されたテキスト ベースのリソース ファイルが必要です。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Each has a single string resource named <ph id="ph1">`DateStart`</ph>.</source>
          <target state="translated">という名前の 1 つの文字列リソースを持つ各<ph id="ph1">`DateStart`</ph>です。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Culture</source>
          <target state="translated">culture</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>File name</source>
          <target state="translated">ファイル名</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Resource name</source>
          <target state="translated">リソース名</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Resource value</source>
          <target state="translated">リソースの値</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>en-US</source>
          <target state="translated">en-US</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>DateStrings.txt</source>
          <target state="translated">DateStrings.txt</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Today is</source>
          <target state="translated">今日が</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>fr-FR</source>
          <target state="translated">fr-FR</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>DateStrings.fr-FR.txt</source>
          <target state="translated">DateStrings.fr-FR.txt</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Aujourd'hui, c'est le</source>
          <target state="translated">Aujourd'hui, c'est le</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>ru-RU</source>
          <target state="translated">ru-RU</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>DateStrings.ru-RU.txt</source>
          <target state="translated">DateStrings.ru-RU.txt</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Сегодня</source>
          <target state="translated">Сегодня</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Here's the source code for the example (ShowDate.vb for the Visual Basic version or ShowDate.cs for the C# version of the code).</source>
          <target state="translated">(Visual Basic バージョンの ShowDate.vb) または ShowDate.cs c# バージョンのコードの例のソース コードを次に示します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>To compile this example, create a batch file that contains the following commands and run it from the command prompt.</source>
          <target state="translated">この例をコンパイルするには、次のコマンドが含まれており、コマンド プロンプトから実行するバッチ ファイルを作成します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If you're using C#, specify <ph id="ph1">`csc`</ph> instead of <ph id="ph2">`vbc`</ph> and <ph id="ph3">`showdate.cs`</ph> instead of <ph id="ph4">`showdate.vb`</ph>.</source>
          <target state="translated">C# を使用している場合は、指定<ph id="ph1">`csc`</ph>の代わりに<ph id="ph2">`vbc`</ph>と<ph id="ph3">`showdate.cs`</ph>の代わりに<ph id="ph4">`showdate.vb`</ph>です。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>There are two ways to retrieve the resources of a specific culture other than the current UI culture:</source>
          <target state="translated">これには、現在の UI カルチャ以外の特定のカルチャのリソースを取得する 2 つの方法があります。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You can call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>,  <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>, or <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetStream%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> method to retrieve a resource for a specific culture.</source>
          <target state="translated">呼び出すことができます、 <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>、 <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>、または<ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetStream%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>特定カルチャのリソースを取得するメソッド。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If a localized resource cannot be found, the resource manager uses the resource fallback process to locate an appropriate resource.</source>
          <target state="translated">ローカライズされたリソースが見つからない場合、リソース マネージャーは、適切なリソースを検索するリソース フォールバック プロセスを使用します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You can call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetResourceSet%2A&gt;</ph> method to obtain a <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> object that represents the resources for a particular culture.</source>
          <target state="translated">呼び出すことができます、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetResourceSet%2A&gt;</ph>を取得するメソッド、<ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph>を特定のカルチャのリソースを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>In the method call, you can determine whether the resource manager probes for parent cultures if it is unable to find localized resources, or whether it simply falls back to the resources of the default culture.</source>
          <target state="translated">メソッドの呼び出しで、ローカライズされたリソースを検索することがない場合、親のカルチャのリソース マネージャーがプローブするかどうかや、かどうか、単にはフォールバックして既定のカルチャのリソースを指定できます。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You can then use the <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> methods to access the resources (localized for that culture) by name, or to enumerate the resources in the set.</source>
          <target state="translated">使用してできます、<ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph>メソッド (そのカルチャのローカライズされた) のリソースに名前でアクセスする、または、セット内のリソースを列挙します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions</source>
          <target state="translated">MissingManifestResourceException および MissingSatelliteAssemblyException 例外の処理</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If you try to retrieve a specific resource, but the resource manager cannot find that resource and either no default culture has been defined or the resources of the default culture cannot be located, the resource manager throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception if it expects to find the resources in the main assembly or a <ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> if it expects to find the resources in a satellite assembly.</source>
          <target state="translated">場合は、特定のリソースを取得しようとするが、リソース マネージャーは、リソースとない既定のカルチャが定義されていることまたは既定のカルチャのリソースが存在することはできません、リソース マネージャーをスローを見つけることができません、<ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph>メイン アセンブリにリソースを検索して、予想される場合に例外または<ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph>場合はサテライト アセンブリにリソースを見つけることが求められます。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Note that the exception is thrown when you call a resource retrieval method such as <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph>, and not when you instantiate a <ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph> object.</source>
          <target state="translated">など、リソースの取得メソッドを呼び出すと、例外がスローされたことに注意してください<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph>、いないときにインスタンス化して、<ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The exception is typically thrown under the following conditions:</source>
          <target state="translated">次の条件下では、通常、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The appropriate resource file or satellite assembly does not exist.</source>
          <target state="translated">適切なリソース ファイルまたはサテライト アセンブリが存在しません。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If the resource manager expects the app's default resources to be embedded in the main app assembly, they are absent.</source>
          <target state="translated">リソース マネージャーには、アプリの既定のリソースをメインのアプリ アセンブリに埋め込むことが必要ですが、それらが存在しません。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute indicates that the app's default resources reside in a satellite assembly, that assembly cannot be found.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph>属性は、アプリの既定のリソースがサテライト アセンブリに存在する、アセンブリが見つからないことを示します。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>When you compile your app, make sure that resources are embedded in the main assembly or that the necessary satellite assembly is generated and is named appropriately.</source>
          <target state="translated">アプリをコンパイルするときに、リソースがメイン アセンブリに埋め込まれていること、または必要に応じてサテライト アセンブリが生成され、適切にという名前を確認します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Its name should take the form <bpt id="p1">*</bpt>appName<ept id="p1">*</ept>.resources.dll, and it should be located in a directory named after the culture whose resources it contains.</source>
          <target state="translated">その名前はフォームを実行する必要があります<bpt id="p1">*</bpt>appName<ept id="p1">*</ept>。 resources.dll、およびそれを、カルチャが含まれているリソースを含む後という名前のディレクトリに配置する必要があります。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Your app doesn't have a default or neutral culture defined.</source>
          <target state="translated">アプリは、既定値または定義されているカルチャがありません。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Add the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute to a source code file or to the project information file (AssemblyInfo.vb for a Visual Basic app or AssemblyInfo.cs for a C# app) file.</source>
          <target state="translated">追加、<ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph>属性をソース コード ファイルまたはプロジェクト情報ファイル (Visual Basic アプリの AssemblyInfo.vb) または (C#) アプリの AssemblyInfo.cs ファイルにします。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The <ph id="ph1">`baseName`</ph> parameter in the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29&gt;</ph> constructor does not specify the name of a .resources file.</source>
          <target state="translated"><ph id="ph1">`baseName`</ph>内のパラメーター、<ph id="ph2">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29&gt;</ph>コンス トラクターが .resources ファイルの名前が指定されていません。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The name should include the resource file's fully qualified namespace but not its file name extension.</source>
          <target state="translated">リソース ファイルの完全修飾名前空間が、そのファイル名拡張子ではなく、名前を含める必要があります。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Typically, resource files that are created in Visual Studio include namespace names, but resource files that are created and compiled at the command prompt do not.</source>
          <target state="translated">通常、Visual Studio で作成されたリソース ファイルに含める名前空間の名前が作成され、コマンド プロンプトでコンパイルされているリソース ファイルがありません。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You can determine the names of embedded .resources files by compiling and running the following utility.</source>
          <target state="translated">コンパイルし、次のユーティリティを実行して、埋め込みの .resources ファイルの名前を指定できます。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>This is a console app that accepts the name of a main assembly or satellite assembly as a command-line parameter.</source>
          <target state="translated">これは、メイン アセンブリまたはコマンド ライン パラメーターとしてのサテライト アセンブリの名前を指定するコンソール アプリです。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>It displays the strings that should be provided as the <ph id="ph1">`baseName`</ph> parameter so that the resource manager can correctly identify the resource.</source>
          <target state="translated">文字列として指定する必要がありますが表示されます、<ph id="ph1">`baseName`</ph>パラメーター リソース マネージャーでは、リソースを正しく特定できるようにします。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If you are changing the current culture of your application explicitly, you should also remember that the resource manager retrieves a resource set based on the value of the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property, and not the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">リソース マネージャーがの値に基づいて、リソース セットを取得することに留意する、アプリケーションの現在のカルチャを明示的に変更する場合もする必要があります、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>プロパティ、および not、<ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Typically, if you change one value, you should also change the other.</source>
          <target state="translated">通常、1 つの値を変更すると場合、変更する必要も、他のです。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Resource Versioning</source>
          <target state="translated">リソースのバージョン管理</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Because the main assembly that contains an app's default resources is separate from the app's satellite assemblies, you can release a new version of your main assembly without redeploying the satellite assemblies.</source>
          <target state="translated">アプリの既定のリソースを含むメイン アセンブリはアプリのサテライト アセンブリは別であるため、サテライト アセンブリを再デプロイしなくても、メイン アセンブリの新しいバージョンをリリースできます。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You use the <ph id="ph1">&lt;xref:System.Resources.SatelliteContractVersionAttribute&gt;</ph> attribute to use existing satellite assemblies and instruct the resource manager not to redeploy them with a new version of your main assembly,</source>
          <target state="translated">使用する、<ph id="ph1">&lt;xref:System.Resources.SatelliteContractVersionAttribute&gt;</ph>既存のサテライト アセンブリを使用して、メイン アセンブリの新しいバージョンで再展開が、リソース マネージャーに指示する属性</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For more information about versioning support for satellite assemblies, see the article <bpt id="p1">[</bpt>Retrieving Resources<ept id="p1">](~/docs/framework/resources/retrieving-resources-in-desktop-apps.md)</ept>.</source>
          <target state="translated">サテライト アセンブリのバージョン管理サポートの詳細については、記事を参照してください。<bpt id="p1">[</bpt>リソースの取得<ept id="p1">](~/docs/framework/resources/retrieving-resources-in-desktop-apps.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source><ph id="ph1">\&lt;</ph>satelliteassemblies&gt; Configuration File Node</source>
          <target state="translated"><ph id="ph1">\&lt;</ph>satelliteassemblies &gt; 構成ファイル ノード</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For executables that are deployed and run from a website (HREF .exe files), the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object may probe for satellite assemblies over the web, which can hurt your app's performance.</source>
          <target state="translated">実行可能ファイルの展開を行い、web サイト (HREF .exe ファイル) から実行される、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクトは、アプリのパフォーマンスを低下させる可能性が web 経由でサテライト アセンブリをプローブ可能性があります。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>To eliminate the performance problem, you can limit this probing to the satellite assemblies that you have deployed with your app.</source>
          <target state="translated">パフォーマンスの問題を回避するのには、アプリを展開しているサテライト アセンブリへのプローブを制限できます。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>To do this, you create a <ph id="ph1">`&lt;satelliteassemblies&gt;`</ph> node in your app's configuration file to specify that you have deployed a specific set of cultures for your app, and that the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> object should not try to probe for any culture that is not listed in that node.</source>
          <target state="translated">これを行うには、作成、<ph id="ph1">`&lt;satelliteassemblies&gt;`</ph>には、アプリに対して、特定のカルチャのセットが展開を指定する、アプリの構成ファイル内のノード、<ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクトがそのノードに表示されていない任意のカルチャのプローブしないでください。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The preferred alternative to creating a <ph id="ph1">`&lt;satelliteassemblies&gt;`</ph> node is to use the <bpt id="p1">[</bpt>ClickOnce Deployment Manifest<ept id="p1">](http://msdn.microsoft.com/library/8457e615-e3b6-4990-8dcf-11bc590e4e9b)</ept> feature.</source>
          <target state="translated">作成に代わる、<ph id="ph1">`&lt;satelliteassemblies&gt;`</ph>ノードは、使用する、 <bpt id="p1">[</bpt>ClickOnce 配置マニフェスト<ept id="p1">](http://msdn.microsoft.com/library/8457e615-e3b6-4990-8dcf-11bc590e4e9b)</ept>機能します。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>In your app's configuration file, create a section similar to the following:</source>
          <target state="translated">アプリの構成ファイルで次のようなセクションを作成します。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Edit this configuration information as follows:</source>
          <target state="translated">この構成情報を次のように編集するには。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Specify one or more <ph id="ph1">`&lt;assembly&gt;`</ph> nodes for each main assembly that you deploy, where each node specifies a fully qualified assembly name.</source>
          <target state="translated">1 つ以上指定<ph id="ph1">`&lt;assembly&gt;`</ph>のノードを展開すると、各メインのアセンブリの各ノードが完全修飾アセンブリ名を指定します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Specify the name of your main assembly in place of <bpt id="p1">*</bpt>MainAssemblyName<ept id="p1">*</ept>, and specify the <ph id="ph1">`Version`</ph>, <ph id="ph2">`PublicKeyToken`</ph>, and <ph id="ph3">`Culture`</ph> attribute values that correspond to your main assembly.</source>
          <target state="translated">代わりに、メイン アセンブリの名前を指定<bpt id="p1">*</bpt>MainAssemblyName<ept id="p1">*</ept>を指定し、 <ph id="ph1">`Version`</ph>、 <ph id="ph2">`PublicKeyToken`</ph>、および<ph id="ph3">`Culture`</ph>メインのアセンブリへの対応する値の属性です。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For the <ph id="ph1">`Version`</ph> attribute, specify the version number of your assembly.</source>
          <target state="translated"><ph id="ph1">`Version`</ph>属性が、アセンブリのバージョン番号を指定します。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For example, the first release of your assembly might be version number 1.0.0.0.</source>
          <target state="translated">たとえば、アセンブリの最初のリリースでは、バージョン番号 1.0.0.0 可能性があります。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For the <ph id="ph1">`PublicKeyToken`</ph> attribute, specify the keyword <ph id="ph2">`null`</ph> if you have not signed your assembly with a strong name, or specify your public key token if you have signed your assembly.</source>
          <target state="translated"><ph id="ph1">`PublicKeyToken`</ph>属性、キーワードを指定<ph id="ph2">`null`</ph>厳密な名前でアセンブリに署名していないか、アセンブリに署名した場合、公開キー トークンを指定します。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For the <ph id="ph1">`Culture`</ph> attribute, specify the keyword <ph id="ph2">`neutral`</ph> to designate the main assembly and cause the <ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph> class to probe only for the cultures listed in the <ph id="ph4">`&lt;culture&gt;`</ph> nodes.</source>
          <target state="translated"><ph id="ph1">`Culture`</ph>属性、キーワードを指定<ph id="ph2">`neutral`</ph>なり、メインのアセンブリを指定する、<ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスのみで表示されているカルチャを探すために、<ph id="ph4">`&lt;culture&gt;`</ph>ノード。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For more information about fully qualified assembly names, see the article <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>.</source>
          <target state="translated">完全修飾アセンブリ名の詳細については、記事を参照してください。<bpt id="p1">[</bpt>アセンブリ名<ept id="p1">](~/docs/framework/app-domains/assembly-names.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For more information about strong-named assemblies, see the article <bpt id="p1">[</bpt>Creating and Using Strong-Named Assemblies<ept id="p1">](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md)</ept>.</source>
          <target state="translated">厳密な名前付きアセンブリの詳細については、記事を参照してください。<bpt id="p1">[</bpt>作成と使用<ept id="p1">](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Specify one or more <ph id="ph1">`&lt;culture&gt;`</ph> nodes with a specific culture name, such as "fr-FR", or a neutral culture name, such as "fr".</source>
          <target state="translated">1 つ以上指定<ph id="ph1">`&lt;culture&gt;`</ph>"FR-FR"などの特定のカルチャ名、または"fr"などのニュートラル カルチャ名を持つノード。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If resources are needed for any assembly not listed under the <ph id="ph1">`&lt;satelliteassemblies&gt;`</ph> node, the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> class probes for cultures using standard probing rules.</source>
          <target state="translated">下に表示されない任意のアセンブリのリソースが必要なかどうか、 <ph id="ph1">`&lt;satelliteassemblies&gt;`</ph>  ノード、<ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスの標準のプローブ規則を使用するカルチャをプローブします。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> Apps</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリ</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class is supported in <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, we do not recommend its use.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスではサポートされて<ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリの場合はお勧めしません、使用できます。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Use this class only when you develop <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph> projects that can be used with <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps.</source>
          <target state="translated">このクラスを使用して開発する場合のみ<ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>で使用できるプロジェクト<ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリ。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>To retrieve resources from <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, use the <bpt id="p1">[</bpt>Windows.ApplicationModel.Resources.ResourceLoader<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238182)</ept> class instead.</source>
          <target state="translated">リソースを取得する<ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリを使用して、 <bpt id="p1">[</bpt>Windows.ApplicationModel.Resources.ResourceLoader<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238182)</ept>クラスの代わりにします。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> class retrieves resources from package resource index (PRI) files.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリの場合、<ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスは、パッケージ リソース インデックス (PRI) ファイルからリソースを取得します。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>A single PRI file (the application package PRI file) contains the resources for both the default culture and any localized cultures.</source>
          <target state="translated">単一の PRI ファイル (アプリケーション パッケージの PRI ファイル) には、既定のカルチャおよびすべてのリソースが含まれています。 カルチャに合わせてローカライズします。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You use the MakePRI utility to create a PRI file from one or more resource files that are in XML resource (.resw) format.</source>
          <target state="translated">XML リソース (.resw) 形式である 1 つまたは複数のリソース ファイルから PRI ファイルを作成するのにには、MakePRI ユーティリティを使用します。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For resources that are included in a Visual Studio project, Visual Studio handles the process of creating and packaging the PRI file automatically.</source>
          <target state="translated">リソースについては、Visual Studio プロジェクトに含まれているは、Visual Studio は、作成して、その PRI ファイルを自動的にパッケージ化のプロセスを処理します。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You can then use the .NET Framework <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class to access the app's or library's resources.</source>
          <target state="translated">.NET Framework を使用することができますし、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>アプリのまたはライブラリのリソースにアクセスするクラス。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object for a <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app in the same way that you do for a desktop app.</source>
          <target state="translated">インスタンス化することができます、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクトに対して、<ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリ、デスクトップ アプリの場合と同様にします。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You can then access the resources for a particular culture by passing the name of the resource to be retrieved to the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%29&gt;</ph> method.</source>
          <target state="translated">取得するリソースの名前を渡すことによって特定のカルチャのリソースにアクセスすることができますし、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>By default, this method returns the resource for the culture determined by the current UI culture of the thread that made the call.</source>
          <target state="translated">既定では、このメソッドは、呼び出しを行ったスレッドの現在の UI カルチャによって決まりますのカルチャのリソースを返します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>You can also retrieve the resources for a specific culture by passing the name of the resource and a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the culture whose resource is to be retrieved to the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> method.</source>
          <target state="translated">リソースの名前を渡すことによって、特定のカルチャのリソースを取得することもでき、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph>がリソースを取得するカルチャを表すオブジェクト、<ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If the resource for the current UI culture or the specified culture cannot be found, the resource manager uses a UI language fallback list to locate a suitable resource.</source>
          <target state="translated">現在の UI カルチャまたは指定されたカルチャのリソースが見つからない場合、リソース マネージャーは適切なリソースを検索する UI 言語フォールバック一覧を使用します。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The following example demonstrates how to use an explicit culture and the implicit current UI culture to obtain string resources from a main assembly and a satellite assembly.</source>
          <target state="translated">次の例では、明示的なカルチャと暗黙の現在の UI カルチャを使用して、メイン アセンブリと、サテライト アセンブリから文字列リソースを取得する方法を示します。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>For more information, see the "Directory Locations for Satellite Assemblies Not Installed in the Global Assembly Cache" section of the <bpt id="p1">[</bpt>Creating Satellite Assemblies<ept id="p1">](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept> topic.</source>
          <target state="translated">詳細については、「ディレクトリの場所のサテライト アセンブリいないインストールでグローバル アセンブリ キャッシュ」セクションを参照してください、<bpt id="p1">[</bpt>サテライト アセンブリの作成<ept id="p1">](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept>トピックです。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>To run this example:</source>
          <target state="translated">この例を実行します。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>In the app directory, create a file named rmc.txt that contains the following resource strings:</source>
          <target state="translated">アプリ ディレクトリでは、次のリソース文字列を含む rmc.txt をという名前のファイルを作成します。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Use the  <bpt id="p1">[</bpt>Resource File Generator<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> to generate the rmc.resources resource file from the rmc.txt input file as follows:</source>
          <target state="translated">使用して、<bpt id="p1">[</bpt>リソース ファイル ジェネレーター<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> rmc.txt 入力ファイルから次のように rmc.resources リソース ファイルを生成します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Create a subdirectory of the app directory and name it "es-MX".</source>
          <target state="translated">アプリケーション ディレクトリのサブディレクトリを作成し、名前"es MX"です。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>This is the culture name of the satellite assembly that you will create in the next three steps.</source>
          <target state="translated">これは、次の 3 つの手順で作成するサテライト アセンブリのカルチャ名です。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Create a file named rmc.es-MX.txt in the es-MX directory that contains the following resource strings:</source>
          <target state="translated">次のリソース文字列を含む es MX ディレクトリ内の rmc.es MX.txt をという名前のファイルを作成します。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Use the  <bpt id="p1">[</bpt>Resource File Generator<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> to generate the rmc.es-MX.resources resource file from the rmc.es-MX.txt input file as follows:</source>
          <target state="translated">使用して、<bpt id="p1">[</bpt>リソース ファイル ジェネレーター<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> rmc.es MX.txt 入力ファイルから次のように、rmc.es MX.resources リソース ファイルを生成します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Assume that the filename for this example is rmc.vb or rmc.cs.</source>
          <target state="translated">この例のファイル名が rmc.vb または rmc.cs のどちらであると仮定します。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Copy the following source code into a file.</source>
          <target state="translated">次のソース コードをファイルにコピーします。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Then compile it and embed the main assembly resource file, rmc.resources, in the executable assembly.</source>
          <target state="translated">コンパイルし、メイン アセンブリのリソース ファイル、rmc.resources、実行可能アセンブリに埋め込むか。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If you are using the Visual Basic compiler, the syntax is:</source>
          <target state="translated">Visual Basic コンパイラを使用している場合、構文です。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The corresponding syntax for the C# compiler is:</source>
          <target state="translated">C# コンパイラの対応する構文です。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Use the  <bpt id="p1">[</bpt>Assembly Linker<ept id="p1">](~/docs/framework/tools/al-exe-assembly-linker.md)</ept> to create a satellite assembly.</source>
          <target state="translated">使用して、<bpt id="p1">[</bpt>アセンブリ リンカー<ept id="p1">](~/docs/framework/tools/al-exe-assembly-linker.md)</ept>サテライト アセンブリを作成します。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If the base name of the app is rmc, the satellite assembly name must be rmc.resources.dll.</source>
          <target state="translated">アプリの基本名が rmc の場合は、サテライト アセンブリ名は rmc.resources.dll をする必要があります。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>The satellite assembly should be created in the es-MX directory.</source>
          <target state="translated">サテライト アセンブリは、es MX ディレクトリに作成する必要があります。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>If es-MX is the current directory, use this command:</source>
          <target state="translated">Es MX が現在のディレクトリの場合は、このコマンドを使用します。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>Run rmc.exe to obtain and display the embedded resource strings.</source>
          <target state="translated">Rmc.exe を取得し、表示、埋め込まれたリソース文字列を実行します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceManager">
          <source>This type is thread safe.</source>
          <target state="translated">この型はスレッド セーフです。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceManager">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class with default values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスの新しいインスタンスを既定値で初期化します。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor">
          <source>This constructor is useful only if you write your own class that derives from  the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class.</source>
          <target state="translated">このコンス トラクターはから派生した独自のクラスを記述する場合にのみ役立ちます、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>A type from which the resource manager derives all information for finding .resources files.</source>
          <target state="translated">リソース マネージャーが .resources ファイルを検索するために必要なすべての情報を取得する元となる種類。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class that looks up resources in satellite assemblies based on information from the specified type object.</source>
          <target state="translated">指定した型オブジェクトの情報に基づいて、サテライト アセンブリでリソースを検索する <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Desktop Apps</source>
          <target state="translated">デスクトップ アプリ</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>In desktop apps, the resource manager uses the <ph id="ph1">`resourceSource`</ph> parameter to load a particular resource file as follows:</source>
          <target state="translated">デスクトップ アプリでのリソース マネージャーを使用して、<ph id="ph1">`resourceSource`</ph>パラメーターを次のように、特定のリソース ファイルを読み込めません。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>If the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute is not used to indicate that the resources of the default culture reside in a satellite assembly, the resource manager assumes that the resource file for the default culture is found in the same assembly as the type specified by the <ph id="ph2">`resourceSource`</ph> parameter.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph>属性が、サテライト アセンブリに既定のカルチャのリソースが存在する、リソース マネージャーで指定された型と同じアセンブリに既定のカルチャのリソース ファイルがあると想定を示すために使用されない、<ph id="ph2">`resourceSource`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>The resource manager assumes that the default resource file has the same base name as the type specified by the <ph id="ph1">`resourceSource`</ph> parameter.</source>
          <target state="translated">リソース マネージャーでは、既定のリソース ファイルで指定された型と同じ基本名であると想定、<ph id="ph1">`resourceSource`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>The resource manager uses the default <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> class to manipulate the resource file.</source>
          <target state="translated">リソース マネージャーが既定値を使用して<ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph>リソース ファイルを操作するクラス。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>For example, given a type named MyCompany.MyProduct.MyType, the resource manager looks for a .resources file named MyCompany.MyProduct.MyType.resources in the assembly that defines MyType.</source>
          <target state="translated">たとえば、MyCompany.MyProduct.MyType をという名前の型を指定するには、リソース マネージャー検索 MyType を定義するアセンブリで MyCompany.MyProduct.MyType.resources をという名前の .resources ファイルです。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>In Visual Studio, the Resource Designer automatically generates code that defines an <ph id="ph1">`internal`</ph> (in C#) or <ph id="ph2">`Friend`</ph> (in Visual Basic) class whose name is the same as the base name of the .resources file for the default culture.</source>
          <target state="translated">Visual Studio で、リソース デザイナーを自動的に生成を定義するコード、 <ph id="ph1">`internal`</ph> (C# の場合) または<ph id="ph2">`Friend`</ph>(Visual Basic) のクラスの名前は既定のカルチャの .resources ファイルの基本名と同じです。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>This makes it possible to instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object and couple it with a particular set of resources by getting a type object whose name corresponds to the name of the resource, because as long as the class is visible to the compiler, the resources must be as well.</source>
          <target state="translated">インスタンスを作成できるようになります、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクトし、クラスがコンパイラに表示されている限り、リソースにもする必要がありますので、リソースの名前に対応する名前の型のオブジェクトを取得することによって、特定の一連のリソースを結合します。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>For example, if a .resources file is named Resource1, the following statement instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object to manage the .resources file named Resource1:</source>
          <target state="translated">たとえば、.resources ファイルが Resource1 をという名前の場合、次のステートメントをインスタンス化、 <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> Resource1 をという名前の .resources ファイルを管理するオブジェクト。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>If you're not using Visual Studio, you can create a class with no members whose namespace and name are the same as that of the default .resources file.</source>
          <target state="translated">Visual Studio を使用していない場合は、メンバーを持たないが名前空間と名前は、既定の .resources ファイルのと同じクラスを作成することができます。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>The example provides an illustration.</source>
          <target state="translated">具体的な例を次に示します。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> Apps</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリ</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class is supported in <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, we do not recommend its use.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスではサポートされて<ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリの場合はお勧めしません、使用できます。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Use this class only when you develop <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph> projects that can be used with <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps.</source>
          <target state="translated">このクラスを使用して開発する場合のみ<ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>で使用できるプロジェクト<ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリ。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>To retrieve resources from <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, use the <bpt id="p1">[</bpt>Windows.ApplicationModel.Resources.ResourceLoader<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238182)</ept> class instead.</source>
          <target state="translated">リソースを取得する<ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリを使用して、 <bpt id="p1">[</bpt>Windows.ApplicationModel.Resources.ResourceLoader<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238182)</ept>クラスの代わりにします。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>In <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> uses the <ph id="ph3">`resourceSource`</ph> parameter to infer the assembly, base name, and the namespace where the resource items can be located within the app's package resource index (PRI) file.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリでは、<ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph>を使用して、<ph id="ph3">`resourceSource`</ph>パラメーターをアセンブリ、基本名、およびリソース項目をアプリのパッケージ リソース インデックス (PRI) ファイル内に配置できる場所の名前空間を推測します。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>For example, given a type named MyCompany.MyProduct.MyType that is defined in <ph id="ph1">`MyAssembly`</ph>, the resource manager looks for a resource set identifier named MyAssembly and looks for a scope MyCompany.MyProduct.MyType within that resource set.</source>
          <target state="translated">たとえばで定義されている MyCompany.MyProduct.MyType をという名前の型指定された<ph id="ph1">`MyAssembly`</ph>、リソース マネージャーは、リソースが MyAssembly をという名前の識別子を設定して MyCompany.MyProduct.MyType そのリソース セット内のスコープのです。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>The resource manager searches for resource items under the default context (current culture, current high contrast setting, and so on) within this scope.</source>
          <target state="translated">リソース マネージャーは、このスコープ内での既定のコンテキスト (現在のカルチャや現在のハイ コントラスト設定) の下にあるリソース項目を検索します。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.Type%29&gt;</ph> constructor to instantiate a <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> object.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.Type%29&gt;</ph>をインスタンス化するコンス トラクター、<ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>It consists of resources compiled from .txt files for the English (en), French (France) (fr-FR), and Russian (Russia) (ru-RU) cultures.</source>
          <target state="translated">英語 (en)、フランス語 (フランス) (FR-FR)、およびロシア語 (ロシア) (RU-RU) 用の .txt ファイルからコンパイルされたリソースのカルチャ。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>The example changes the current culture and current UI culture to English (United States), French (France), Russian (Russia), and Swedish (Sweden).</source>
          <target state="translated">例は、英語 (米国)、フランス語 (フランス)、ロシア語 (ロシア)、およびスウェーデン語 (スウェーデン) に、現在のカルチャと現在の UI カルチャを変更します。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%29&gt;</ph> method to retrieve the localized string, which displays a greeting that depends on the time of day.</source>
          <target state="translated">呼び出して、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%29&gt;</ph>日の時間に依存している応答メッセージを表示するローカライズされた文字列を取得します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>The example requires three text-based resource files, as listed in the following table.</source>
          <target state="translated">例では、次の表に記載されている、3 つのテキスト ベースのリソース ファイルが必要です。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Each file includes string resources named <ph id="ph1">`Morning`</ph>, <ph id="ph2">`Afternoon`</ph>, and <ph id="ph3">`Evening`</ph>.</source>
          <target state="translated">各ファイルには、という名前の文字列リソースが含まれています。 <ph id="ph1">`Morning`</ph>、 <ph id="ph2">`Afternoon`</ph>、および<ph id="ph3">`Evening`</ph>です。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Culture</source>
          <target state="translated">culture</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>File name</source>
          <target state="translated">ファイル名</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Resource name</source>
          <target state="translated">リソース名</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Resource value</source>
          <target state="translated">リソースの値</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>en-US</source>
          <target state="translated">en-US</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>GreetingResources.txt</source>
          <target state="translated">GreetingResources.txt</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Good morning</source>
          <target state="translated">おはようございます</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>en-US</source>
          <target state="translated">en-US</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>GreetingResources.txt</source>
          <target state="translated">GreetingResources.txt</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Good afternoon</source>
          <target state="translated">こんにちは</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>en-US</source>
          <target state="translated">en-US</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>GreetingResources.txt</source>
          <target state="translated">GreetingResources.txt</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Good evening</source>
          <target state="translated">こんばんは</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>fr-FR</source>
          <target state="translated">fr-FR</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>GreetingResources.fr-FR.txt</source>
          <target state="translated">GreetingResources.fr-FR.txt</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Bonjour</source>
          <target state="translated">Bonjour</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>fr-FR</source>
          <target state="translated">fr-FR</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>GreetingResources.fr-FR.txt</source>
          <target state="translated">GreetingResources.fr-FR.txt</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Bonjour</source>
          <target state="translated">Bonjour</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>fr-FR</source>
          <target state="translated">fr-FR</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>GreetingResources.fr-FR.txt</source>
          <target state="translated">GreetingResources.fr-FR.txt</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Bonsoir</source>
          <target state="translated">Bonsoir</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>ru-RU</source>
          <target state="translated">ru-RU</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>GreetingResources.ru-RU.txt</source>
          <target state="translated">GreetingResources.ru-RU.txt</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Доброе утро</source>
          <target state="translated">Доброе утро</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>ru-RU</source>
          <target state="translated">ru-RU</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>GreetingResources.ru-RU.txt</source>
          <target state="translated">GreetingResources.ru-RU.txt</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Добрый день</source>
          <target state="translated">Добрый день</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>ru-RU</source>
          <target state="translated">ru-RU</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>GreetingResources.ru-RU.txt</source>
          <target state="translated">GreetingResources.ru-RU.txt</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Добрый вечер</source>
          <target state="translated">Добрый вечер</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>You can use the following batch file to compile the Visual Basic example and create an executable named Greet.exe.</source>
          <target state="translated">次のバッチ ファイルを使用して、Visual Basic の例をコンパイルして Greet.exe を名前付き実行可能ファイルを作成することができます。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>To compile with C#, change the compiler name from <ph id="ph1">`vbc`</ph> to <ph id="ph2">`csc`</ph> and the file extension from <ph id="ph3">`.vb`</ph> to <ph id="ph4">`.cs`</ph>.</source>
          <target state="translated">C# でコンパイルにからコンパイラの名前を変更<ph id="ph1">`vbc`</ph>に<ph id="ph2">`csc`</ph>およびファイルの拡張子から<ph id="ph3">`.vb`</ph>に<ph id="ph4">`.cs`</ph>です。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Here's the source code for the example (ShowDate.vb for the Visual Basic version or ShowDate.cs for the C# version of the code).</source>
          <target state="translated">(Visual Basic バージョンの ShowDate.vb) または ShowDate.cs c# バージョンのコードの例のソース コードを次に示します。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>In addition to defining an app class named <ph id="ph1">`Example`</ph>, the source code defines an internal class whose name, <ph id="ph2">`GreetingResources`</ph>, is the same as the base name of the resource files.</source>
          <target state="translated">App クラスを定義するだけでなく、名前付き<ph id="ph1">`Example`</ph>、名前、内部クラスを定義するソース コード<ph id="ph2">`GreetingResources`</ph>、リソース ファイルの基本名と同じです。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>This makes it possible to successfully instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.Type%29&gt;</ph> constructor.</source>
          <target state="translated">これにより、正常にインスタンス化すること、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクトを呼び出して、<ph id="ph2">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.Type%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Notice that the output displays the appropriate localized string except when the current UI culture is Swedish (Sweden), in which case it uses English language resources.</source>
          <target state="translated">出力が表示されますが、適切なローカライズされた文字列こと場合を除いて、現在の UI カルチャ スウェーデン語 (スウェーデン)、その場合は、通知は、英語の言語リソースを使用します。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>Because Swedish language resources are unavailable, the app uses the resources of the default culture, as defined by the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute, instead.</source>
          <target state="translated">スウェーデン語の言語リソースが利用できないため、アプリで使用する既定のカルチャのリソースの定義に従って、<ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph>属性が代わりにします。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.Type)">
          <source>The <ph id="ph1">&lt;paramref name="resourceSource" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceSource" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>The root name of the resource file without its extension but including any fully qualified namespace name.</source>
          <target state="translated">拡張子はないが、完全修飾名前空間名を含んだ、リソース ファイルのルート名。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>For example, the root name for the resource file named MyApplication.MyResource.en-US.resources is MyApplication.MyResource.</source>
          <target state="translated">たとえば、"MyApplication.MyResource.en-US.resources" というリソース ファイルのルート名は "MyApplication.MyResource" です。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>The main assembly for the resources.</source>
          <target state="translated">リソースのメイン アセンブリ。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class that looks up resources contained in files with the specified root name in the given assembly.</source>
          <target state="translated">指定したアセンブリ内で指定したルート名を持つファイルに含まれているリソースを検索する <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>Desktop Apps</source>
          <target state="translated">デスクトップ アプリ</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>In desktop apps, the individual culture-specific resource files should be contained in satellite assemblies, and the default culture's resource file should be contained in the main assembly.</source>
          <target state="translated">デスクトップ アプリは、個々 のカルチャに固有のリソース ファイルは、サテライト アセンブリに含まれている必要があり、既定のカルチャのリソース ファイルは、メイン アセンブリに含める必要があります。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>A satellite assembly is assumed to contain resources for a single culture specified in that assembly's manifest, and is loaded as necessary.</source>
          <target state="translated">サテライト アセンブリでは、そのアセンブリのマニフェストで指定された 1 つのカルチャのリソースを含んでいると想定され、必要に応じて読み込まれます。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>To retrieve resources from .resources files directly instead of retrieving them from assemblies, you must call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A&gt;</ph> method instead to instantiate a <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> object.</source>
          <target state="translated">リソースを取得するアセンブリからそれらを取得するのではなく、直接の .resources ファイルから、呼び出す必要があります、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A&gt;</ph>メソッド代わりにインスタンス化する、<ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>If the resource file identified by <ph id="ph1">`baseName`</ph> cannot be found in <ph id="ph2">`assembly`</ph>, the method instantiates a <ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph> object, but the attempt to retrieve a specific resource throws an exception, typically <ph id="ph4">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph>.</source>
          <target state="translated">リソース ファイルがによって識別される場合<ph id="ph1">`baseName`</ph>で見つからない<ph id="ph2">`assembly`</ph>、メソッドがインスタンス化、<ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクトが、特定のリソースを取得しようとすると、通常、例外がスロー<ph id="ph4">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>For information about diagnosing the cause of the exception, see the "Handling the MissingManifestResourceException Exception" section of the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class topic.</source>
          <target state="translated">例外の原因を診断する方法については、の「、MissingManifestResourceException 例外を処理する」セクションを参照して、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスに関するトピック。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> Apps</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリ</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class is supported in <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, we do not recommend its use.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスではサポートされて<ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリの場合はお勧めしません、使用できます。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>Use this class only when you develop <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph> projects that can be used with <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps.</source>
          <target state="translated">このクラスを使用して開発する場合のみ<ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>で使用できるプロジェクト<ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリ。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>To retrieve resources from <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, use the <bpt id="p1">[</bpt>Windows.ApplicationModel.Resources.ResourceLoader<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238182)</ept> class instead.</source>
          <target state="translated">リソースを取得する<ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリを使用して、 <bpt id="p1">[</bpt>Windows.ApplicationModel.Resources.ResourceLoader<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238182)</ept>クラスの代わりにします。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>In <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, the resource manager uses the simple name of the <ph id="ph2">`assembly`</ph> parameter to look up a matching resource set in the app's package resource index (PRI) file.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリでは、リソース マネージャーの使用の簡易名、<ph id="ph2">`assembly`</ph>アプリのパッケージ リソース インデックス (PRI) ファイルで一致するリソースを検索するパラメーターを設定します。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>The <ph id="ph1">`baseName`</ph> parameter is used to look up a resource item within the resource set.</source>
          <target state="translated"><ph id="ph1">`baseName`</ph>パラメーターは、リソース セット内のリソース アイテムの検索に使用します。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>For example, the root name for PortableLibrary1.Resource1.de-DE.resources is PortableLibrary1.Resource1.</source>
          <target state="translated">たとえばのルート名 PortableLibrary1.Resource1.de DE.resources は PortableLibrary1.Resource1 します。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>The following example uses a simple non-localized "Hello World" app to illustrate the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29&gt;</ph> constructor.</source>
          <target state="translated">次の例を示すために、簡単なローカライズされていない"Hello World"アプリを使用して、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>The following shows the contents of a text file named ExampleResources.txt.</source>
          <target state="translated">ExampleResources.txt をという名前のテキスト ファイルの内容を次に示します。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>When the app is compiled, the resource is embedded in the main app assembly.</source>
          <target state="translated">アプリのコンパイル時に、リソースがメインのアプリ アセンブリに埋め込まれます。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>The text file can be converted to a binary resource file by using the  at the command prompt as follows:</source>
          <target state="translated">使用して、テキスト ファイルをバイナリ リソース ファイルに変換できる、コマンド プロンプトで、次のようにします。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>The following example provides the executable code that instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object, prompts the user to enter a name, and displays a greeting.</source>
          <target state="translated">次の例は、実行可能インスタンス化するコード、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクトの名前を入力するように求めるし、するとあいさつ文が表示されます。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>It can be compiled by using the following command in Visual Basic:</source>
          <target state="translated">Visual Basic では、次のコマンドを使用してコンパイルできます。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>or by using the following command in C#:</source>
          <target state="translated">または、次を使用して c# ではコマンドします。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>Note that the example retrieves a reference to the assembly that contains the resource file by passing a type defined in that assembly to the <ph id="ph1">`typeof`</ph> function (in C#) or the <ph id="ph2">`GetType`</ph> function (in Visual Basic) and retrieving the value of its <ph id="ph3">&lt;xref:System.Type.Assembly%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">例をそのアセンブリで定義された型を渡すことによって、リソース ファイルを含むアセンブリへの参照を取得することに注意してください、<ph id="ph1">`typeof`</ph>関数 (c#) または<ph id="ph2">`GetType`</ph>(Visual Basic) の機能およびそのの値を取得する<ph id="ph3">&lt;xref:System.Type.Assembly%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>The <ph id="ph1">&lt;paramref name="baseName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="assembly" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="baseName" /&gt;</ph> パラメーターまたは <ph id="ph2">&lt;paramref name="assembly" /&gt;</ph> パラメーターが <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>This constructor uses the system-provided <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> implementation.</source>
          <target state="translated">このコンス トラクターを使用して、システム指定<ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>To use a custom resource file format, you should derive from the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> class, override the <ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph> methods, and pass that type to the <ph id="ph4">&lt;see cref="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)" /&gt;</ph> constructor.</source>
          <target state="translated">カスタム リソース ファイル形式を使用するのから派生する必要があります、<ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>クラス、オーバーライド、<ph id="ph2">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph>と<ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph>メソッド、およびパスを入力する、<ph id="ph4">&lt;see cref="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)" /&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
          <source>Using a custom <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> can be useful for controlling resource caching policy or supporting your own resource file format, but is generally not necessary.</source>
          <target state="translated">使用するカスタム<ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>制御するリソースをキャッシュ ポリシー、または、独自のリソース ファイル形式をサポートするが、通常必要はありませんの役に立ちます。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>The root name of the resource file without its extension but including any fully qualified namespace name.</source>
          <target state="translated">拡張子はないが、完全修飾名前空間名を含んだ、リソース ファイルのルート名。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>For example, the root name for the resource file named MyApplication.MyResource.en-US.resources is MyApplication.MyResource.</source>
          <target state="translated">たとえば、"MyApplication.MyResource.en-US.resources" というリソース ファイルのルート名は "MyApplication.MyResource" です。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>The main assembly for the resources.</source>
          <target state="translated">リソースのメイン アセンブリ。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>The type of the custom <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> to use.</source>
          <target state="translated">使用するカスタム <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> の種類。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>If <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default runtime <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> object is used.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> の場合は、既定のランタイム <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> オブジェクトが使用されます。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class that uses a specified <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> class to look up resources contained in files with the specified root name in the given assembly.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> クラスを使用して、指定したアセンブリ内で指定したルート名を持つファイルに含まれるリソースを検索する <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>The individual culture-specific resource files should be contained in satellite assemblies, and the default culture's resource file should be contained in the main assembly.</source>
          <target state="translated">個々 のカルチャに固有のリソース ファイルは、サテライト アセンブリに含まれている必要があり、既定のカルチャのリソース ファイルは、メイン アセンブリに含める必要があります。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>A satellite assembly is assumed to contain resources for a single culture specified in that assembly's manifest, and is loaded as necessary.</source>
          <target state="translated">サテライト アセンブリでは、そのアセンブリのマニフェストで指定された 1 つのカルチャのリソースを含んでいると想定され、必要に応じて読み込まれます。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>To retrieve resources from .resources files directly instead of retrieving them from assemblies, you must call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A&gt;</ph> method instead to instantiate a <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> object.</source>
          <target state="translated">リソースを取得するアセンブリからそれらを取得するのではなく、直接の .resources ファイルから、呼び出す必要があります、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A&gt;</ph>メソッド代わりにインスタンス化する、<ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>If the resource file identified by <ph id="ph1">`baseName`</ph> cannot be found in <ph id="ph2">`assembly`</ph>, the method instantiates a <ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph> object, but the attempt to retrieve a specific resource throws an exception, typically <ph id="ph4">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph>.</source>
          <target state="translated">リソース ファイルがによって識別される場合<ph id="ph1">`baseName`</ph>で見つからない<ph id="ph2">`assembly`</ph>、メソッドがインスタンス化、<ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクトが、特定のリソースを取得しようとすると、通常、例外がスロー<ph id="ph4">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>For information about diagnosing the cause of the exception, see the "Handling the MissingManifestResourceException Exception" section of the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class topic.</source>
          <target state="translated">例外の原因を診断する方法については、の「、MissingManifestResourceException 例外を処理する」セクションを参照して、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスに関するトピック。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>The <ph id="ph1">`usingResourceSet`</ph> parameter is used to support your own resource format, and will commonly be <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`usingResourceSet`</ph>パラメーターは、独自のリソース形式をサポートするために使用され、は、一般的に<ph id="ph2">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>This is different from the constructor that takes a <ph id="ph1">&lt;xref:System.Type&gt;</ph> only.</source>
          <target state="translated">これとは異なるを受け取るコンス トラクター、<ph id="ph1">&lt;xref:System.Type&gt;</ph>のみです。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source><ph id="ph1">&lt;paramref name="usingResourceset" /&gt;</ph> is not a derived class of <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="usingResourceset" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> の派生クラスではありません。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>The <ph id="ph1">&lt;paramref name="baseName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="assembly" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="baseName" /&gt;</ph> パラメーターまたは <ph id="ph2">&lt;paramref name="assembly" /&gt;</ph> パラメーターが <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>This constructor lets you specify a <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> implementation.</source>
          <target state="translated">このコンス トラクターでは、指定することができます、<ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
          <source>If you do not want a specific <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> implementation but would like to use a custom resource file format, you should derive from the <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> class, override the <ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph> and <ph id="ph4">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph> methods, and pass that type to this constructor.</source>
          <target state="translated">特定したくない場合<ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>実装が、カスタム リソース ファイル形式を使用するようにから派生する必要があります、<ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph>クラスをオーバーライド、<ph id="ph3">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultReader" /&gt;</ph>と<ph id="ph4">&lt;see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /&gt;</ph>メソッド、およびこのコンス トラクターにパスを入力します。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="P:System.Resources.ResourceManager.BaseName">
          <source>Gets the root name of the resource files that the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> searches for resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> がリソースを検索するリソース ファイルのルート名を取得します。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.BaseName">
          <source>The root name of the resource files that the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> searches for resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> がリソースを検索するリソース ファイルのルート名。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.BaseName">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph> property reflects the fully qualified namespace name and the root resource name of a resource file, without its culture or file name extension.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph>プロパティには、完全修飾名前空間の名前とのカルチャまたはファイル名拡張子の付かない、リソース ファイルのルート リソース名が反映されます。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.BaseName">
          <source>For example, if an app's default resource file is named <ph id="ph1">`SampleApps.StringResources.resources`</ph>, the value of the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph> property  is "SampleApps.StringResources".</source>
          <target state="translated">たとえば、アプリの既定のリソース ファイルの名前は<ph id="ph1">`SampleApps.StringResources.resources`</ph>の値、<ph id="ph2">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph>プロパティが"SampleApps.StringResources"です。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.BaseName">
          <source>If an app's default resource file is named <ph id="ph1">`SampleApps.StringResources.en-US.resources`</ph> and is embedded in a satellite assembly, the value of the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph> property is still "SampleApps.StringResources".</source>
          <target state="translated">場合は、アプリの既定のリソース ファイルの名前は<ph id="ph1">`SampleApps.StringResources.en-US.resources`</ph>しの値、サテライト アセンブリに組み込まれて、<ph id="ph2">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph>プロパティは"SampleApps.StringResources"のままです。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.BaseName">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph> property value of a resource file that is compiled and embedded from the command line does not include a namespace name unless you explicitly include one when compiling the file.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph>指定しない限り、明示的に 1 つのファイルをコンパイルするときにコンパイルされ、コマンドラインから埋め込まれたリソース ファイルのプロパティの値が名前空間の名前を含まれません。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.BaseName">
          <source>On the other hand, the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph> property value of a resource file that is compiled and embedded within the Visual Studio environment typically does include the default namespace name.</source>
          <target state="translated">その一方で、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph>コンパイルされ、通常、Visual Studio 環境内で埋め込まれたリソース ファイルのプロパティの値には、既定の名前空間の名前にが含まれます。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.BaseName">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph> property value is the same as the string passed to the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29&gt;</ph> or <ph id="ph3">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%2CSystem.Type%29&gt;</ph> constructor when instantiating a <ph id="ph4">&lt;xref:System.Resources.ResourceManager&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.BaseName%2A&gt;</ph>に渡された文字列と同じプロパティの値が、<ph id="ph2">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29&gt;</ph>または<ph id="ph3">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%2CSystem.Type%29&gt;</ph>コンス トラクターをインスタンス化するときに、<ph id="ph4">&lt;xref:System.Resources.ResourceManager&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.BaseName">
          <source>You can determine the names of embedded .resources files by compiling and running the following utility.</source>
          <target state="translated">コンパイルし、次のユーティリティを実行して、埋め込みの .resources ファイルの名前を指定できます。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.BaseName">
          <source>This is a console app that accepts the name of a main assembly or satellite assembly as a command-line parameter.</source>
          <target state="translated">これは、メイン アセンブリまたはコマンド ライン パラメーターとしてのサテライト アセンブリの名前を指定するコンソール アプリです。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.BaseName">
          <source>It displays the strings that should be provided as the <ph id="ph1">`baseName`</ph> parameter of the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29&gt;</ph> or <ph id="ph3">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%2CSystem.Type%29&gt;</ph> constructor so that the resource manager can correctly identify the resource.</source>
          <target state="translated">文字列として指定する必要がありますが表示されます、<ph id="ph1">`baseName`</ph>のパラメーター、<ph id="ph2">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29&gt;</ph>または<ph id="ph3">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%2CSystem.Type%29&gt;</ph>コンス トラクターはリソース マネージャーでは、リソースを正しく特定できるようにします。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="F:System.Resources.ResourceManager.BaseNameField">
          <source>Specifies the root name of the resource files that the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> searches for resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> がリソースを検索するリソース ファイルのルート名を指定します。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Resources.ResourceManager.BaseNameField">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.BaseNameField&gt;</ph> field is useful only if you write your own class that derives from the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.BaseNameField&gt;</ph>フィールドはから派生した独自のクラスを記述する場合にのみ役立ちます、<ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>The root name of the resources.</source>
          <target state="translated">リソースのルート名。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>For example, the root name for the resource file named "MyResource.en-US.resources" is "MyResource".</source>
          <target state="translated">たとえば、"MyResource.en-US.resources" というリソース ファイルのルート名は "MyResource" です。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>The name of the directory to search for the resources.</source>
          <target state="translated">リソースを検索するディレクトリの名前。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source><bpt id="p1">&lt;c&gt;</bpt>resourceDir<ept id="p1">&lt;/c&gt;</ept> can be an absolute path or a relative path from the application directory.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>resourceDir<ept id="p1">&lt;/c&gt;</ept> には、アプリケーション ディレクトリを基準とした相対パス、または絶対パスを指定できます。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>The type of the custom <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> to use.</source>
          <target state="translated">使用するカスタム <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> の種類。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>If <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default runtime <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> object is used.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> の場合は、既定のランタイム <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> オブジェクトが使用されます。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> object that searches a specific directory instead of an assembly manifest for resources.</source>
          <target state="translated">リソースのアセンブリ マニフェストではなく特定のディレクトリを検索する <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>A new instance of a resource manager that searches the specified directory instead of an assembly manifest for resources.</source>
          <target state="translated">リソースのアセンブリ マニフェストの代わりに指定されたディレクトリを検索する、リソース マネージャーの新しいインスタンス。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>This method returns a resource manager that retrieves resources from a .resources file that is not embedded in an assembly.</source>
          <target state="translated">このメソッドは、アセンブリに埋め込まれていない .resources ファイルからリソースを取得するリソース マネージャーを返します。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>You can use this <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object to load resources for an ASP.NET page or to test a <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> implementation.</source>
          <target state="translated">これを行うこともできます<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>ASP.NET ページのリソースを読み込むかをテストするオブジェクト、<ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>For an example that retrieves resources from a standalone .resources file, see the <bpt id="p1">[</bpt>Retrieving Resources<ept id="p1">](~/docs/framework/resources/retrieving-resources-in-desktop-apps.md)</ept> article.</source>
          <target state="translated">スタンドアロンの .resources ファイルからリソースを取得する例については、<bpt id="p1">[</bpt>リソースの取得<ept id="p1">](~/docs/framework/resources/retrieving-resources-in-desktop-apps.md)</ept>資料です。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>This method lets you specify a <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> implementation.</source>
          <target state="translated">このメソッドを使用してを指定できます、<ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>If you do not want a specific <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> implementation, but would like to use a custom resource file format, you should derive from the <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> class, override the <ph id="ph3">&lt;xref:System.Resources.ResourceSet.GetDefaultReader%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Resources.ResourceSet.GetDefaultWriter%2A&gt;</ph> methods, and pass that type to this constructor.</source>
          <target state="translated">特定したくない場合<ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph>実装では、カスタム リソース ファイル形式を使用したいから派生する必要があります、<ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph>クラスをオーバーライド、<ph id="ph3">&lt;xref:System.Resources.ResourceSet.GetDefaultReader%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Resources.ResourceSet.GetDefaultWriter%2A&gt;</ph>メソッド、およびこのコンス トラクターにパスを入力します。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>Using standalone .resources files in an ASP.NET app will break XCOPY deployment, because the resources remain locked until they are explicitly released by the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.ReleaseAllResources%2A&gt;</ph> method.</source>
          <target state="translated">ASP.NET アプリで、スタンドアロンの .resources ファイルを使用してが中断 XCOPY 配置によって明示的にリリースされるまで、リソースがロックされたままであるため、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.ReleaseAllResources%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>If you want to deploy resources with your ASP.NET apps, compile your .resources files into satellite assemblies.</source>
          <target state="translated">ASP.NET アプリでリソースをデプロイする場合は、.resources ファイルをサテライト アセンブリにコンパイルします。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>The <ph id="ph1">&lt;paramref name="baseName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="resourceDir" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="baseName" /&gt;</ph> パラメーターまたは <ph id="ph2">&lt;paramref name="resourceDir" /&gt;</ph> パラメーターが <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="P:System.Resources.ResourceManager.FallbackLocation">
          <source>Gets or sets the location from which to retrieve default fallback resources.</source>
          <target state="translated">既定のフォールバック リソースの取得元の場所を取得または設定します。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.FallbackLocation">
          <source>One of the enumeration values that specifies where the resource manager can look for fallback resources.</source>
          <target state="translated">リソース マネージャーがフォールバック リソースを検索できる場所を指定する列挙値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.FallbackLocation">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.FallbackLocation%2A&gt;</ph> property is useful only if you write your own class that derives from the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.FallbackLocation%2A&gt;</ph>プロパティから派生した独自のクラスを記述する場合にのみ便利です、<ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.FallbackLocation">
          <source>You can use the <ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph> attribute to inform the resource manager where to find the default culture for an app: in the main assembly (default) or in a satellite assembly.</source>
          <target state="translated">使用することができます、<ph id="ph1">&lt;xref:System.Resources.NeutralResourcesLanguageAttribute&gt;</ph>アプリ用の既定のカルチャを検索する場所、リソース マネージャーに通知する属性: (既定値) のメインのアセンブリまたはサテライト アセンブリ。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetNeutralResourcesLanguage(System.Reflection.Assembly)">
          <source>The assembly for which to return culture-specific information.</source>
          <target state="translated">カルチャ固有の情報を返すアセンブリ。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetNeutralResourcesLanguage(System.Reflection.Assembly)">
          <source>Returns culture-specific information for the main assembly's default resources by retrieving the value of the <ph id="ph1">&lt;see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /&gt;</ph> attribute on a specified assembly.</source>
          <target state="translated">指定したアセンブリで <ph id="ph1">&lt;see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /&gt;</ph> 属性の値を取得して、メイン アセンブリの既定のリソースのカルチャ固有の情報を返します。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetNeutralResourcesLanguage(System.Reflection.Assembly)">
          <source>The culture from the <ph id="ph1">&lt;see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /&gt;</ph> attribute, if found; otherwise, the invariant culture.</source>
          <target state="translated">見つかった場合は <ph id="ph1">&lt;see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /&gt;</ph> 属性のカルチャ、それ以外の場合は、インバリアント カルチャ。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetNeutralResourcesLanguage(System.Reflection.Assembly)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetNeutralResourcesLanguage(System.Reflection.Assembly)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceManager">
          <source>Returns the value of the specified non-string resource for the current culture.</source>
          <target state="translated">現在のカルチャの文字列以外の指定したリソースの値を返します。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>The name of the resource to get.</source>
          <target state="translated">取得するリソースの名前。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>Returns the value of the specified non-string resource.</source>
          <target state="translated">指定した文字列以外のリソースの値を返します。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>The value of the resource localized for the caller's current culture settings.</source>
          <target state="translated">呼び出し元の現在のカルチャ用にローカライズされているリソースの値。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>If an appropriate resource set exists but <ph id="ph1">&lt;paramref name="name" /&gt;</ph> cannot be found, the method returns <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">適切なリソース セットが存在するが、<ph id="ph1">&lt;paramref name="name" /&gt;</ph> が見つからない場合、メソッドは <ph id="ph2">&lt;see langword="null" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph> method is used to retrieve non-string resources.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph>文字列以外のリソースを取得するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>These include values that belong to primitive data types such as <ph id="ph1">&lt;xref:System.Int32&gt;</ph> or <ph id="ph2">&lt;xref:System.Double&gt;</ph>, bitmaps (such as a <ph id="ph3">&lt;xref:System.Drawing.Bitmap?displayProperty=nameWithType&gt;</ph> object), or custom serialized objects.</source>
          <target state="translated">などのプリミティブ データ型に属している値が含まれます<ph id="ph1">&lt;xref:System.Int32&gt;</ph>または<ph id="ph2">&lt;xref:System.Double&gt;</ph>、ビットマップ (など、<ph id="ph3">&lt;xref:System.Drawing.Bitmap?displayProperty=nameWithType&gt;</ph>オブジェクト)、またはカスタム オブジェクトをシリアル化します。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>Typically, the returned object must be cast (in C#) or converted (in Visual Basic) to an object of the appropriate type.</source>
          <target state="translated">通常、返されたオブジェクトにキャスト (c#) または (Visual Basic) の適切な型のオブジェクトに変換する必要があります。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>The returned resource is localized for the UI culture of the current thread, which is defined by the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">返されるリソースがによって定義された、現在のスレッドの UI カルチャに合わせてローカライズ、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>If the resource is not localized for that culture, the resource manager uses fallback rules to load an appropriate resource.</source>
          <target state="translated">リソースは、そのカルチャにローカライズされていない、リソース マネージャーは、適切なリソースを読み込むフォールバック規則を使用します。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>If no usable set of localized resources is found, the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> falls back on the default culture's resources.</source>
          <target state="translated">使用できるローカライズされたリソースのセットが見つからない場合、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>既定のカルチャのリソースにフォールバックします。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>If a resource set for the default culture is not found, the method throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception or, if the resource set is expected to reside in a satellite assembly, a <ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> exception.</source>
          <target state="translated">既定のカルチャのリソース セットが見つからない場合がスローされます、<ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph>例外や、サテライト アセンブリに存在するリソース セットが予想される場合、<ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>If the resource manager can load an appropriate resource set but cannot find a resource named <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">リソース マネージャーを読み込むことができる場合、適切なリソースの設定が、という名前のリソースを見つけることができません<ph id="ph1">`name`</ph>、メソッドを返します<ph id="ph2">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> property determines whether the comparison of <ph id="ph2">`name`</ph> with the names of resources is case-insensitive (the default) or case-sensitive.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph>プロパティを決定するかどうかの比較<ph id="ph2">`name`</ph>をリソースの名前と小文字が区別されません (既定) または大文字小文字を区別します。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>This method can throw more exceptions than are listed.</source>
          <target state="translated">このメソッドは、表示されているもの以外の例外をスローできます。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>One reason this might occur is if a method that this method calls throws an exception.</source>
          <target state="translated">これが発生する理由の 1 つは、このメソッドを呼び出すメソッドが例外をスローするかどうかです。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>For example, a <ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> exception might be thrown if an error was made deploying or installing a satellite assembly, or a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> exception might be thrown if a user-defined type throws a user-defined exception when the type is deserialized.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph>の配置またはサテライト アセンブリのインストール エラーが行われた場合、例外がスローされます<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph>場合は、ユーザー定義型は例外をスロー ユーザー定義型の逆シリアル化時に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>Performance Considerations</source>
          <target state="translated">パフォーマンスに関する考慮事項</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>If you call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph> method multiple times with the same <ph id="ph2">`name`</ph> parameter, do not depend on the method returning a reference to the same object with each call.</source>
          <target state="translated">呼び出す場合は、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph>メソッドを複数回、同じ<ph id="ph2">`name`</ph>パラメーター、呼び出しごとに同じオブジェクトへの参照を返すメソッドに依存しません。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>This is because the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph> method can return a reference to an existing resource object in a cache, or it can reload the resource and return a reference to a new resource object.</source>
          <target state="translated">これは、ため、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph>メソッドは、キャッシュ内でリソースの既存のオブジェクトへの参照を返すことができますか、リソースを再読み込みし、新しいリソース オブジェクトへの参照を返します。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%29&gt;</ph> method to deserialize a custom object.</source>
          <target state="translated">次の例では、 <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%29&gt;</ph> メソッドを使用して、カスタム オブジェクトを逆シリアル化します。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>The example includes a source code file named UIElements.cs (UIElements.vb if you're using Visual Basic) that defines the following structure named <ph id="ph1">`PersonTable`</ph>.</source>
          <target state="translated">この例には、UIElements.cs (UIElements.vb Visual Basic を使用している場合) という名前のソース コード ファイルが含まれています。 という名前は次の構造を定義する<ph id="ph1">`PersonTable`</ph>です。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>This structure is intended to be used by a general table display routine that displays the localized names of table columns.</source>
          <target state="translated">この構造体は、ローカライズされたテーブル列名を表示する一般的なテーブル表示ルーチンでの使用を目的としています。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>Note that the <ph id="ph1">`PersonTable`</ph> structure is marked with the <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.</source>
          <target state="translated"><ph id="ph1">`PersonTable`</ph> 構造体は、 <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> 属性でマークされています。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>The following code from a file named CreateResources.cs (CreateResources.vb for Visual Basic) creates an XML resource file named UIResources.resx that stores a table title and a <ph id="ph1">`PersonTable`</ph> object that contains information for an app that is localized for the English language.</source>
          <target state="translated">CreateResources.cs (Visual Basic の場合は CreateResources.vb) という名前のファイルに入っている次のコードは、UIResources.resx という名前の XML リソース ファイルを作成します。このリソース ファイルには、テーブルのタイトルに加えて、英語にローカライズされたアプリに関する情報を含む <ph id="ph1">`PersonTable`</ph> オブジェクトが格納されます。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>The following code in a source code file named GetObject.cs (GetObject.vb) then retrieves the resources and displays them to the console.</source>
          <target state="translated">GetObject.cs (GetObject.vb) という名前のソース コード ファイルに含まれる次のコードは、リソースを取得し、コンソールに表示します。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>You can build the necessary resource file and assemblies and run the app by executing the following batch file.</source>
          <target state="translated">次のバッチ ファイルを実行することで、必要なリソース ファイルとアセンブリをビルドし、アプリケーションを実行することができます。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>You must use the <ph id="ph1">`/r`</ph> option to supply Resgen.exe with a reference to UIElements.dll so that it can access information about the <ph id="ph2">`PersonTable`</ph> structure.</source>
          <target state="translated"><ph id="ph1">`/r`</ph> 構造体に関する情報にアクセスできるように、 <ph id="ph2">`PersonTable`</ph> オプションを使用して Resgen.exe を指定し、UIElements.dll への参照を含める必要があります。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>If you're using C#, replace the <ph id="ph1">`vbc`</ph> compiler name with <ph id="ph2">`csc`</ph>, and replace the <ph id="ph3">`.vb`</ph> extension with <ph id="ph4">`.cs`</ph>.</source>
          <target state="translated">C# を使用している場合は、 <ph id="ph1">`vbc`</ph> コンパイラ名を <ph id="ph2">`csc`</ph>に置換し、 <ph id="ph3">`.vb`</ph> 拡張子を <ph id="ph4">`.cs`</ph>に置換します。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>No usable set of localized resources has been found, and there are no default culture resources.</source>
          <target state="translated">使用できるローカライズされたリソースのセットが見つからず、既定のカルチャ リソースもありません。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class topic.</source>
          <target state="translated">この例外の処理方法の詳細については、<ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスのトピックの MissingManifestResourceException 例外と MissingSatelliteAssemblyException 例外の処理に関するセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>The default culture's resources reside in a satellite assembly that could not be found.</source>
          <target state="translated">既定のカルチャのリソースがサテライト アセンブリに存在し、そのサテライト アセンブリが見つかりませんでした。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class topic.</source>
          <target state="translated">この例外の処理方法の詳細については、<ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスのトピックの MissingManifestResourceException 例外と MissingSatelliteAssemblyException 例外の処理に関するセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>The name of the resource to get.</source>
          <target state="translated">取得するリソースの名前。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>The culture for which the resource is localized.</source>
          <target state="translated">リソースのローカライズ対象のカルチャ。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>If the resource is not localized for this culture, the resource manager uses fallback rules to locate an appropriate resource.</source>
          <target state="translated">リソースがこのカルチャにローカライズされていない場合、リソース マネージャーはフォールバック規則を使用して適切なリソースを探します。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>If this value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> object is obtained by using the <ph id="ph3">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> property.</source>
          <target state="translated">この値が <ph id="ph1">&lt;see langword="null" /&gt;</ph> の場合、<ph id="ph3">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> プロパティを使用して <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> オブジェクトが取得されます。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>Gets the value of the specified non-string resource localized for the specified culture.</source>
          <target state="translated">指定されたカルチャ用にローカライズされている指定された文字列以外のリソースの値を取得します。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>The value of the resource, localized for the specified culture.</source>
          <target state="translated">指定されたカルチャに合わせてローカライズされているリソースの値。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>If an appropriate resource set exists but <ph id="ph1">&lt;paramref name="name" /&gt;</ph> cannot be found, the method returns <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">適切なリソース セットが存在するが、<ph id="ph1">&lt;paramref name="name" /&gt;</ph> が見つからない場合、メソッドは <ph id="ph2">&lt;see langword="null" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> method is used to retrieve non-string resources.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>文字列以外のリソースを取得するメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>These include values that belong to primitive data types such as <ph id="ph1">&lt;xref:System.Int32&gt;</ph> or <ph id="ph2">&lt;xref:System.Double&gt;</ph>, bitmaps (such as a <ph id="ph3">&lt;xref:System.Drawing.Bitmap?displayProperty=nameWithType&gt;</ph> object), or custom serialized objects.</source>
          <target state="translated">などのプリミティブ データ型に属している値が含まれます<ph id="ph1">&lt;xref:System.Int32&gt;</ph>または<ph id="ph2">&lt;xref:System.Double&gt;</ph>、ビットマップ (など、<ph id="ph3">&lt;xref:System.Drawing.Bitmap?displayProperty=nameWithType&gt;</ph>オブジェクト)、またはカスタム オブジェクトをシリアル化します。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>Typically, the returned object must be cast (in C#) or converted (in Visual Basic) to an object of the appropriate type.</source>
          <target state="translated">通常、返されたオブジェクトにキャスト (c#) または (Visual Basic) の適切な型のオブジェクトに変換する必要があります。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>The returned resource is localized for the culture that is specified by <ph id="ph1">`culture`</ph>, or for the culture that is specified by the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property if <ph id="ph3">`culture`</ph> is <ph id="ph4">`null`</ph>.</source>
          <target state="translated">返されるリソースがで指定されたカルチャに合わせてローカライズ<ph id="ph1">`culture`</ph>、またはカルチャで指定されている、<ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>プロパティ場合<ph id="ph3">`culture`</ph>は<ph id="ph4">`null`</ph>します。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>If the resource is not localized for that culture, the resource manager uses fallback rules to load an appropriate resource.</source>
          <target state="translated">リソースは、そのカルチャにローカライズされていない、リソース マネージャーは、適切なリソースを読み込むフォールバック規則を使用します。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>If no usable set of localized resources is found, the resource manager falls back on the default culture's resources.</source>
          <target state="translated">使用できるローカライズされたリソースのセットが見つからない場合、リソース マネージャーの既定のカルチャのリソースにフォールバックします。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>If a resource set for the default culture is not found, the method throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception or, if the resource set is expected to reside in a satellite assembly, a <ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> exception.</source>
          <target state="translated">既定のカルチャのリソース セットが見つからない場合がスローされます、<ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph>例外や、サテライト アセンブリに存在するリソース セットが予想される場合、<ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>If the resource manager can load an appropriate resource set but cannot find a resource named <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">リソース マネージャーを読み込むことができる場合、適切なリソースの設定が、という名前のリソースを見つけることができません<ph id="ph1">`name`</ph>、メソッドを返します<ph id="ph2">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> property determines whether the comparison of <ph id="ph2">`name`</ph> with the names of resources is case-insensitive (the default) or case-sensitive.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph>プロパティを決定するかどうかの比較<ph id="ph2">`name`</ph>をリソースの名前と小文字が区別されません (既定) または大文字小文字を区別します。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>This method can throw more exceptions than are listed.</source>
          <target state="translated">このメソッドは、表示されているもの以外の例外をスローできます。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>One reason this might occur is if a method that this method calls throws an exception.</source>
          <target state="translated">これが発生する理由の 1 つは、このメソッドを呼び出すメソッドが例外をスローするかどうかです。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>For example, a <ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> exception might be thrown if an error was made deploying or installing a satellite assembly, or a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> exception might be thrown if a user-defined type throws a user-defined exception when the type is deserialized.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph>の配置またはサテライト アセンブリのインストール エラーが行われた場合、例外がスローされます<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph>場合は、ユーザー定義型は例外をスロー ユーザー定義型の逆シリアル化時に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>Performance Considerations</source>
          <target state="translated">パフォーマンスに関する考慮事項</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>If you call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph> method multiple times with the same <ph id="ph2">`name`</ph> parameter, do not depend on the method returning a reference to the same object with each call.</source>
          <target state="translated">呼び出す場合は、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph>メソッドを複数回、同じ<ph id="ph2">`name`</ph>パラメーター、呼び出しごとに同じオブジェクトへの参照を返すメソッドに依存しません。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>This is because the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph> method can return a reference to an existing resource object in a cache, or it can reload the resource and return a reference to a new resource object.</source>
          <target state="translated">これは、ため、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph>メソッドは、キャッシュ内でリソースの既存のオブジェクトへの参照を返すことができますか、リソースを再読み込みし、新しいリソース オブジェクトへの参照を返します。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> method to deserialize a custom object.</source>
          <target state="translated">次の例では、 <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> メソッドを使用して、カスタム オブジェクトを逆シリアル化します。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>The example includes a source code file named NumberInfo.cs (NumberInfo.vb if you're using Visual Basic) that defines the following structure named <ph id="ph1">`Numbers`</ph>.</source>
          <target state="translated">この例には、NumberInfo.cs (NumberInfo.vb Visual Basic を使用している場合) という名前のソース コード ファイルが含まれています。 という名前は次の構造を定義する<ph id="ph1">`Numbers`</ph>です。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>This structure is intended to be used by a simple educational app that teaches non-English speaking students to count to ten in English.</source>
          <target state="translated">この構造体は英語で 10 までカウントする英語版以外話し方の受講者をについて説明する簡単な教育用アプリが使用するためのものです。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>Note that the <ph id="ph1">`Numbers`</ph> class is marked with the <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.</source>
          <target state="translated">なお、<ph id="ph1">`Numbers`</ph>クラスには、<ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>The following source code from a file named CreateResources.cs (CreateResources.vb for Visual Basic) creates XML resource files for the default English language, as well as for the French, Portuguese, and Russian languages.</source>
          <target state="translated">次のソース コード ファイルから名前付き CreateResources.cs (Visual basic の CreateResources.vb) は、既定の英語とフランス語、ポルトガル語、およびロシア語の言語の XML リソース ファイルを作成します。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>The resources are consumed by the following app, which sets the current UI culture to French (France), Portuguese (Brazil), or Russian (Russia).</source>
          <target state="translated">リソースは、次のアプリは、現在の UI カルチャをフランス語 (フランス)、ポルトガル語 (ブラジル)、またはロシア語 (ロシア) に設定して消費されます。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>It calls the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%29&gt;</ph> method to get a <ph id="ph2">`Numbers`</ph> object that contains localized numbers and the <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> method to get a <ph id="ph4">`Numbers`</ph> object that contains English language numbers.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%29&gt;</ph>を取得します、<ph id="ph2">`Numbers`</ph>ローカライズされた数値を含むオブジェクトと<ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>取得するメソッド、<ph id="ph4">`Numbers`</ph>英語の言語の数値を含むオブジェクト。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>It then displays odd numbers using the current UI culture and the English language.</source>
          <target state="translated">現在の UI カルチャおよび英語の言語を使用して奇数の番号が表示されます。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>The source code file is named ShowNumbers.cs (ShowNumbers.vb).</source>
          <target state="translated">ソース コード ファイルの名前は ShowNumbers.cs (ShowNumbers.vb)。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>You can use the following batch file to build and execute the Visual Basic version of the example.</source>
          <target state="translated">次のバッチ ファイルを使用して、ビルドおよび Visual Basic バージョンの例を実行することができます。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>If you're using C#, replace <ph id="ph1">`vbc`</ph> with <ph id="ph2">`csc`</ph>, and replace the <ph id="ph3">`.vb`</ph> extension with <ph id="ph4">`.cs`</ph>.</source>
          <target state="translated">C# を使用している場合は置き換えます<ph id="ph1">`vbc`</ph>で<ph id="ph2">`csc`</ph>、および置換、<ph id="ph3">`.vb`</ph>拡張機能を<ph id="ph4">`.cs`</ph>です。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>No usable set of resources have been found, and there are no default culture resources.</source>
          <target state="translated">使用できるリソースのセットが見つからず、既定のカルチャ リソースもありません。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class topic.</source>
          <target state="translated">この例外の処理方法の詳細については、<ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスのトピックの MissingManifestResourceException 例外と MissingSatelliteAssemblyException 例外の処理に関するセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>The default culture's resources reside in a satellite assembly that could not be found.</source>
          <target state="translated">既定のカルチャのリソースがサテライト アセンブリに存在し、そのサテライト アセンブリが見つかりませんでした。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class topic.</source>
          <target state="translated">この例外の処理方法の詳細については、<ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスのトピックの MissingManifestResourceException 例外と MissingSatelliteAssemblyException 例外の処理に関するセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)" /&gt;</ph> method is thread safe.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)" /&gt;</ph>メソッドはスレッド セーフです。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
          <source>The culture object for which a resource file name is constructed.</source>
          <target state="translated">リソース ファイル名を構築する対象のカルチャ オブジェクト。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
          <source>Generates the name of the resource file for the given <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> object.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> オブジェクトのリソース ファイルの名前を生成します。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
          <source>The name that can be used for a resource file for the given <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> object.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> オブジェクトのリソース ファイルに使用できる名前。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetResourceFileName%2A&gt;</ph> method is useful only if you write your own class that derives from the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetResourceFileName%2A&gt;</ph>メソッドはから派生した独自のクラスを記述する場合にのみ、<ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
          <source>This method uses the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType&gt;</ph> property as part of the file name for all cultures other than the invariant culture.</source>
          <target state="translated">このメソッドを使用して、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType&gt;</ph>インバリアント カルチャ以外のすべてのカルチャのファイル名の一部としてのプロパティです。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
          <source>This method does not look in an assembly's manifest or touch the disk, and is used only to construct a resource file name (suitable for passing to the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> constructor) or a manifest resource blob name.</source>
          <target state="translated">このメソッドは、アセンブリのマニフェストまたはタッチ、ディスクを検索しませんし、リソース ファイル名を作成する場合にのみ使用されます (に渡すに適した、<ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>コンス トラクター) またはマニフェスト リソースの blob の名前。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
          <source>A derived class can override this method to look for a different extension, such as ".ResX", or a completely different scheme for naming resource files.</source>
          <target state="translated">派生クラスが別の拡張機能など、検索するには、このメソッドをオーバーライドできます"です。ResX"、またはリソース ファイルの名前付けのまったく異なるスキームです。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
          <source>Note that the method can be used to customize the name of a resource file within a satellite assembly, and not to customize the name of the satellite assembly itself.</source>
          <target state="translated">サテライト アセンブリ内のリソース ファイルの名前をカスタマイズし、サテライト アセンブリ自体の名前をカスタマイズしていないメソッドを使用できることに注意してください。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>The culture whose resources are to be retrieved.</source>
          <target state="translated">リソースが取得されるカルチャ。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to load the resource set, if it has not been loaded yet; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">リソース セットがまだ読み込まれていなければ読み込む場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to use resource fallback to load an appropriate resource if the resource set cannot be found; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to bypass the resource fallback process.</source>
          <target state="translated">リソース セットが見つからないときに、適切なリソースを読み込むためにリソース フォールバックを使用する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。リソース フォールバック プロセスをバイパスする場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>Retrieves the resource set for a particular culture.</source>
          <target state="translated">特定のカルチャのリソース セットを取得します。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>The resource set for the specified culture.</source>
          <target state="translated">指定されたカルチャに設定されたリソース。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>The resource set that is returned represents the resources that are localized for the specified culture.</source>
          <target state="translated">返されるリソース セットは、指定したカルチャにローカライズされたリソースを表します。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>If the resources have not been localized for that culture and <ph id="ph1">`tryParents`</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetResourceSet%2A&gt;</ph> uses resource fallback rules to load an appropriate resource.</source>
          <target state="translated">リソースがそのカルチャのローカライズされていない場合と<ph id="ph1">`tryParents`</ph>は<ph id="ph2">`true`</ph>、<ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetResourceSet%2A&gt;</ph>適切なリソースの読み込みにリソース フォールバック規則を使用します。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>If <ph id="ph1">`tryParents`</ph> is <ph id="ph2">`false`</ph> and a culture-specific resource set cannot be found, the method returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">場合<ph id="ph1">`tryParents`</ph>は<ph id="ph2">`false`</ph>カルチャ固有のリソース セットが見つからない場合、メソッドを返しますと<ph id="ph3">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>For more information about resource fallback, see "The Resource Fallback Process" section in the <bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept> article.</source>
          <target state="translated">リソース フォールバックの詳細については、「リソース フォールバック プロセス」セクションを参照して、<bpt id="p1">[</bpt>パッケージ化と配置リソース<ept id="p1">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>資料です。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetResourceSet%2A&gt;</ph> method to retrieve culture-specific resources for the French (France) culture.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetResourceSet%2A&gt;</ph>フランス語 (フランス) カルチャのカルチャに固有のリソースを取得します。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>It then enumerates all of the resources in the resource set.</source>
          <target state="translated">すべてのリソース セットでリソースを列挙します。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>It contains the source code for an executable named ShowNumbers.exe.</source>
          <target state="translated">ShowNumbers.exe を名前付き実行可能ファイルのソース コードが含まれています。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>It also includes the following two text file that contain the names of numbers.</source>
          <target state="translated">数値の名前を格納する次の 2 つのテキスト ファイルも含まれています。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>The first, NumberResources.txt, contains the names of numbers from one to ten in the English language:</source>
          <target state="translated">NumberResources.txt、1 つ目には、1 から 10 までは英語での数値の名前が含まれています。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>The second, NumberResources.fr-FR.txt, contains the names of numbers from one to four in the French language:</source>
          <target state="translated">2 つ目 NumberResources.fr FR.txt にはには、1 ~ 4 個の in フランス語の言語の数字の名前が含まれています。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>You can use a batch file to generate the resource files, embed the English language resource file into the executable, and create a satellite assembly for the French language resources.</source>
          <target state="translated">バッチ ファイルを使用して、リソース ファイルの生成、英語の言語リソース ファイルを実行可能ファイルに埋め込むおよびフランス語の言語リソースのサテライト アセンブリを作成することができます。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>Here's the batch file to generate an executable by using the Visual Baisc compiler:</source>
          <target state="translated">Visual Baisc コンパイラを使用して、実行可能ファイルを生成するバッチ ファイルを次に示します。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>For the C# compiler, you can use the following batch file:</source>
          <target state="translated">C# コンパイラでは、次のバッチ ファイルを使用できます。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>Note that if you change the value of the <ph id="ph1">`createIfNotExists`</ph> argument to <ph id="ph2">`false`</ph>, the method call returns <ph id="ph3">`null`</ph>, since Resource Manager has not already loaded the French language resources.</source>
          <target state="translated">値を変更する場合、<ph id="ph1">`createIfNotExists`</ph>に渡す引数<ph id="ph2">`false`</ph>、メソッド呼び出しが返された<ph id="ph3">`null`</ph>リソース マネージャーで、フランス語の言語リソースがまだロードされていないため、します。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="culture" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="tryParents" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, no usable set of resources has been found, and there are no default culture resources.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="tryParents" /&gt;</ph> が <ph id="ph2">&lt;see langword="true" /&gt;</ph> で、使用できるリソースのセットが見つからず、既定のカルチャ リソースもありません。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)">
          <source>The assembly to check for the <ph id="ph1">&lt;see cref="T:System.Resources.SatelliteContractVersionAttribute" /&gt;</ph> attribute.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Resources.SatelliteContractVersionAttribute" /&gt;</ph> 属性を確認する対象のアセンブリ。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)">
          <source>Returns the version specified by the <ph id="ph1">&lt;see cref="T:System.Resources.SatelliteContractVersionAttribute" /&gt;</ph> attribute in the given assembly.</source>
          <target state="translated">指定したアセンブリの <ph id="ph1">&lt;see cref="T:System.Resources.SatelliteContractVersionAttribute" /&gt;</ph> 属性で指定されたバージョンを返します。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)">
          <source>The satellite contract version of the given assembly, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no version was found.</source>
          <target state="translated">指定したアセンブリのサテライト コントラクト バージョン。バージョンが見つからなかった場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)">
          <source>For more information about satellite assembly versioning, see the <ph id="ph1">&lt;xref:System.Resources.SatelliteContractVersionAttribute&gt;</ph> reference topic.</source>
          <target state="translated">サテライト アセンブリのバージョン管理の詳細については、次を参照してください。、<ph id="ph1">&lt;xref:System.Resources.SatelliteContractVersionAttribute&gt;</ph>リファレンス トピックを参照します。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Version" /&gt;</ph> found in the assembly <ph id="ph2">&lt;paramref name="a" /&gt;</ph> is invalid.</source>
          <target state="translated">アセンブリの <ph id="ph2">&lt;paramref name="a" /&gt;</ph> で見つかった <ph id="ph1">&lt;see cref="T:System.Version" /&gt;</ph> が無効です。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)">
          <source><ph id="ph1">&lt;paramref name="a" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="a" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceManager">
          <source>Returns an unmanaged memory stream object from a specified resource.</source>
          <target state="translated">指定したリソースからアンマネージ メモリ ストリーム オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>The name of a resource.</source>
          <target state="translated">リソースの名前。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>Returns an unmanaged memory stream object from the specified resource.</source>
          <target state="translated">指定したリソースからアンマネージ メモリ ストリーム オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>An unmanaged memory stream object that represents a resource .</source>
          <target state="translated">リソースを表すアンマネージ メモリ ストリーム オブジェクト。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetStream%2A&gt;</ph> method takes the name of a resource that is stored as a <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph> object, gets the value of the <ph id="ph3">&lt;xref:System.Object&gt;</ph> resource, and returns an <ph id="ph4">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetStream%2A&gt;</ph>メソッドとして格納されているリソースの名前を受け取り、<ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>オブジェクトの値を取得、<ph id="ph3">&lt;xref:System.Object&gt;</ph>リソース、および返します、<ph id="ph4">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>It requires that you work directly with a stream of bytes, which you then convert to an object.</source>
          <target state="translated">オブジェクトに変換し、バイトのストリームを直接操作することが必要です。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>This method is useful primarily for performance reasons: Retrieving a resource as a byte stream instead of an explicit object can improve performance.</source>
          <target state="translated">このメソッドは、主にパフォーマンス上の理由: リソースを取得するように明示的なオブジェクトではなくバイト ストリームは、パフォーマンスを向上させることができます。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>The returned resource is localized for the UI culture of the current thread, which is defined by the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">返されるリソースがによって定義された、現在のスレッドの UI カルチャに合わせてローカライズ、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>If the resource is not localized for that culture, the resource manager uses fallback rules to load an appropriate resource.</source>
          <target state="translated">リソースは、そのカルチャにローカライズされていない、リソース マネージャーは、適切なリソースを読み込むフォールバック規則を使用します。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>If no usable set of localized resources is found, the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> falls back on the default culture's resources.</source>
          <target state="translated">使用できるローカライズされたリソースのセットが見つからない場合、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>既定のカルチャのリソースにフォールバックします。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>If a resource set for the default culture is not found, the method throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception or, if the resource set is expected to reside in a satellite assembly, a <ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> exception.</source>
          <target state="translated">既定のカルチャのリソース セットが見つからない場合がスローされます、<ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph>例外や、サテライト アセンブリに存在するリソース セットが予想される場合、<ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>If the resource manager can load an appropriate resource set but cannot find a resource named <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">リソース マネージャーを読み込むことができる場合、適切なリソースの設定が、という名前のリソースを見つけることができません<ph id="ph1">`name`</ph>、メソッドを返します<ph id="ph2">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> property determines whether the comparison of <ph id="ph2">`name`</ph> with the names of resources is case-insensitive (the default) or case-sensitive.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph>プロパティを決定するかどうかの比較<ph id="ph2">`name`</ph>をリソースの名前と小文字が区別されません (既定) または大文字小文字を区別します。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetStream%28System.String%29&gt;</ph> method to retrieve a bitmap that is used in an app's opening splash window.</source>
          <target state="translated">次の例では、 <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetStream%28System.String%29&gt;</ph> メソッドを使用して、アプリの開始スプラッシュ ウィンドウで使用されるビットマップを取得します。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>The following source code from a file named CreateResources.cs (for C#) or CreateResources.vb (for Visual Basic) generates a .resx file named AppResources.resx that contains the serialized image.</source>
          <target state="translated">次のソース コードをという名前のファイルから CreateResources.cs (C# の場合) または CreateResources.vb (Visual Basic の場合) のシリアル化されたイメージを含む AppResources.resx をという名前の .resx ファイルが生成されます。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>In this case, the image is loaded from a file named SplashScreen.jpg; you can modify the file name to substitute your own image.</source>
          <target state="translated">この場合、画像は SplashScreen.jpg という名前のファイルから読み込まれます。ファイル名を変更して、独自の画像に置き換えることができます。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>The following code from a file named GetStream.cs (for C#) or GetStream.vb (for Visual Basic) then retrieves the resource and displays the image in a <ph id="ph1">&lt;xref:System.Windows.Forms.PictureBox?displayProperty=nameWithType&gt;</ph> control.</source>
          <target state="translated">次のコード (C# の場合) GetStream.cs をという名前のファイルまたは GetStream.vb (Visual Basic の場合) のリソースを取得し、表示の画像、<ph id="ph1">&lt;xref:System.Windows.Forms.PictureBox?displayProperty=nameWithType&gt;</ph>コントロール。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>You can use the following batch file to build the C# example.</source>
          <target state="translated">次のバッチ ファイルを使用すると、C# の例をビルドできます。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>For Visual Basic, change <ph id="ph1">`csc`</ph> to <ph id="ph2">`vbc`</ph>, and change the extension of the source code file from <ph id="ph3">`.cs`</ph> to <ph id="ph4">`.vb`</ph>..</source>
          <target state="translated">Visual basic の場合は、次のように変更します<ph id="ph1">`csc`</ph>に<ph id="ph2">`vbc`</ph>、からソース コード ファイルの拡張子の変更と<ph id="ph3">`.cs`</ph>に<ph id="ph4">`.vb`</ph>.。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>The value of the specified resource is not a <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> object.</source>
          <target state="translated">指定されたリソースの値が <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> オブジェクトではありません。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>No usable set of resources is found, and there are no default resources.</source>
          <target state="translated">使用できるリソースのセットが見つからず、既定のリソースもありません。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class topic.</source>
          <target state="translated">この例外の処理方法の詳細については、<ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスのトピックの MissingManifestResourceException 例外と MissingSatelliteAssemblyException 例外の処理に関するセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>The default culture's resources reside in a satellite assembly that could not be found.</source>
          <target state="translated">既定のカルチャのリソースがサテライト アセンブリに存在し、そのサテライト アセンブリが見つかりませんでした。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class topic.</source>
          <target state="translated">この例外の処理方法の詳細については、<ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスのトピックの MissingManifestResourceException 例外と MissingSatelliteAssemblyException 例外の処理に関するセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>The name of a resource.</source>
          <target state="translated">リソースの名前。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>An  object that specifies the culture to use for the resource lookup.</source>
          <target state="translated">リソース検索に使用するカルチャを指定するオブジェクト。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the culture for the current thread is used.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> が <ph id="ph1">&lt;see langword="null" /&gt;</ph> の場合は、現在のスレッドのカルチャが使用されます。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>Returns an unmanaged memory stream object from the specified resource, using the specified culture.</source>
          <target state="translated">指定したカルチャを使用し、指定したリソースからアンマネージ メモリ ストリーム オブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>An unmanaged memory stream object that represents a resource.</source>
          <target state="translated">リソースを表すアンマネージ メモリ ストリーム オブジェクト。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetStream%2A&gt;</ph> method takes the name of a resource that is stored as a <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph> object, gets the value of the <ph id="ph3">&lt;xref:System.Object&gt;</ph> resource, and returns an <ph id="ph4">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetStream%2A&gt;</ph>メソッドとして格納されているリソースの名前を受け取り、<ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>オブジェクトの値を取得、<ph id="ph3">&lt;xref:System.Object&gt;</ph>リソース、および返します、<ph id="ph4">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>It requires that you work directly with a stream of bytes, which you then convert to an object.</source>
          <target state="translated">オブジェクトに変換し、バイトのストリームを直接操作することが必要です。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>This method is useful primarily for performance reasons: Retrieving a resource as a byte stream instead of an explicit object can improve performance.</source>
          <target state="translated">このメソッドは、主にパフォーマンス上の理由: リソースを取得するように明示的なオブジェクトではなくバイト ストリームは、パフォーマンスを向上させることができます。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>The returned resource is localized for the culture that is specified by <ph id="ph1">`culture`</ph>, or for the culture that is specified by the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property if <ph id="ph3">`culture`</ph> is <ph id="ph4">`null`</ph>.</source>
          <target state="translated">返されるリソースがで指定されたカルチャに合わせてローカライズ<ph id="ph1">`culture`</ph>、またはカルチャで指定されている、<ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>プロパティ場合<ph id="ph3">`culture`</ph>は<ph id="ph4">`null`</ph>します。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>If the resource is not localized for that culture, the resource manager uses fallback rules to load an appropriate resource.</source>
          <target state="translated">リソースは、そのカルチャにローカライズされていない、リソース マネージャーは、適切なリソースを読み込むフォールバック規則を使用します。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>If no usable set of localized resources is found, the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> falls back on the default culture's resources.</source>
          <target state="translated">使用できるローカライズされたリソースのセットが見つからない場合、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>既定のカルチャのリソースにフォールバックします。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>If a resource set for the default culture is not found, the method throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception or, if the resource set is expected to reside in a satellite assembly, a <ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> exception.</source>
          <target state="translated">既定のカルチャのリソース セットが見つからない場合がスローされます、<ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph>例外や、サテライト アセンブリに存在するリソース セットが予想される場合、<ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>If the resource manager can load an appropriate resource set but cannot find a resource named <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">リソース マネージャーを読み込むことができる場合、適切なリソースの設定が、という名前のリソースを見つけることができません<ph id="ph1">`name`</ph>、メソッドを返します<ph id="ph2">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> property determines whether the comparison of <ph id="ph2">`name`</ph> with the names of resources is case-insensitive (the default) or case-sensitive.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph>プロパティを決定するかどうかの比較<ph id="ph2">`name`</ph>をリソースの名前と小文字が区別されません (既定) または大文字小文字を区別します。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>The value of the specified resource is not a <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> object.</source>
          <target state="translated">指定されたリソースの値が <ph id="ph1">&lt;see cref="T:System.IO.MemoryStream" /&gt;</ph> オブジェクトではありません。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>No usable set of resources is found, and there are no default resources.</source>
          <target state="translated">使用できるリソースのセットが見つからず、既定のリソースもありません。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class topic.</source>
          <target state="translated">この例外の処理方法の詳細については、<ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスのトピックの MissingManifestResourceException 例外と MissingSatelliteAssemblyException 例外の処理に関するセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>The default culture's resources reside in a satellite assembly that could not be found.</source>
          <target state="translated">既定のカルチャのリソースがサテライト アセンブリに存在し、そのサテライト アセンブリが見つかりませんでした。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class topic.</source>
          <target state="translated">この例外の処理方法の詳細については、<ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスのトピックの MissingManifestResourceException 例外と MissingSatelliteAssemblyException 例外の処理に関するセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceManager">
          <source>Returns the specified string resource for the specified culture or current UI culture.</source>
          <target state="translated">指定したカルチャまたは現在の UI カルチャの指定した文字列リソースを返します。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>The name of the resource to retrieve.</source>
          <target state="translated">取得するリソースの名前。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>Returns the value of the specified string resource.</source>
          <target state="translated">指定されている文字列リソースの値を返します。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>The value of the resource localized for the caller's current UI culture, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="name" /&gt;</ph> cannot be found in a resource set.</source>
          <target state="translated">呼び出し元の現在の UI カルチャのためにローカライズされたリソースの値、または、リソース セットで <ph id="ph2">&lt;paramref name="name" /&gt;</ph> が見つからない場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>Desktop Apps</source>
          <target state="translated">デスクトップ アプリ</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>In desktop apps, the resource that is returned is localized for the UI culture of the current thread, as defined by the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">デスクトップ アプリで返されるリソースがの現在のスレッド UI カルチャのローカライズで定義されている、<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>If the resource has not been localized for that culture, the resource manager probes for a resource by following the steps outlined in the "Resource Fallback Process" section of the <bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept> article.</source>
          <target state="translated">「リソース フォールバック プロセス」セクションに記載されている手順に従って、リソースのリソース マネージャーがプローブ リソースはそのカルチャのローカライズされていない場合、<bpt id="p1">[</bpt>パッケージ化と配置リソース<ept id="p1">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>資料です。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>If no usable set of localized resources is found, the resource manager falls back on the default culture's resources.</source>
          <target state="translated">使用できるローカライズされたリソースのセットが見つからない場合、リソース マネージャーの既定のカルチャのリソースにフォールバックします。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>If the resource manager cannot load the default culture's resource set, the method throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception or, if the resource set is expected to reside in a satellite assembly, a <ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> exception.</source>
          <target state="translated">リソース マネージャーは、既定のカルチャのリソース セットを読み込むことはできません、メソッドをスロー、<ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph>例外や、サテライト アセンブリに存在するリソース セットが予想される場合、<ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>If the resource manager can load an appropriate resource set but cannot find a resource named <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">リソース マネージャーを読み込むことができる場合、適切なリソースの設定が、という名前のリソースを見つけることができません<ph id="ph1">`name`</ph>、メソッドを返します<ph id="ph2">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> property determines whether the comparison of <ph id="ph2">`name`</ph> with the names of resources is case-insensitive (the default) or case-sensitive.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph>プロパティを決定するかどうかの比較<ph id="ph2">`name`</ph>をリソースの名前と小文字が区別されません (既定) または大文字小文字を区別します。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>This method can throw more exceptions than are listed.</source>
          <target state="translated">このメソッドは、表示されているもの以外の例外をスローできます。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>One reason this might occur is if a method that this method calls throws an exception.</source>
          <target state="translated">これが発生する理由の 1 つは、このメソッドを呼び出すメソッドが例外をスローするかどうかです。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>For example, a <ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> exception might be thrown if an error was made deploying or installing a satellite assembly, or a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> exception might be thrown if a user-defined type throws a user-defined exception when the type is deserialized.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph>の配置またはサテライト アセンブリのインストール エラーが行われた場合、例外がスローされます<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph>場合は、ユーザー定義型は例外をスロー ユーザー定義型の逆シリアル化時に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> Apps</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリ</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class is supported in <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, we do not recommend its use.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスではサポートされて<ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリの場合はお勧めしません、使用できます。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>Use this class only when you develop <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph> projects that can be used with <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps.</source>
          <target state="translated">このクラスを使用して開発する場合のみ<ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>で使用できるプロジェクト<ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリ。</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>To retrieve resources from <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, use the <bpt id="p1">[</bpt>Windows.ApplicationModel.Resources.ResourceLoader<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238182)</ept> class instead.</source>
          <target state="translated">リソースを取得する<ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリを使用して、 <bpt id="p1">[</bpt>Windows.ApplicationModel.Resources.ResourceLoader<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238182)</ept>クラスの代わりにします。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>In <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%29&gt;</ph> method returns the value of the <ph id="ph3">`name`</ph> string resource, localized for the caller's current UI culture settings.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリの場合、<ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%29&gt;</ph>メソッドの値を返します、<ph id="ph3">`name`</ph>呼び出し元の現在の UI カルチャ設定のローカライズされたリソースの文字列します。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>The list of cultures is derived from the operating system's preferred UI language list.</source>
          <target state="translated">カルチャの一覧については、オペレーティング システムの推奨される UI 言語の一覧から派生します。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>If the resource manager cannot match <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">リソース マネージャーが一致することはできない場合<ph id="ph1">`name`</ph>、メソッドを返します<ph id="ph2">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph> method to retrieve culture-specific resources.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph>カルチャに固有のリソースを取得します。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>It consists of resources compiled from .txt files for the English (en), French (France) (fr-FR), and Russian (Russia) (ru-RU) cultures.</source>
          <target state="translated">英語 (en)、フランス語 (フランス) (FR-FR)、およびロシア語 (ロシア) (RU-RU) 用の .txt ファイルからコンパイルされたリソースのカルチャ。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>The example changes the current culture and current UI culture to English (United States), French (France), Russian (Russia), and Swedish (Sweden).</source>
          <target state="translated">例は、英語 (米国)、フランス語 (フランス)、ロシア語 (ロシア)、およびスウェーデン語 (スウェーデン) に、現在のカルチャと現在の UI カルチャを変更します。</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph> method to retrieve the localized string, which it displays along with the current day and month.</source>
          <target state="translated">呼び出して、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph>および現在の日と月が表示されますが、ローカライズされた文字列を取得します。</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>Notice that the output displays the appropriate localized string except when the current UI culture is Swedish (Sweden).</source>
          <target state="translated">出力がスウェーデン語 (スウェーデン) が現在の UI カルチャの場合を除き、適切なローカライズされた文字列を表示することに注意してください。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>Because Swedish language resources are unavailable, the app instead uses the resources of the default culture, which is English.</source>
          <target state="translated">スウェーデン語の言語リソースが利用できないため、アプリは、英語は既定のカルチャのリソースを代わりに使用します。</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>The example requires the text-based resource files listed in following table.</source>
          <target state="translated">この例では、次の表に記載されたテキスト ベースのリソース ファイルが必要です。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>Each has a single string resource named <ph id="ph1">`DateStart`</ph>.</source>
          <target state="translated">という名前の 1 つの文字列リソースを持つ各<ph id="ph1">`DateStart`</ph>です。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>Culture</source>
          <target state="translated">culture</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>File name</source>
          <target state="translated">ファイル名</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>Resource name</source>
          <target state="translated">リソース名</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>Resource value</source>
          <target state="translated">リソースの値</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>en-US</source>
          <target state="translated">en-US</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>DateStrings.txt</source>
          <target state="translated">DateStrings.txt</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>Today is</source>
          <target state="translated">今日が</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>fr-FR</source>
          <target state="translated">fr-FR</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>DateStrings.fr-FR.txt</source>
          <target state="translated">DateStrings.fr-FR.txt</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>Aujourd'hui, c'est le</source>
          <target state="translated">Aujourd'hui, c'est le</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>ru-RU</source>
          <target state="translated">ru-RU</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>DateStrings.ru-RU.txt</source>
          <target state="translated">DateStrings.ru-RU.txt</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>Сегодня</source>
          <target state="translated">Сегодня</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>You can use the following batch file to compile the C# example.</source>
          <target state="translated">次のバッチ ファイルを使用して、c# の例をコンパイルすることができます。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>For Visual Basic, change <ph id="ph1">`csc`</ph> to <ph id="ph2">`vbc`</ph>, and change the extension of the source code file from <ph id="ph3">`.cs`</ph> to <ph id="ph4">`.vb`</ph>.</source>
          <target state="translated">Visual Basic の場合は、 <ph id="ph1">`csc`</ph> を <ph id="ph2">`vbc`</ph>に変更し、さらにソース コード ファイルの拡張子を <ph id="ph3">`.cs`</ph> から <ph id="ph4">`.vb`</ph>に変更します。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>Here's the source code for the example (ShowDate.vb for the Visual Basic version or ShowDate.cs for the C# version).</source>
          <target state="translated">たとえば、(Visual Basic バージョンの ShowDate.vb) または ShowDate.cs c# バージョンのソース コードを次に示します。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>The value of the specified resource is not a string.</source>
          <target state="translated">指定されたリソースの値が文字列ではありません。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>No usable set of resources has been found, and there are no resources for the default culture.</source>
          <target state="translated">使用できるリソースのセットが見つからず、既定のカルチャ用のリソースもありません。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class topic.</source>
          <target state="translated">この例外の処理方法の詳細については、<ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスのトピックの MissingManifestResourceException 例外と MissingSatelliteAssemblyException 例外の処理に関するセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>The default culture's resources reside in a satellite assembly that could not be found.</source>
          <target state="translated">既定のカルチャのリソースがサテライト アセンブリに存在し、そのサテライト アセンブリが見つかりませんでした。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class topic.</source>
          <target state="translated">この例外の処理方法の詳細については、<ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスのトピックの MissingManifestResourceException 例外と MissingSatelliteAssemblyException 例外の処理に関するセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Resources.ResourceManager.GetString(System.String)" /&gt;</ph> method is thread safe.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Resources.ResourceManager.GetString(System.String)" /&gt;</ph>メソッドはスレッド セーフです。</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>The name of the resource to retrieve.</source>
          <target state="translated">取得するリソースの名前。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>An object that represents the culture for which the resource is localized.</source>
          <target state="translated">リソースのローカライズ先のカルチャを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>Returns the value of the string resource localized for the specified culture.</source>
          <target state="translated">指定したカルチャにローカライズされている文字列リソースの値を返します。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>The value of the resource localized for the specified culture, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="name" /&gt;</ph> cannot be found in a resource set.</source>
          <target state="translated">指定されたカルチャのためにローカライズされたリソースの値、または、リソース セットで <ph id="ph2">&lt;paramref name="name" /&gt;</ph> が見つからない場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>Desktop Apps</source>
          <target state="translated">デスクトップ アプリ</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>In desktop apps, if <ph id="ph1">`culture`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> method uses the current UI culture obtained from the <ph id="ph4">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">デスクトップ アプリで場合<ph id="ph1">`culture`</ph>は<ph id="ph2">`null`</ph>、<ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>メソッドから取得した現在の UI カルチャを使用して、<ph id="ph4">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>The resource that is returned is localized for the culture specified by the <ph id="ph1">`culture`</ph> parameter.</source>
          <target state="translated">返されるリソースがで指定されたカルチャに合わせてローカライズ、<ph id="ph1">`culture`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>If the resource has not been localized for <ph id="ph1">`culture`</ph>, the resource manager probes for a resource by following the steps outlined in the "Resource Fallback Process" section of the <bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept> topic.</source>
          <target state="translated">リソースがローカライズされていない場合<ph id="ph1">`culture`</ph>、リソース マネージャーの「リソース フォールバック プロセス」セクションに記載されている手順に従って、リソースのプローブを<bpt id="p1">[</bpt>パッケージ化と配置リソース<ept id="p1">](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>トピックです。</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>If no usable set of resources is found, the resource manager falls back on the default culture's resources.</source>
          <target state="translated">使用できるリソースのセットが見つからない場合、リソース マネージャーの既定のカルチャのリソースにフォールバックします。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>If the resource manager cannot load the default culture's resource set, the method throws a <ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph> exception or, if the resource set is expected to reside in a satellite assembly, a <ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph> exception.</source>
          <target state="translated">リソース マネージャーは、既定のカルチャのリソース セットを読み込むことはできません、メソッドをスロー、<ph id="ph1">&lt;xref:System.Resources.MissingManifestResourceException&gt;</ph>例外や、サテライト アセンブリに存在するリソース セットが予想される場合、<ph id="ph2">&lt;xref:System.Resources.MissingSatelliteAssemblyException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>If the resource manager can load an appropriate resource set but cannot find a resource named <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">リソース マネージャーを読み込むことができる場合、適切なリソースの設定が、という名前のリソースを見つけることができません<ph id="ph1">`name`</ph>、メソッドを返します<ph id="ph2">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> property determines whether the comparison of <ph id="ph2">`name`</ph> with the names of resources is case-insensitive (the default) or case-sensitive.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph>プロパティを決定するかどうかの比較<ph id="ph2">`name`</ph>をリソースの名前と小文字が区別されません (既定) または大文字小文字を区別します。</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>This method can throw more exceptions than are listed.</source>
          <target state="translated">このメソッドは、表示されているもの以外の例外をスローできます。</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>One reason this might occur is if a method that this method calls throws an exception.</source>
          <target state="translated">これが発生する理由の 1 つは、このメソッドを呼び出すメソッドが例外をスローするかどうかです。</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>For example, a <ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> exception might be thrown if an error was made deploying or installing a satellite assembly, or a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> exception might be thrown if a user-defined type throws a user-defined exception when the type is deserialized.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph>の配置またはサテライト アセンブリのインストール エラーが行われた場合、例外がスローされます<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph>場合は、ユーザー定義型は例外をスロー ユーザー定義型の逆シリアル化時に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> Apps</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> アプリ</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class is supported in <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, we do not recommend its use.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスではサポートされて<ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリの場合はお勧めしません、使用できます。</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>Use this class only when you develop <ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph> projects that can be used with <ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps.</source>
          <target state="translated">このクラスを使用して開発する場合のみ<ph id="ph1">[!INCLUDE[net_portable](~/includes/net-portable-md.md)]</ph>で使用できるプロジェクト<ph id="ph2">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリ。</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>To retrieve resources from <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, use the <bpt id="p1">[</bpt>Windows.ApplicationModel.Resources.ResourceLoader<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238182)</ept> class instead.</source>
          <target state="translated">リソースを取得する<ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリを使用して、 <bpt id="p1">[</bpt>Windows.ApplicationModel.Resources.ResourceLoader<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238182)</ept>クラスの代わりにします。</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>In <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> apps, the <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> method returns the value of the <ph id="ph3">`name`</ph> string resource, localized for the culture specified by the <ph id="ph4">`culture`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph>アプリの場合、<ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>メソッドの値を返します、<ph id="ph3">`name`</ph>文字列で指定したカルチャにローカライズされたリソース、<ph id="ph4">`culture`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>If the resource is not localized for the <ph id="ph1">`culture`</ph> culture, the lookup uses the entire <ph id="ph2">[!INCLUDE[win8](~/includes/win8-md.md)]</ph> language fallback list, and stops after looking in the default culture.</source>
          <target state="translated">リソースがローカライズされていない場合、<ph id="ph1">`culture`</ph>全体を使用するカルチャ、ルックアップ<ph id="ph2">[!INCLUDE[win8](~/includes/win8-md.md)]</ph>言語フォールバック リスト、および既定のカルチャで検索した後を停止します。</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>If the resource manager cannot match <ph id="ph1">`name`</ph>, the method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">リソース マネージャーが一致することはできない場合<ph id="ph1">`name`</ph>、メソッドを返します<ph id="ph2">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph> method to retrieve culture-specific resources.</source>
          <target state="translated">次の例では、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>カルチャに固有のリソースを取得します。</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>The example's default culture is English (en), and it includes satellite assemblies for the French (France) (fr-FR) and Russian (Russia) (ru-RU) cultures.</source>
          <target state="translated">この例の既定のカルチャが英語 (en) とフランス語 (フランス) (FR-FR)、ロシア語 (ロシア) (RU-RU) のサテライト アセンブリが含まれていますカルチャ。</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>The example changes the current culture and current UI culture to Russian (Russia) before calling <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>.</source>
          <target state="translated">例では、変更、現在のカルチャと現在の UI カルチャ ロシア語 (ロシア) を呼び出す前に<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method and passes <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objects that represent the French (France) and Swedish (Sweden) cultures to each method.</source>
          <target state="translated">呼び出して、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>メソッドおよびパス<ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph>各メソッドに、フランス語 (フランス) とスウェーデン語 (スウェーデン) カルチャを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>In the output, the month and day of the month as well as the string that precedes them appear in French, because the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph> method is able to retrieve the French language resource.</source>
          <target state="translated">出力では、それらの前に、文字列と同様に、月の日と月フランス語で表示、ため、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph>メソッドは、フランス語の言語リソースを取得できません。</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>However, when the Swedish (Sweden) culture is used, the month and day of the month appear in Swedish, although the string that precedes them is in English.</source>
          <target state="translated">ただし、スウェーデン語 (スウェーデン) カルチャを使用すると月の日と月表示スウェーデン語では英語で表示する前に付けられた文字列が。</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>This is because the resource manager cannot find localized Swedish language resources, so it returns a resource for the default English culture instead.</source>
          <target state="translated">これは、英語の既定のカルチャのリソースを代わりを返すように、リソース マネージャーは、スウェーデン語のローカライズされたリソースを見つけることです。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>The example requires the text-based resource files listed in following table.</source>
          <target state="translated">この例では、次の表に記載されたテキスト ベースのリソース ファイルが必要です。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>Each has a single string resource named <ph id="ph1">`DateStart`</ph>.</source>
          <target state="translated">という名前の 1 つの文字列リソースを持つ各<ph id="ph1">`DateStart`</ph>です。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>Culture</source>
          <target state="translated">culture</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>File name</source>
          <target state="translated">ファイル名</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>Resource name</source>
          <target state="translated">リソース名</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>Resource value</source>
          <target state="translated">リソースの値</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>en-US</source>
          <target state="translated">en-US</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>DateStrings.txt</source>
          <target state="translated">DateStrings.txt</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>Today is</source>
          <target state="translated">今日が</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>fr-FR</source>
          <target state="translated">fr-FR</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>DateStrings.fr-FR.txt</source>
          <target state="translated">DateStrings.fr-FR.txt</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>Aujourd'hui, c'est le</source>
          <target state="translated">Aujourd'hui, c'est le</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>ru-RU</source>
          <target state="translated">ru-RU</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>DateStrings.ru-RU.txt</source>
          <target state="translated">DateStrings.ru-RU.txt</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>Сегодня</source>
          <target state="translated">Сегодня</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>You can use the following batch file to compile the Visual Basic example.</source>
          <target state="translated">次のバッチ ファイルを使用して、Visual Basic の例をコンパイルすることができます。</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>To compile in C#, change <ph id="ph1">`vbc`</ph> to <ph id="ph2">`csc`</ph>, and change the extension of the source code file from <ph id="ph3">`.vb`</ph> to <ph id="ph4">`.cs`</ph>.</source>
          <target state="translated">C# でコンパイルする<ph id="ph1">`vbc`</ph>に<ph id="ph2">`csc`</ph>からソース コード ファイルの拡張子の変更と<ph id="ph3">`.vb`</ph>に<ph id="ph4">`.cs`</ph>です。</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>Here's the source code for the example (ShowDate.vb for the Visual Basic version or ShowDate.cs for the C# version).</source>
          <target state="translated">たとえば、(Visual Basic バージョンの ShowDate.vb) または ShowDate.cs c# バージョンのソース コードを次に示します。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>The value of the specified resource is not a string.</source>
          <target state="translated">指定されたリソースの値が文字列ではありません。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>No usable set of resources has been found, and there are no resources for a default culture.</source>
          <target state="translated">使用できるリソースのセットが見つからず、既定のカルチャ用のリソースもありません。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class topic.</source>
          <target state="translated">この例外の処理方法の詳細については、<ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスのトピックの MissingManifestResourceException 例外と MissingSatelliteAssemblyException 例外の処理に関するセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>The default culture's resources reside in a satellite assembly that could not be found.</source>
          <target state="translated">既定のカルチャのリソースがサテライト アセンブリに存在し、そのサテライト アセンブリが見つかりませんでした。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> class topic.</source>
          <target state="translated">この例外の処理方法の詳細については、<ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> クラスのトピックの MissingManifestResourceException 例外と MissingSatelliteAssemblyException 例外の処理に関するセクションを参照してください。</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)" /&gt;</ph> method is thread safe.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)" /&gt;</ph>メソッドはスレッド セーフです。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="F:System.Resources.ResourceManager.HeaderVersionNumber">
          <source>Specifies the version of resource file headers that the current implementation of <ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> can interpret and produce.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> の現在の実装が解釈および作成できるリソース ファイル ヘッダーのバージョンを指定します。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="P:System.Resources.ResourceManager.IgnoreCase">
          <source>Gets or sets a value that indicates whether the resource manager allows case-insensitive resource lookups in the <ph id="ph1">&lt;see cref="M:System.Resources.ResourceManager.GetString(System.String)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Resources.ResourceManager.GetObject(System.String)" /&gt;</ph> methods.</source>
          <target state="translated">リソース マネージャーが <ph id="ph1">&lt;see cref="M:System.Resources.ResourceManager.GetString(System.String)" /&gt;</ph> メソッドと <ph id="ph2">&lt;see cref="M:System.Resources.ResourceManager.GetObject(System.String)" /&gt;</ph> メソッドで大文字と小文字を区別しないリソースの検索を許可しているかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.IgnoreCase">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to ignore case during resource lookup; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">リソースの検索時に大文字と小文字の区別を無視する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.IgnoreCase">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> property is <ph id="ph2">`false`</ph>, a resource with the name "Resource" is not equivalent to the resource with the name "resource".</source>
          <target state="translated">場合の値、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph>プロパティは<ph id="ph2">`false`</ph>、「リソース」という名前のリソースは「リソース」という名前のリソースと同じではありません。</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.IgnoreCase">
          <source>If <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> is <ph id="ph2">`true`</ph>, a resource with the name "Resource" is equivalent to the resource with the name "resource".</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph>は<ph id="ph2">`true`</ph>、「リソース」という名前のリソースは「リソース」という名前のリソースに相当します。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.IgnoreCase">
          <source>Note, however, that when <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph4">&lt;xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType&gt;</ph> methods perform case-insensitive string comparisons by using the invariant culture.</source>
          <target state="translated">ただし、時に<ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph>は<ph id="ph2">`true`</ph>、<ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType&gt;</ph>と<ph id="ph4">&lt;xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType&gt;</ph>メソッドは、インバリアント カルチャを使用して、大文字と小文字の文字列比較を実行します。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.IgnoreCase">
          <source>The advantage is that results of case-insensitive string comparisons performed by these methods are the same on all computers regardless of culture.</source>
          <target state="translated">これらのメソッドによって実行される大文字と小文字の文字列比較の結果がカルチャに関係なくすべてのコンピューターで同じである場合は。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.IgnoreCase">
          <source>The disadvantage is that the results are not consistent with the casing rules of all cultures.</source>
          <target state="translated">欠点は、結果は、すべてのカルチャの大文字小文字の規則と一致しません。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.IgnoreCase">
          <source>For example, the Turkish alphabet has two versions of the character I: one with a dot and one without a dot.</source>
          <target state="translated">たとえば、トルコ語のアルファベットがドットに I の文字の 2 つのバージョンとドットのない 1 つです。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.IgnoreCase">
          <source>In Turkish, the character I (Unicode 0049) is considered the uppercase version of a different character ı (Unicode 0131).</source>
          <target state="translated">トルコ語では、文字 I (Unicode 0049) と見なされます ı (Unicode 0131) 別の文字の大文字バージョン。</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.IgnoreCase">
          <source>The character i (Unicode 0069) is considered the lowercase version of yet another character İ (Unicode 0130).</source>
          <target state="translated">文字 (Unicode 0069) i は、さらに別の文字 İ (Unicode 0130) の小文字版と見なされます。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.IgnoreCase">
          <source>According to these casing rules, a case-insensitive string comparison of the characters i (Unicode 0069) and I (Unicode 0049) should fail for the culture "tr-TR" (Turkish in Turkey).</source>
          <target state="translated">これらの大文字と小文字の規則、大文字と小文字の文字列の比較に従って文字 i (Unicode 0069) と手動 (Unicode 0049) が失敗する、カルチャ"TR-TR"(トルコのトルコ語) をします。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.IgnoreCase">
          <source>However, because the comparison is conducted by using the casing rules of the invariant culture if <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> is <ph id="ph2">`true`</ph>, this comparison succeeds.</source>
          <target state="translated">ただし場合、に、インバリアント カルチャの大文字小文字の規則を使用して、比較が行われたため<ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph>は<ph id="ph2">`true`</ph>、この比較は成功します。</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.IgnoreCase">
          <source>For performance reasons, it is best to always specify the correct case for your resource names.</source>
          <target state="translated">パフォーマンス上の理由から、常に、リソース名の大文字小文字を正しくを指定することをお勧めします。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.IgnoreCase">
          <source>Setting <ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph> to <ph id="ph2">`true`</ph> can cause a significant increase in working set and a significant decline in performance.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Resources.ResourceManager.IgnoreCase%2A&gt;</ph>に<ph id="ph2">`true`</ph>ワーキング セットとパフォーマンスの大幅な低下の大幅な増加が発生することができます。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>The culture object to look for.</source>
          <target state="translated">検索対象のカルチャ オブジェクト。</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to load the resource set, if it has not been loaded yet; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">リソース セットがまだ読み込まれていなければ読み込む場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to check parent <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> objects if the resource set cannot be loaded; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">リソース セットを読み込むことができないときに、親 <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> オブジェクトを確認する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>Provides the implementation for finding a resource set.</source>
          <target state="translated">リソース セットを検索するための実装を提供します。</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>The specified resource set.</source>
          <target state="translated">指定されたリソース セット。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>The main assembly does not contain a .resources file, which is required to look up a resource.</source>
          <target state="translated">メイン アセンブリに .resources ファイルが含まれていませんが、これはリソースの検索に必要です。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>There was an internal error in the runtime.</source>
          <target state="translated">ランタイムで、内部エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>The satellite assembly associated with <ph id="ph1">&lt;paramref name="culture" /&gt;</ph> could not be located.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> に関連付けられているサテライト アセンブリを配置できません。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>This method completes all the work necessary to find a resource set, and can be recursive and reentrant.</source>
          <target state="translated">このメソッドは、リソースを設定して、でき、再帰的な再入を検索するために必要なすべての作業を完了します。</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>In other words, this method might load an assembly and trigger an <ph id="ph1">&lt;see cref="E:System.AppDomain.AssemblyLoad" /&gt;</ph> event, which then calls back into a <ph id="ph2">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph> object that has not been completely initialized.</source>
          <target state="translated">つまり、このメソッドが読み込まれると、アセンブリ、トリガー、<ph id="ph1">&lt;see cref="E:System.AppDomain.AssemblyLoad" /&gt;</ph>にコールバックする、イベント、<ph id="ph2">&lt;see cref="T:System.Resources.ResourceManager" /&gt;</ph>オブジェクトを完全に初期化されていません。</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>To avoid taking extra locks, this method is not thread safe.</source>
          <target state="translated">余分なロックを防ぐためにこのメソッドはスレッド セーフではありません。</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.Resources.ResourceManager.GetString(System.String)" /&gt;</ph>, and <ph id="ph3">&lt;see cref="M:System.Resources.ResourceManager.GetObject(System.String)" /&gt;</ph> methods do all the necessary synchronization.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)" /&gt;</ph>、 <ph id="ph2">&lt;see cref="M:System.Resources.ResourceManager.GetString(System.String)" /&gt;</ph>、および<ph id="ph3">&lt;see cref="M:System.Resources.ResourceManager.GetObject(System.String)" /&gt;</ph>メソッドが必要なすべての同期を行います。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="F:System.Resources.ResourceManager.MagicNumber">
          <source>Holds the number used to identify resource files.</source>
          <target state="translated">リソース ファイルを識別するために使用する番号を保持します。</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Resources.ResourceManager.MagicNumber">
          <source>The value is set to 0xBEEFCACE.</source>
          <target state="translated">値は、0xBEEFCACE に設定されます。</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Resources.ResourceManager.MagicNumber">
          <source>The first four bytes of the system default file format contain a 32-bit signed integer in little-endian format (see <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>).</source>
          <target state="translated">システム既定のファイル形式の最初の 4 バイトがリトル エンディアン形式の 32 ビット符号付き整数を含む (を参照してください<ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Resources.ResourceManager.MagicNumber">
          <source>If the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.MagicNumber&gt;</ph> is found, the bytes following it will be a version number for a <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> header, followed by a number indicating how many bytes should be skipped to get past this header.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.MagicNumber&gt;</ph>が見つかると、それに続くバイトのバージョン番号になります、<ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph>ヘッダー、続いてこのヘッダーを通過するバイト数をスキップすることを示す番号。</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Resources.ResourceManager.MagicNumber">
          <source>The next number indicates the version of the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> that created the header, followed by version specific information.</source>
          <target state="translated">次の番号は、のバージョンを示す、<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>バージョン固有の情報を続けて、ヘッダーを作成します。</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Resources.ResourceManager.MagicNumber">
          <source>The version number for the current implementation is one.</source>
          <target state="translated">現在の実装のバージョン番号は、1 つです。</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Resources.ResourceManager.MagicNumber">
          <source>The next bytes are a length-prefixed string containing the name of an <ph id="ph1">&lt;xref:System.Resources.IResourceReader&gt;</ph>, which can read this file.</source>
          <target state="translated">次のバイトは、固定長の文字列の名前を含む、 <ph id="ph1">&lt;xref:System.Resources.IResourceReader&gt;</ph>、このファイルを読み取ることができます。</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" uid="F:System.Resources.ResourceManager.MainAssembly">
          <source>Specifies the main assembly that contains the resources.</source>
          <target state="translated">リソースを含むメイン アセンブリを指定します。</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Resources.ResourceManager.MainAssembly">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager.MainAssembly&gt;</ph> field is useful only if you write your own class that derives from the <ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceManager.MainAssembly&gt;</ph>フィールドはから派生した独自のクラスを記述する場合にのみ役立ちます、<ph id="ph2">&lt;xref:System.Resources.ResourceManager&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceManager.ReleaseAllResources">
          <source>Tells the resource manager to call the <ph id="ph1">&lt;see cref="M:System.Resources.ResourceSet.Close" /&gt;</ph> method on all <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> objects and release all resources.</source>
          <target state="translated">リソース マネージャーに、すべての <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> オブジェクトの <ph id="ph1">&lt;see cref="M:System.Resources.ResourceSet.Close" /&gt;</ph> メソッドを呼び出し、すべてのリソースを解放するように指示します。</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.ReleaseAllResources">
          <source>This method will shrink the working set in a running app.</source>
          <target state="translated">このメソッドは、実行中のアプリのワーキング セットに縮小されます。</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.ReleaseAllResources">
          <source>Any future resource lookups on this <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object will be as expensive as the first lookup, because the resource manager will have to search and load resources again.</source>
          <target state="translated">これで、将来的なリソースの参照<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>リソース マネージャーは、検索する必要があるために、オブジェクトが最初に検索を高価でリソースを再度読み込むとします。</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.ReleaseAllResources">
          <source>This can be useful in some complex threading scenarios, where creating a new <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> object is the appropriate behavior.</source>
          <target state="translated">これを利用するスレッドの複雑なシナリオで、新しい<ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph>オブジェクトが適切な動作です。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.ReleaseAllResources">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.ReleaseAllResources%2A&gt;</ph> method is not thread safe with respect to <ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Resources.ResourceManager.GetStream%2A&gt;</ph> operations.</source>
          <target state="translated">.NET Framework バージョン 2.0 以降の<ph id="ph1">&lt;xref:System.Resources.ResourceManager.ReleaseAllResources%2A&gt;</ph>メソッドはスレッド セーフに関連するではありません<ph id="ph2">&lt;xref:System.Resources.ResourceManager.GetObject%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Resources.ResourceManager.GetString%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Resources.ResourceManager.GetStream%2A&gt;</ph>操作します。</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.ReleaseAllResources">
          <source>The advantage of this change is a performance improvement for multiple threads that access resources.</source>
          <target state="translated">この変更の利点は、リソースにアクセスする複数のスレッドのパフォーマンスが向上します。</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.ReleaseAllResources">
          <source>However, if you call the <ph id="ph1">&lt;xref:System.Resources.ResourceManager.ReleaseAllResources%2A&gt;</ph> method in one thread while simultaneously getting a resource in another thread, the get operation can throw an <ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph> exception.</source>
          <target state="translated">ただし、呼び出した場合、<ph id="ph1">&lt;xref:System.Resources.ResourceManager.ReleaseAllResources%2A&gt;</ph>別のスレッドで同時に、リソースを取得中に 1 つのスレッドで、get 操作メソッド、<ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph>例外。</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.ReleaseAllResources">
          <source>You can also use this method in situations where the managed instances for the resources created by the current resource manager have to be released deterministically, without waiting for the resource manager to go completely out of scope and be garbage collected.</source>
          <target state="translated">このメソッドは、リソース マネージャーは完全にスコープ外に出ると、ガベージ コレクトされるを待たず、確定的に解放される現在のリソース マネージャーによって作成されたリソースの管理対象のインスタンスがある場合にも使用できます。</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.ReleaseAllResources">
          <source>Calling this method does not unload satellite assemblies.</source>
          <target state="translated">このメソッドを呼び出す場合、サテライト アセンブリはアンロードされません。</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.ReleaseAllResources">
          <source>To unload satellite assemblies, use the <ph id="ph1">&lt;xref:System.AppDomain.Unload%2A&gt;</ph> method .</source>
          <target state="translated">サテライト アセンブリをアンロードするには、<ph id="ph1">&lt;xref:System.AppDomain.Unload%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.ReleaseAllResources">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">呼び出されたときに遅延バインディング メカニズムを通じてなど<ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceManager.ReleaseAllResources">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph> (関連する列挙体)</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" uid="F:System.Resources.ResourceManager.ResourceSets">
          <source>Contains a <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph> that returns a mapping from cultures to <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> objects.</source>
          <target state="translated">カルチャから <ph id="ph2">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> オブジェクトへの割り当てを返す <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph> を格納します。</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="P:System.Resources.ResourceManager.ResourceSetType">
          <source>Gets the type of the resource set object that the resource manager uses to construct a <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> オブジェクトの構築にリソース マネージャーが使用するリソース セット オブジェクトの型を取得します。</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Resources.ResourceManager.ResourceSetType">
          <source>The type of the resource set object that the resource manager uses to construct a <ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Resources.ResourceSet" /&gt;</ph> オブジェクトの構築にリソース マネージャーが使用するリソース セット オブジェクトの型。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>