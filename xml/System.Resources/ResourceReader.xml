<Type Name="ResourceReader" FullName="System.Resources.ResourceReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="682738b4136d074223cbe025a9380b3cca9bc1d0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30480256" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ResourceReader : System.Resources.IResourceReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable, class System.Resources.IResourceReader" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IResourceReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : System::Resources::IResourceReader" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Reader</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Resources.IResourceReader</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8a25c-101">順次リソースの名前と値のペアを読み取って、バイナリ リソース (.resources) ファイル内のリソースを列挙します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8a25c-101">Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.</span>
      </span>
      <span data-ttu-id="8a25c-102">**セキュリティに関するメモ**: このクラスのメソッドを信頼できないデータを指定して呼び出すことには、セキュリティ上のリスクが伴います。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8a25c-102">**Security Note**: Calling methods in this class with untrusted data is a security risk.</span>
      </span>
      <span data-ttu-id="8a25c-103">このクラスのメソッドの呼び出しは、信頼されたデータだけを指定して実行してください。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8a25c-103">Call the methods in the class only with trusted data.</span>
      </span>
      <span data-ttu-id="8a25c-104">詳細については、「[信頼されていないデータのセキュリティ リスク](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)」を参照してください。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8a25c-104">For more information, see [Untrusted Data Security Risks](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a25c-105"><xref:System.Resources.ResourceReader>クラスの標準的な実装を提供、<xref:System.Resources.IResourceReader>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-105">The <xref:System.Resources.ResourceReader> class provides a standard implementation of the <xref:System.Resources.IResourceReader> interface.</span></span> <span data-ttu-id="8a25c-106">A<xref:System.Resources.ResourceReader>インスタンスは、スタンドアロンの .resources ファイルまたはアセンブリに埋め込まれている .resources ファイルを表します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-106">A <xref:System.Resources.ResourceReader> instance represents either a standalone .resources file or a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="8a25c-107">.Resources ファイル内のリソースを列挙し、名前/値ペアを取得するために使用します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-107">It is used to enumerate the resources in a .resources file and retrieve its name/value pairs.</span></span> <span data-ttu-id="8a25c-108">異なり、<xref:System.Resources.ResourceManager>クラスは、アセンブリに埋め込まれている .resources ファイルから指定した名前付きリソースを取得するために使用します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-108">It differs from the <xref:System.Resources.ResourceManager> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="8a25c-109"><xref:System.Resources.ResourceManager>一方の名前を持つが、事前に認識されているリソースを取得するクラスが使用される、<xref:System.Resources.ResourceReader>クラスはコンパイル時に、数または正確な名前を持つは認識されていないリソースを取得するために便利です。</span><span class="sxs-lookup"><span data-stu-id="8a25c-109">The <xref:System.Resources.ResourceManager> class is used to retrieve resources whose names are known in advance, whereas the <xref:System.Resources.ResourceReader> class is useful for retrieving resources whose number or precise names are not known at compile time.</span></span> <span data-ttu-id="8a25c-110">たとえば、アプリケーションでは、セクションおよびセクションまたはセクション内の項目の数が事前にわかっていない場所セクション内の項目に構成されている構成情報を格納するのにリソース ファイルを使用することがあります。</span><span class="sxs-lookup"><span data-stu-id="8a25c-110">For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance.</span></span> <span data-ttu-id="8a25c-111">リソースを一般的に付けることができますし (など`Section1`、 `Section1Item1`、`Section1Item2`など) を使用して取得し、<xref:System.Resources.ResourceReader>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a25c-111">Resources can then be named generically (such as `Section1`, `Section1Item1`, `Section1Item2`, and so on) and retrieved by using a <xref:System.Resources.ResourceReader> object.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8a25c-112">この型は、<xref:System.IDisposable>インターフェイスです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-112">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="8a25c-113">型を使用してが完了したらを直接的または間接的にその破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8a25c-113">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="8a25c-114">型の直接 dispose を呼び出す、<xref:System.IDisposable.Dispose%2A>メソッドで、 `try` / `catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="8a25c-114">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="8a25c-115">直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(C# の場合) または`Using`(Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="8a25c-115">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="8a25c-116">詳細についてを参照してください"を使用して、オブジェクトを実装する IDisposable"、<xref:System.IDisposable>インターフェイスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="8a25c-116">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="8a25c-117">使用しての詳細については、<xref:System.Resources.ResourceReader>クラスの次のセクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8a25c-117">For more information about using the <xref:System.Resources.ResourceReader> class, see the following sections:</span></span>  
  
-   [<span data-ttu-id="8a25c-118">ResourceReader オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-118">Instantiating a ResourceReader object</span></span>](#instantiate)  
  
-   [<span data-ttu-id="8a25c-119">ResourceReader オブジェクトのリソースを列挙します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-119">Enumerating a ResourceReader object's resources</span></span>](#enumerate)  
  
    -   [<span data-ttu-id="8a25c-120">IDictionaryEnumerator プロパティを使用してリソースを取得します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-120">Retrieving resources by using IDictionaryEnumerator properties</span></span>](#idictionaryenumerator)  
  
    -   [<span data-ttu-id="8a25c-121">GetResourceData 使用して名前のリソースの取得</span><span class="sxs-lookup"><span data-stu-id="8a25c-121">Retrieving resources by name with GetResourceData</span></span>](#getresourcedata)  
  
<a name="instantiate"></a>   
## <a name="instantiating-a-resourcereader-object"></a><span data-ttu-id="8a25c-122">ResourceReader オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-122">Instantiating a ResourceReader Object</span></span>  
 <span data-ttu-id="8a25c-123">.Resources ファイルは、テキスト ファイルまたはによって XML .resx ファイルからコンパイルされたバイナリ ファイル[Resgen.exe (リソース ファイル ジェネレーター)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)です。</span><span class="sxs-lookup"><span data-stu-id="8a25c-123">A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by [Resgen.exe (Resource File Generator)](~/docs/framework/tools/resgen-exe-resource-file-generator.md).</span></span> <span data-ttu-id="8a25c-124">A<xref:System.Resources.ResourceReader>オブジェクトは、スタンドアロンの .resources ファイルまたはアセンブリに埋め込まれた .resources ファイルのいずれかを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-124">A <xref:System.Resources.ResourceReader> object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.</span></span>  
  
 <span data-ttu-id="8a25c-125">インスタンスを作成、<xref:System.Resources.ResourceReader>オブジェクトをスタンドアロンの .resources ファイルからの読み取りに使用、<xref:System.Resources.ResourceReader>クラス コンス トラクターを入力ストリームまたは .resources ファイル名を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="8a25c-125">To instantiate a <xref:System.Resources.ResourceReader> object that reads from a standalone .resources file, use the <xref:System.Resources.ResourceReader> class constructor with either an input stream or a string that contains the .resources file name.</span></span> <span data-ttu-id="8a25c-126">次の例では、両方の方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-126">The following example illustrates both approaches.</span></span> <span data-ttu-id="8a25c-127">最初のインスタンスを作成、<xref:System.Resources.ResourceReader>という名前の .resources ファイルを表すオブジェクト`Resources1.resources`ファイル名を使用しています。</span><span class="sxs-lookup"><span data-stu-id="8a25c-127">The first instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources1.resources` by using its file name.</span></span> <span data-ttu-id="8a25c-128">2 番目のインスタンスを作成、<xref:System.Resources.ResourceReader>という名前の .resources ファイルを表すオブジェクト`Resources2.resources`ファイルから作成されたストリームを使用しています。</span><span class="sxs-lookup"><span data-stu-id="8a25c-128">The second instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources2.resources` by using a stream created from the file.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)]  
  
 <span data-ttu-id="8a25c-129">作成する、 <xref:System.Resources.ResourceReader> 、埋め込みの .resources ファイルを表すオブジェクトをインスタンス化、 <xref:System.Reflection.Assembly> .resources ファイルが埋め込まれたアセンブリからのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a25c-129">To create a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file, instantiate an <xref:System.Reflection.Assembly> object from the assembly in which the .resources file is embedded.</span></span> <span data-ttu-id="8a25c-130">その<xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType>メソッドを返します、<xref:System.IO.Stream>に渡すことができるオブジェクト、<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-130">Its <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> method returns a <xref:System.IO.Stream> object that can be passed to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span> <span data-ttu-id="8a25c-131">次の例のインスタンスを作成、<xref:System.Resources.ResourceReader>埋め込みの .resources ファイルを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a25c-131">The following example instantiates a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)]
 [!code-vb[System.Resources.ResourceReader.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)]  
  
<a name="enumerate"></a>   
## <a name="enumerating-a-resourcereader-objects-resources"></a><span data-ttu-id="8a25c-132">ResourceReader オブジェクトのリソースを列挙します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-132">Enumerating a ResourceReader Object's Resources</span></span>  
 <span data-ttu-id="8a25c-133">.Resources ファイル内のリソースを列挙するを呼び出す、<xref:System.Resources.ResourceReader.GetEnumerator%2A>を返すメソッド、<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a25c-133">To enumerate the resources in a .resources file, you call the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method, which returns an <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="8a25c-134">呼び出す、`IDictionaryEnumerator.MoveNext`メソッドを 1 つのリソースから、次に移動します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-134">You call the `IDictionaryEnumerator.MoveNext` method to move from one resource to the next.</span></span> <span data-ttu-id="8a25c-135">このメソッドを返します`false`.resources ファイル内のすべてのリソースが列挙されたときにします。</span><span class="sxs-lookup"><span data-stu-id="8a25c-135">The method returns `false` when all the resources in the .resources file have been enumerated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8a25c-136"><xref:System.Resources.ResourceReader>クラスが実装する、<xref:System.Collections.IEnumerable>インターフェイスおよび<xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType>、メソッド、<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType>メソッドは提供しません、<xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType>実装します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-136">Although the <xref:System.Resources.ResourceReader> class implements the <xref:System.Collections.IEnumerable> interface and the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> method, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method does not provide the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="8a25c-137">代わりに、<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType>メソッドを返します、<xref:System.Collections.IDictionaryEnumerator>各リソースの名前/値ペアにアクセスを提供するインターフェイスのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a25c-137">Instead, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method  returns an <xref:System.Collections.IDictionaryEnumerator> interface object that provides access to each resource's name/value pair.</span></span>  
  
 <span data-ttu-id="8a25c-138">2 つの方法でコレクション内の個々 のリソースを取得することができます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-138">You can retrieve the individual resources in the collection in two ways:</span></span>  
  
-   <span data-ttu-id="8a25c-139">内の各リソースを反復処理することができます、<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>収集と使用<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>リソース名と値を取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-139">You can iterate each resource in the <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collection and use <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> properties to retrieve the resource name and value.</span></span> <span data-ttu-id="8a25c-140">この手法は、すべてのリソースが同じ型、または各リソースのデータ型を認識する場合にお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8a25c-140">We recommend this technique when all the resources are of the same type, or you know the data type of each resource.</span></span>  
  
-   <span data-ttu-id="8a25c-141">反復処理する場合は、各リソースの名前を取得することができます、<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>コレクションと呼び出し、<xref:System.Resources.ResourceReader.GetResourceData%2A>リソースのデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-141">You can retrieve the name of each resource when you iterate the <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collection and call the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve the resource's data.</span></span> <span data-ttu-id="8a25c-142">この方法は、各リソースのデータ型が認識していない場合、または前のアプローチが例外をスローした場合お勧めします。</span><span class="sxs-lookup"><span data-stu-id="8a25c-142">We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.</span></span>  
  
<a name="idictionaryenumerator"></a>   
### <a name="retrieving-resources-by-using-idictionaryenumerator-properties"></a><span data-ttu-id="8a25c-143">IDictionaryEnumerator プロパティを使用してリソースを取得します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-143">Retrieving Resources by Using IDictionaryEnumerator Properties</span></span>  
 <span data-ttu-id="8a25c-144">.Resources ファイル内のリソースの列挙の最初のメソッドには、各リソースの名前/値ペアを直接取得するが含まれます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-144">The first method of enumerating the resources in a .resources file involves directly retrieving each resource's name/value pair.</span></span> <span data-ttu-id="8a25c-145">呼び出した後、`IDictionaryEnumerator.MoveNext`から名前のリソースを取得することができますが、コレクション内の各リソースに移動する方法、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>プロパティとリソースのデータを<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-145">After you call the `IDictionaryEnumerator.MoveNext` method to move to each resource in the collection, you can retrieve the resource name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property and the resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="8a25c-146">次の例を使用して、名と .resources ファイル内の各リソースの値を取得する方法を示しています、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>と<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-146">The following example shows how to retrieve the name and value of each resource in a .resources file by using the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="8a25c-147">例を実行するには、という名前の文字列リソースを定義する ApplicationResources.txt 次のテキスト ファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-147">To run the example, create the following text file named ApplicationResources.txt to define string resources.</span></span>  
  
```  
Title="Contact Information"  
Label1="First Name:"  
Label2="Middle Name:"  
Label3="Last Name:"  
Label4="SSN:"  
Label5="Street Address:"  
Label6="City:"  
Label7="State:"  
Label8="Zip Code:"  
Label9="Home Phone:"  
Label10="Business Phone:"  
Label11="Mobile Phone:"  
Label12="Other Phone:"  
Label13="Fax:"  
Label14="Email Address:"  
Label15="Alternate Email Address:"  
```  
  
 <span data-ttu-id="8a25c-148">テキストのリソース ファイルは、次のコマンドを使用して ApplicationResources.resources をという名前のバイナリ ファイルに変換できます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-148">You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:</span></span>  
  
 <span data-ttu-id="8a25c-149">**resgen ApplicationResources.txt**</span><span class="sxs-lookup"><span data-stu-id="8a25c-149">**resgen ApplicationResources.txt**</span></span>  
  
 <span data-ttu-id="8a25c-150">次の例を使用し、<xref:System.Resources.ResourceReader>スタンドアロンの .resources バイナリ ファイル内の各リソースを列挙して、キー名と対応する値を表示するクラス。</span><span class="sxs-lookup"><span data-stu-id="8a25c-150">The following example then uses the <xref:System.Resources.ResourceReader> class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)]  
  
 <span data-ttu-id="8a25c-151">リソース データの取得を試み、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティは、次の例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-151">The attempt to retrieve resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property can throw the following exceptions:</span></span>  
  
-   <span data-ttu-id="8a25c-152">A<xref:System.FormatException>データが予期された形式でない場合。</span><span class="sxs-lookup"><span data-stu-id="8a25c-152">A <xref:System.FormatException> if the data is not in the expected format.</span></span>  
  
-   <span data-ttu-id="8a25c-153">A<xref:System.IO.FileNotFoundException>データが所属する型を含むアセンブリが見つからない場合。</span><span class="sxs-lookup"><span data-stu-id="8a25c-153">A <xref:System.IO.FileNotFoundException> if the assembly that contains the type to which the data belongs cannot be found.</span></span>  
  
-   <span data-ttu-id="8a25c-154">A<xref:System.TypeLoadException>で見つからない場合、データが属する型にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="8a25c-154">A <xref:System.TypeLoadException> if the type to which the data belongs cannot be cannot be found.</span></span>  
  
 <span data-ttu-id="8a25c-155">通常、.resources ファイルが変更された場合、手動で型が定義されているアセンブリがアプリケーションに追加されていないか、または、誤って削除されている場合、これらの例外がスローされたまたは型を日付より前、アセンブリが、以前のバージョンである場合。</span><span class="sxs-lookup"><span data-stu-id="8a25c-155">Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type.</span></span> <span data-ttu-id="8a25c-156">これらの例外がスローされた場合は、各リソースを列挙して呼び出すことでリソースを取得できます、<xref:System.Resources.ResourceReader.GetResourceData%2A>メソッドは、次のセクションで示すようにします。</span><span class="sxs-lookup"><span data-stu-id="8a25c-156">If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method, as the following section shows.</span></span> <span data-ttu-id="8a25c-157">この方法により、データに関する情報を入力する、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティを返そうとしました。</span><span class="sxs-lookup"><span data-stu-id="8a25c-157">This approach provides you with some information about the data type that the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property attempted to return.</span></span>  
  
<a name="getresourcedata"></a>   
### <a name="retrieving-resources-by-name-with-getresourcedata"></a><span data-ttu-id="8a25c-158">GetResourceData 使用して名前のリソースの取得</span><span class="sxs-lookup"><span data-stu-id="8a25c-158">Retrieving Resources by Name with GetResourceData</span></span>  
 <span data-ttu-id="8a25c-159">.Resources ファイル内のリソースを列挙するのには、2 番目の方法でも呼び出すことによって、ファイル内のリソースを移動するは、`IDictionaryEnumerator.MoveNext`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-159">The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the `IDictionaryEnumerator.MoveNext` method.</span></span> <span data-ttu-id="8a25c-160">リソースの名前を取得するリソースごとに、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>に渡され、プロパティ、<xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29>リソースのデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-160">For each resource, you retrieve the resource's name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property, which is then passed to the <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> method to retrieve the resource's data.</span></span> <span data-ttu-id="8a25c-161">これは、バイト配列として返される、`resourceData`引数。</span><span class="sxs-lookup"><span data-stu-id="8a25c-161">This is returned as a byte array in the `resourceData` argument.</span></span>  
  
 <span data-ttu-id="8a25c-162">この方法は、リソースの名前と値を取得するよりもにくい、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>と<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティ、リソースの値を形成する実際のバイト数を返すためです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-162">This approach is more awkward than retrieving the resource name and value from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> properties, because it returns the actual bytes that form the resource value.</span></span> <span data-ttu-id="8a25c-163">ただし、リソースを取得しようとすると、例外をスローした場合、<xref:System.Resources.ResourceReader.GetResourceData%2A>メソッドは、リソースのデータ型に関する情報を指定することによって例外の原因を特定できます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-163">However, if the attempt to retrieve the resource throws an exception, the <xref:System.Resources.ResourceReader.GetResourceData%2A> method can help identify the source of the exception by supplying information about the resource's data type.</span></span> <span data-ttu-id="8a25c-164">詳細については、リソースのデータ型を示す文字列を次を参照してください。<xref:System.Resources.ResourceReader.GetResourceData%2A>です。</span><span class="sxs-lookup"><span data-stu-id="8a25c-164">For more information about the string that indicates the resource's data type, see <xref:System.Resources.ResourceReader.GetResourceData%2A>.</span></span>  
  
 <span data-ttu-id="8a25c-165">次の例は、このアプローチを使用してリソースを取得してスローされる例外を処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8a25c-165">The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown.</span></span> <span data-ttu-id="8a25c-166">4 つの文字列、ブール値を 1 つ、1 つの整数、1 つのビットマップ、および 1 つのカスタムを含むバイナリ .resources ファイルをプログラムで作成`DateTimeTZI`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a25c-166">It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom `DateTimeTZI` object.</span></span> <span data-ttu-id="8a25c-167">例を実行するには、次の操作を行います。</span><span class="sxs-lookup"><span data-stu-id="8a25c-167">To run the example, do the following:</span></span>  
  
1.  <span data-ttu-id="8a25c-168">含む Library.dll をという名前のアセンブリを作成、`DateTimeTZI`構造体。</span><span class="sxs-lookup"><span data-stu-id="8a25c-168">Create an assembly named Library.dll that contains the `DateTimeTZI` structure.</span></span> <span data-ttu-id="8a25c-169">アセンブリのソース コードを次に示します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-169">The following is the source code for the assembly.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)]
     [!code-vb[System.Resources.ResourceReader.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)]  
  
     <span data-ttu-id="8a25c-170">次のコマンドを使用して、C# の場合、ソース コードをコンパイルします。</span><span class="sxs-lookup"><span data-stu-id="8a25c-170">Compile the source code in C# by using the following command:</span></span>  
  
    ```  
    csc /t:library library.cs  
    ```  
  
     <span data-ttu-id="8a25c-171">または、次のコマンドを使用して、Visual Basic でコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-171">Or, you can compile it in Visual Basic by using the following command:</span></span>  
  
    ```  
    vbc library.vb /t:library  
    ```  
  
2.  <span data-ttu-id="8a25c-172">コンパイルおよび ContactResources.resources をという名前の .resources ファイルを作成する次のソース コードを実行します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-172">Compile and execute the following source code, which creates a .resources file named ContactResources.resources.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)]
     [!code-vb[System.Resources.ResourceReader.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)]  
  
     <span data-ttu-id="8a25c-173">ソース コード ファイルには、CreateResources.cs がという名前です。</span><span class="sxs-lookup"><span data-stu-id="8a25c-173">The source code file is named CreateResources.cs.</span></span> <span data-ttu-id="8a25c-174">C# の場合に次のコマンドを使用してコンパイルすることができます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-174">You can compile it in C# by using the following command:</span></span>  
  
    ```  
    csc CreateResources.cs /r:library.dll  
    ```  
  
     <span data-ttu-id="8a25c-175">または、次のコマンドを使用して、Visual Basic でコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-175">Or, you can compile it in Visual Basic by using the following command:</span></span>  
  
    ```  
    vbc CreateResources.vb /r:library.dll  
    ```  
  
3.  <span data-ttu-id="8a25c-176">コンパイルおよび ContactResources.resources ファイル内のリソースを列挙する次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-176">Compile and run the following code to enumerate the resources in the ContactResources.resources file.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)]
     [!code-vb[System.Resources.ResourceReader.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)]  
  
     <span data-ttu-id="8a25c-177">ソース コードを変更した後 (などによって、意図的にスローされること、<xref:System.FormatException>の最後に、`try`ブロック) または Library.dll アセンブリの名前を変更して、実行時に使用できるように、表示する例を実行することができる方法への呼び出し<xref:System.Resources.ResourceReader.GetResourceData%2A>を使用すると、一部のリソース情報を再作成または取得します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-177">After modifying the source code (for example, by deliberately throwing a <xref:System.FormatException> at the end of the `try` block) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <xref:System.Resources.ResourceReader.GetResourceData%2A> enable you to retrieve or recreate some resource information.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8a25c-178">
            <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-178">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="8a25c-179">セキュリティ上のリスクは、信頼できないデータをこのオブジェクトのインスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-179">Using an instance of this object with untrusted data is a security risk.</span></span> <span data-ttu-id="8a25c-180">このオブジェクトを使用して、信頼されたデータだけです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-180">Use this object only with trusted data.</span></span> <span data-ttu-id="8a25c-181">詳細については、次を参照してください。[データ検証](https://www.owasp.org/index.php/Data_Validation)です。</span><span class="sxs-lookup"><span data-stu-id="8a25c-181">For more information, see [Data Validation](https://www.owasp.org/index.php/Data_Validation).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="8a25c-182">リソースを読み取る入力ストリーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-182">The input stream for reading resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a25c-183">指定したストリーム用の <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-183">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a25c-184"><xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>コンス トラクターをインスタンス化、<xref:System.Resources.ResourceReader>アセンブリに埋め込まれたリソースまたはスタンドアロンの .resources ファイル .resources からファイルを取得するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a25c-184">The <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="8a25c-185">スタンドアロンの .resources ファイルから読み取れませんをインスタンス化、<xref:System.IO.Stream>オブジェクトに渡すと、<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-185">To read from a standalone .resources file, instantiate a <xref:System.IO.Stream> object and pass it to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span> <span data-ttu-id="8a25c-186">埋め込みの .resources ファイルから読み取りを呼び出して、 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> .resources ファイルと、返されたパスの名前を持つメソッド<xref:System.IO.Stream>オブジェクトを<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-186">To read from an embedded .resources file, call the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> method with the case-sensitive name of the .resources file, and pass the returned <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8a25c-187">セキュリティ上のリスクは、信頼できないデータをこのオブジェクトのインスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-187">Using an instance of this object with untrusted data is a security risk.</span></span> <span data-ttu-id="8a25c-188">このオブジェクトを使用して、信頼されたデータだけです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-188">Use this object only with trusted data.</span></span> <span data-ttu-id="8a25c-189">詳細については、次を参照してください。[データ検証](https://www.owasp.org/index.php/Data_Validation)です。</span><span class="sxs-lookup"><span data-stu-id="8a25c-189">For more information, see [Data Validation](https://www.owasp.org/index.php/Data_Validation).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a25c-190">このセクションの例では名前付き次の .txt ファイル`PatientForm.txt`をアプリケーションで使用したリソースを定義します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-190">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="8a25c-191">.Resources ファイルに .txt ファイルをコンパイルするには、次のコマンドを実行します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-191">You can compile the .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="8a25c-192">**resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="8a25c-192">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="8a25c-193">次の例では、リソース ファイルは、アプリケーションの実行可能コードを含むアセンブリに埋め込まれていると仮定します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-193">The following example assumes that the resource file is embedded in the assembly that contains the application's executable code.</span></span> <span data-ttu-id="8a25c-194">という名前のリソース ファイルを取得`PatientForm.resources`現在実行中のアセンブリから名前とそのリソースのそれぞれの値が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-194">It retrieves a resource file named `PatientForm.resources` from the currently executing assemblies and displays the name and value of each of its resources.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream1.vb#1)]  
  
 <span data-ttu-id="8a25c-195">C# の例の名前が場合`Example.cs`、次のコマンドを使用してコンパイルすることができます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-195">If the C# example is named `Example.cs`, you can compile it by using the following command:</span></span>  
  
 <span data-ttu-id="8a25c-196">**csc Example.cs/res:PatientForm.resources**</span><span class="sxs-lookup"><span data-stu-id="8a25c-196">**csc Example.cs /res:PatientForm.resources**</span></span>  
  
 <span data-ttu-id="8a25c-197">Visual Basic の例の名前が場合`Example.vb`、次のコマンドを使用してコンパイルすることができます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-197">If the Visual Basic example is named `Example.vb`, you can compile it by using the following command:</span></span>  
  
 <span data-ttu-id="8a25c-198">**vbc Example.vb/res:PatientForm.resources**</span><span class="sxs-lookup"><span data-stu-id="8a25c-198">**vbc Example.vb /res:PatientForm.resources**</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8a25c-199">
            <paramref name="stream" /> パラメーターは読み取り可能ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-199">The <paramref name="stream" /> parameter is not readable.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a25c-200">
            <paramref name="stream" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-200">The <paramref name="stream" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8a25c-201">
            <paramref name="stream" /> にアクセスしているときに、I/O エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-201">An I/O error has occurred while accessing <paramref name="stream" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="8a25c-202">シリアル化サービスを提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-202">for providing serialization services.</span>
          </span>
          <span data-ttu-id="8a25c-203">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-203">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="8a25c-204">関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-204">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="8a25c-205">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-205">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="8a25c-206">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-206">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::String ^ fileName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="8a25c-207">読み取るリソース ファイルのパスと名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-207">The path and name of the resource file to read.</span>
          </span>
          <span data-ttu-id="8a25c-208">
            <c>filename</c> は大文字と小文字を区別しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-208">
              <c>filename</c> is not case-sensitive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a25c-209">リソース ファイルを指定して <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-209">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified named resource file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a25c-210"><xref:System.Resources.ResourceReader.%23ctor%28System.String%29>コンス トラクターをインスタンス化、<xref:System.Resources.ResourceReader>スタンドアロンの .resources ファイルからリソースを取得するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8a25c-210">The <xref:System.Resources.ResourceReader.%23ctor%28System.String%29> constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources from a standalone .resources file.</span></span> <span data-ttu-id="8a25c-211">リソースを取得する埋め込みの .resources ファイルを使用して、<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-211">To retrieve resources from an embedded .resources file, use the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8a25c-212">セキュリティ上のリスクは、信頼できないデータをこのオブジェクトのインスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-212">Using an instance of this object with untrusted data is a security risk.</span></span> <span data-ttu-id="8a25c-213">このオブジェクトを使用して、信頼されたデータだけです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-213">Use this object only with trusted data.</span></span> <span data-ttu-id="8a25c-214">詳細については、次を参照してください。[データ検証](https://www.owasp.org/index.php/Data_Validation)です。</span><span class="sxs-lookup"><span data-stu-id="8a25c-214">For more information, see [Data Validation](https://www.owasp.org/index.php/Data_Validation).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a25c-215">このセクションの例では名前付き次の .txt ファイル`PatientForm.txt`をアプリケーションで使用したリソースを定義します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-215">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="8a25c-216">.Resources ファイルに .txt ファイルをコンパイルするには、次のコマンドを発行します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-216">You can compile this .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="8a25c-217">**resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="8a25c-217">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="8a25c-218">次の例は、内のリソースを列挙`PatientForm.resources`名とそれぞれの値が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-218">The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a25c-219">
            <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-219">The <paramref name="fileName" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="8a25c-220">ファイルが見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-220">The file cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8a25c-221">I/O エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-221">An I/O error has occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="8a25c-222">リソース ファイルの形式が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-222">The resource file has an invalid format.</span>
          </span>
          <span data-ttu-id="8a25c-223">たとえば、ファイルの長さが 0 の場合などです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-223">For example, the length of the file may be zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8a25c-224">この <see cref="T:System.Resources.ResourceReader" /> オブジェクトに関連付けられたすべてのオペレーティング システム リソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-224">Releases all operating system resources associated with this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a25c-225"><xref:System.Resources.ResourceReader.Close%2A> 安全に複数回呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-225"><xref:System.Resources.ResourceReader.Close%2A> can be safely called multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a25c-226">次の例では、ファイルのリソースを移動し、見つかったすべてのキー/値ペアを表示します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-226">The following example moves through a file's resources and displays all the key/value pairs it finds.</span></span> <span data-ttu-id="8a25c-227">コードを使用し、<xref:System.Resources.ResourceReader.Close%2A>をシャット ダウンする方法、<xref:System.Resources.ResourceReader>によって使用されているすべてのリソースを解放するとします。</span><span class="sxs-lookup"><span data-stu-id="8a25c-227">The code then uses the <xref:System.Resources.ResourceReader.Close%2A> method to shut down the <xref:System.Resources.ResourceReader> and to release all resources used by it.</span></span>  
  
 [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8a25c-228">
            <see cref="T:System.Resources.ResourceReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-228">Releases all resources used by the current instance of the <see cref="T:System.Resources.ResourceReader" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a25c-229">このインスタンスの使用が終了したときに<xref:System.Resources.ResourceReader>、呼び出す<xref:System.Resources.ResourceReader.Dispose%2A>をこのインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-229">When you are finished using this instance of <xref:System.Resources.ResourceReader>, call <xref:System.Resources.ResourceReader.Dispose%2A> to release all resources used by this instance.</span></span> <span data-ttu-id="8a25c-230">これをさらに参照を削除する必要があります<xref:System.Resources.ResourceReader>インスタンスのガベージ コレクターが終了処理の履歴に保持することではなく、インスタンスのメモリを再利用できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8a25c-230">You should eliminate further references to this <xref:System.Resources.ResourceReader> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.</span></span>  
  
 <span data-ttu-id="8a25c-231"><xref:System.Resources.ResourceReader.Dispose%2A> マネージ コードとアンマネージ リソースを解放するコードを含むプライベート dispose (boolean) メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-231"><xref:System.Resources.ResourceReader.Dispose%2A> calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources.</span></span> <span data-ttu-id="8a25c-232">詳細については、次を参照してください。 [Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。</span><span class="sxs-lookup"><span data-stu-id="8a25c-232">For more information, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8a25c-233">この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-233">Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a25c-234">この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-234">An enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a25c-235">呼び出してリソースを列挙する通常、<xref:System.Resources.ResourceReader.GetEnumerator%2A>メソッドを繰り返し呼び出す、<xref:System.Collections.IEnumerator.MoveNext%2A>メソッドで返された<xref:System.Collections.IDictionaryEnumerator>オブジェクトのメソッドが戻るまで`false`です。</span><span class="sxs-lookup"><span data-stu-id="8a25c-235">Typically, you enumerate resources by calling the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method and then repeatedly calling the <xref:System.Collections.IEnumerator.MoveNext%2A> method on the returned <xref:System.Collections.IDictionaryEnumerator> object until the method returns `false`.</span></span> <span data-ttu-id="8a25c-236">リソース名がから利用可能な<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>プロパティ以外からその値の場合は、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-236">The resource name is available from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property; its value from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="8a25c-237">この方法でリソースを列挙する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-237">The example illustrates how to enumerate resources in this way.</span></span>  
  
 <span data-ttu-id="8a25c-238">実装、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>によってプロパティ、<xref:System.Resources.ResourceReader>クラスは、次の例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-238">The implementation of the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property by the <xref:System.Resources.ResourceReader> class can throw the following exceptions:</span></span>  
  
-   <xref:System.IO.FileNotFoundException>  
  
     <span data-ttu-id="8a25c-239">データが所属する型を含むアセンブリが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="8a25c-239">The assembly that contains the type to which the data belongs cannot be found.</span></span>  
  
-   <xref:System.FormatException>  
  
     <span data-ttu-id="8a25c-240">データは、予期された形式ではないです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-240">The data is not in the expected format.</span></span>  
  
-   <xref:System.TypeLoadException>  
  
     <span data-ttu-id="8a25c-241">データが属する型が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="8a25c-241">The type to which the data belongs cannot be found.</span></span>  
  
 <span data-ttu-id="8a25c-242">呼び出して、例外を処理することができます、<xref:System.Resources.ResourceReader.GetResourceData%2A>については、データ型と名前付きリソースに割り当てられているバイト配列を取得します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-242">You can handle the exception by calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve information about the data type and the byte array assigned to the named resource.</span></span> <span data-ttu-id="8a25c-243">詳細についてを参照してください"を取得するリソースによって名前と GetResourceData"、<xref:System.Resources.ResourceReader>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="8a25c-243">For more information, see the "Retrieving Resources by Name with GetResourceData" section in the <xref:System.Resources.ResourceReader> class topic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8a25c-244"><xref:System.Resources.ResourceReader>クラスには、列挙子を返す 2 つのメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="8a25c-244">The <xref:System.Resources.ResourceReader> class includes two methods that return enumerators.</span></span> <span data-ttu-id="8a25c-245"><xref:System.Resources.ResourceReader.GetEnumerator%2A>メソッドを返します、<xref:System.Collections.IDictionaryEnumerator>インターフェイス オブジェクトとメソッドを呼び出すことをお勧めの方法がリソースを列挙します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-245">The <xref:System.Resources.ResourceReader.GetEnumerator%2A> method returns an <xref:System.Collections.IDictionaryEnumerator> interface object and is the recommended method to call when enumerating resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8a25c-246">このセクションの例では名前付き次の .txt ファイル`PatientForm.txt`をアプリケーションで使用したリソースを定義します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-246">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="8a25c-247">.Resources ファイルに .txt ファイルをコンパイルするには、次のコマンドを実行します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-247">You can compile the .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="8a25c-248">**resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="8a25c-248">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="8a25c-249">次の例は、内のリソースを列挙`PatientForm.resources`名とそれぞれの値が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-249">The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a25c-250">リーダーが閉じられているか、破棄されているため、アクセスできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-250">The reader has been closed or disposed, and cannot be accessed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceData">
      <MemberSignature Language="C#" Value="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetResourceData(string resourceName, [out] string&amp; resourceType, [out] unsigned int8[]&amp; resourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetResourceData (resourceName As String, ByRef resourceType As String, ByRef resourceData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetResourceData(System::String ^ resourceName, [Runtime::InteropServices::Out] System::String ^ % resourceType, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % resourceData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="resourceType" Type="System.String&amp;" RefType="out" />
        <Parameter Name="resourceData" Type="System.Byte[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceName">
          <span data-ttu-id="8a25c-251">リソースの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-251">The name of a resource.</span>
          </span>
        </param>
        <param name="resourceType">
          <span data-ttu-id="8a25c-252">このメソッドが返るときに、取得したリソースの型名を表す文字列が含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-252">When this method returns, contains a string that represents the type name of the retrieved resource.</span>
          </span>
          <span data-ttu-id="8a25c-253">このパラメーターは初期化せずに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-253">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <param name="resourceData">
          <span data-ttu-id="8a25c-254">このメソッドから制御が戻った時点で、取得した型のバイナリ表現であるバイト配列が格納されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-254">When this method returns, contains a byte array that is the binary representation of the retrieved type.</span>
          </span>
          <span data-ttu-id="8a25c-255">このパラメーターは初期化せずに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-255">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8a25c-256">オープン リソース ファイルまたはストリームから名前付きリソースの型名とデータを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-256">Retrieves the type name and data of a named resource from an open resource file or stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a25c-257"><xref:System.Resources.ResourceReader.GetResourceData%2A>メソッドは、バイト配列として名前付きリソースの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8a25c-257">The <xref:System.Resources.ResourceReader.GetResourceData%2A> method retrieves the value of a named resource as a byte array.</span></span> <span data-ttu-id="8a25c-258">通常際に使用される、<xref:System.Collections.IDictionaryEnumerator.Value%2A>プロパティは、そのリソースの値を取得しようとするときに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8a25c-258">It is typically used when the <xref:System.Collections.IDictionaryEnumerator.Value%2A> property throws an exception when it tries to retrieve the value of a resource.</span></span>  
  
 <span data-ttu-id="8a25c-259">`resourceType` リソースのデータ型を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="8a25c-259">`resourceType` is a string that represents the data type of the resource.</span></span> <span data-ttu-id="8a25c-260">次の値のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-260">It can be any of the following values:</span></span>  
  
-   <span data-ttu-id="8a25c-261">文字列形式を`ResourceTypeCode`リソースのデータ型を示す列挙メンバー。</span><span class="sxs-lookup"><span data-stu-id="8a25c-261">The string representation of a `ResourceTypeCode` enumeration member that indicates the data type of the resource.</span></span> <span data-ttu-id="8a25c-262">`ResourceTypeCode` 順にで使用されるプライベート列挙体は、19 の一般的なデータ型のいずれかの格納に特殊なバイナリ形式を使用することを示すためです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-262">`ResourceTypeCode` is a private enumeration that is used by .to indicate that a special binary format is used to store one of 19 common data types.</span></span> <span data-ttu-id="8a25c-263">.NET Framework のプリミティブ データ型が含まれます (<xref:System.Boolean>、 <xref:System.Byte>、 <xref:System.Char>、 <xref:System.Decimal>、 <xref:System.Double>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.Int64>、 <xref:System.Single>、 <xref:System.SByte>、 <xref:System.UInt16>、 <xref:System.UInt32>、 <xref:System.UInt64>)、だけでなく<xref:System.String>、 <xref:System.DateTime>、および<xref:System.TimeSpan>、さらに、`ResourceTypeCode`列挙には、次の表に示すように値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="8a25c-263">These include the .NET Framework primitive data types (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), as well as <xref:System.String>, <xref:System.DateTime>, and <xref:System.TimeSpan>, In addition, the `ResourceTypeCode` enumeration includes the values shown in the following table.</span></span>  
  
    |<span data-ttu-id="8a25c-264">ResourceTypeCode 値</span><span class="sxs-lookup"><span data-stu-id="8a25c-264">ResourceTypeCode value</span></span>|<span data-ttu-id="8a25c-265">説明</span><span class="sxs-lookup"><span data-stu-id="8a25c-265">Description</span></span>|  
    |----------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|<span data-ttu-id="8a25c-266">データは、バイト配列です。</span><span class="sxs-lookup"><span data-stu-id="8a25c-266">The data is a byte array.</span></span> <span data-ttu-id="8a25c-267">このデータ型への呼び出しの結果では通常、<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-267">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> method.</span></span>|  
    |`ResourceTypeCode.Null`|<span data-ttu-id="8a25c-268">データは、null 参照です。</span><span class="sxs-lookup"><span data-stu-id="8a25c-268">The data is a null reference.</span></span> <span data-ttu-id="8a25c-269">このデータ型への呼び出しの結果では通常、<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType>メソッド、オブジェクトの値がある`null`です。</span><span class="sxs-lookup"><span data-stu-id="8a25c-269">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> method with an object whose value is `null`.</span></span>|  
    |`ResourceTypeCode.Stream`|<span data-ttu-id="8a25c-270">データは、ストリームに格納されます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-270">The data is stored in a stream.</span></span> <span data-ttu-id="8a25c-271">このデータ型への呼び出しの結果では通常、<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType>または<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-271">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> or <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> method.</span></span>|  
  
     <span data-ttu-id="8a25c-272">想定される`resourceData`されていません。 破損した場合、通常変換するバイト配列から、元の値に呼び出すことによって、<xref:System.BitConverter>または<xref:System.IO.BinaryReader>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-272">Assuming that `resourceData` has not been corrupted, it can usually be converted from a byte array back to its original value by calling a <xref:System.BitConverter> or <xref:System.IO.BinaryReader> method.</span></span>  
  
-   <span data-ttu-id="8a25c-273">シリアル化されたデータを含むが割り当てられている型の完全修飾名を含む文字列、`resourceData`引数 (たとえば、 `System.String`)。</span><span class="sxs-lookup"><span data-stu-id="8a25c-273">A string that contains the fully qualified name of the type whose serialized data is assigned to the `resourceData` argument (for example, `System.String`).</span></span> <span data-ttu-id="8a25c-274">さらに、.NET Framework クラス ライブラリの一部ではない型、文字列が含まれます名前、バージョン、カルチャ、および種類を含むアセンブリの公開キー。</span><span class="sxs-lookup"><span data-stu-id="8a25c-274">In addition, for types that are not part of the .NET Framework class library, the string includes the name, version, culture, and public key of the assembly that contains the type.</span></span> <span data-ttu-id="8a25c-275">たとえば、次の文字列を示します、シリアル化データがのインスタンスを表すこと、`Person`に入力、`Extensions`ない公開キーとなしの指定されたカルチャを持つユーティリティをという名前のアセンブリのバージョン 1.0 である名前空間。</span><span class="sxs-lookup"><span data-stu-id="8a25c-275">For example, the following string indicates that the serialized data represents an instance of the `Person` type in the `Extensions` namespace, which is found in version 1.0 of an assembly named Utility that has no public key and no designated culture.</span></span>  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
     <span data-ttu-id="8a25c-276">想定される`resourceData`壊れていないことと、ソースの種類が使用可能な`resourceData`変換できるバイト配列から元の値に戻す、バイト配列に変換することで、<xref:System.IO.Stream>オブジェクトと、そのストリームを渡すこと、<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-276">Assuming that `resourceData` has not been corrupted and that the source type is available, `resourceData` can be converted from a byte array back to its original value by converting the byte array to a <xref:System.IO.Stream> object and passing the stream to the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="8a25c-277">データ型の記述に使用する文字列、<xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType>メソッドの呼び出しです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-277">The string used to describe the data type in the <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> method call.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8a25c-278">
            <paramref name="resourceName" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-278">
              <paramref name="resourceName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8a25c-279">
            <paramref name="resourceName" /> は存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-279">
              <paramref name="resourceName" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="8a25c-280">
            <paramref name="resourceName" /> の型が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-280">
              <paramref name="resourceName" /> has an invalid type.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="8a25c-281">取得されたリソース データが壊れています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-281">The retrieved resource data is corrupt.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a25c-282">現在の <see cref="T:System.Resources.ResourceReader" /> のオブジェクトは、おそらく閉じられたために初期化されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-282">The current <see cref="T:System.Resources.ResourceReader" /> object is not initialized, probably because it is closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8a25c-283">この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-283">Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8a25c-284">この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-284">An enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8a25c-285"><xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> 明示的なインターフェイス実装です。</span><span class="sxs-lookup"><span data-stu-id="8a25c-285"><xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> is an explicit interface implementation.</span></span> <span data-ttu-id="8a25c-286">これは、<xref:System.Resources.ResourceReader> のインスタンスが <xref:System.Collections.IEnumerable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="8a25c-286">It can be used only when the <xref:System.Resources.ResourceReader> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span> <span data-ttu-id="8a25c-287">.Resources ファイル内のリソースを列挙するための推奨アプローチが呼び出されて、<xref:System.Collections.IEnumerator.MoveNext%2A>のメソッド、<xref:System.Collections.IDictionaryEnumerator>によって返されるオブジェクト、<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8a25c-287">The recommended approach to enumerating the resources in a .resources file is to call the <xref:System.Collections.IEnumerator.MoveNext%2A> method of the <xref:System.Collections.IDictionaryEnumerator> object returned by the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8a25c-288">リーダーが既に閉じられているため、アクセスできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8a25c-288">The reader has already been closed and cannot be accessed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
  </Members>
</Type>