<Type Name="ResourceReader" FullName="System.Resources.ResourceReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ee5874cf193a3a84faeadb6d46aed14c7dfc76bc" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51315735" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ResourceReader : System.Resources.IResourceReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable, class System.Resources.IResourceReader" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IResourceReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : System::Resources::IResourceReader" />
  <TypeSignature Language="F#" Value="type ResourceReader = class&#xA;    interface IResourceReader&#xA;    interface IEnumerable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Reader</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Resources.IResourceReader</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8e393-101">順次リソースの名前と値のペアを読み取って、バイナリ リソース (.resources) ファイル内のリソースを列挙します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="8e393-101">Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-class-note](~/includes/untrusted-data-class-note.md)]

 <span data-ttu-id="8e393-102"><xref:System.Resources.ResourceReader>クラスの標準的な実装を提供する、<xref:System.Resources.IResourceReader>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="8e393-102">The <xref:System.Resources.ResourceReader> class provides a standard implementation of the <xref:System.Resources.IResourceReader> interface.</span></span> <span data-ttu-id="8e393-103">A<xref:System.Resources.ResourceReader>インスタンスはスタンドアロンの .resources ファイルまたはアセンブリに埋め込まれた .resources ファイルのいずれかを表します。</span><span class="sxs-lookup"><span data-stu-id="8e393-103">A <xref:System.Resources.ResourceReader> instance represents either a standalone .resources file or a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="8e393-104">.Resources ファイル内のリソースを列挙し、名前/値ペアを取得するために使用します。</span><span class="sxs-lookup"><span data-stu-id="8e393-104">It is used to enumerate the resources in a .resources file and retrieve its name/value pairs.</span></span> <span data-ttu-id="8e393-105">異なり、<xref:System.Resources.ResourceManager>クラスは、アセンブリに埋め込まれた .resources ファイルから指定した名前付きリソースを取得するために使用します。</span><span class="sxs-lookup"><span data-stu-id="8e393-105">It differs from the <xref:System.Resources.ResourceManager> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="8e393-106"><xref:System.Resources.ResourceManager>に対し、名前を持つが、事前に認識されているリソースを取得するクラスが使用される、<xref:System.Resources.ResourceReader>クラスは、数または正確な名前を持つはコンパイル時に、不明のリソースを取得するために便利です。</span><span class="sxs-lookup"><span data-stu-id="8e393-106">The <xref:System.Resources.ResourceManager> class is used to retrieve resources whose names are known in advance, whereas the <xref:System.Resources.ResourceReader> class is useful for retrieving resources whose number or precise names are not known at compile time.</span></span> <span data-ttu-id="8e393-107">たとえば、アプリケーションでは、セクションおよびセクションまたはセクション内の項目の数が事前にわかっていないいるセクション内の項目が構成されている構成情報を格納するのにリソース ファイルを使用できます。</span><span class="sxs-lookup"><span data-stu-id="8e393-107">For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance.</span></span> <span data-ttu-id="8e393-108">リソースは一般的に、ということができます (など`Section1`、 `Section1Item1`、`Section1Item2`など) を使用して取得し、<xref:System.Resources.ResourceReader>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8e393-108">Resources can then be named generically (such as `Section1`, `Section1Item1`, `Section1Item2`, and so on) and retrieved by using a <xref:System.Resources.ResourceReader> object.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8e393-109">この型は、<xref:System.IDisposable>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="8e393-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="8e393-110">型の使用が完了したら、直接的または間接的にそれを破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8e393-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="8e393-111">型の直接 dispose を呼び出してその<xref:System.IDisposable.Dispose%2A>メソッド、 `try` / `catch`ブロックします。</span><span class="sxs-lookup"><span data-stu-id="8e393-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="8e393-112">直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(で C# の場合) または`Using`(Visual Basic) でします。</span><span class="sxs-lookup"><span data-stu-id="8e393-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="8e393-113">詳細については、"を使用して、オブジェクトを実装する IDisposable"のセクションを参照してください、<xref:System.IDisposable>インターフェイスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="8e393-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="8e393-114">使用しての詳細については、<xref:System.Resources.ResourceReader>クラスを次のセクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8e393-114">For more information about using the <xref:System.Resources.ResourceReader> class, see the following sections:</span></span>  
  
-   [<span data-ttu-id="8e393-115">ResourceReader オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="8e393-115">Instantiating a ResourceReader object</span></span>](#instantiate)  
  
-   [<span data-ttu-id="8e393-116">ResourceReader オブジェクトのリソースを列挙します。</span><span class="sxs-lookup"><span data-stu-id="8e393-116">Enumerating a ResourceReader object's resources</span></span>](#enumerate)  
  
    -   [<span data-ttu-id="8e393-117">IDictionaryEnumerator プロパティを使用してリソースを取得します。</span><span class="sxs-lookup"><span data-stu-id="8e393-117">Retrieving resources by using IDictionaryEnumerator properties</span></span>](#idictionaryenumerator)  
  
    -   [<span data-ttu-id="8e393-118">GetResourceData と名前によってリソースを取得します。</span><span class="sxs-lookup"><span data-stu-id="8e393-118">Retrieving resources by name with GetResourceData</span></span>](#getresourcedata)  
  
<a name="instantiate"></a>   
## <a name="instantiating-a-resourcereader-object"></a><span data-ttu-id="8e393-119">ResourceReader オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="8e393-119">Instantiating a ResourceReader Object</span></span>  
 <span data-ttu-id="8e393-120">.Resources ファイルはテキスト ファイルまたはによって XML .resx ファイルからコンパイルされたバイナリ ファイル[Resgen.exe (リソース ファイル ジェネレーター)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)します。</span><span class="sxs-lookup"><span data-stu-id="8e393-120">A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by [Resgen.exe (Resource File Generator)](~/docs/framework/tools/resgen-exe-resource-file-generator.md).</span></span> <span data-ttu-id="8e393-121">A<xref:System.Resources.ResourceReader>オブジェクトは、スタンドアロンの .resources ファイルまたはアセンブリに埋め込まれた .resources ファイルのいずれかを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="8e393-121">A <xref:System.Resources.ResourceReader> object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.</span></span>  
  
 <span data-ttu-id="8e393-122">インスタンス化する、<xref:System.Resources.ResourceReader>オブジェクトをスタンドアロン .resources ファイルから読み取り、<xref:System.Resources.ResourceReader>入力ストリームまたは .resources ファイルの名前を含む文字列のいずれかでクラスのコンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="8e393-122">To instantiate a <xref:System.Resources.ResourceReader> object that reads from a standalone .resources file, use the <xref:System.Resources.ResourceReader> class constructor with either an input stream or a string that contains the .resources file name.</span></span> <span data-ttu-id="8e393-123">次の例では、両方の方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8e393-123">The following example illustrates both approaches.</span></span> <span data-ttu-id="8e393-124">最初のインスタンスを作成、<xref:System.Resources.ResourceReader>という名前の .resources ファイルを表すオブジェクトを`Resources1.resources`ファイル名を使用しています。</span><span class="sxs-lookup"><span data-stu-id="8e393-124">The first instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources1.resources` by using its file name.</span></span> <span data-ttu-id="8e393-125">2 番目のインスタンスを作成、<xref:System.Resources.ResourceReader>という名前の .resources ファイルを表すオブジェクトを`Resources2.resources`ファイルから作成されたストリームを使用しています。</span><span class="sxs-lookup"><span data-stu-id="8e393-125">The second instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources2.resources` by using a stream created from the file.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)]  
  
 <span data-ttu-id="8e393-126">作成する、 <xref:System.Resources.ResourceReader> 、埋め込みの .resources ファイルを表すオブジェクトをインスタンス化、 <xref:System.Reflection.Assembly> .resources ファイルが埋め込まれているアセンブリからのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8e393-126">To create a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file, instantiate an <xref:System.Reflection.Assembly> object from the assembly in which the .resources file is embedded.</span></span> <span data-ttu-id="8e393-127">その<xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType>メソッドを返します。 を<xref:System.IO.Stream>オブジェクトを渡すことができる、<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="8e393-127">Its <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> method returns a <xref:System.IO.Stream> object that can be passed to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span> <span data-ttu-id="8e393-128">次の例では、インスタンス化、<xref:System.Resources.ResourceReader>埋め込みの .resources ファイルを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8e393-128">The following example instantiates a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)]
 [!code-vb[System.Resources.ResourceReader.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)]  
  
<a name="enumerate"></a>   
## <a name="enumerating-a-resourcereader-objects-resources"></a><span data-ttu-id="8e393-129">ResourceReader オブジェクトのリソースを列挙します。</span><span class="sxs-lookup"><span data-stu-id="8e393-129">Enumerating a ResourceReader Object's Resources</span></span>  
 <span data-ttu-id="8e393-130">.Resources ファイル内のリソースを列挙するために呼び出す、<xref:System.Resources.ResourceReader.GetEnumerator%2A>を返すメソッドを<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8e393-130">To enumerate the resources in a .resources file, you call the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method, which returns an <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="8e393-131">呼び出す、`IDictionaryEnumerator.MoveNext`メソッドを 1 つのリソースから、[次へ] に移動します。</span><span class="sxs-lookup"><span data-stu-id="8e393-131">You call the `IDictionaryEnumerator.MoveNext` method to move from one resource to the next.</span></span> <span data-ttu-id="8e393-132">メソッドを返します`false`.resources ファイル内のすべてのリソースが列挙されたとき。</span><span class="sxs-lookup"><span data-stu-id="8e393-132">The method returns `false` when all the resources in the .resources file have been enumerated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8e393-133">ですが、<xref:System.Resources.ResourceReader>クラスが実装する、<xref:System.Collections.IEnumerable>インターフェイスと<xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType>メソッド、<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType>メソッドは提供しません、<xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType>実装します。</span><span class="sxs-lookup"><span data-stu-id="8e393-133">Although the <xref:System.Resources.ResourceReader> class implements the <xref:System.Collections.IEnumerable> interface and the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> method, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method does not provide the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="8e393-134">代わりに、<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType>メソッドが返す、<xref:System.Collections.IDictionaryEnumerator>各リソースの名前/値ペアへのアクセスを提供するインターフェイス オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8e393-134">Instead, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method  returns an <xref:System.Collections.IDictionaryEnumerator> interface object that provides access to each resource's name/value pair.</span></span>  
  
 <span data-ttu-id="8e393-135">2 つの方法では、コレクション内の個々 のリソースを取得できます。</span><span class="sxs-lookup"><span data-stu-id="8e393-135">You can retrieve the individual resources in the collection in two ways:</span></span>  
  
-   <span data-ttu-id="8e393-136">内の各リソースを反復処理できる、<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>収集および使用<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>リソースの名前と値を取得するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="8e393-136">You can iterate each resource in the <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collection and use <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> properties to retrieve the resource name and value.</span></span> <span data-ttu-id="8e393-137">この手法は、すべてのリソースが同じ型、または各リソースのデータ型がわかってときにお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8e393-137">We recommend this technique when all the resources are of the same type, or you know the data type of each resource.</span></span>  
  
-   <span data-ttu-id="8e393-138">各リソースの名前を取得するには、反復処理する場合、<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>コレクションと呼び出し、<xref:System.Resources.ResourceReader.GetResourceData%2A>リソースのデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="8e393-138">You can retrieve the name of each resource when you iterate the <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collection and call the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve the resource's data.</span></span> <span data-ttu-id="8e393-139">各リソースのデータ型がわからない場合、または前のアプローチが例外をスローした場合は、この手法を勧めします。</span><span class="sxs-lookup"><span data-stu-id="8e393-139">We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.</span></span>  
  
<a name="idictionaryenumerator"></a>   
### <a name="retrieving-resources-by-using-idictionaryenumerator-properties"></a><span data-ttu-id="8e393-140">IDictionaryEnumerator プロパティを使用してリソースを取得します。</span><span class="sxs-lookup"><span data-stu-id="8e393-140">Retrieving Resources by Using IDictionaryEnumerator Properties</span></span>  
 <span data-ttu-id="8e393-141">.Resources ファイル内のリソースを列挙するは、最初のメソッドでは、各リソースの名前/値ペアを直接取得する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8e393-141">The first method of enumerating the resources in a .resources file involves directly retrieving each resource's name/value pair.</span></span> <span data-ttu-id="8e393-142">呼び出した後、`IDictionaryEnumerator.MoveNext`からリソースを取得する、コレクション内の各リソースに移動するメソッドの名前、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>プロパティと、リソースのデータから、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="8e393-142">After you call the `IDictionaryEnumerator.MoveNext` method to move to each resource in the collection, you can retrieve the resource name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property and the resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="8e393-143">次の例を使用して .resources ファイル内の各リソースの値と名前を取得する方法を示しています、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>と<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="8e393-143">The following example shows how to retrieve the name and value of each resource in a .resources file by using the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="8e393-144">例を実行するには、文字列リソースを定義する ApplicationResources.txt という名前の次のテキスト ファイルを作成します。</span><span class="sxs-lookup"><span data-stu-id="8e393-144">To run the example, create the following text file named ApplicationResources.txt to define string resources.</span></span>  
  
```  
Title="Contact Information"  
Label1="First Name:"  
Label2="Middle Name:"  
Label3="Last Name:"  
Label4="SSN:"  
Label5="Street Address:"  
Label6="City:"  
Label7="State:"  
Label8="Zip Code:"  
Label9="Home Phone:"  
Label10="Business Phone:"  
Label11="Mobile Phone:"  
Label12="Other Phone:"  
Label13="Fax:"  
Label14="Email Address:"  
Label15="Alternate Email Address:"  
```  
  
 <span data-ttu-id="8e393-145">テキストのリソース ファイルは、次のコマンドを使用して ApplicationResources.resources をという名前のバイナリ ファイルに変換できます。</span><span class="sxs-lookup"><span data-stu-id="8e393-145">You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:</span></span>  
  
 <span data-ttu-id="8e393-146">**resgen ApplicationResources.txt**</span><span class="sxs-lookup"><span data-stu-id="8e393-146">**resgen ApplicationResources.txt**</span></span>  
  
 <span data-ttu-id="8e393-147">次の例を使用し、<xref:System.Resources.ResourceReader>クラス、スタンドアロンの .resources バイナリ ファイル内の各リソースを列挙し、そのキーの名前と対応する値を表示します。</span><span class="sxs-lookup"><span data-stu-id="8e393-147">The following example then uses the <xref:System.Resources.ResourceReader> class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)]  
  
 <span data-ttu-id="8e393-148">リソース データを取得しようとすると、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティは、次の例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="8e393-148">The attempt to retrieve resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property can throw the following exceptions:</span></span>  
  
-   <span data-ttu-id="8e393-149">A<xref:System.FormatException>予期された形式でデータがない場合。</span><span class="sxs-lookup"><span data-stu-id="8e393-149">A <xref:System.FormatException> if the data is not in the expected format.</span></span>  
  
-   <span data-ttu-id="8e393-150">A<xref:System.IO.FileNotFoundException>データが所属する型を含むアセンブリが見つからない場合。</span><span class="sxs-lookup"><span data-stu-id="8e393-150">A <xref:System.IO.FileNotFoundException> if the assembly that contains the type to which the data belongs cannot be found.</span></span>  
  
-   <span data-ttu-id="8e393-151">A<xref:System.TypeLoadException>で見つからない場合、データが所属する型にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="8e393-151">A <xref:System.TypeLoadException> if the type to which the data belongs cannot be cannot be found.</span></span>  
  
 <span data-ttu-id="8e393-152">型が定義されているアセンブリがアプリケーションに追加されていないか、または誤って削除されている場合に、.resources ファイルを手動で変更されている場合、またはアセンブリが以前のバージョンに復帰させる方である場合通常は、これらの例外がスローされます。型。</span><span class="sxs-lookup"><span data-stu-id="8e393-152">Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type.</span></span> <span data-ttu-id="8e393-153">各リソースを列挙し、呼び出すことによってリソースを取得するにはこれらの例外がスローされた場合、<xref:System.Resources.ResourceReader.GetResourceData%2A>メソッドは、次のセクションで示す。</span><span class="sxs-lookup"><span data-stu-id="8e393-153">If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method, as the following section shows.</span></span> <span data-ttu-id="8e393-154">このアプローチを提供するデータに関する情報の種類を<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティを返そうとしました。</span><span class="sxs-lookup"><span data-stu-id="8e393-154">This approach provides you with some information about the data type that the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property attempted to return.</span></span>  
  
<a name="getresourcedata"></a>   
### <a name="retrieving-resources-by-name-with-getresourcedata"></a><span data-ttu-id="8e393-155">GetResourceData と名前によってリソースを取得します。</span><span class="sxs-lookup"><span data-stu-id="8e393-155">Retrieving Resources by Name with GetResourceData</span></span>  
 <span data-ttu-id="8e393-156">.Resources ファイル内のリソースを列挙するには、2 番目のアプローチもでは呼び出すことによって、ファイル内のリソース間の移動、`IDictionaryEnumerator.MoveNext`メソッド。</span><span class="sxs-lookup"><span data-stu-id="8e393-156">The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the `IDictionaryEnumerator.MoveNext` method.</span></span> <span data-ttu-id="8e393-157">リソースの名前を取得するリソースごとに、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>に渡されますが、プロパティ、<xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29>リソースのデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="8e393-157">For each resource, you retrieve the resource's name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property, which is then passed to the <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> method to retrieve the resource's data.</span></span> <span data-ttu-id="8e393-158">これは、バイト配列として返される、`resourceData`引数。</span><span class="sxs-lookup"><span data-stu-id="8e393-158">This is returned as a byte array in the `resourceData` argument.</span></span>  
  
 <span data-ttu-id="8e393-159">この方法は、リソースの名前と値を取得するよりもより扱いにくい、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>と<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティ、リソースの値を形成する実際のバイト数を返すためです。</span><span class="sxs-lookup"><span data-stu-id="8e393-159">This approach is more awkward than retrieving the resource name and value from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> properties, because it returns the actual bytes that form the resource value.</span></span> <span data-ttu-id="8e393-160">ただし、リソースを取得しようとすると、例外をスローした場合、<xref:System.Resources.ResourceReader.GetResourceData%2A>メソッドは、リソースのデータ型に関する情報を提供することによって、例外の原因を特定できます。</span><span class="sxs-lookup"><span data-stu-id="8e393-160">However, if the attempt to retrieve the resource throws an exception, the <xref:System.Resources.ResourceReader.GetResourceData%2A> method can help identify the source of the exception by supplying information about the resource's data type.</span></span> <span data-ttu-id="8e393-161">リソースのデータ型を示す文字列の詳細については、次を参照してください。<xref:System.Resources.ResourceReader.GetResourceData%2A>します。</span><span class="sxs-lookup"><span data-stu-id="8e393-161">For more information about the string that indicates the resource's data type, see <xref:System.Resources.ResourceReader.GetResourceData%2A>.</span></span>  
  
 <span data-ttu-id="8e393-162">次の例では、このアプローチを使用して、リソースを取得してスローされる例外を処理する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8e393-162">The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown.</span></span> <span data-ttu-id="8e393-163">4 つの文字列、ブール値を 1 つ、1 つの整数、1 つのビットマップ、および 1 つのカスタムを含むバイナリ .resources ファイルをプログラムで作成します`DateTimeTZI`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8e393-163">It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom `DateTimeTZI` object.</span></span> <span data-ttu-id="8e393-164">例を実行するには、次の操作を行います。</span><span class="sxs-lookup"><span data-stu-id="8e393-164">To run the example, do the following:</span></span>  
  
1.  <span data-ttu-id="8e393-165">含む Library.dll という名前のアセンブリを作成、`DateTimeTZI`構造体。</span><span class="sxs-lookup"><span data-stu-id="8e393-165">Create an assembly named Library.dll that contains the `DateTimeTZI` structure.</span></span> <span data-ttu-id="8e393-166">アセンブリのソース コードを次に示します。</span><span class="sxs-lookup"><span data-stu-id="8e393-166">The following is the source code for the assembly.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)]
     [!code-vb[System.Resources.ResourceReader.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)]  
  
     <span data-ttu-id="8e393-167">次のコマンドを使用して c# では、ソース コードをコンパイルします。</span><span class="sxs-lookup"><span data-stu-id="8e393-167">Compile the source code in C# by using the following command:</span></span>  
  
    ```  
    csc /t:library library.cs  
    ```  
  
     <span data-ttu-id="8e393-168">または、次のコマンドを使用して Visual Basic でコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="8e393-168">Or, you can compile it in Visual Basic by using the following command:</span></span>  
  
    ```  
    vbc library.vb /t:library  
    ```  
  
2.  <span data-ttu-id="8e393-169">コンパイルおよび ContactResources.resources をという名前の .resources ファイルを作成します。 次のソース コードを実行します。</span><span class="sxs-lookup"><span data-stu-id="8e393-169">Compile and execute the following source code, which creates a .resources file named ContactResources.resources.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)]
     [!code-vb[System.Resources.ResourceReader.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)]  
  
     <span data-ttu-id="8e393-170">CreateResources.cs の名前は、ソース コード ファイル。</span><span class="sxs-lookup"><span data-stu-id="8e393-170">The source code file is named CreateResources.cs.</span></span> <span data-ttu-id="8e393-171">C# で次のコマンドを使用して、それをコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="8e393-171">You can compile it in C# by using the following command:</span></span>  
  
    ```  
    csc CreateResources.cs /r:library.dll  
    ```  
  
     <span data-ttu-id="8e393-172">または、次のコマンドを使用して Visual Basic でコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="8e393-172">Or, you can compile it in Visual Basic by using the following command:</span></span>  
  
    ```  
    vbc CreateResources.vb /r:library.dll  
    ```  
  
3.  <span data-ttu-id="8e393-173">コンパイルして ContactResources.resources ファイル内のリソースを列挙するために次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="8e393-173">Compile and run the following code to enumerate the resources in the ContactResources.resources file.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)]
     [!code-vb[System.Resources.ResourceReader.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)]  
  
     <span data-ttu-id="8e393-174">ソース コードを変更した後 (意図的にスローすることによって、<xref:System.FormatException>の最後に、`try`ブロック) または Library.dll アセンブリの名前を変更して、実行時に使用できるように、表示する例を実行する方法への呼び出し<xref:System.Resources.ResourceReader.GetResourceData%2A>取得または一部のリソース情報を再作成できます。</span><span class="sxs-lookup"><span data-stu-id="8e393-174">After modifying the source code (for example, by deliberately throwing a <xref:System.FormatException> at the end of the `try` block) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <xref:System.Resources.ResourceReader.GetResourceData%2A> enable you to retrieve or recreate some resource information.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8e393-175">
            <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-175">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="8e393-176">[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]。</span><span class="sxs-lookup"><span data-stu-id="8e393-176">[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)].</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : System.IO.Stream -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="8e393-177">リソースを読み取る入力ストリーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-177">The input stream for reading resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8e393-178">指定したストリーム用の <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-178">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e393-179"><xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>コンス トラクターをインスタンス化、<xref:System.Resources.ResourceReader>アセンブリに埋め込まれているリソースまたはスタンドアロンの .resources ファイル .resources からファイルを取得するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="8e393-179">The <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="8e393-180">スタンドアロンの .resources ファイルからの読み取り、インスタンス化、<xref:System.IO.Stream>オブジェクトに渡すと、<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="8e393-180">To read from a standalone .resources file, instantiate a <xref:System.IO.Stream> object and pass it to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span> <span data-ttu-id="8e393-181">埋め込みの .resources ファイルから読み取り、呼び出し、 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> .resources ファイル、および、返されたパスの名前を持つメソッド<xref:System.IO.Stream>オブジェクトを<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="8e393-181">To read from an embedded .resources file, call the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> method with the case-sensitive name of the .resources file, and pass the returned <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span>  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
## Examples  
 <span data-ttu-id="8e393-182">このセクションの例では、次の .txt ファイルという名前を使用して`PatientForm.txt`アプリケーションで使用されるリソースを定義します。</span><span class="sxs-lookup"><span data-stu-id="8e393-182">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="8e393-183">.Resources ファイルに .txt ファイルをコンパイルするには、次のコマンドを発行します。</span><span class="sxs-lookup"><span data-stu-id="8e393-183">You can compile the .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="8e393-184">**resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="8e393-184">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="8e393-185">次の例では、リソース ファイルが、アプリケーションの実行可能ファイルのコードを含むアセンブリに埋め込まれている前提としています。</span><span class="sxs-lookup"><span data-stu-id="8e393-185">The following example assumes that the resource file is embedded in the assembly that contains the application's executable code.</span></span> <span data-ttu-id="8e393-186">という名前のリソース ファイルを取得`PatientForm.resources`現在実行中のアセンブリから名前とそのリソースのそれぞれの値が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8e393-186">It retrieves a resource file named `PatientForm.resources` from the currently executing assemblies and displays the name and value of each of its resources.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream1.vb#1)]  
  
 <span data-ttu-id="8e393-187">C# の例の名前が場合`Example.cs`、次のコマンドを使用してコンパイルすることができます。</span><span class="sxs-lookup"><span data-stu-id="8e393-187">If the C# example is named `Example.cs`, you can compile it by using the following command:</span></span>  
  
 <span data-ttu-id="8e393-188">**csc Example.cs/res:PatientForm.resources**</span><span class="sxs-lookup"><span data-stu-id="8e393-188">**csc Example.cs /res:PatientForm.resources**</span></span>  
  
 <span data-ttu-id="8e393-189">Visual Basic の例の名前が場合`Example.vb`、次のコマンドを使用してコンパイルすることができます。</span><span class="sxs-lookup"><span data-stu-id="8e393-189">If the Visual Basic example is named `Example.vb`, you can compile it by using the following command:</span></span>  
  
 <span data-ttu-id="8e393-190">**vbc Example.vb/res:PatientForm.resources**</span><span class="sxs-lookup"><span data-stu-id="8e393-190">**vbc Example.vb /res:PatientForm.resources**</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8e393-191">
            <paramref name="stream" /> パラメーターは読み取り可能ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-191">The <paramref name="stream" /> parameter is not readable.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8e393-192">
            <paramref name="stream" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-192">The <paramref name="stream" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8e393-193">
            <paramref name="stream" /> にアクセスしているときに、I/O エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-193">An I/O error has occurred while accessing <paramref name="stream" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="8e393-194">シリアル化サービスを提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-194">for providing serialization services.</span>
          </span>
          <span data-ttu-id="8e393-195">セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-195">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="8e393-196">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-196">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="8e393-197">直前の呼び出し元に対する完全な信頼が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-197">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="8e393-198">このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-198">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : string -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader fileName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="8e393-199">読み取るリソース ファイルのパスと名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-199">The path and name of the resource file to read.</span>
          </span>
          <span data-ttu-id="8e393-200">
            <c>filename</c> は大文字と小文字を区別しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-200">
              <c>filename</c> is not case-sensitive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8e393-201">リソース ファイルを指定して <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-201">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified named resource file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e393-202"><xref:System.Resources.ResourceReader.%23ctor%28System.String%29>コンス トラクターをインスタンス化、<xref:System.Resources.ResourceReader>スタンドアロンの .resources ファイルからリソースを取得するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8e393-202">The <xref:System.Resources.ResourceReader.%23ctor%28System.String%29> constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources from a standalone .resources file.</span></span> <span data-ttu-id="8e393-203">埋め込みの .resources ファイルからリソースを取得するには使用、<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="8e393-203">To retrieve resources from an embedded .resources file, use the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span>  

[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]

## Examples  
 <span data-ttu-id="8e393-204">このセクションの例では、次の .txt ファイルという名前を使用して`PatientForm.txt`アプリケーションで使用されるリソースを定義します。</span><span class="sxs-lookup"><span data-stu-id="8e393-204">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="8e393-205">.Resources ファイルに .txt ファイルをコンパイルするには、次のコマンドを発行します。</span><span class="sxs-lookup"><span data-stu-id="8e393-205">You can compile this .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="8e393-206">**resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="8e393-206">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="8e393-207">次の例のリソースを列挙する`PatientForm.resources`名前とそれぞれの値が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8e393-207">The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8e393-208">
            <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-208">The <paramref name="fileName" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="8e393-209">ファイルが見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-209">The file cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8e393-210">I/O エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-210">An I/O error has occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="8e393-211">リソース ファイルの形式が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-211">The resource file has an invalid format.</span>
          </span>
          <span data-ttu-id="8e393-212">たとえば、ファイルの長さが 0 の場合などです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-212">For example, the length of the file may be zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="resourceReader.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8e393-213">この <see cref="T:System.Resources.ResourceReader" /> オブジェクトに関連付けられたすべてのオペレーティング システム リソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-213">Releases all operating system resources associated with this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e393-214"><xref:System.Resources.ResourceReader.Close%2A> 安全に呼び出せる複数回です。</span><span class="sxs-lookup"><span data-stu-id="8e393-214"><xref:System.Resources.ResourceReader.Close%2A> can be safely called multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e393-215">次の例では、ファイルのリソースを移動し、見つかったすべてのキー/値ペアを表示します。</span><span class="sxs-lookup"><span data-stu-id="8e393-215">The following example moves through a file's resources and displays all the key/value pairs it finds.</span></span> <span data-ttu-id="8e393-216">コードを使用し、<xref:System.Resources.ResourceReader.Close%2A>をシャット ダウンする方法、<xref:System.Resources.ResourceReader>および使用するすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8e393-216">The code then uses the <xref:System.Resources.ResourceReader.Close%2A> method to shut down the <xref:System.Resources.ResourceReader> and to release all resources used by it.</span></span>  
  
 [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="resourceReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8e393-217">
            <see cref="T:System.Resources.ResourceReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-217">Releases all resources used by the current instance of the <see cref="T:System.Resources.ResourceReader" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e393-218">このインスタンスの使用が終了するときに<xref:System.Resources.ResourceReader>、呼び出す<xref:System.Resources.ResourceReader.Dispose%2A>をこのインスタンスによって使用されるすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8e393-218">When you are finished using this instance of <xref:System.Resources.ResourceReader>, call <xref:System.Resources.ResourceReader.Dispose%2A> to release all resources used by this instance.</span></span> <span data-ttu-id="8e393-219">これをさらに参照を削除する必要があります<xref:System.Resources.ResourceReader>インスタンス、ガベージ コレクターがファイナライズの履歴に保持する代わりにインスタンスのメモリが再利用できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8e393-219">You should eliminate further references to this <xref:System.Resources.ResourceReader> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.</span></span>  
  
 <span data-ttu-id="8e393-220"><xref:System.Resources.ResourceReader.Dispose%2A> マネージ コードとアンマネージ リソースを解放するコードを含むプライベート dispose (boolean) メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8e393-220"><xref:System.Resources.ResourceReader.Dispose%2A> calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources.</span></span> <span data-ttu-id="8e393-221">詳細については、次を参照してください。 [Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)します。</span><span class="sxs-lookup"><span data-stu-id="8e393-221">For more information, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="resourceReader.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8e393-222">この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-222">Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8e393-223">この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-223">An enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e393-224">通常は、呼び出すことによってリソースを列挙、<xref:System.Resources.ResourceReader.GetEnumerator%2A>メソッドを繰り返し呼び出す、<xref:System.Collections.IEnumerator.MoveNext%2A>メソッドで返された<xref:System.Collections.IDictionaryEnumerator>オブジェクトのメソッドが戻るまで`false`します。</span><span class="sxs-lookup"><span data-stu-id="8e393-224">Typically, you enumerate resources by calling the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method and then repeatedly calling the <xref:System.Collections.IEnumerator.MoveNext%2A> method on the returned <xref:System.Collections.IDictionaryEnumerator> object until the method returns `false`.</span></span> <span data-ttu-id="8e393-225">リソース名がから利用可能な<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>プロパティです。 その値から、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="8e393-225">The resource name is available from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property; its value from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="8e393-226">この方法でリソースを列挙する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8e393-226">The example illustrates how to enumerate resources in this way.</span></span>  
  
 <span data-ttu-id="8e393-227">実装、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティによって、<xref:System.Resources.ResourceReader>クラスは、次の例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="8e393-227">The implementation of the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property by the <xref:System.Resources.ResourceReader> class can throw the following exceptions:</span></span>  
  
-   <xref:System.IO.FileNotFoundException>  
  
     <span data-ttu-id="8e393-228">データが所属する型を含むアセンブリが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="8e393-228">The assembly that contains the type to which the data belongs cannot be found.</span></span>  
  
-   <xref:System.FormatException>  
  
     <span data-ttu-id="8e393-229">データが予期された形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="8e393-229">The data is not in the expected format.</span></span>  
  
-   <xref:System.TypeLoadException>  
  
     <span data-ttu-id="8e393-230">データが所属する型が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="8e393-230">The type to which the data belongs cannot be found.</span></span>  
  
 <span data-ttu-id="8e393-231">呼び出して例外を処理できる、<xref:System.Resources.ResourceReader.GetResourceData%2A>については、データ型と名前付きリソースに割り当てられているバイト配列を取得します。</span><span class="sxs-lookup"><span data-stu-id="8e393-231">You can handle the exception by calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve information about the data type and the byte array assigned to the named resource.</span></span> <span data-ttu-id="8e393-232">詳細については、"を取得するリソースを名前で GetResourceData"セクションを参照してください、<xref:System.Resources.ResourceReader>クラスに関するトピック。</span><span class="sxs-lookup"><span data-stu-id="8e393-232">For more information, see the "Retrieving Resources by Name with GetResourceData" section in the <xref:System.Resources.ResourceReader> class topic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8e393-233"><xref:System.Resources.ResourceReader>クラスには、列挙子を返す 2 つのメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="8e393-233">The <xref:System.Resources.ResourceReader> class includes two methods that return enumerators.</span></span> <span data-ttu-id="8e393-234"><xref:System.Resources.ResourceReader.GetEnumerator%2A>メソッドが返す、<xref:System.Collections.IDictionaryEnumerator>インターフェイス オブジェクトとメソッドを呼び出す、推奨される方法は、リソースの列挙します。</span><span class="sxs-lookup"><span data-stu-id="8e393-234">The <xref:System.Resources.ResourceReader.GetEnumerator%2A> method returns an <xref:System.Collections.IDictionaryEnumerator> interface object and is the recommended method to call when enumerating resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e393-235">このセクションの例では、次の .txt ファイルという名前を使用して`PatientForm.txt`アプリケーションで使用されるリソースを定義します。</span><span class="sxs-lookup"><span data-stu-id="8e393-235">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="8e393-236">.Resources ファイルに .txt ファイルをコンパイルするには、次のコマンドを発行します。</span><span class="sxs-lookup"><span data-stu-id="8e393-236">You can compile the .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="8e393-237">**resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="8e393-237">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="8e393-238">次の例のリソースを列挙する`PatientForm.resources`名前とそれぞれの値が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8e393-238">The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8e393-239">リーダーが閉じられているか、破棄されているため、アクセスできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-239">The reader has been closed or disposed, and cannot be accessed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceData">
      <MemberSignature Language="C#" Value="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetResourceData(string resourceName, [out] string&amp; resourceType, [out] unsigned int8[]&amp; resourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetResourceData (resourceName As String, ByRef resourceType As String, ByRef resourceData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetResourceData(System::String ^ resourceName, [Runtime::InteropServices::Out] System::String ^ % resourceType, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % resourceData);" />
      <MemberSignature Language="F#" Value="member this.GetResourceData : string *  *  -&gt; unit" Usage="resourceReader.GetResourceData (resourceName, resourceType, resourceData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="resourceType" Type="System.String" RefType="out" />
        <Parameter Name="resourceData" Type="System.Byte[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceName">
          <span data-ttu-id="8e393-240">リソースの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-240">The name of a resource.</span>
          </span>
        </param>
        <param name="resourceType">
          <span data-ttu-id="8e393-241">このメソッドが返るときに、取得したリソースの型名を表す文字列が含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-241">When this method returns, contains a string that represents the type name of the retrieved resource.</span>
          </span>
          <span data-ttu-id="8e393-242">このパラメーターは初期化せずに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-242">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <param name="resourceData">
          <span data-ttu-id="8e393-243">このメソッドから制御が戻った時点で、取得した型のバイナリ表現であるバイト配列が格納されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-243">When this method returns, contains a byte array that is the binary representation of the retrieved type.</span>
          </span>
          <span data-ttu-id="8e393-244">このパラメーターは初期化せずに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-244">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8e393-245">オープン リソース ファイルまたはストリームから名前付きリソースの型名とデータを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-245">Retrieves the type name and data of a named resource from an open resource file or stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e393-246"><xref:System.Resources.ResourceReader.GetResourceData%2A>メソッドの名前付きのリソースをバイト配列として値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8e393-246">The <xref:System.Resources.ResourceReader.GetResourceData%2A> method retrieves the value of a named resource as a byte array.</span></span> <span data-ttu-id="8e393-247">通常は、その際に使用される、<xref:System.Collections.IDictionaryEnumerator.Value%2A>プロパティは、リソースの値を取得するときに例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="8e393-247">It is typically used when the <xref:System.Collections.IDictionaryEnumerator.Value%2A> property throws an exception when it tries to retrieve the value of a resource.</span></span>  
  
 <span data-ttu-id="8e393-248">`resourceType` リソースのデータ型を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="8e393-248">`resourceType` is a string that represents the data type of the resource.</span></span> <span data-ttu-id="8e393-249">次の値のいずれかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="8e393-249">It can be any of the following values:</span></span>  
  
-   <span data-ttu-id="8e393-250">文字列表現を`ResourceTypeCode`リソースのデータ型を示す列挙メンバー。</span><span class="sxs-lookup"><span data-stu-id="8e393-250">The string representation of a `ResourceTypeCode` enumeration member that indicates the data type of the resource.</span></span> <span data-ttu-id="8e393-251">`ResourceTypeCode` で使用されるプライベート列挙を示す特別なバイナリ形式が 19 の一般的なデータ型のいずれかを格納するために使用します。</span><span class="sxs-lookup"><span data-stu-id="8e393-251">`ResourceTypeCode` is a private enumeration that is used by .to indicate that a special binary format is used to store one of 19 common data types.</span></span> <span data-ttu-id="8e393-252">.NET Framework のプリミティブ データ型が含まれます (<xref:System.Boolean>、 <xref:System.Byte>、 <xref:System.Char>、 <xref:System.Decimal>、 <xref:System.Double>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.Int64>、 <xref:System.Single>、 <xref:System.SByte>、 <xref:System.UInt16>、 <xref:System.UInt32>、 <xref:System.UInt64>)、および<xref:System.String>、<xref:System.DateTime>と<xref:System.TimeSpan>、さらに、`ResourceTypeCode`列挙には、次の表に示すように値が含まれています。</span><span class="sxs-lookup"><span data-stu-id="8e393-252">These include the .NET Framework primitive data types (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), as well as <xref:System.String>, <xref:System.DateTime>, and <xref:System.TimeSpan>, In addition, the `ResourceTypeCode` enumeration includes the values shown in the following table.</span></span>  
  
    |<span data-ttu-id="8e393-253">ResourceTypeCode 値</span><span class="sxs-lookup"><span data-stu-id="8e393-253">ResourceTypeCode value</span></span>|<span data-ttu-id="8e393-254">説明</span><span class="sxs-lookup"><span data-stu-id="8e393-254">Description</span></span>|  
    |----------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|<span data-ttu-id="8e393-255">データは、バイト配列です。</span><span class="sxs-lookup"><span data-stu-id="8e393-255">The data is a byte array.</span></span> <span data-ttu-id="8e393-256">このデータ型への呼び出しの結果では通常、<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8e393-256">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> method.</span></span>|  
    |`ResourceTypeCode.Null`|<span data-ttu-id="8e393-257">データは、null 参照です。</span><span class="sxs-lookup"><span data-stu-id="8e393-257">The data is a null reference.</span></span> <span data-ttu-id="8e393-258">このデータ型への呼び出しの結果では通常、<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType>メソッド、オブジェクトの値が`null`します。</span><span class="sxs-lookup"><span data-stu-id="8e393-258">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> method with an object whose value is `null`.</span></span>|  
    |`ResourceTypeCode.Stream`|<span data-ttu-id="8e393-259">データは、ストリームに格納されます。</span><span class="sxs-lookup"><span data-stu-id="8e393-259">The data is stored in a stream.</span></span> <span data-ttu-id="8e393-260">このデータ型への呼び出しの結果では通常、<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType>または<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8e393-260">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> or <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> method.</span></span>|  
  
     <span data-ttu-id="8e393-261">仮定`resourceData`されていないが破損しているが、通常、変換できるバイト配列から元の値に戻す呼び出すことによって、<xref:System.BitConverter>または<xref:System.IO.BinaryReader>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8e393-261">Assuming that `resourceData` has not been corrupted, it can usually be converted from a byte array back to its original value by calling a <xref:System.BitConverter> or <xref:System.IO.BinaryReader> method.</span></span>  
  
-   <span data-ttu-id="8e393-262">割り当てられているシリアル化されたデータ型の完全修飾名を含む文字列、`resourceData`引数 (たとえば、 `System.String`)。</span><span class="sxs-lookup"><span data-stu-id="8e393-262">A string that contains the fully qualified name of the type whose serialized data is assigned to the `resourceData` argument (for example, `System.String`).</span></span> <span data-ttu-id="8e393-263">さらに、.NET Framework クラス ライブラリの一部ではない型、文字列が含まれます名前、バージョン、カルチャ、およびデータ型を含むアセンブリの公開キー。</span><span class="sxs-lookup"><span data-stu-id="8e393-263">In addition, for types that are not part of the .NET Framework class library, the string includes the name, version, culture, and public key of the assembly that contains the type.</span></span> <span data-ttu-id="8e393-264">など、次の文字列では、シリアル化されたデータは、のインスタンスで表すことを示す、`Person`で入力、`Extensions`名前空間は、公開キーがないとしない指定のカルチャのあるユーティリティをという名前のアセンブリのバージョン 1.0 が見つかった。</span><span class="sxs-lookup"><span data-stu-id="8e393-264">For example, the following string indicates that the serialized data represents an instance of the `Person` type in the `Extensions` namespace, which is found in version 1.0 of an assembly named Utility that has no public key and no designated culture.</span></span>  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
     <span data-ttu-id="8e393-265">仮定`resourceData`壊れていないソースの種類が使用可能な`resourceData`に変換できるバイト配列からバックアップ元の値をバイト配列を変換することで、<xref:System.IO.Stream>オブジェクトと、にストリームを渡す<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8e393-265">Assuming that `resourceData` has not been corrupted and that the source type is available, `resourceData` can be converted from a byte array back to its original value by converting the byte array to a <xref:System.IO.Stream> object and passing the stream to the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="8e393-266">データ型を記述するために使用する文字列、<xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType>メソッドの呼び出し。</span><span class="sxs-lookup"><span data-stu-id="8e393-266">The string used to describe the data type in the <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> method call.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8e393-267">
            <paramref name="resourceName" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-267">
              <paramref name="resourceName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8e393-268">
            <paramref name="resourceName" /> は存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-268">
              <paramref name="resourceName" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="8e393-269">
            <paramref name="resourceName" /> の型が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-269">
              <paramref name="resourceName" /> has an invalid type.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="8e393-270">取得されたリソース データが壊れています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-270">The retrieved resource data is corrupt.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8e393-271">現在の <see cref="T:System.Resources.ResourceReader" /> のオブジェクトは、おそらく閉じられたために初期化されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-271">The current <see cref="T:System.Resources.ResourceReader" /> object is not initialized, probably because it is closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8e393-272">この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-272">Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8e393-273">この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-273">An enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e393-274"><xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> 明示的なインターフェイス実装です。</span><span class="sxs-lookup"><span data-stu-id="8e393-274"><xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> is an explicit interface implementation.</span></span> <span data-ttu-id="8e393-275">これは、<xref:System.Resources.ResourceReader> のインスタンスが <xref:System.Collections.IEnumerable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="8e393-275">It can be used only when the <xref:System.Resources.ResourceReader> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span> <span data-ttu-id="8e393-276">呼び出すことの .resources ファイルにリソースを列挙するための推奨アプローチです、<xref:System.Collections.IEnumerator.MoveNext%2A>のメソッド、<xref:System.Collections.IDictionaryEnumerator>によって返されるオブジェクト、<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="8e393-276">The recommended approach to enumerating the resources in a .resources file is to call the <xref:System.Collections.IEnumerator.MoveNext%2A> method of the <xref:System.Collections.IDictionaryEnumerator> object returned by the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8e393-277">リーダーが既に閉じられているため、アクセスできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e393-277">The reader has already been closed and cannot be accessed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>