<Type Name="ResourceReader" FullName="System.Resources.ResourceReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f2814539bf76d998ae0f4c7bdb789f22102804ce" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52734774" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ResourceReader : System.Resources.IResourceReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable, class System.Resources.IResourceReader" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IResourceReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : System::Resources::IResourceReader" />
  <TypeSignature Language="F#" Value="type ResourceReader = class&#xA;    interface IResourceReader&#xA;    interface IEnumerable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Reader</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Resources.IResourceReader</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>順次リソースの名前と値のペアを読み取って、バイナリ リソース (.resources) ファイル内のリソースを列挙します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-class-note](~/includes/untrusted-data-class-note.md)]

 <xref:System.Resources.ResourceReader>クラスの標準的な実装を提供する、<xref:System.Resources.IResourceReader>インターフェイス。 A<xref:System.Resources.ResourceReader>インスタンスはスタンドアロンの .resources ファイルまたはアセンブリに埋め込まれた .resources ファイルのいずれかを表します。 .Resources ファイル内のリソースを列挙し、名前/値ペアを取得するために使用します。 異なり、<xref:System.Resources.ResourceManager>クラスは、アセンブリに埋め込まれた .resources ファイルから指定した名前付きリソースを取得するために使用します。 <xref:System.Resources.ResourceManager>に対し、名前を持つが、事前に認識されているリソースを取得するクラスが使用される、<xref:System.Resources.ResourceReader>クラスは、数または正確な名前を持つはコンパイル時に、不明のリソースを取得するために便利です。 たとえば、アプリケーションでは、セクションおよびセクションまたはセクション内の項目の数が事前にわかっていないいるセクション内の項目が構成されている構成情報を格納するのにリソース ファイルを使用できます。 リソースは一般的に、ということができます (など`Section1`、 `Section1Item1`、`Section1Item2`など) を使用して取得し、<xref:System.Resources.ResourceReader>オブジェクト。  
  
> [!IMPORTANT]
>  この型は、<xref:System.IDisposable>インターフェイス。 型の使用が完了したら、直接的または間接的にそれを破棄する必要があります。 型の直接 dispose を呼び出してその<xref:System.IDisposable.Dispose%2A>メソッド、 `try` / `catch`ブロックします。 直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(で C# の場合) または`Using`(Visual Basic) でします。 詳細については、"を使用して、オブジェクトを実装する IDisposable"のセクションを参照してください、<xref:System.IDisposable>インターフェイスに関するトピック。  
  
 使用しての詳細については、<xref:System.Resources.ResourceReader>クラスを次のセクションを参照してください。  
  
-   [ResourceReader オブジェクトをインスタンス化します。](#instantiate)  
  
-   [ResourceReader オブジェクトのリソースを列挙します。](#enumerate)  
  
    -   [IDictionaryEnumerator プロパティを使用してリソースを取得します。](#idictionaryenumerator)  
  
    -   [GetResourceData と名前によってリソースを取得します。](#getresourcedata)  
  
<a name="instantiate"></a>   
## <a name="instantiating-a-resourcereader-object"></a>ResourceReader オブジェクトをインスタンス化します。  
 .Resources ファイルはテキスト ファイルまたはによって XML .resx ファイルからコンパイルされたバイナリ ファイル[Resgen.exe (リソース ファイル ジェネレーター)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)します。 A<xref:System.Resources.ResourceReader>オブジェクトは、スタンドアロンの .resources ファイルまたはアセンブリに埋め込まれた .resources ファイルのいずれかを表すことができます。  
  
 インスタンス化する、<xref:System.Resources.ResourceReader>オブジェクトをスタンドアロン .resources ファイルから読み取り、<xref:System.Resources.ResourceReader>入力ストリームまたは .resources ファイルの名前を含む文字列のいずれかでクラスのコンス トラクター。 次の例では、両方の方法を示します。 最初のインスタンスを作成、<xref:System.Resources.ResourceReader>という名前の .resources ファイルを表すオブジェクトを`Resources1.resources`ファイル名を使用しています。 2 番目のインスタンスを作成、<xref:System.Resources.ResourceReader>という名前の .resources ファイルを表すオブジェクトを`Resources2.resources`ファイルから作成されたストリームを使用しています。  
  
 [!code-csharp[System.Resources.ResourceReader.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)]  
  
 作成する、 <xref:System.Resources.ResourceReader> 、埋め込みの .resources ファイルを表すオブジェクトをインスタンス化、 <xref:System.Reflection.Assembly> .resources ファイルが埋め込まれているアセンブリからのオブジェクト。 その<xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType>メソッドを返します。 を<xref:System.IO.Stream>オブジェクトを渡すことができる、<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>コンス トラクター。 次の例では、インスタンス化、<xref:System.Resources.ResourceReader>埋め込みの .resources ファイルを表すオブジェクト。  
  
 [!code-csharp[System.Resources.ResourceReader.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)]
 [!code-vb[System.Resources.ResourceReader.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)]  
  
<a name="enumerate"></a>   
## <a name="enumerating-a-resourcereader-objects-resources"></a>ResourceReader オブジェクトのリソースを列挙します。  
 .Resources ファイル内のリソースを列挙するために呼び出す、<xref:System.Resources.ResourceReader.GetEnumerator%2A>を返すメソッドを<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>オブジェクト。 呼び出す、`IDictionaryEnumerator.MoveNext`メソッドを 1 つのリソースから、[次へ] に移動します。 メソッドを返します`false`.resources ファイル内のすべてのリソースが列挙されたとき。  
  
> [!NOTE]
>  ですが、<xref:System.Resources.ResourceReader>クラスが実装する、<xref:System.Collections.IEnumerable>インターフェイスと<xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType>メソッド、<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType>メソッドは提供しません、<xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType>実装します。 代わりに、<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType>メソッドが返す、<xref:System.Collections.IDictionaryEnumerator>各リソースの名前/値ペアへのアクセスを提供するインターフェイス オブジェクト。  
  
 2 つの方法では、コレクション内の個々 のリソースを取得できます。  
  
-   内の各リソースを反復処理できる、<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>収集および使用<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>リソースの名前と値を取得するプロパティ。 この手法は、すべてのリソースが同じ型、または各リソースのデータ型がわかってときにお勧めします。  
  
-   各リソースの名前を取得するには、反復処理する場合、<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType>コレクションと呼び出し、<xref:System.Resources.ResourceReader.GetResourceData%2A>リソースのデータを取得します。 各リソースのデータ型がわからない場合、または前のアプローチが例外をスローした場合は、この手法を勧めします。  
  
<a name="idictionaryenumerator"></a>   
### <a name="retrieving-resources-by-using-idictionaryenumerator-properties"></a>IDictionaryEnumerator プロパティを使用してリソースを取得します。  
 .Resources ファイル内のリソースを列挙するは、最初のメソッドでは、各リソースの名前/値ペアを直接取得する必要があります。 呼び出した後、`IDictionaryEnumerator.MoveNext`からリソースを取得する、コレクション内の各リソースに移動するメソッドの名前、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>プロパティと、リソースのデータから、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティ。  
  
 次の例を使用して .resources ファイル内の各リソースの値と名前を取得する方法を示しています、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>と<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティ。 例を実行するには、文字列リソースを定義する ApplicationResources.txt という名前の次のテキスト ファイルを作成します。  
  
```  
Title="Contact Information"  
Label1="First Name:"  
Label2="Middle Name:"  
Label3="Last Name:"  
Label4="SSN:"  
Label5="Street Address:"  
Label6="City:"  
Label7="State:"  
Label8="Zip Code:"  
Label9="Home Phone:"  
Label10="Business Phone:"  
Label11="Mobile Phone:"  
Label12="Other Phone:"  
Label13="Fax:"  
Label14="Email Address:"  
Label15="Alternate Email Address:"  
```  
  
 テキストのリソース ファイルは、次のコマンドを使用して ApplicationResources.resources をという名前のバイナリ ファイルに変換できます。  
  
 **resgen ApplicationResources.txt**  
  
 次の例を使用し、<xref:System.Resources.ResourceReader>クラス、スタンドアロンの .resources バイナリ ファイル内の各リソースを列挙し、そのキーの名前と対応する値を表示します。  
  
 [!code-csharp[System.Resources.ResourceReader.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)]  
  
 リソース データを取得しようとすると、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティは、次の例外をスローできます。  
  
-   A<xref:System.FormatException>予期された形式でデータがない場合。  
  
-   A<xref:System.IO.FileNotFoundException>データが所属する型を含むアセンブリが見つからない場合。  
  
-   A<xref:System.TypeLoadException>で見つからない場合、データが所属する型にすることはできません。  
  
 型が定義されているアセンブリがアプリケーションに追加されていないか、または誤って削除されている場合に、.resources ファイルを手動で変更されている場合、またはアセンブリが以前のバージョンに復帰させる方である場合通常は、これらの例外がスローされます。型。 各リソースを列挙し、呼び出すことによってリソースを取得するにはこれらの例外がスローされた場合、<xref:System.Resources.ResourceReader.GetResourceData%2A>メソッドは、次のセクションで示す。 このアプローチを提供するデータに関する情報の種類を<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティを返そうとしました。  
  
<a name="getresourcedata"></a>   
### <a name="retrieving-resources-by-name-with-getresourcedata"></a>GetResourceData と名前によってリソースを取得します。  
 .Resources ファイル内のリソースを列挙するには、2 番目のアプローチもでは呼び出すことによって、ファイル内のリソース間の移動、`IDictionaryEnumerator.MoveNext`メソッド。 リソースの名前を取得するリソースごとに、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>に渡されますが、プロパティ、<xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29>リソースのデータを取得します。 これは、バイト配列として返される、`resourceData`引数。  
  
 この方法は、リソースの名前と値を取得するよりもより扱いにくい、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>と<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティ、リソースの値を形成する実際のバイト数を返すためです。 ただし、リソースを取得しようとすると、例外をスローした場合、<xref:System.Resources.ResourceReader.GetResourceData%2A>メソッドは、リソースのデータ型に関する情報を提供することによって、例外の原因を特定できます。 リソースのデータ型を示す文字列の詳細については、次を参照してください。<xref:System.Resources.ResourceReader.GetResourceData%2A>します。  
  
 次の例では、このアプローチを使用して、リソースを取得してスローされる例外を処理する方法を示します。 4 つの文字列、ブール値を 1 つ、1 つの整数、1 つのビットマップ、および 1 つのカスタムを含むバイナリ .resources ファイルをプログラムで作成します`DateTimeTZI`オブジェクト。 例を実行するには、次の操作を行います。  
  
1.  含む Library.dll という名前のアセンブリを作成、`DateTimeTZI`構造体。 アセンブリのソース コードを次に示します。  
  
     [!code-csharp[System.Resources.ResourceReader.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)]
     [!code-vb[System.Resources.ResourceReader.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)]  
  
     次のコマンドを使用して c# では、ソース コードをコンパイルします。  
  
    ```  
    csc /t:library library.cs  
    ```  
  
     または、次のコマンドを使用して Visual Basic でコンパイルできます。  
  
    ```  
    vbc library.vb /t:library  
    ```  
  
2.  コンパイルおよび ContactResources.resources をという名前の .resources ファイルを作成します。 次のソース コードを実行します。  
  
     [!code-csharp[System.Resources.ResourceReader.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)]
     [!code-vb[System.Resources.ResourceReader.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)]  
  
     CreateResources.cs の名前は、ソース コード ファイル。 C# で次のコマンドを使用して、それをコンパイルできます。  
  
    ```  
    csc CreateResources.cs /r:library.dll  
    ```  
  
     または、次のコマンドを使用して Visual Basic でコンパイルできます。  
  
    ```  
    vbc CreateResources.vb /r:library.dll  
    ```  
  
3.  コンパイルして ContactResources.resources ファイル内のリソースを列挙するために次のコードを実行します。  
  
     [!code-csharp[System.Resources.ResourceReader.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)]
     [!code-vb[System.Resources.ResourceReader.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)]  
  
     ソース コードを変更した後 (意図的にスローすることによって、<xref:System.FormatException>の最後に、`try`ブロック) または Library.dll アセンブリの名前を変更して、実行時に使用できるように、表示する例を実行する方法への呼び出し<xref:System.Resources.ResourceReader.GetResourceData%2A>取得または一部のリソース情報を再作成できます。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]。
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : System.IO.Stream -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">リソースを読み取る入力ストリーム。</param>
        <summary>指定したストリーム用の <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>コンス トラクターをインスタンス化、<xref:System.Resources.ResourceReader>アセンブリに埋め込まれているリソースまたはスタンドアロンの .resources ファイル .resources からファイルを取得するオブジェクトです。 スタンドアロンの .resources ファイルからの読み取り、インスタンス化、<xref:System.IO.Stream>オブジェクトに渡すと、<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>コンス トラクター。 埋め込みの .resources ファイルから読み取り、呼び出し、 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> .resources ファイル、および、返されたパスの名前を持つメソッド<xref:System.IO.Stream>オブジェクトを<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>コンス トラクター。  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
## Examples  
 このセクションの例では、次の .txt ファイルという名前を使用して`PatientForm.txt`アプリケーションで使用されるリソースを定義します。  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 .Resources ファイルに .txt ファイルをコンパイルするには、次のコマンドを発行します。  
  
 **resgen PatientForm.txt**  
  
 次の例では、リソース ファイルが、アプリケーションの実行可能ファイルのコードを含むアセンブリに埋め込まれている前提としています。 という名前のリソース ファイルを取得`PatientForm.resources`現在実行中のアセンブリから名前とそのリソースのそれぞれの値が表示されます。  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream1.vb#1)]  
  
 C# の例の名前が場合`Example.cs`、次のコマンドを使用してコンパイルすることができます。  
  
 **csc Example.cs/res:PatientForm.resources**  
  
 Visual Basic の例の名前が場合`Example.vb`、次のコマンドを使用してコンパイルすることができます。  
  
 **vbc Example.vb/res:PatientForm.resources**  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" />パラメーターを読み取ることができません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">アクセス中に I/O エラーが発生しました<paramref name="stream" />します。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">シリアル化サービスを提供します。 セキュリティ アクション:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されたまたは透過的なコードで使用することはできません。</permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : string -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader fileName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">読み取るリソース ファイルのパスと名前。 <c>filename</c> は大文字と小文字を区別しません。</param>
        <summary>リソース ファイルを指定して <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.%23ctor%28System.String%29>コンス トラクターをインスタンス化、<xref:System.Resources.ResourceReader>スタンドアロンの .resources ファイルからリソースを取得するオブジェクト。 埋め込みの .resources ファイルからリソースを取得するには使用、<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>コンス トラクター。  

[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]

## Examples  
 このセクションの例では、次の .txt ファイルという名前を使用して`PatientForm.txt`アプリケーションで使用されるリソースを定義します。  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 .Resources ファイルに .txt ファイルをコンパイルするには、次のコマンドを発行します。  
  
 **resgen PatientForm.txt**  
  
 次の例のリソースを列挙する`PatientForm.resources`名前とそれぞれの値が表示されます。  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.BadImageFormatException">リソース ファイルには、無効な形式があります。 たとえば、ファイルの長さは 0 にあります。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="resourceReader.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Resources.ResourceReader" /> オブジェクトに関連付けられたすべてのオペレーティング システム リソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.Close%2A> 安全に呼び出せる複数回です。  
  
   
  
## Examples  
 次の例では、ファイルのリソースを移動し、見つかったすべてのキー/値ペアを表示します。 コードを使用し、<xref:System.Resources.ResourceReader.Close%2A>をシャット ダウンする方法、<xref:System.Resources.ResourceReader>および使用するすべてのリソースを解放します。  
  
 [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="resourceReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Resources.ResourceReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このインスタンスの使用が終了するときに<xref:System.Resources.ResourceReader>、呼び出す<xref:System.Resources.ResourceReader.Dispose%2A>をこのインスタンスによって使用されるすべてのリソースを解放します。 これをさらに参照を削除する必要があります<xref:System.Resources.ResourceReader>インスタンス、ガベージ コレクターがファイナライズの履歴に保持する代わりにインスタンスのメモリが再利用できるようにします。  
  
 <xref:System.Resources.ResourceReader.Dispose%2A> マネージ コードとアンマネージ リソースを解放するコードを含むプライベート dispose (boolean) メソッドを呼び出します。 詳細については、次を参照してください。 [Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="resourceReader.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子を返します。</summary>
        <returns>この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常は、呼び出すことによってリソースを列挙、<xref:System.Resources.ResourceReader.GetEnumerator%2A>メソッドを繰り返し呼び出す、<xref:System.Collections.IEnumerator.MoveNext%2A>メソッドで返された<xref:System.Collections.IDictionaryEnumerator>オブジェクトのメソッドが戻るまで`false`します。 リソース名がから利用可能な<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType>プロパティです。 その値から、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティ。 この方法でリソースを列挙する方法を示します。  
  
 実装、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType>プロパティによって、<xref:System.Resources.ResourceReader>クラスは、次の例外をスローできます。  
  
-   <xref:System.IO.FileNotFoundException>  
  
     データが所属する型を含むアセンブリが見つかりません。  
  
-   <xref:System.FormatException>  
  
     データが予期された形式ではありません。  
  
-   <xref:System.TypeLoadException>  
  
     データが所属する型が見つかりません。  
  
 呼び出して例外を処理できる、<xref:System.Resources.ResourceReader.GetResourceData%2A>については、データ型と名前付きリソースに割り当てられているバイト配列を取得します。 詳細については、"を取得するリソースを名前で GetResourceData"セクションを参照してください、<xref:System.Resources.ResourceReader>クラスに関するトピック。  
  
> [!IMPORTANT]
>  <xref:System.Resources.ResourceReader>クラスには、列挙子を返す 2 つのメソッドが含まれています。 <xref:System.Resources.ResourceReader.GetEnumerator%2A>メソッドが返す、<xref:System.Collections.IDictionaryEnumerator>インターフェイス オブジェクトとメソッドを呼び出す、推奨される方法は、リソースの列挙します。  
  
   
  
## Examples  
 このセクションの例では、次の .txt ファイルという名前を使用して`PatientForm.txt`アプリケーションで使用されるリソースを定義します。  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 .Resources ファイルに .txt ファイルをコンパイルするには、次のコマンドを発行します。  
  
 **resgen PatientForm.txt**  
  
 次の例のリソースを列挙する`PatientForm.resources`名前とそれぞれの値が表示されます。  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">リーダーを閉じているか、破棄されると、アクセスできません。</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceData">
      <MemberSignature Language="C#" Value="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetResourceData(string resourceName, [out] string&amp; resourceType, [out] unsigned int8[]&amp; resourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetResourceData (resourceName As String, ByRef resourceType As String, ByRef resourceData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetResourceData(System::String ^ resourceName, [Runtime::InteropServices::Out] System::String ^ % resourceType, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % resourceData);" />
      <MemberSignature Language="F#" Value="member this.GetResourceData : string *  *  -&gt; unit" Usage="resourceReader.GetResourceData (resourceName, resourceType, resourceData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="resourceType" Type="System.String" RefType="out" />
        <Parameter Name="resourceData" Type="System.Byte[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceName">リソースの名前。</param>
        <param name="resourceType">このメソッドが返るときに、取得したリソースの型名を表す文字列が含まれます。 このパラメーターは初期化せずに渡されます。</param>
        <param name="resourceData">このメソッドから制御が戻った時点で、取得した型のバイナリ表現であるバイト配列が格納されます。 このパラメーターは初期化せずに渡されます。</param>
        <summary>オープン リソース ファイルまたはストリームから名前付きリソースの型名とデータを取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.GetResourceData%2A>メソッドの名前付きのリソースをバイト配列として値を取得します。 通常は、その際に使用される、<xref:System.Collections.IDictionaryEnumerator.Value%2A>プロパティは、リソースの値を取得するときに例外をスローします。  
  
 `resourceType` リソースのデータ型を表す文字列です。 次の値のいずれかを指定できます。  
  
-   文字列表現を`ResourceTypeCode`リソースのデータ型を示す列挙メンバー。 `ResourceTypeCode` で使用されるプライベート列挙を示す特別なバイナリ形式が 19 の一般的なデータ型のいずれかを格納するために使用します。 .NET Framework のプリミティブ データ型が含まれます (<xref:System.Boolean>、 <xref:System.Byte>、 <xref:System.Char>、 <xref:System.Decimal>、 <xref:System.Double>、 <xref:System.Int16>、 <xref:System.Int32>、 <xref:System.Int64>、 <xref:System.Single>、 <xref:System.SByte>、 <xref:System.UInt16>、 <xref:System.UInt32>、 <xref:System.UInt64>)、および<xref:System.String>、<xref:System.DateTime>と<xref:System.TimeSpan>、さらに、`ResourceTypeCode`列挙には、次の表に示すように値が含まれています。  
  
    |ResourceTypeCode 値|説明|  
    |----------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|データは、バイト配列です。 このデータ型への呼び出しの結果では通常、<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType>メソッド。|  
    |`ResourceTypeCode.Null`|データは、null 参照です。 このデータ型への呼び出しの結果では通常、<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType>メソッド、オブジェクトの値が`null`します。|  
    |`ResourceTypeCode.Stream`|データは、ストリームに格納されます。 このデータ型への呼び出しの結果では通常、<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType>または<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType>メソッド。|  
  
     仮定`resourceData`されていないが破損しているが、通常、変換できるバイト配列から元の値に戻す呼び出すことによって、<xref:System.BitConverter>または<xref:System.IO.BinaryReader>メソッド。  
  
-   割り当てられているシリアル化されたデータ型の完全修飾名を含む文字列、`resourceData`引数 (たとえば、 `System.String`)。 さらに、.NET Framework クラス ライブラリの一部ではない型、文字列が含まれます名前、バージョン、カルチャ、およびデータ型を含むアセンブリの公開キー。 など、次の文字列では、シリアル化されたデータは、のインスタンスで表すことを示す、`Person`で入力、`Extensions`名前空間は、公開キーがないとしない指定のカルチャのあるユーティリティをという名前のアセンブリのバージョン 1.0 が見つかった。  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
     仮定`resourceData`壊れていないソースの種類が使用可能な`resourceData`に変換できるバイト配列からバックアップ元の値をバイト配列を変換することで、<xref:System.IO.Stream>オブジェクトと、にストリームを渡す<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType>メソッド。  
  
-   データ型を記述するために使用する文字列、<xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType>メソッドの呼び出し。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> は存在しません。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="resourceName" /> 無効な型があります。</exception>
        <exception cref="T:System.FormatException">取得されたリソース データが壊れています。</exception>
        <exception cref="T:System.InvalidOperationException">現在<see cref="T:System.Resources.ResourceReader" />オブジェクトが初期化されていません、おそらくは閉じているためです。</exception>
        <altmember cref="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子を返します。</summary>
        <returns>この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> 明示的なインターフェイス実装です。 これは、<xref:System.Resources.ResourceReader> のインスタンスが <xref:System.Collections.IEnumerable> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出すことの .resources ファイルにリソースを列挙するための推奨アプローチです、<xref:System.Collections.IEnumerator.MoveNext%2A>のメソッド、<xref:System.Collections.IDictionaryEnumerator>によって返されるオブジェクト、<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">リーダーは、既に終了されていて、アクセスできません。</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Resources.ResourceReader" /> で使用したリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
によって使用されるリソースを Dispose を呼び出すが、<xref:System.Resources.ResourceReader>他の目的で再割り当てします。 Dispose の詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)します。

## Examples  
次のコード例では、ファイルのリソースを移動し、見つかったすべてのキー/値ペアを出力します。 コードが、theIDisposable.Dispose メソッドを使用して、シャット ダウン、<xref:System.Resources.ResourceReader>および使用するすべてのリソースを解放します。

```vb
Imports System
Imports System.Resources
Imports System.Collections

Public Class ReadResources

    Public Shared Sub Main(args() As String)
        ' Create a resource reader for items.resources 
        ' and get an enumerator to iterate through the file. 
        Dim reader As IResourceReader = New ResourceReader("items.resources")
        Dim en As IDictionaryEnumerator = reader.GetEnumerator()

        ' Iterate through the file, printing the key and value pairs. 
        While en.MoveNext()
            Console.WriteLine()
            Console.WriteLine("Name: {0}", en.Key)
            Console.WriteLine("Value: {0}", en.Value)
        End While 

        ' Clean up all resources associated with the reader. 
        ' Calling Dispose is equivalent to calling Close.
        reader.Dispose()
    End Sub 

End Class
```

```csharp
using System;
using System.Resources;
using System.Collections;

public class ReadResources 
{
    public static void Main(string[] args) 
    {
        // Create a resource reader for items.resources 
        // and get an enumerator to iterate through the file.
        IResourceReader reader = new ResourceReader("items.resources");
        IDictionaryEnumerator en = reader.GetEnumerator();

        // Iterate through the file, printing the key/value pairs. 
        while (en.MoveNext()) 
        {
            Console.WriteLine();
            Console.WriteLine("Name: {0}", en.Key);
            Console.WriteLine("Value: {0}", en.Value);
        }

        // Clean up all resources associated with the reader. 
        // Calling Dispose is equivalent to calling Close.
        reader.Dispose();
    }
}
```

```cpp
using namespace System;
using namespace System::Resources;
using namespace System::Collections;
int main()
{
   array<String^>^args = Environment::GetCommandLineArgs();

   // Create a resource reader for items.resources 
   // and get an enumerator to iterate through the file.
   IResourceReader^ reader = gcnew ResourceReader( "items.resources" );
   IDictionaryEnumerator^ en = reader->GetEnumerator();

   // Iterate through the file, printing the key/value pairs. 
   while ( en->MoveNext() )
   {
      Console::WriteLine();
      Console::WriteLine( "Name: {0}", en->Key );
      Console::WriteLine( "Value: {0}", en->Value );
   }

   // Clean up all resources associated with the reader. 
   // Calling the destructor is equivalent to calling Close.
   reader->~IResourceReader();
}
```

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>