<Type Name="SmtpClient" FullName="System.Net.Mail.SmtpClient">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="218aaa8fe4ad107fac0589b56c6d7f148fa4d44b" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52601945" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SmtpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SmtpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Mail.SmtpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class SmtpClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SmtpClient : IDisposable" />
  <TypeSignature Language="F#" Value="type SmtpClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.Mail</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Obsolete("SmtpClient and its network of types are poorly designed, we strongly recommend you use https://github.com/jstedfast/MailKit and https://github.com/jstedfast/MimeKit instead")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>アプリケーションが SMTP (簡易メール転送プロトコル) を使用して電子メールを送信できるようにします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `System.Net.Mail.SmtpClient`クラスは、配信用 SMTP サーバーに電子メールを送信するために使用します。 利用可能な RFC 2821 で SMTP プロトコルが定義されている[ https://www.ietf.org](https://www.ietf.org/)します。  

> [!IMPORTANT]
>  使用することをお勧めしません、`SmtpClient`クラスの新しい開発します。 詳細については、次を参照してください。 [SmtpClient を使用してはならない](https://github.com/dotnet/platform-compat/blob/master/docs/DE0005.md)GitHub でします。

 次の表に示すようにクラスを使用して送信できる電子メール メッセージの構築を使用して、<xref:System.Net.Mail.SmtpClient>します。  
  
|クラス|説明|  
|-----------|-----------------|  
|<xref:System.Net.Mail.Attachment>|添付をファイルに表します。 このクラスを使用すると、ファイル、ストリーム、またはテキストを電子メール メッセージに添付できます。|  
|<xref:System.Net.Mail.MailAddress>|送信者と受信者の電子メール アドレスを表します。|  
|<xref:System.Net.Mail.MailMessage>|電子メール メッセージを表します。|  
  
 作成およびを使用して電子メール メッセージを送信する<xref:System.Net.Mail.SmtpClient>、次の情報を指定する必要があります。  
  
-   電子メールの送信に使用する SMTP ホスト サーバー。 参照してください、<xref:System.Net.Mail.SmtpClient.Host%2A>と<xref:System.Net.Mail.SmtpClient.Port%2A>プロパティ。  
  
-   SMTP サーバーで必要な場合は、認証の資格情報。 <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティを参照してください。  
  
-   送信者の電子メール アドレス。 参照してください、<xref:System.Net.Mail.SmtpClient.Send%2A>と<xref:System.Net.Mail.SmtpClient.SendAsync%2A>を受け取るメソッドを`from`パラメーター。 また、<xref:System.Net.Mail.MailMessage.From%2A?displayProperty=nameWithType>プロパティ。  
  
-   受信者のアドレスまたは電子メール アドレス。 参照してください、<xref:System.Net.Mail.SmtpClient.Send%2A>と<xref:System.Net.Mail.SmtpClient.SendAsync%2A>を受け取るメソッドを`recipient`パラメーター。 また、<xref:System.Net.Mail.MailMessage.To%2A?displayProperty=nameWithType>プロパティ。  
  
-   メッセージの内容。 参照してください、<xref:System.Net.Mail.SmtpClient.Send%2A>と<xref:System.Net.Mail.SmtpClient.SendAsync%2A>を受け取るメソッドを`body`パラメーター。 また、<xref:System.Net.Mail.MailMessage.Body%2A?displayProperty=nameWithType>プロパティ。  
  
 電子メール メッセージの添付ファイルを含めるには、まず、添付ファイルを使用して作成、<xref:System.Net.Mail.Attachment>クラスし、を使用してメッセージに追加し、<xref:System.Net.Mail.MailMessage.Attachments%2A?displayProperty=nameWithType>プロパティ。 受信者と添付ファイルのファイルの種類で使用される電子メール リーダー、によって、一部の受信者は可能性があります、添付ファイルを読み取ることができません。 元の形式で添付ファイルを表示できないクライアントの場合を使用して代替ビューを指定することができます、<xref:System.Net.Mail.MailMessage.AlternateViews%2A?displayProperty=nameWithType>プロパティ。  
  
 アプリケーションを使用する .NET framework、またはマシンの構成ファイルを指定するすべてのホスト、ポート、および資格情報の値を既定<xref:System.Net.Mail.SmtpClient>オブジェクト。 詳細については、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)します。 .NET core は、既定値の設定をサポートしていません。 この問題を回避するに関連するプロパティを設定する必要があります<xref:System.Net.Mail.SmtpClient>直接します。  
  
 SMTP サーバーに送信する電子メールの待機中に、電子メール メッセージとブロックを送信する 1 つの同期を使用して<xref:System.Net.Mail.SmtpClient.Send%2A>メソッド。 電子メールの送信中の実行を継続するプログラムのメイン スレッドを許可するには、非同期のいずれかを使用<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッド。 <xref:System.Net.Mail.SmtpClient.SendCompleted>イベントが発生したときに、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>操作が完了します。 このイベントを受信する追加する必要があります、<xref:System.Net.Mail.SendCompletedEventHandler>に委任<xref:System.Net.Mail.SmtpClient.SendCompleted>します。 <xref:System.Net.Mail.SendCompletedEventHandler>デリゲートでの通知を処理するコールバック メソッドを参照する必要があります<xref:System.Net.Mail.SmtpClient.SendCompleted>イベント。 非同期の電子メールの送信を取り消すには<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A>メソッド。  
  
> [!NOTE]
>  電子メールの送信中に呼び出す場合<xref:System.Net.Mail.SmtpClient.SendAsync%2A>または<xref:System.Net.Mail.SmtpClient.Send%2A>、もう一度表示されます、<xref:System.InvalidOperationException>します。  
  
 現在のインスタンスによって確立された接続、<xref:System.Net.Mail.SmtpClient>アプリケーションが同じ SMTP サーバーに複数のメッセージを送信する場合、SMTP サーバーへのクラスが再利用される可能性があります。 認証または暗号化を使用すると特に便利ですが、SMTP サーバーへの接続を確立します。 認証と TLS セッションの確立プロセスには、負荷の高い操作を指定できます。 同じ SMTP サーバーに大量の電子メールを送信するときに、メッセージごとに接続を再確立するための要件には、パフォーマンスに大きな影響を与える可能性があります。 送信メールのステータス更新のニュースレターの配布、または電子メールのアラートが大量の電子メール アプリケーションを数多くあります。 多くの電子メール クライアント アプリケーションをサポートして、オフライン モードのユーザーが SMTP サーバーへの接続が確立されているときに後で送信される多くの電子メール メッセージを作成できます。 特定の SMTP サーバー (インターネット サービス プロバイダーによって提供される) し、他の SMTP サーバーにこの電子メールを転送するすべての SMTP メッセージを送信する電子メール クライアントの一般的なものになります。  
  
 <xref:System.Net.Mail.SmtpClient>クラスの実装が SMTP 接続をプールすべてのメッセージを同じサーバーへの接続が再確立のオーバーヘッドを回避できます。 アプリケーションで再利用、同じことがあります<xref:System.Net.Mail.SmtpClient>と多数のさまざまな SMTP サーバーに同じ SMTP サーバーには、多くのさまざまな電子メールを送信するオブジェクト。 その結果、アプリケーションが終了したときに確認する方法はありませんを使用して、<xref:System.Net.Mail.SmtpClient>をオブジェクトをクリーンアップする必要があります。  
  
 SMTP セッションが終了し、クライアントが接続を終了する必要がある、ときに、サーバーに送信するメッセージがなくなったことを示す QUIT メッセージを送信する必要があります。 これにより、クライアントからの接続に関連付けられているリソースを解放して、クライアントによって送信されたメッセージを処理するサーバー。  
  
 <xref:System.Net.Mail.SmtpClient>クラスを持たない`Finalize`メソッドは、アプリケーションを呼び出す必要がありますので<xref:System.Net.Mail.SmtpClient.Dispose%2A>リソースを明示的に解放します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッド反復処理で指定された SMTP サーバーに確立されているすべての接続、<xref:System.Net.Mail.SmtpClient.Host%2A>プロパティと、TCP 接続を正常に終了後に終了メッセージを送信します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドで使用されるアンマネージ リソースも解放、<xref:System.Net.Sockets.Socket>とマネージ リソースも破棄します。  
  
 <xref:System.Net.Mail.SmtpClient> を使い終わったら、<xref:System.Net.Mail.SmtpClient.Dispose%2A>を呼び出します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドによって、<xref:System.Net.Mail.SmtpClient> は使用不可の状態になります。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>呼び出し後は、<xref:System.Net.Mail.SmtpClient>によって占有されていたメモリをガベージ コレクターがクリアできるよう、<xref:System.Net.Mail.SmtpClient> へのすべての参照を解放する必要があります。  
  
   
  
## Examples  
 次のコード例では、電子メール メッセージを非同期的に送信することを示します。  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Net.Mime" />
    <related type="Article" href="~/docs/framework/network-programming/index.md">.NET Framework のネットワーク プログラミング</related>
    <related type="Article" href="~/docs/framework/network-programming/network-programming-samples.md">ネットワーク プログラミングのサンプル</related>
    <related type="Article" href="~/docs/framework/network-programming/network-tracing.md">.NET Framework のネットワークのトレース</related>
    <related type="Article" href="~/docs/framework/network-programming/security-in-network-programming.md">ネットワーク プログラミングにおけるセキュリティ</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Net.Mail.SmtpClient" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SmtpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SmtpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>構成ファイルの設定を使用して <see cref="T:System.Net.Mail.SmtpClient" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターを初期化します、 <xref:System.Net.Mail.SmtpClient.Host%2A>、<xref:System.Net.Mail.SmtpClient.Credentials%2A>と<xref:System.Net.Mail.SmtpClient.Port%2A>新しいプロパティ<xref:System.Net.Mail.SmtpClient>アプリケーションまたはマシン構成ファイルで設定を使用しています。 詳細については、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)します。  
  
   
  
## Examples  
 次のコード例では、電子メール メッセージを送信することを示します。  
  
 [!code-cpp[NclMailSync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#4)]
 [!code-csharp[NclMailSync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#4)]  
  
 例については、 \<mailSettings > アプリケーションまたはマシン構成ファイル内のノードを参照してください[ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.Mail.SmtpPermission">構築する、<see cref="T:System.Net.Mail.SmtpClient" />します。 <see cref="F:System.Net.Mail.SmtpAccess.Connect" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SmtpClient (string host);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (host As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SmtpClient(System::String ^ host);" />
      <MemberSignature Language="F#" Value="new System.Net.Mail.SmtpClient : string -&gt; System.Net.Mail.SmtpClient" Usage="new System.Net.Mail.SmtpClient host" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="host">SMTP トランザクションで使用されるホスト コンピューターの名前または IP アドレスを格納している <see cref="T:System.String" />。</param>
        <summary>指定した SMTP サーバーを使用して電子メールを送信する <see cref="T:System.Net.Mail.SmtpClient" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `host`パラメーターがの値を初期化するために使用される、<xref:System.Net.Mail.SmtpClient.Host%2A>プロパティ。 <xref:System.Net.Mail.SmtpClient.Credentials%2A>と<xref:System.Net.Mail.SmtpClient.Port%2A>プロパティは、アプリケーションまたはマシン構成ファイルで設定を使用して初期化されます。 場合`host`は`null`以上<xref:System.String.Empty?displayProperty=nameWithType>、<xref:System.Net.Mail.SmtpClient.Host%2A>アプリケーションまたはマシン構成ファイルで設定を使用して初期化されます。  
  
 詳細については、アプリケーションとマシンの構成ファイルを使用して、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)します。 使用して、情報が指定されている場合<xref:System.Net.Mail.SmtpClient>コンス トラクターまたはプロパティでは、この情報は、構成ファイルの設定をオーバーライドします。  
  
   
  
## Examples  
 次のコード例では、このコンス トラクターの呼び出しを示しています。  
  
 [!code-cpp[NclMailSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#3)]
 [!code-csharp[NclMailSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.Mail.SmtpPermission">構築する、<see cref="T:System.Net.Mail.SmtpClient" />します。 <see cref="F:System.Net.Mail.SmtpAccess.Connect" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SmtpClient (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string host, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (host As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SmtpClient(System::String ^ host, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Mail.SmtpClient : string * int -&gt; System.Net.Mail.SmtpClient" Usage="new System.Net.Mail.SmtpClient (host, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host">SMTP トランザクションで使用されるホストの名前または IP アドレスを格納している <see cref="T:System.String" />。</param>
        <param name="port">
          <paramref name="host" /> 上で使用されるポートを格納している 1 以上の <see cref="T:System.Int32" />。</param>
        <summary>指定した SMTP サーバーとポートを使用して電子メールを送信する <see cref="T:System.Net.Mail.SmtpClient" /> クラスのインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `host`と`port`パラメーターの値の設定、<xref:System.Net.Mail.SmtpClient.Host%2A>と<xref:System.Net.Mail.SmtpClient.Port%2A>プロパティでは、それぞれします。 場合`host`は`null`以上<xref:System.String.Empty?displayProperty=nameWithType>、<xref:System.Net.Mail.SmtpClient.Host%2A>アプリケーションまたはマシン構成ファイルで設定を使用して初期化されます。 場合`port`ゼロ、<xref:System.Net.Mail.SmtpClient.Port%2A>アプリケーションまたはマシン構成ファイルで設定を使用して初期化されます。 <xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティは、アプリケーションまたはマシン構成ファイルで設定を使用して初期化されます。  
  
 詳細については、アプリケーションとマシンの構成ファイルを使用して、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)します。 使用して、情報が指定されている場合<xref:System.Net.Mail.SmtpClient>コンス トラクターまたはプロパティでは、この情報は、構成ファイルの設定をオーバーライドします。  
  
   
  
## Examples  
 次のコード例では、このコンス トラクターの呼び出しを示しています。  
  
 [!code-cpp[NclMailSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#1)]
 [!code-csharp[NclMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> は 0 未満には設定できません。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">ポートを指定します。 <see cref="F:System.Net.Mail.SmtpAccess.ConnectToUnrestrictedPort" /> (関連する列挙体)</permission>
      </Docs>
    </Member>
    <Member MemberName="ClientCertificates">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.ClientCertificates" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientCertificates As X509CertificateCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ ClientCertificates { System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientCertificates : System.Security.Cryptography.X509Certificates.X509CertificateCollection" Usage="System.Net.Mail.SmtpClient.ClientCertificates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Client certificates not used")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509CertificateCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SSL (Secure Sockets Layer) 接続を確立するために使用する必要のある証明書を指定します。</summary>
        <value>1 つ以上のクライアント証明書を保持している <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。 既定値は、構成ファイルのメール構成属性から派生します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クライアント証明書は、既定で、省略可能です。ただし、サーバーの構成は、クライアントが最初の接続のネゴシエーションの一部として有効な証明書を提示する必要があります。  
  
> [!NOTE]
>  フレームワークでは、SSL セッションは、キャッシュが作成されるとき、可能であれば、新しい要求のキャッシュされたセッションを再利用しようとします。 最初の要素は、Framework は、SSL セッションを再利用しようとすると、 <xref:System.Net.Mail.SmtpClient.ClientCertificates%2A> (1 つないかどうか)、または匿名のセッションを再利用しようと<xref:System.Net.Mail.SmtpClient.ClientCertificates%2A>が空です。  
  
   
  
## Examples  
 次のコード例では、SMTP サーバーで SSL 接続を確立し、接続を使用して電子メールを送信します。  
  
 [!code-csharp[NclSSLMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSSLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md">MailSettings 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentialsByHost Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentialsByHost Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Property Credentials As ICredentialsByHost" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::ICredentialsByHost ^ Credentials { System::Net::ICredentialsByHost ^ get(); void set(System::Net::ICredentialsByHost ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentialsByHost with get, set" Usage="System.Net.Mail.SmtpClient.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentialsByHost</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>差出人の認証に使用する資格情報を取得または設定します。</summary>
        <value>認証に使用する資格情報を表す <see cref="T:System.Net.ICredentialsByHost" />。資格情報が指定されなかった場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一部の SMTP サーバーでは、サーバーは自身のために電子メールを送信する前にクライアントを認証することが必要です。 既定のネットワーク資格情報を使用するに設定することができます、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>に`true`このプロパティを設定する代わりにします。 場合、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>プロパティに設定されて`false,`で値を設定し、<xref:System.Net.Mail.SmtpClient.Credentials%2A>サーバーに接続するときに、資格情報のプロパティが使用されます。 場合、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>プロパティに設定されて`false`と<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティが設定されていない、し、メールは、サーバーに匿名で送信します。  
  
 アプリケーションとマシンの構成ファイルを使用して資格情報を指定することもできます。 詳細については、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)します。 使用して、情報が指定されている場合、<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティ、この情報は、構成ファイルの設定をオーバーライドします。  
  
> [!CAUTION]
>  基本認証の資格情報を指定する場合は、クリア テキストでサーバーに送信されます。 セキュリティ上の問題は、資格情報を確認するには、および他のユーザーによって使用されできますので、これに提供できます。  
  
   
  
## Examples  
 次のコード例では、電子メールを送信するために使用する資格情報の設定を示します。  
  
 [!code-cpp[NclMailSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#1)]
 [!code-csharp[NclMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">電子メールが送信中の場合、このプロパティの値は変更できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="DeliveryFormat">
      <MemberSignature Language="C#" Value="public System.Net.Mail.SmtpDeliveryFormat DeliveryFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Mail.SmtpDeliveryFormat DeliveryFormat" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.DeliveryFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property DeliveryFormat As SmtpDeliveryFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mail::SmtpDeliveryFormat DeliveryFormat { System::Net::Mail::SmtpDeliveryFormat get(); void set(System::Net::Mail::SmtpDeliveryFormat value); };" />
      <MemberSignature Language="F#" Value="member this.DeliveryFormat : System.Net.Mail.SmtpDeliveryFormat with get, set" Usage="System.Net.Mail.SmtpClient.DeliveryFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.SmtpDeliveryFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>電子メールを送信するために <see cref="T:System.Net.Mail.SmtpClient" /> によって使用される配信形式を取得または設定します。</summary>
        <value>
          <see cref="T:System.Net.Mail.SmtpDeliveryFormat" /> を返します。  
  
<see cref="T:System.Net.Mail.SmtpClient" /> で使用される配信形式。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliveryMethod">
      <MemberSignature Language="C#" Value="public System.Net.Mail.SmtpDeliveryMethod DeliveryMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Mail.SmtpDeliveryMethod DeliveryMethod" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.DeliveryMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property DeliveryMethod As SmtpDeliveryMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Mail::SmtpDeliveryMethod DeliveryMethod { System::Net::Mail::SmtpDeliveryMethod get(); void set(System::Net::Mail::SmtpDeliveryMethod value); };" />
      <MemberSignature Language="F#" Value="member this.DeliveryMethod : System.Net.Mail.SmtpDeliveryMethod with get, set" Usage="System.Net.Mail.SmtpClient.DeliveryMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Mail.SmtpDeliveryMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>送信メッセージの処理方法を指定します。</summary>
        <value>電子メール メッセージの配信方法を示す <see cref="T:System.Net.Mail.SmtpDeliveryMethod" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配信方法は次のとおりです。  
  
-   SMTP サーバー。  
  
-   IIS 用に、電子メールをピックアップ ディレクトリに移動するには、メッセージが配信されます。  
  
-   指定されたディレクトリへの電子メールの移行<xref:System.Net.Mail.SmtpClient.PickupDirectoryLocation%2A>別のアプリケーションで配信します。  
  
 このプロパティの既定値は、マシンで設定することもできます。 またはアプリケーション構成ファイル。 加えられた変更、<xref:System.Net.Mail.SmtpClient.PickupDirectoryLocation%2A>プロパティは、構成ファイルの設定をオーバーライドします。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="P:System.Net.Configuration.SmtpSection.DeliveryMethod" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md">&lt;mailSettings&gt;要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md">&lt;smtp&gt;要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>QUIT メッセージを SMTP サーバーに送信し、TCP 接続を適切に終了して、<see cref="T:System.Net.Mail.SmtpClient" /> クラスの現在のインスタンスで使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスによって確立された接続、<xref:System.Net.Mail.SmtpClient>アプリケーションが同じ SMTP サーバーに複数のメッセージを送信する場合、SMTP サーバーへのクラスが再利用される可能性があります。 認証または暗号化を使用すると特に便利ですが、SMTP サーバーへの接続を確立します。 認証と TLS セッションの確立プロセスには、負荷の高い操作を指定できます。 同じ SMTP サーバーに大量の電子メールを送信するときに、メッセージごとに接続を再確立するための要件には、パフォーマンスに大きな影響を与える可能性があります。 送信メールのステータス更新のニュースレターの配布、または電子メールのアラートが大量の電子メール アプリケーションを数多くあります。 多くの電子メール クライアント アプリケーションをサポートして、オフライン モードのユーザーが SMTP サーバーへの接続が確立されているときに後で送信される多くの電子メール メッセージを作成できます。 特定の SMTP サーバー (インターネット サービス プロバイダーによって提供される) し、他の SMTP サーバーにこの電子メールを転送するすべての SMTP メッセージを送信する電子メール クライアントの一般的なものになります。  
  
 <xref:System.Net.Mail.SmtpClient>クラスの実装が SMTP 接続をプールすべてのメッセージを同じサーバーへの接続が再確立のオーバーヘッドを回避できます。 アプリケーションで再利用、同じことがあります<xref:System.Net.Mail.SmtpClient>と多数のさまざまな SMTP サーバーに同じ SMTP サーバーには、多くのさまざまな電子メールを送信するオブジェクト。 その結果、アプリケーションが終了したときに確認する方法はありませんを使用して、<xref:System.Net.Mail.SmtpClient>をオブジェクトをクリーンアップする必要があります。  
  
 SMTP セッションが終了し、クライアントが接続を終了する必要がある、ときに、サーバーに送信するメッセージがなくなったことを示す QUIT メッセージを送信する必要があります。 これにより、クライアントからの接続に関連付けられているリソースを解放して、クライアントによって送信されたメッセージを処理するサーバー。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A> TCP 接続を正常に終了後にメソッドが確立されているすべての接続と、SMTP サーバーごとに QUIT メッセージを送信を反復処理します。 これらのメソッドによって使用されるアンマネージ リソースを解放します。、<xref:System.Net.Sockets.Socket>して必要に応じてマネージ リソースを破棄します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="smtpClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>QUIT メッセージを SMTP サーバーに送信し、TCP 接続を適切に終了して、<see cref="T:System.Net.Mail.SmtpClient" /> クラスの現在のインスタンスで使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスによって確立された接続、<xref:System.Net.Mail.SmtpClient>アプリケーションが同じ SMTP サーバーに複数のメッセージを送信する場合、SMTP サーバーへのクラスが再利用される可能性があります。 認証または暗号化を使用すると特に便利ですが、SMTP サーバーへの接続を確立します。 認証と TLS セッションの確立プロセスには、負荷の高い操作を指定できます。 同じ SMTP サーバーに大量の電子メールを送信するときに、メッセージごとに接続を再確立するための要件には、パフォーマンスに大きな影響を与える可能性があります。 送信メールのステータス更新のニュースレターの配布、または電子メールのアラートが大量の電子メール アプリケーションを数多くあります。 多くの電子メール クライアント アプリケーションをサポートして、オフライン モードのユーザーが SMTP サーバーへの接続が確立されているときに後で送信される多くの電子メール メッセージを作成できます。 特定の SMTP サーバー (インターネット サービス プロバイダーによって提供される) し、他の SMTP サーバーにこの電子メールを転送するすべての SMTP メッセージを送信する電子メール クライアントの一般的なものになります。  
  
 <xref:System.Net.Mail.SmtpClient>クラスの実装が SMTP 接続をプールすべてのメッセージを同じサーバーへの接続が再確立のオーバーヘッドを回避できます。 アプリケーションで再利用、同じことがあります<xref:System.Net.Mail.SmtpClient>と多数のさまざまな SMTP サーバーに同じ SMTP サーバーには、多くのさまざまな電子メールを送信するオブジェクト。 その結果、アプリケーションが終了したときに確認する方法はありませんを使用して、<xref:System.Net.Mail.SmtpClient>をオブジェクトをクリーンアップする必要があります。  
  
 SMTP セッションが終了し、クライアントが接続を終了する必要がある、ときに、サーバーに送信するメッセージがなくなったことを示す QUIT メッセージを送信する必要があります。 これにより、クライアントからの接続に関連付けられているリソースを解放して、クライアントによって送信されたメッセージを処理するサーバー。  
  
 呼び出す、<xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドを<xref:System.Net.Mail.SmtpClient>非同期で実行されているオブジェクト<xref:System.Net.Mail.SmtpClient.SendAsync%2A>操作がいなくても、送信操作をキャンセルは、<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A>メソッドが呼び出されました。  
  
 <xref:System.Net.Mail.SmtpClient>クラスを持たない`Finalize`メソッド。 アプリケーションを呼び出す必要がありますように<xref:System.Net.Mail.SmtpClient.Dispose%2A>リソースを明示的に解放します。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッド反復処理で指定された SMTP サーバーに確立されているすべての接続、<xref:System.Net.Mail.SmtpClient.Host%2A>プロパティと、TCP 接続を正常に終了後に終了メッセージを送信します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドは、基になるによって使用されるアンマネージ リソースも解放<xref:System.Net.Sockets.Socket>します。  
  
 <xref:System.Net.Mail.SmtpClient> を使い終わったら、<xref:System.Net.Mail.SmtpClient.Dispose%2A>を呼び出します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドによって、<xref:System.Net.Mail.SmtpClient> は使用不可の状態になります。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>呼び出し後は、<xref:System.Net.Mail.SmtpClient>によって占有されていたメモリをガベージ コレクターがクリアできるよう、<xref:System.Net.Mail.SmtpClient> へのすべての参照を解放する必要があります。  
  
 詳細については、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)および[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)を参照してください。  
  
> [!NOTE]
>  <xref:System.Net.Mail.SmtpClient>への最後の参照を解放する前に、必ず<xref:System.Net.Mail.SmtpClient.Dispose%2A>を呼び出してください。 それ以外の場合、ガベージ コレクターがメモリをクリアできるように、使用されているリソースは解放されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="smtpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Does nothing at the moment.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>QUIT メッセージを SMTP サーバーに送信し、TCP 接続を適切に終了して、<see cref="T:System.Net.Mail.SmtpClient" /> クラスの現在のインスタンスで使用されているすべてのリソースを解放します。オプションでマネージド リソースも破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスによって確立された接続、<xref:System.Net.Mail.SmtpClient>アプリケーションが同じ SMTP サーバーに複数のメッセージを送信する場合、SMTP サーバーへのクラスが再利用される可能性があります。 認証または暗号化を使用すると特に便利ですが、SMTP サーバーへの接続を確立します。 認証と TLS セッションの確立プロセスには、負荷の高い操作を指定できます。 同じ SMTP サーバーに大量の電子メールを送信するときに、メッセージごとに接続を再確立するための要件には、パフォーマンスに大きな影響を与える可能性があります。 送信メールのステータス更新のニュースレターの配布、または電子メールのアラートが大量の電子メール アプリケーションを数多くあります。 多くの電子メール クライアント アプリケーションをサポートして、オフライン モードのユーザーが SMTP サーバーへの接続が確立されているときに後で送信される多くの電子メール メッセージを作成できます。 特定の SMTP サーバー (インターネット サービス プロバイダーによって提供される) し、他の SMTP サーバーにこの電子メールを転送するすべての SMTP メッセージを送信する電子メール クライアントの一般的なものになります。  
  
 <xref:System.Net.Mail.SmtpClient>クラスの実装が SMTP 接続をプールすべてのメッセージを同じサーバーへの接続が再確立のオーバーヘッドを回避できます。 アプリケーションで再利用、同じことがあります<xref:System.Net.Mail.SmtpClient>と多数のさまざまな SMTP サーバーに同じ SMTP サーバーには、多くのさまざまな電子メールを送信するオブジェクト。 その結果、アプリケーションが終了したときに確認する方法はありませんを使用して、<xref:System.Net.Mail.SmtpClient>をオブジェクトをクリーンアップする必要があります。  
  
 SMTP セッションが終了し、クライアントが接続を終了する必要がある、ときに、サーバーに送信するメッセージがなくなったことを示す QUIT メッセージを送信する必要があります。 これにより、クライアントからの接続に関連付けられているリソースを解放して、クライアントによって送信されたメッセージを処理するサーバー。  
  
 呼び出す、<xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドを<xref:System.Net.Mail.SmtpClient>非同期で実行されているオブジェクト<xref:System.Net.Mail.SmtpClient.SendAsync%2A>操作がいなくても、送信操作をキャンセルは、<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A>メソッドが呼び出されました。  
  
 <xref:System.Net.Mail.SmtpClient>クラスを持たない`Finalize`メソッド。 アプリケーションを呼び出す必要がありますように<xref:System.Net.Mail.SmtpClient.Dispose%2A>リソースを明示的に解放します。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッド反復処理で指定された SMTP サーバーに確立されているすべての接続、<xref:System.Net.Mail.SmtpClient.Host%2A>プロパティと、TCP 接続を正常に終了後に終了メッセージを送信します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドで使用されるアンマネージ リソースも解放、<xref:System.Net.Sockets.Socket>とマネージ リソースも破棄します。  
  
 <xref:System.Net.Mail.SmtpClient> を使い終わったら、<xref:System.Net.Mail.SmtpClient.Dispose%2A>を呼び出します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドによって、<xref:System.Net.Mail.SmtpClient> は使用不可の状態になります。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>呼び出し後は、<xref:System.Net.Mail.SmtpClient>によって占有されていたメモリをガベージ コレクターがクリアできるよう、<xref:System.Net.Mail.SmtpClient> へのすべての参照を解放する必要があります。  
  
 詳細については、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)および[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)を参照してください。  
  
> [!NOTE]
>  <xref:System.Net.Mail.SmtpClient>への最後の参照を解放する前に、必ず<xref:System.Net.Mail.SmtpClient.Dispose%2A>を呼び出してください。 それ以外の場合、ガベージ コレクターがメモリをクリアできるように、使用されているリソースは解放されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSsl">
      <MemberSignature Language="C#" Value="public bool EnableSsl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSsl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.EnableSsl" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableSsl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableSsl { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableSsl : bool with get, set" Usage="System.Net.Mail.SmtpClient.EnableSsl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Net.Mail.SmtpClient" /> が、接続を暗号化するために SSL (Secure Sockets Layer) を使用するかどうかを指定します。</summary>
        <value>
          <see cref="T:System.Net.Mail.SmtpClient" /> が SSL を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.SmtpClient.EnableSsl%2A>プロパティは、指定の SMTP メール サーバーへのアクセスに SSL が使用されるかどうかを指定します。  
  
 このプロパティの既定値は、マシンで設定することもできます。 またはアプリケーション構成ファイル。 加えられた変更、<xref:System.Net.Mail.SmtpClient.EnableSsl%2A>プロパティは、構成ファイルの設定をオーバーライドします。  
  
 <xref:System.Net.Mail.SmtpClient>クラスのみをサポート SMTP サービスの拡張機能のセキュリティで保護された SMTP トランスポート層セキュリティ経由で RFC 3207 で定義されています。 このモードでは、SMTP セッションの非暗号化チャネルで開始し、STARTTLS コマンドが SSL を使用してセキュリティで保護された通信を切り替えるためにサーバーにクライアントによって発行されたします。 詳細についてはインターネット技術標準化委員会 (IETF) によって発行された RFC 3207 を参照してください。  
  
 代替の接続方法は、任意のプロトコルのコマンドを送信する前の SSL セッションの事前の確立します。 この接続方法が、SMTP/SSL とも呼ばれます、SMTP 経由で、SSL または SMTPS され、既定では、ポート 465 を使用します。 SSL を使用してこの代替の接続方法は現在サポートされていません。  
  
 使用することができます<xref:System.Net.Mail.SmtpClient.ClientCertificates%2A>を指定するクライアント証明書を SSL 接続を確立するために使用する必要があります。 <xref:System.Net.ServicePointManager.ServerCertificateValidationCallback%2A> SMTP サーバーによって提供された証明書を拒否することができます。 <xref:System.Net.ServicePointManager.SecurityProtocol%2A>プロパティでは、使用する SSL プロトコルのバージョンを指定することができます。  
  
> [!NOTE]
>  場合、<xref:System.Net.Mail.SmtpClient.EnableSsl%2A>プロパティに設定されて`true`、SMTP メール サーバーが、EHLO への応答で STARTTLS コマンドは、その後への呼び出しをアドバタイズしていないと、<xref:System.Net.Mail.SmtpClient.Send%2A>または<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッドがスローされます、<xref:System.Net.Mail.SmtpException>します。  
  
   
  
## Examples  
 次のコード例では、SMTP サーバーで SSL 接続を確立し、接続を使用して電子メールを送信します。  
  
 [!code-csharp[NclSSLMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSSLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="T:System.Net.Configuration.SmtpNetworkElement" />
        <altmember cref="P:System.Net.Configuration.SmtpNetworkElement.EnableSsl" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md">&lt;mailSettings&gt;要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md">&lt;smtp&gt;要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/network-element-network-settings.md">&lt;ネットワーク&gt;要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public string Host { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Host" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Host" />
      <MemberSignature Language="VB.NET" Value="Public Property Host As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Host { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Host : string with get, set" Usage="System.Net.Mail.SmtpClient.Host" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SMTP トランザクションで使用されるホストの名前または IP アドレスを取得または設定します。</summary>
        <value>SMTP トランザクションで使用するコンピューターの名前または IP アドレスを格納している <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、<xref:System.Net.Mail.SmtpClient.Host%2A>プロパティは、コンス トラクターまたはアプリケーションまたはマシン構成ファイルを使用して設定することもできます。 詳細については、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)します。  
  
 情報を指定するには、このプロパティを使用する場合、この情報は、構成ファイルの設定をオーバーライドします。  
  
   
  
## Examples  
 次のコード例では、ホストと、アプリケーション構成ファイルで指定されたポートを使用して電子メール メッセージを送信することを示します。  
  
 [!code-cpp[NclMailSync#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#7)]
 [!code-csharp[NclMailSync#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">設定操作として指定した値が <see cref="F:System.String.Empty" /> ("") です。</exception>
        <exception cref="T:System.InvalidOperationException">電子メールが送信中の場合、このプロパティの値は変更できません。</exception>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="T:System.Net.Configuration.SmtpNetworkElement" />
        <altmember cref="P:System.Net.Configuration.SmtpNetworkElement.Host" />
        <altmember cref="P:System.Net.Mail.SmtpClient.Port" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md">system.net の mailSettings</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md">&lt;smtp&gt;要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/network-element-network-settings.md">&lt;ネットワーク&gt;要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="OnSendCompleted">
      <MemberSignature Language="C#" Value="protected void OnSendCompleted (System.ComponentModel.AsyncCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnSendCompleted(class System.ComponentModel.AsyncCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnSendCompleted (e As AsyncCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnSendCompleted(System::ComponentModel::AsyncCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnSendCompleted : System.ComponentModel.AsyncCompletedEventArgs -&gt; unit" Usage="smtpClient.OnSendCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.AsyncCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Net.Mail.SmtpClient.SendCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 継承するクラス、<xref:System.Net.Mail.SmtpClient>クラスでオーバーライド、<xref:System.Net.Mail.SmtpClient.OnSendCompleted%2A>ときにタスクの追加を実行するメソッド、<xref:System.Net.Mail.SmtpClient.SendCompleted>イベントが発生します。  
  
 <xref:System.Net.Mail.SmtpClient.OnSendCompleted%2A> 派生クラスを処理することができます<xref:System.Net.Mail.SmtpClient.SendCompleted>デリゲートを結び付けずにします。 これは、処理のための手法をお勧め<xref:System.Net.Mail.SmtpClient.SendCompleted>派生クラスでします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドするときに<see cref="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />、派生クラスで基底クラスを呼び出すことを確認する<see cref="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />メソッド デリゲートを登録するための受信、<see cref="E:System.Net.Mail.SmtpClient.SendCompleted" />イベント。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PickupDirectoryLocation">
      <MemberSignature Language="C#" Value="public string PickupDirectoryLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PickupDirectoryLocation" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.PickupDirectoryLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property PickupDirectoryLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PickupDirectoryLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PickupDirectoryLocation : string with get, set" Usage="System.Net.Mail.SmtpClient.PickupDirectoryLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ローカルの SMTP サーバーによって処理される電子メール メッセージをアプリケーションが保存するフォルダーを取得または設定します。</summary>
        <value>メール メッセージのピックアップ ディレクトリを指定する <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メール メッセージをピックアップ ディレクトリには、ローカル SMTP サーバー (存在する) 場合、IIS などによって自動的に送信されます。  
  
 このプロパティの既定値は、マシンで設定することもできます。 またはアプリケーション構成ファイル。 加えられた変更、<xref:System.Net.Mail.SmtpClient.PickupDirectoryLocation%2A>プロパティは、構成ファイルの設定をオーバーライドします。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="P:System.Net.Configuration.SmtpSection.DeliveryMethod" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md">&lt;mailSettings&gt;要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md">&lt;smtp&gt;要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="Port">
      <MemberSignature Language="C#" Value="public int Port { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Port" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Port" />
      <MemberSignature Language="VB.NET" Value="Public Property Port As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Port { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Port : int with get, set" Usage="System.Net.Mail.SmtpClient.Port" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SMTP トランザクションで使用されるポートを取得または設定します。</summary>
        <value>SMTP ホスト上のポート番号を格納している <see cref="T:System.Int32" />。 既定値は 25 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、<xref:System.Net.Mail.SmtpClient.Port%2A>プロパティは、コンス トラクターまたはアプリケーションまたはマシン構成ファイルを使用して設定することもできます。 構成ファイルの使用についての詳細については、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)します。 情報を指定するには、このプロパティを使用する場合、この情報は、構成ファイルの設定をオーバーライドします。  
  
   
  
## Examples  
 次のコード例では、ホストと、アプリケーション構成ファイルで指定されたポートを使用して電子メール メッセージを送信することを示します。  
  
 [!code-cpp[NclMailSync#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#7)]
 [!code-csharp[NclMailSync#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作として指定した値が 0 以下です。</exception>
        <exception cref="T:System.InvalidOperationException">電子メールが送信中の場合、このプロパティの値は変更できません。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">設定する、<see cref="P:System.Net.Mail.SmtpClient.Port" />プロパティ。 <see cref="F:System.Net.Mail.SmtpAccess.ConnectToUnrestrictedPort" /> (関連する列挙体)</permission>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="T:System.Net.Configuration.SmtpNetworkElement" />
        <altmember cref="P:System.Net.Configuration.SmtpNetworkElement.Port" />
        <altmember cref="P:System.Net.Mail.SmtpClient.Host" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md">system.net の mailSettings</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md">&lt;smtp&gt;要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/network-element-network-settings.md">&lt;ネットワーク&gt;要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>電子メール メッセージを、配信用 SMTP サーバーに送信します。 これらのメソッドは、メッセージの送信中はブロックします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Net.Mail.MailMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Net.Mail.MailMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Send(System.Net.Mail.MailMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As MailMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Net::Mail::MailMessage ^ message);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.Mail.MailMessage -&gt; unit" Usage="smtpClient.Send message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
      </Parameters>
      <Docs>
        <param name="message">送信するメッセージを格納した <see cref="T:System.Net.Mail.MailMessage" />。</param>
        <summary>指定したメッセージを、配信用 SMTP サーバーに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、電子メールの送信中にブロックします。 使用してタイムアウト値を指定することができます、<xref:System.Net.Mail.SmtpClient.Timeout%2A>プロパティを指定された時間が経過した後、メソッドを返すことを確認します。  
  
 このメソッドを呼び出す前に、<xref:System.Net.Mail.SmtpClient.Host%2A>と<xref:System.Net.Mail.SmtpClient.Port%2A>プロパティする必要がありますいずれかで設定して構成ファイル関連のプロパティを設定するかにこの情報を渡すことによって、<xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29>コンス トラクター。  
  
 非同期的に送信されるメッセージがある場合は、このメソッドを呼び出すことはできません。  
  
 SMTP ホストには、資格情報が必要とする場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、使用、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>または<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティ。  
  
 表示された場合、<xref:System.Net.Mail.SmtpException>例外、チェック、<xref:System.Net.Mail.SmtpException.StatusCode%2A>理由、操作を検索するプロパティが失敗しました。 <xref:System.Net.Mail.SmtpException>操作に失敗した理由を示す内部例外を含めることもできます。  
  
 電子メールを使用して送信するときに<xref:System.Net.Mail.SmtpClient.Send%2A>に複数の受信者と、SMTP サーバーを有効と一部の受信者を承諾かつ拒否、他のユーザー<xref:System.Net.Mail.SmtpClient.Send%2A>受理された受信者に電子メールを送信し、<xref:System.Net.Mail.SmtpFailedRecipientsException>がスローされます (または<xref:System.Net.Mail.SmtpFailedRecipientException>1 つだけの場合受信者は拒否されます)。 A<xref:System.Net.Mail.SmtpFailedRecipientsException>拒否された受信者の一覧が含まれています。
  
> [!NOTE]
>  場合、<xref:System.Net.Mail.SmtpClient.EnableSsl%2A>プロパティに設定されて`true`、SMTP メール サーバーが、EHLO への応答で STARTTLS コマンドは、その後への呼び出しをアドバタイズしていないと、<xref:System.Net.Mail.SmtpClient.Send%2A>または<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッドがスローされます、<xref:System.Net.Mail.SmtpException>します。  
  
   
  
## Examples  
 次のコード例では、この方法を示します。  
  
 [!code-cpp[NclMailSync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#2)]
 [!code-csharp[NclMailSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">この <see cref="T:System.Net.Mail.SmtpClient" /> は、<see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> の呼び出し中です。  
  
- または - 
 <see cref="P:System.Net.Mail.MailMessage.From" /> は <see langword="null" />です。  
  
- または - 
<see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" />、および <see cref="P:System.Net.Mail.MailMessage.Bcc" /> の各プロパティで受信者が指定されていません。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は <see langword="null" /> です。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は空の文字列 ("") と等しくなります。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティが <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Port" /> がゼロ、負の値、または 65,535 より大きい値になっています。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
- または - 
認証に失敗しました。  
  
- または - 
操作はタイムアウトしました。 
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> は <see langword="true" /> に設定されますが、<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> または <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" /> に設定されます。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> が <see langword="true," /> に設定されていますが、SMTP メール サーバーが EHLO コマンドに対する応答で STARTTLS をアドバタイズしませんでした。</exception>
        <exception cref="T:System.Net.Mail.SmtpFailedRecipientException">
          <see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" />、または <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 内の 1 人の受信者に、<paramref name="message" /> を配信できませんでした。</exception>
        <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">
          <see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" />、または <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 内の複数の受信者に、<paramref name="message" /> を配信できませんでした。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">SMTP サーバーに接続します。 関連付けられた列挙体。 <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string from, string recipients, string subject, string body);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string from, string recipients, string subject, string body) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Send(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (from As String, recipients As String, subject As String, body As String)" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ from, System::String ^ recipients, System::String ^ subject, System::String ^ body);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="C#" Value="public void Send (string from, string to, string subject, string body);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string from, string to, string subject, string body) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (from As String, to As String, subject As String, body As String)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ from, System::String ^ to, System::String ^ subject, System::String ^ body);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Send : string * string * string * string -&gt; unit" Usage="smtpClient.Send (from, to, subject, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" Index="0" />
        <Parameter Name="recipients" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2" />
        <Parameter Name="to" Type="System.String" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="subject" Type="System.String" Index="2" />
        <Parameter Name="body" Type="System.String" Index="3" />
      </Parameters>
      <Docs>
        <param name="from">メッセージの差出人のアドレス情報を格納している <see cref="T:System.String" />。</param>
        <param name="recipients">メッセージの送信先のアドレスを格納している <see cref="T:System.String" />。</param>
        <param name="to">メッセージの送信先のアドレスを格納している <see cref="T:System.String" />。</param>
        <param name="subject">メッセージの件名を格納している <see cref="T:System.String" />。</param>
        <param name="body">メッセージ本文を格納している <see cref="T:System.String" />。</param>
        <summary>指定した電子メール メッセージを、配信用 SMTP サーバーに送信します。 メッセージの差出人、受信者、件名、およびメッセージ本文は、<see cref="T:System.String" /> オブジェクトを使用して指定されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、電子メールの送信中にブロックします。 使用してタイムアウト値を指定することができます、<xref:System.Net.Mail.SmtpClient.Timeout%2A>プロパティを指定された時間が経過した後、メソッドを返すことを確認します。  
  
 このメソッドを呼び出す前に、<xref:System.Net.Mail.SmtpClient.Host%2A>と<xref:System.Net.Mail.SmtpClient.Port%2A>プロパティする必要がありますいずれかで設定して構成ファイル関連のプロパティを設定するかにこの情報を渡すことによって、<xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29>コンス トラクター。  
  
 非同期的に送信されるメッセージがある場合は、このメソッドを呼び出すことはできません。  
  
 SMTP ホストには、資格情報が必要とする場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、使用、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>または<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティ。  
  
 表示された場合、<xref:System.Net.Mail.SmtpException>例外、チェック、<xref:System.Net.Mail.SmtpException.StatusCode%2A>理由、操作を検索するプロパティが失敗しました。 <xref:System.Net.Mail.SmtpException>操作に失敗した理由を示す内部例外を含めることもできます。  

 電子メールを使用して送信するときに<xref:System.Net.Mail.SmtpClient.Send%2A>に複数の受信者と、SMTP サーバーを有効と一部の受信者を承諾かつ拒否、他のユーザー<xref:System.Net.Mail.SmtpClient.Send%2A>受理された受信者に電子メールを送信し、<xref:System.Net.Mail.SmtpFailedRecipientsException>がスローされます (または<xref:System.Net.Mail.SmtpFailedRecipientException>1 つだけの場合受信者は拒否されます)。 A<xref:System.Net.Mail.SmtpFailedRecipientsException>拒否された受信者の一覧が含まれています。
 
> [!NOTE]
>  場合、<xref:System.Net.Mail.SmtpClient.EnableSsl%2A>プロパティに設定されて`true`、SMTP メール サーバーが、EHLO への応答で STARTTLS コマンドは、その後への呼び出しをアドバタイズしていないと、<xref:System.Net.Mail.SmtpClient.Send%2A>または<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッドがスローされます、<xref:System.Net.Mail.SmtpException>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="recipients" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="from" /> は <see cref="F:System.String.Empty" /> です。  
  
- または - 
 <paramref name="recipients" /> は <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">この <see cref="T:System.Net.Mail.SmtpClient" /> は、<see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> の呼び出し中です。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は <see langword="null" /> です。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は空の文字列 ("") と等しくなります。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティが <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Port" /> がゼロ、負の値、または 65,535 より大きい値になっています。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
- または - 
認証に失敗しました。  
  
- または - 
操作はタイムアウトしました。 
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> は <see langword="true" /> に設定されますが、<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> または <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" /> に設定されます。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> が <see langword="true," /> に設定されていますが、SMTP メール サーバーが EHLO コマンドに対する応答で STARTTLS をアドバタイズしませんでした。</exception>
        <exception cref="T:System.Net.Mail.SmtpFailedRecipientException">
          <see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" />、または <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 内の 1 人の受信者に、<paramref name="message" /> を配信できませんでした。</exception>
        <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">
          <see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" />、または <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 内の複数の受信者に、<paramref name="message" /> を配信できませんでした。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">SMTP サーバーに接続します。 関連付けられた列挙体。 <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>電子メールを送信します。 これらのメソッドは、呼び出し元のスレッドをブロックしません。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.Mail.MailMessage message, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.Mail.MailMessage message, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendAsync(System.Net.Mail.MailMessage,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (message As MailMessage, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::Mail::MailMessage ^ message, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.Mail.MailMessage * obj -&gt; unit" Usage="smtpClient.SendAsync (message, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">送信するメッセージを格納した <see cref="T:System.Net.Mail.MailMessage" />。</param>
        <param name="userToken">非同期操作の完了時に呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>指定した電子メール メッセージを、配信用 SMTP サーバーに送信します。 このメソッドは、呼び出し元のスレッドをブロックしません。また、呼び出し元は、操作の完了時に呼び出されるメソッドにオブジェクトを渡すことができます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 電子メールが送信された、または操作が取り消されたときに通知を受信するイベント ハンドラーを追加、<xref:System.Net.Mail.SmtpClient.SendCompleted>イベント。 取り消すことができます、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>操作を呼び出すことによって、<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A>メソッド。  
  
 呼び出した後<xref:System.Net.Mail.SmtpClient.SendAsync%2A>、電子メール送信が使用して別の電子メール メッセージを送信する前に完了するまで待つ必要があります<xref:System.Net.Mail.SmtpClient.Send%2A>または<xref:System.Net.Mail.SmtpClient.SendAsync%2A>します。  
  
 このメソッドを呼び出す前に、<xref:System.Net.Mail.SmtpClient.Host%2A>と<xref:System.Net.Mail.SmtpClient.Port%2A>関連のプロパティを設定するかにこの情報を渡すことによって、構成ファイルを介して設定する必要があります、<xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29>コンス トラクター。  
  
 SMTP ホストには、資格情報が必要とする場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、使用、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>または<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティ。  
  
 表示された場合、<xref:System.Net.Mail.SmtpException>例外、チェック、<xref:System.Net.Mail.SmtpException.StatusCode%2A>理由、操作を検索するプロパティが失敗しました。 <xref:System.Net.Mail.SmtpException>操作に失敗した理由を示す内部例外を含めることもできます。  
  
 電子メールを使用して送信するときに<xref:System.Net.Mail.SmtpClient.SendAsync%2A>を SMTP サーバーの有効なものとして、一部の受信者を承諾して、他のユーザーを拒否する場合、複数の受信者を<xref:System.Net.Mail.SmtpException>がスローされ、<xref:System.NullReferenceException>内部例外の。 この場合、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>受信者の電子メールの送信に失敗します。  
  
 アプリケーションは、調べることで、サーバー証明書の検証エラーを検出できます、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>に渡されたプロパティ、<xref:System.Net.Mail.SendCompletedEventHandler>を委任します。  
  
 <xref:System.Net.Mail.SmtpClient.Timeout%2A>プロパティは、任意の効果はありません、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>呼び出します。  
  
 SMTP サーバーに送信するときにメールとブロックを送信するのいずれかの操作を使用して、<xref:System.Net.Mail.SmtpClient.Send%2A>メソッド。  
  
> [!NOTE]
>  場合、<xref:System.Net.Mail.SmtpClient.EnableSsl%2A>プロパティに設定されて`true`、SMTP メール サーバーが、EHLO への応答で STARTTLS コマンドは、その後への呼び出しをアドバタイズしていないと、<xref:System.Net.Mail.SmtpClient.Send%2A>または<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッドがスローされます、<xref:System.Net.Mail.SmtpException>します。  
  
   
  
## Examples  
 次のコード例では、このメソッドの呼び出しを示しています。  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> は <see langword="null" /> です。  
  
- または - 
 <see cref="P:System.Net.Mail.MailMessage.From" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">この <see cref="T:System.Net.Mail.SmtpClient" /> は、<see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> の呼び出し中です。  
  
- または - 
<see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" />、および <see cref="P:System.Net.Mail.MailMessage.Bcc" /> の各プロパティで受信者が指定されていません。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は <see langword="null" /> です。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は空の文字列 ("") と等しくなります。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティが <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Port" /> がゼロ、負の値、または 65,535 より大きい値になっています。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
- または - 
認証に失敗しました。  
  
- または - 
操作はタイムアウトしました。 
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> は <see langword="true" /> に設定されますが、<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> または <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" /> に設定されます。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> が <see langword="true," /> に設定されていますが、SMTP メール サーバーが EHLO コマンドに対する応答で STARTTLS をアドバタイズしませんでした。  
  
- または - 
<see cref="P:System.Net.Mail.MailMessage.To" />、<see cref="P:System.Net.Mail.MailMessage.CC" />、または <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 内の 1 人以上の受信者に、<paramref name="message" /> を配信できませんでした。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">SMTP サーバーに接続します。 関連付けられた列挙体。 <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string from, string recipients, string subject, string body, object userToken);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string from, string recipients, string subject, string body, object userToken) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendAsync(System.String,System.String,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (from As String, recipients As String, subject As String, body As String, userToken As Object)" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ from, System::String ^ recipients, System::String ^ subject, System::String ^ body, System::Object ^ userToken);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="C#" Value="public void SendAsync (string from, string to, string subject, string body, object userToken);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string from, string to, string subject, string body, object userToken) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (from As String, to As String, subject As String, body As String, userToken As Object)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ from, System::String ^ to, System::String ^ subject, System::String ^ body, System::Object ^ userToken);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * string * string * string * obj -&gt; unit" Usage="smtpClient.SendAsync (from, to, subject, body, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" Index="0" />
        <Parameter Name="recipients" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2" />
        <Parameter Name="to" Type="System.String" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="subject" Type="System.String" Index="2" />
        <Parameter Name="body" Type="System.String" Index="3" />
        <Parameter Name="userToken" Type="System.Object" Index="4" />
      </Parameters>
      <Docs>
        <param name="from">メッセージの差出人のアドレス情報を格納している <see cref="T:System.String" />。</param>
        <param name="recipients">メッセージの送信先のアドレスを格納している <see cref="T:System.String" />。</param>
        <param name="to">メッセージの送信先のアドレスを格納している <see cref="T:System.String" />。</param>
        <param name="subject">メッセージの件名を格納している <see cref="T:System.String" />。</param>
        <param name="body">メッセージ本文を格納している <see cref="T:System.String" />。</param>
        <param name="userToken">非同期操作の完了時に呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>電子メール メッセージを、配信用 SMTP サーバーに送信します。 メッセージの差出人、受信者、件名、およびメッセージ本文は、<see cref="T:System.String" /> オブジェクトを使用して指定されます。 このメソッドは、呼び出し元のスレッドをブロックしません。また、呼び出し元は、操作の完了時に呼び出されるメソッドにオブジェクトを渡すことができます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 電子メールが送信された、または操作が取り消されたときに通知を受信するイベント ハンドラーを追加、<xref:System.Net.Mail.SmtpClient.SendCompleted>イベント。 取り消すことができます、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>操作を呼び出すことによって、<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A>メソッド。  
  
 呼び出した後<xref:System.Net.Mail.SmtpClient.SendAsync%2A>、電子メール送信が使用して別の電子メール メッセージを送信する前に完了するまで待つ必要があります<xref:System.Net.Mail.SmtpClient.Send%2A>または<xref:System.Net.Mail.SmtpClient.SendAsync%2A>します。  
  
 このメソッドを呼び出す前に、<xref:System.Net.Mail.SmtpClient.Host%2A>と<xref:System.Net.Mail.SmtpClient.Port%2A>構成ファイルを使用するか、プロパティを設定またはこの情報を渡すことによって、プロパティを設定する必要があります、<xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29>コンス トラクター。  
  
 SMTP ホストには、資格情報が必要とする場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、使用、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>または<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティ。  
  
 表示された場合、<xref:System.Net.Mail.SmtpException>例外、チェック、<xref:System.Net.Mail.SmtpException.StatusCode%2A>理由、操作を検索するプロパティが失敗しました。 <xref:System.Net.Mail.SmtpException>操作に失敗した理由を示す内部例外を含めることもできます。  
  
 電子メールを使用して送信するときに<xref:System.Net.Mail.SmtpClient.SendAsync%2A>を SMTP サーバーの有効なものとして、一部の受信者を承諾して、他のユーザーを拒否する場合、複数の受信者を<xref:System.Net.Mail.SmtpException>がスローされ、<xref:System.NullReferenceException>内部例外の。 この場合、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>受信者の電子メールの送信に失敗します。  
  
 アプリケーションは、調べることで、サーバー証明書の検証エラーを検出できます、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>に渡されたプロパティ、<xref:System.Net.Mail.SendCompletedEventHandler>を委任します。  
  
 <xref:System.Net.Mail.SmtpClient.Timeout%2A>プロパティは、任意の効果はありません、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>呼び出します。  
  
 SMTP サーバーに送信するときにメールとブロックを送信するのいずれかの操作を使用して、<xref:System.Net.Mail.SmtpClient.Send%2A>メソッド。  
  
> [!NOTE]
>  場合、<xref:System.Net.Mail.SmtpClient.EnableSsl%2A>プロパティに設定されて`true`、SMTP メール サーバーが、EHLO への応答で STARTTLS コマンドは、その後への呼び出しをアドバタイズしていないと、<xref:System.Net.Mail.SmtpClient.Send%2A>または<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッドがスローされます、<xref:System.Net.Mail.SmtpException>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="recipient" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="from" /> は <see cref="F:System.String.Empty" /> です。  
  
- または - 
 <paramref name="recipient" /> は <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">この <see cref="T:System.Net.Mail.SmtpClient" /> は、<see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> の呼び出し中です。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は <see langword="null" /> です。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Host" /> は空の文字列 ("") と等しくなります。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティが <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> に設定され、<see cref="P:System.Net.Mail.SmtpClient.Port" /> がゼロ、負の値、または 65,535 より大きい値になっています。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
- または - 
認証に失敗しました。  
  
- または - 
操作はタイムアウトしました。 
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> は <see langword="true" /> に設定されますが、<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティは <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> または <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" /> に設定されます。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> が <see langword="true," /> に設定されていますが、SMTP メール サーバーが EHLO コマンドに対する応答で STARTTLS をアドバタイズしませんでした。  
  
- または - 
<paramref name="recipients" /> 内の 1 人以上の受信者に、メッセージを配信できませんでした。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">SMTP サーバーに接続します。 関連付けられた列挙体。 <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.SendAsyncCancel : unit -&gt; unit" Usage="smtpClient.SendAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>電子メール メッセージを送信する非同期操作をキャンセルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A>をキャンセルするメソッド、保留中<xref:System.Net.Mail.SmtpClient.SendAsync%2A>操作。 メールの送信を待機している場合は、このメソッドは、メールの格納に使用されるリソースを解放します。 メールの送信を待機しているがない場合は、このメソッドは何もしません。  
  
   
  
## Examples  
 次のコード例では、電子メール メッセージを非同期的に送信することを示します。 ユーザーには、送信されていない場合にメールをキャンセルするオプションがあります。  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.Mail.SendCompletedEventHandler SendCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.Mail.SendCompletedEventHandler SendCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.Mail.SmtpClient.SendCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SendCompleted As SendCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::Mail::SendCompletedEventHandler ^ SendCompleted;" />
      <MemberSignature Language="F#" Value="member this.SendCompleted : System.Net.Mail.SendCompletedEventHandler " Usage="member this.SendCompleted : System.Net.Mail.SendCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.SendCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>電子メールの非同期的な送信操作が完了した場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.SmtpClient.SendCompleted>イベントは、電子メール メッセージは送信操作の完了時に非同期的に送信するたびに発生します。 使用して電子メール メッセージを非同期的に送信、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッド。  
  
 <xref:System.Net.Mail.SendCompletedEventHandler> デリゲートは、<xref:System.Net.Mail.SmtpClient.SendCompleted>します。 <xref:System.ComponentModel.AsyncCompletedEventArgs>クラスには、イベント データを持つイベント ハンドラーが用意されています。  
  
   
  
## Examples  
 次のコード例では、電子メール メッセージを非同期的に送信することを示します。  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendMailAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>非同期操作として、指定したメッセージを配信用 SMTP サーバーに送信します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendMailAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SendMailAsync (System.Net.Mail.MailMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SendMailAsync(class System.Net.Mail.MailMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendMailAsync(System.Net.Mail.MailMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendMailAsync (message As MailMessage) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SendMailAsync(System::Net::Mail::MailMessage ^ message);" />
      <MemberSignature Language="F#" Value="member this.SendMailAsync : System.Net.Mail.MailMessage -&gt; System.Threading.Tasks.Task" Usage="smtpClient.SendMailAsync message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
      </Parameters>
      <Docs>
        <param name="message">送信するメッセージを格納した <see cref="T:System.Net.Mail.MailMessage" />。</param>
        <summary>非同期操作として、指定したメッセージを配信用 SMTP サーバーに送信します。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task>> オブジェクトは、メッセージが送信された後、完了します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendMailAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SendMailAsync (string from, string recipients, string subject, string body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SendMailAsync(string from, string recipients, string subject, string body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendMailAsync(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendMailAsync (from As String, recipients As String, subject As String, body As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SendMailAsync(System::String ^ from, System::String ^ recipients, System::String ^ subject, System::String ^ body);" />
      <MemberSignature Language="F#" Value="member this.SendMailAsync : string * string * string * string -&gt; System.Threading.Tasks.Task" Usage="smtpClient.SendMailAsync (from, recipients, subject, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="recipients" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="body" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="from">メッセージの差出人のアドレス情報を格納している <see cref="T:System.String" />。</param>
        <param name="recipients">メッセージの送信先のアドレスを格納している <see cref="T:System.String" />。</param>
        <param name="subject">メッセージの件名を格納している <see cref="T:System.String" />。</param>
        <param name="body">メッセージ本文を格納している <see cref="T:System.String" />。</param>
        <summary>非同期操作として、指定したメッセージを配信用 SMTP サーバーに送信します。 である必要があります。 メッセージの差出人、受信者、件名、およびメッセージ本文は、<see cref="T:System.String" /> オブジェクトを使用して指定されます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task>> オブジェクトは、メッセージが送信された後、完了します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" /> は <see langword="null" /> です。  
  
- または - 
 <paramref name="recipients" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="from" /> は <see cref="F:System.String.Empty" /> です。  
  
- または - 
 <paramref name="recipients" /> は <see cref="F:System.String.Empty" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicePoint">
      <MemberSignature Language="C#" Value="public System.Net.ServicePoint ServicePoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ServicePoint ServicePoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.ServicePoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServicePoint As ServicePoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::ServicePoint ^ ServicePoint { System::Net::ServicePoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServicePoint : System.Net.ServicePoint" Usage="System.Net.Mail.SmtpClient.ServicePoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ServicePoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>電子メール メッセージの送信に使用するネットワーク接続を取得します。</summary>
        <value>SMTP で使用される <see cref="T:System.Net.ServicePoint" /> プロパティに接続する <see cref="P:System.Net.Mail.SmtpClient.Host" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定、<xref:System.Net.Mail.SmtpClient.ServicePoint%2A>プロパティは、アプリケーションまたはマシン構成ファイルで指定された既定値を使用して作成し、<xref:System.Net.ServicePointManager>クラス。  
  
   
  
## Examples  
 次のコード例に示しますへのアクセス、<xref:System.Net.Mail.SmtpClient.ServicePoint%2A>プロパティ。  
  
 [!code-cpp[NclMailSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#1)]
 [!code-csharp[NclMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Net.Mail.SmtpClient.Host" /> が <see langword="null" /> または空の文字列 ("") です。  
  
- または - 
 <see cref="P:System.Net.Mail.SmtpClient.Port" /> が 0 です。</exception>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/connectionmanagement-element-network-settings.md">connectionManagement 要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/network-programming/managing-connections.md">接続の管理</related>
      </Docs>
    </Member>
    <Member MemberName="TargetName">
      <MemberSignature Language="C#" Value="public string TargetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TargetName" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.TargetName" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TargetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetName : string with get, set" Usage="System.Net.Mail.SmtpClient.TargetName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>拡張保護を使用するときの認証に使用するサービス プロバイダー名 (SPN: Service Provider Name) を取得または設定します。</summary>
        <value>拡張保護に使用する SPN を指定する <see cref="T:System.String" />。 フォームのこの SPN を既定値は"SMTPSVC/&lt;ホスト&gt;"場所&lt;ホスト&gt;が SMTP メール サーバーのホスト名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.SmtpClient.TargetName%2A>プロパティは、拡張保護を使用しているとき、アプリケーションに統合 Windows 認証で使用します。 <xref:System.Net.Mail.SmtpClient>を十分に資格情報のチャレンジ応答サービス固有の情報 (SPN) が含まれてし、必要に応じて、チャネル固有の拡張保護を提供してできる情報 (チャネル バインディング トークン (CBT)。 資格情報の交換でこの情報では、サービスが不正に取得した資格情報のチャレンジ応答の悪用に対する保護を強化できます。  
  
 このプロパティの既定値は、マシンで設定することもできます。 またはアプリケーション構成ファイル。 加えられた変更、<xref:System.Net.Mail.SmtpClient.TargetName%2A>プロパティは、構成ファイルの設定をオーバーライドします。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="T:System.Net.Configuration.SmtpNetworkElement" />
        <altmember cref="P:System.Net.Configuration.SmtpNetworkElement.TargetName" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">統合 Windows 認証と拡張保護</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md">&lt;mailSettings&gt;要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md">&lt;smtp&gt;要素 (ネットワーク設定)</related>
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/network-element-network-settings.md">&lt;ネットワーク&gt;要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Timeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : int with get, set" Usage="System.Net.Mail.SmtpClient.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>同期的な <see cref="Overload:System.Net.Mail.SmtpClient.Send" /> 呼び出しがタイムアウトになるまでの時間を指定する値を取得または設定します。</summary>
        <value>タイムアウト値 (ミリ秒) を指定する <see cref="T:System.Int32" />。 既定値は 100,000 ミリ秒 (100 秒) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、呼び出し、<xref:System.Net.Mail.SmtpClient.Send%2A>操作が完了するまでブロックするメソッド。 設定した場合、<xref:System.Net.Mail.SmtpClient.Timeout%2A>プロパティを正の値と<xref:System.Net.Mail.SmtpClient.Send%2A>、割り当てられた時間で操作を完了できません、<xref:System.Net.Mail.SmtpClient>クラスがスローされます、<xref:System.Net.Mail.SmtpException>例外。  
  
 メッセージを送信し、アプリケーションのスレッドで実行を継続して、使用、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッド。  
  
   
  
## Examples  
 次のコード例では、取得とタイムアウト値の設定を示します。  
  
 [!code-cpp[NclMailSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#3)]
 [!code-csharp[NclMailSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作として指定した値が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">電子メールが送信中の場合、このプロパティの値は変更できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.UseDefaultCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDefaultCredentials As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDefaultCredentials { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDefaultCredentials : bool with get, set" Usage="System.Net.Mail.SmtpClient.UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>set: System.MonoNotSupported("no DefaultCredential support in Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Boolean" /> が要求と共に送信されるかどうかを制御する <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 値を取得または設定します。</summary>
        <value>既定の資格情報を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一部の SMTP サーバーでは、サーバーが自身のために電子メールを送信する前にクライアントを認証することが必要です。 このプロパティを設定`true`ときにこの<xref:System.Net.Mail.SmtpClient>オブジェクトは、サーバーから要求された場合を使用して認証、現在ログオンしているユーザーの既定の資格情報。 クライアント アプリケーションは、これはほとんどのシナリオでは、目的の動作です。  
  
 アプリケーションとマシンの構成ファイルを使用して資格情報を指定することもできます。 詳細については、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)します。  
  
 場合、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>プロパティに設定されて`false,`で値を設定し、<xref:System.Net.Mail.SmtpClient.Credentials%2A>サーバーに接続するときに、資格情報のプロパティが使用されます。 場合、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>プロパティに設定されて`false`と<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティが設定されていない、し、メールは、サーバーに匿名で送信します。  
  
> [!CAUTION]
>  基本認証の資格情報を指定する場合は、クリア テキストでサーバーに送信されます。 セキュリティ上の問題は、資格情報を確認するには、および他のユーザーによって使用されできますので、これに提供できます。  
  
   
  
## Examples  
 次のコード例では、このプロパティを使用してを示します。  
  
 [!code-cpp[NclMailSync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#2)]
 [!code-csharp[NclMailSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">電子メールが送信中の場合、このプロパティの値は変更できません。</exception>
      </Docs>
    </Member>
  </Members>
</Type>