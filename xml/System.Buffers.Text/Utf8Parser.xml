<Type Name="Utf8Parser" FullName="System.Buffers.Text.Utf8Parser">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9d46ffc198524bd466f660e29a8831cb5128a44c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69342506" /></Metadata><TypeSignature Language="C#" Value="public static class Utf8Parser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Utf8Parser extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.Text.Utf8Parser" />
  <TypeSignature Language="VB.NET" Value="Public Class Utf8Parser" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8Parser abstract sealed" />
  <TypeSignature Language="F#" Value="type Utf8Parser = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f7230-101">Utf8 文字列を一般的なデータ型に解析するための静的メソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="f7230-101">Provides static methods to parse Utf8 strings to common data types.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out bool value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] bool&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Boolean, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-102">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-102">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-103">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-103">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-104">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-104">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-105">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-105">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-106">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-106">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-107">Utf8 文字列の先頭で <see cref="T:System.Boolean" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-107">Parses a <see cref="T:System.Boolean" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-108">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-108"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-109">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-109">Formats supported:</span></span> 

|<span data-ttu-id="f7230-110">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-110">Format string</span></span>|<span data-ttu-id="f7230-111">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="f7230-111">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="f7230-112">G (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-112">G (default)</span></span>|<span data-ttu-id="f7230-113">真/偽</span><span class="sxs-lookup"><span data-stu-id="f7230-113">True/False</span></span>|
|<span data-ttu-id="f7230-114">l</span><span class="sxs-lookup"><span data-stu-id="f7230-114">l</span></span>|<span data-ttu-id="f7230-115">true/false</span><span class="sxs-lookup"><span data-stu-id="f7230-115">true/false</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out byte value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int8&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Byte, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Byte" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-116">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-116">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-117">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-117">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-118">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-118">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-119">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-119">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-120">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-120">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-121">Utf8 文字列の先頭で <see cref="T:System.Byte" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-121">Parses a <see cref="T:System.Byte" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-122">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-122"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-123">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-123">Formats supported:</span></span> 

|<span data-ttu-id="f7230-124">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-124">Format string</span></span>|<span data-ttu-id="f7230-125">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="f7230-125">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="f7230-126">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-126">G/g (default)</span></span>| |
|<span data-ttu-id="f7230-127">D/d</span><span class="sxs-lookup"><span data-stu-id="f7230-127">D/d</span></span>|<span data-ttu-id="f7230-128">122</span><span class="sxs-lookup"><span data-stu-id="f7230-128">122</span></span>|
|<span data-ttu-id="f7230-129">N/n</span><span class="sxs-lookup"><span data-stu-id="f7230-129">N/n</span></span>|<span data-ttu-id="f7230-130">122</span><span class="sxs-lookup"><span data-stu-id="f7230-130">122</span></span>|       
|<span data-ttu-id="f7230-131">X/x</span><span class="sxs-lookup"><span data-stu-id="f7230-131">X/x</span></span>|<span data-ttu-id="f7230-132">7a</span><span class="sxs-lookup"><span data-stu-id="f7230-132">7a</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out DateTime value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.DateTime&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As DateTime, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-133">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-133">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-134">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-134">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-135">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-135">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-136">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-136">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-137">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-137">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-138">Utf8 文字列の先頭で <see cref="T:System.DateTime" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-138">Parses a <see cref="T:System.DateTime" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-139">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-139"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-140">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-140">Formats supported:</span></span>

|<span data-ttu-id="f7230-141">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-141">Format string</span></span>|<span data-ttu-id="f7230-142">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="f7230-142">Example expected format</span></span>|<span data-ttu-id="f7230-143">コメント</span><span class="sxs-lookup"><span data-stu-id="f7230-143">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="f7230-144">G (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-144">G  (default)</span></span>|<span data-ttu-id="f7230-145">05/25/2017 10:30:15</span><span class="sxs-lookup"><span data-stu-id="f7230-145">05/25/2017 10:30:15</span></span>| |
|<span data-ttu-id="f7230-146">R</span><span class="sxs-lookup"><span data-stu-id="f7230-146">R</span></span>|<span data-ttu-id="f7230-147">火曜日、03年1月 2017 08:08:05 GMT</span><span class="sxs-lookup"><span data-stu-id="f7230-147">Tue, 03 Jan 2017 08:08:05 GMT</span></span>|<span data-ttu-id="f7230-148">(RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="f7230-148">(RFC 1123)</span></span>|
|<span data-ttu-id="f7230-149">l</span><span class="sxs-lookup"><span data-stu-id="f7230-149">l</span></span>|<span data-ttu-id="f7230-150">火曜日、03年1月 2017 08:08:05 gmt</span><span class="sxs-lookup"><span data-stu-id="f7230-150">tue, 03 jan 2017 08:08:05 gmt</span></span>|<span data-ttu-id="f7230-151">(小文字 RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="f7230-151">(Lowercase RFC 1123)</span></span>|
|<span data-ttu-id="f7230-152">O</span><span class="sxs-lookup"><span data-stu-id="f7230-152">O</span></span>|<span data-ttu-id="f7230-153">2017-06-12T05:30:45.7680000-07:00</span><span class="sxs-lookup"><span data-stu-id="f7230-153">2017-06-12T05:30:45.7680000-07:00</span></span>|<span data-ttu-id="f7230-154">(ラウンドトライ可能)</span><span class="sxs-lookup"><span data-stu-id="f7230-154">(Round-trippable)</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out DateTimeOffset value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.DateTimeOffset&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As DateTimeOffset, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-155">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-155">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-156">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-156">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-157">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-157">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-158">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-158">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-159">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-159">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-160">Utf8 文字列の先頭で <see cref="T:System.DateTimeOffset" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-160">Parses a <see cref="T:System.DateTimeOffset" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-161">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-161"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-162">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-162">Formats supported:</span></span>

|<span data-ttu-id="f7230-163">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-163">Format string</span></span>|<span data-ttu-id="f7230-164">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="f7230-164">Example expected format</span></span>|<span data-ttu-id="f7230-165">コメント</span><span class="sxs-lookup"><span data-stu-id="f7230-165">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="f7230-166">G (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-166">G  (default)</span></span>|<span data-ttu-id="f7230-167">05/25/2017 10:30:15</span><span class="sxs-lookup"><span data-stu-id="f7230-167">05/25/2017 10:30:15</span></span>| |
|<span data-ttu-id="f7230-168">R</span><span class="sxs-lookup"><span data-stu-id="f7230-168">R</span></span>|<span data-ttu-id="f7230-169">火曜日、03年1月 2017 08:08:05 GMT</span><span class="sxs-lookup"><span data-stu-id="f7230-169">Tue, 03 Jan 2017 08:08:05 GMT</span></span>|<span data-ttu-id="f7230-170">(RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="f7230-170">(RFC 1123)</span></span>|
|<span data-ttu-id="f7230-171">l</span><span class="sxs-lookup"><span data-stu-id="f7230-171">l</span></span>|<span data-ttu-id="f7230-172">火曜日、03年1月 2017 08:08:05 gmt</span><span class="sxs-lookup"><span data-stu-id="f7230-172">tue, 03 jan 2017 08:08:05 gmt</span></span>|<span data-ttu-id="f7230-173">(小文字 RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="f7230-173">(Lowercase RFC 1123)</span></span>|
|<span data-ttu-id="f7230-174">O</span><span class="sxs-lookup"><span data-stu-id="f7230-174">O</span></span>|<span data-ttu-id="f7230-175">2017-06-12T05:30:45.7680000-07:00</span><span class="sxs-lookup"><span data-stu-id="f7230-175">2017-06-12T05:30:45.7680000-07:00</span></span>|<span data-ttu-id="f7230-176">(ラウンドトライ可能)</span><span class="sxs-lookup"><span data-stu-id="f7230-176">(Round-trippable)</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out decimal value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Decimal&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Decimal, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-177">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-177">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-178">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-178">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-179">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-179">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-180">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-180">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-181">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-181">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-182">Utf8 文字列の先頭で <see cref="T:System.Decimal" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-182">Parses a <see cref="T:System.Decimal" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-183">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-183"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-184">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-184">Formats supported:</span></span>

|<span data-ttu-id="f7230-185">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-185">Format string</span></span>|<span data-ttu-id="f7230-186">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="f7230-186">Example expected format</span></span>|<span data-ttu-id="f7230-187">コメント</span><span class="sxs-lookup"><span data-stu-id="f7230-187">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="f7230-188">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-188">G/g  (default)</span></span>| |  
|<span data-ttu-id="f7230-189">F/f</span><span class="sxs-lookup"><span data-stu-id="f7230-189">F/f</span></span>|<span data-ttu-id="f7230-190">12.45</span><span class="sxs-lookup"><span data-stu-id="f7230-190">12.45</span></span>|<span data-ttu-id="f7230-191">固定ポイント</span><span class="sxs-lookup"><span data-stu-id="f7230-191">Fixed point</span></span>|
|<span data-ttu-id="f7230-192">E/e</span><span class="sxs-lookup"><span data-stu-id="f7230-192">E/e</span></span>|<span data-ttu-id="f7230-193">1.245000 e1</span><span class="sxs-lookup"><span data-stu-id="f7230-193">1.245000e1</span></span>|<span data-ttu-id="f7230-194">指数</span><span class="sxs-lookup"><span data-stu-id="f7230-194">Exponential</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out double value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] float64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Double, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-195">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-195">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-196">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-196">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-197">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-197">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-198">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-198">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-199">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-199">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-200">Utf8 文字列の先頭で <see cref="T:System.Double" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-200">Parses a <see cref="T:System.Double" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-201">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-201"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-202">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-202">Formats supported:</span></span>

|<span data-ttu-id="f7230-203">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-203">Format string</span></span>|<span data-ttu-id="f7230-204">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="f7230-204">Example expected format</span></span>|<span data-ttu-id="f7230-205">コメント</span><span class="sxs-lookup"><span data-stu-id="f7230-205">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="f7230-206">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-206">G/g  (default)</span></span>| |  
|<span data-ttu-id="f7230-207">F/f</span><span class="sxs-lookup"><span data-stu-id="f7230-207">F/f</span></span>|<span data-ttu-id="f7230-208">12.45</span><span class="sxs-lookup"><span data-stu-id="f7230-208">12.45</span></span>|<span data-ttu-id="f7230-209">固定ポイント</span><span class="sxs-lookup"><span data-stu-id="f7230-209">Fixed point</span></span>|
|<span data-ttu-id="f7230-210">E/e</span><span class="sxs-lookup"><span data-stu-id="f7230-210">E/e</span></span>|<span data-ttu-id="f7230-211">1.245000 e1</span><span class="sxs-lookup"><span data-stu-id="f7230-211">1.245000e1</span></span>|<span data-ttu-id="f7230-212">指数</span><span class="sxs-lookup"><span data-stu-id="f7230-212">Exponential</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out Guid value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Guid&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Guid, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-213">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-213">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-214">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-214">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-215">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-215">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-216">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-216">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-217">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-217">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-218">Utf8 文字列の先頭で <see cref="T:System.Guid" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-218">Parses a <see cref="T:System.Guid" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-219">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-219"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-220">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-220">Formats supported:</span></span>

|<span data-ttu-id="f7230-221">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-221">Format string</span></span>|<span data-ttu-id="f7230-222">形式が必要です</span><span class="sxs-lookup"><span data-stu-id="f7230-222">Expected format</span></span>|
|--|--|
|<span data-ttu-id="f7230-223">D (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-223">D (default)</span></span>|<span data-ttu-id="f7230-224">nnnnnnnn-nnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn</span><span class="sxs-lookup"><span data-stu-id="f7230-224">nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn</span></span>|
|<span data-ttu-id="f7230-225">B</span><span class="sxs-lookup"><span data-stu-id="f7230-225">B</span></span>|<span data-ttu-id="f7230-226">{nnnnnnnn-nnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}</span><span class="sxs-lookup"><span data-stu-id="f7230-226">{nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}</span></span>|
|<span data-ttu-id="f7230-227">P</span><span class="sxs-lookup"><span data-stu-id="f7230-227">P</span></span>|<span data-ttu-id="f7230-228">(nnnnnnnn-nnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn)</span><span class="sxs-lookup"><span data-stu-id="f7230-228">(nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn)</span></span>|
|<span data-ttu-id="f7230-229">N</span><span class="sxs-lookup"><span data-stu-id="f7230-229">N</span></span>|<span data-ttu-id="f7230-230">nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn</span><span class="sxs-lookup"><span data-stu-id="f7230-230">nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out short value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int16&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Short, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int16" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-231">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-231">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-232">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-232">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-233">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-233">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-234">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-234">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-235">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-235">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-236">Utf8 文字列の先頭で <see cref="T:System.Int16" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-236">Parses an <see cref="T:System.Int16" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-237">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-237"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-238">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-238">Formats supported:</span></span>

|<span data-ttu-id="f7230-239">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-239">Format string</span></span>|<span data-ttu-id="f7230-240">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="f7230-240">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="f7230-241">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-241">G/g (default)</span></span>| |
|<span data-ttu-id="f7230-242">D/d</span><span class="sxs-lookup"><span data-stu-id="f7230-242">D/d</span></span>|<span data-ttu-id="f7230-243">32767</span><span class="sxs-lookup"><span data-stu-id="f7230-243">32767</span></span>|
|<span data-ttu-id="f7230-244">N/n</span><span class="sxs-lookup"><span data-stu-id="f7230-244">N/n</span></span>|<span data-ttu-id="f7230-245">32,767</span><span class="sxs-lookup"><span data-stu-id="f7230-245">32,767</span></span>|       
|<span data-ttu-id="f7230-246">X/x</span><span class="sxs-lookup"><span data-stu-id="f7230-246">X/x</span></span>|<span data-ttu-id="f7230-247">7fff</span><span class="sxs-lookup"><span data-stu-id="f7230-247">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out int value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Integer, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-248">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-248">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-249">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-249">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-250">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-250">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-251">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-251">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-252">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-252">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-253">Utf8 文字列の先頭で <see cref="T:System.Int32" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-253">Parses an <see cref="T:System.Int32" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-254">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-254"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-255">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-255">Formats supported:</span></span>

|<span data-ttu-id="f7230-256">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-256">Format string</span></span>|<span data-ttu-id="f7230-257">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="f7230-257">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="f7230-258">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-258">G/g (default)</span></span>| |
|<span data-ttu-id="f7230-259">D/d</span><span class="sxs-lookup"><span data-stu-id="f7230-259">D/d</span></span>|<span data-ttu-id="f7230-260">32767</span><span class="sxs-lookup"><span data-stu-id="f7230-260">32767</span></span>|
|<span data-ttu-id="f7230-261">N/n</span><span class="sxs-lookup"><span data-stu-id="f7230-261">N/n</span></span>|<span data-ttu-id="f7230-262">32,767</span><span class="sxs-lookup"><span data-stu-id="f7230-262">32,767</span></span>|       
|<span data-ttu-id="f7230-263">X/x</span><span class="sxs-lookup"><span data-stu-id="f7230-263">X/x</span></span>|<span data-ttu-id="f7230-264">7fff</span><span class="sxs-lookup"><span data-stu-id="f7230-264">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out long value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Long, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-265">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-265">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-266">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-266">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-267">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-267">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-268">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-268">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-269">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-269">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-270">Utf8 文字列の先頭で <see cref="T:System.Int64" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-270">Parses an <see cref="T:System.Int64" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-271">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-271"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-272">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-272">Formats supported:</span></span>

|<span data-ttu-id="f7230-273">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-273">Format string</span></span>|<span data-ttu-id="f7230-274">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="f7230-274">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="f7230-275">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-275">G/g (default)</span></span>| |
|<span data-ttu-id="f7230-276">D/d</span><span class="sxs-lookup"><span data-stu-id="f7230-276">D/d</span></span>|<span data-ttu-id="f7230-277">32767</span><span class="sxs-lookup"><span data-stu-id="f7230-277">32767</span></span>|
|<span data-ttu-id="f7230-278">N/n</span><span class="sxs-lookup"><span data-stu-id="f7230-278">N/n</span></span>|<span data-ttu-id="f7230-279">32,767</span><span class="sxs-lookup"><span data-stu-id="f7230-279">32,767</span></span>|       
|<span data-ttu-id="f7230-280">X/x</span><span class="sxs-lookup"><span data-stu-id="f7230-280">X/x</span></span>|<span data-ttu-id="f7230-281">7fff</span><span class="sxs-lookup"><span data-stu-id="f7230-281">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out sbyte value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int8&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As SByte, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.SByte" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-282">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-282">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-283">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-283">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-284">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-284">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-285">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-285">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-286">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-286">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-287">Utf8 文字列の先頭で <see cref="T:System.SByte" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-287">Parses an <see cref="T:System.SByte" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-288">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-288"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-289">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-289">Formats supported:</span></span> 

|<span data-ttu-id="f7230-290">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-290">Format string</span></span>|<span data-ttu-id="f7230-291">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="f7230-291">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="f7230-292">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-292">G/g (default)</span></span>| |
|<span data-ttu-id="f7230-293">D/d</span><span class="sxs-lookup"><span data-stu-id="f7230-293">D/d</span></span>|<span data-ttu-id="f7230-294">122</span><span class="sxs-lookup"><span data-stu-id="f7230-294">122</span></span>|
|<span data-ttu-id="f7230-295">N/n</span><span class="sxs-lookup"><span data-stu-id="f7230-295">N/n</span></span>|<span data-ttu-id="f7230-296">122</span><span class="sxs-lookup"><span data-stu-id="f7230-296">122</span></span>|       
|<span data-ttu-id="f7230-297">X/x</span><span class="sxs-lookup"><span data-stu-id="f7230-297">X/x</span></span>|<span data-ttu-id="f7230-298">7a</span><span class="sxs-lookup"><span data-stu-id="f7230-298">7a</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out float value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] float32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Single, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-299">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-299">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-300">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-300">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-301">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-301">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-302">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-302">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-303">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-303">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-304">Utf8 文字列の先頭で <see cref="T:System.Single" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-304">Parses a <see cref="T:System.Single" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-305">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-305"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-306">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-306">Formats supported:</span></span> 

<span data-ttu-id="f7230-307">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-307">Format string</span></span>|<span data-ttu-id="f7230-308">想定される fornmat の例</span><span class="sxs-lookup"><span data-stu-id="f7230-308">Example expected fornmat</span></span>|<span data-ttu-id="f7230-309">コメント</span><span class="sxs-lookup"><span data-stu-id="f7230-309">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="f7230-310">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-310">G/g  (default)</span></span>| |  
|<span data-ttu-id="f7230-311">F/f</span><span class="sxs-lookup"><span data-stu-id="f7230-311">F/f</span></span>|<span data-ttu-id="f7230-312">12.45</span><span class="sxs-lookup"><span data-stu-id="f7230-312">12.45</span></span>|<span data-ttu-id="f7230-313">固定ポイント</span><span class="sxs-lookup"><span data-stu-id="f7230-313">Fixed point</span></span>|
|<span data-ttu-id="f7230-314">E/e</span><span class="sxs-lookup"><span data-stu-id="f7230-314">E/e</span></span>|<span data-ttu-id="f7230-315">1.245000 e1</span><span class="sxs-lookup"><span data-stu-id="f7230-315">1.245000e1</span></span>|<span data-ttu-id="f7230-316">指数</span><span class="sxs-lookup"><span data-stu-id="f7230-316">Exponential</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out TimeSpan value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.TimeSpan&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As TimeSpan, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.TimeSpan" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-317">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-317">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-318">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-318">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-319">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-319">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-320">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-320">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-321">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-321">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-322">Utf8 文字列の先頭で <see cref="T:System.TimeSpan" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-322">Parses a <see cref="T:System.TimeSpan" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-323">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-323"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-324">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-324">Formats supported:</span></span> 

|<span data-ttu-id="f7230-325">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-325">Format string</span></span>|<span data-ttu-id="f7230-326">形式が必要です</span><span class="sxs-lookup"><span data-stu-id="f7230-326">Expected format</span></span>|<span data-ttu-id="f7230-327">コメント</span><span class="sxs-lookup"><span data-stu-id="f7230-327">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="f7230-328">c/t/T (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-328">c/t/T (default)</span></span>|<span data-ttu-id="f7230-329">[-][d.]hh: mm: ss [. fffffff]</span><span class="sxs-lookup"><span data-stu-id="f7230-329">[-][d.]hh:mm:ss[.fffffff]</span></span>|<span data-ttu-id="f7230-330">(定数形式)</span><span class="sxs-lookup"><span data-stu-id="f7230-330">(constant format)</span></span>|
|<span data-ttu-id="f7230-331">G</span><span class="sxs-lookup"><span data-stu-id="f7230-331">G</span></span>|<span data-ttu-id="f7230-332">[-] d 月 hh: mm: ss. fffffff</span><span class="sxs-lookup"><span data-stu-id="f7230-332">[-]d:hh:mm:ss.fffffff</span></span>||<span data-ttu-id="f7230-333">(一般長)</span><span class="sxs-lookup"><span data-stu-id="f7230-333">(general long)</span></span>|
|<span data-ttu-id="f7230-334">G</span><span class="sxs-lookup"><span data-stu-id="f7230-334">g</span></span>|<span data-ttu-id="f7230-335">[-][d:][h] h:mm: ss [f [f [f [f [f]]]]]]</span><span class="sxs-lookup"><span data-stu-id="f7230-335">[-][d:][h]h:mm:ss[.f[f[f[f[f[f[f]]]]]]</span></span>|<span data-ttu-id="f7230-336">(一般的な短い)</span><span class="sxs-lookup"><span data-stu-id="f7230-336">(general short)</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out ushort value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int16&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As UShort, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt16" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-337">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-337">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-338">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-338">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-339">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-339">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-340">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-340">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-341">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-341">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-342">Utf8 文字列の先頭で <see cref="T:System.UInt16" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-342">Parses a <see cref="T:System.UInt16" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-343">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-343"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-344">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-344">Formats supported:</span></span>

|<span data-ttu-id="f7230-345">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-345">Format string</span></span>|<span data-ttu-id="f7230-346">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="f7230-346">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="f7230-347">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-347">G/g (default)</span></span>| |
|<span data-ttu-id="f7230-348">D/d</span><span class="sxs-lookup"><span data-stu-id="f7230-348">D/d</span></span>|<span data-ttu-id="f7230-349">32767</span><span class="sxs-lookup"><span data-stu-id="f7230-349">32767</span></span>|
|<span data-ttu-id="f7230-350">N/n</span><span class="sxs-lookup"><span data-stu-id="f7230-350">N/n</span></span>|<span data-ttu-id="f7230-351">32,767</span><span class="sxs-lookup"><span data-stu-id="f7230-351">32,767</span></span>|       
|<span data-ttu-id="f7230-352">X/x</span><span class="sxs-lookup"><span data-stu-id="f7230-352">X/x</span></span>|<span data-ttu-id="f7230-353">7fff</span><span class="sxs-lookup"><span data-stu-id="f7230-353">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out uint value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As UInteger, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-354">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-354">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-355">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-355">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-356">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-356">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-357">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-357">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-358">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-358">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-359">Utf8 文字列の先頭で <see cref="T:System.UInt32" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-359">Parses a <see cref="T:System.UInt32" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-360">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-360"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-361">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-361">Formats supported:</span></span>

|<span data-ttu-id="f7230-362">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-362">Format string</span></span>|<span data-ttu-id="f7230-363">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="f7230-363">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="f7230-364">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-364">G/g (default)</span></span>| |
|<span data-ttu-id="f7230-365">D/d</span><span class="sxs-lookup"><span data-stu-id="f7230-365">D/d</span></span>|<span data-ttu-id="f7230-366">32767</span><span class="sxs-lookup"><span data-stu-id="f7230-366">32767</span></span>|
|<span data-ttu-id="f7230-367">N/n</span><span class="sxs-lookup"><span data-stu-id="f7230-367">N/n</span></span>|<span data-ttu-id="f7230-368">32,767</span><span class="sxs-lookup"><span data-stu-id="f7230-368">32,767</span></span>|       
|<span data-ttu-id="f7230-369">X/x</span><span class="sxs-lookup"><span data-stu-id="f7230-369">X/x</span></span>|<span data-ttu-id="f7230-370">7fff</span><span class="sxs-lookup"><span data-stu-id="f7230-370">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out ulong value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As ULong, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="f7230-371">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="f7230-371">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="f7230-372">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-372">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="f7230-373">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="f7230-373">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="f7230-374">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f7230-374">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="f7230-375">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="f7230-375">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="f7230-376">Utf8 文字列の先頭で <see cref="T:System.UInt64" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="f7230-376">Parses a <see cref="T:System.UInt64" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="f7230-377">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7230-377"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="f7230-378">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="f7230-378">Formats supported:</span></span>

|<span data-ttu-id="f7230-379">書式文字列</span><span class="sxs-lookup"><span data-stu-id="f7230-379">Format string</span></span>|<span data-ttu-id="f7230-380">想定される形式の例</span><span class="sxs-lookup"><span data-stu-id="f7230-380">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="f7230-381">G/g (既定値)</span><span class="sxs-lookup"><span data-stu-id="f7230-381">G/g (default)</span></span>| |
|<span data-ttu-id="f7230-382">D/d</span><span class="sxs-lookup"><span data-stu-id="f7230-382">D/d</span></span>|<span data-ttu-id="f7230-383">32767</span><span class="sxs-lookup"><span data-stu-id="f7230-383">32767</span></span>|
|<span data-ttu-id="f7230-384">N/n</span><span class="sxs-lookup"><span data-stu-id="f7230-384">N/n</span></span>|<span data-ttu-id="f7230-385">32,767</span><span class="sxs-lookup"><span data-stu-id="f7230-385">32,767</span></span>|       
|<span data-ttu-id="f7230-386">X/x</span><span class="sxs-lookup"><span data-stu-id="f7230-386">X/x</span></span>|<span data-ttu-id="f7230-387">7fff</span><span class="sxs-lookup"><span data-stu-id="f7230-387">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
