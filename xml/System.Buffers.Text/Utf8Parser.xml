<Type Name="Utf8Parser" FullName="System.Buffers.Text.Utf8Parser">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5d78780112fafda36f9e5cefd47832fcb7b0879e" /><Meta Name="ms.sourcegitcommit" Value="cfc0e4215fd0d259582ada2141878befd7c3c8c6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="07/12/2019" /><Meta Name="ms.locfileid" Value="67854580" /></Metadata><TypeSignature Language="C#" Value="public static class Utf8Parser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Utf8Parser extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.Text.Utf8Parser" />
  <TypeSignature Language="VB.NET" Value="Public Class Utf8Parser" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8Parser abstract sealed" />
  <TypeSignature Language="F#" Value="type Utf8Parser = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a5680-101">Utf8 文字列を一般的なデータ型に解析するための静的メソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="a5680-101">Provides static methods to parse Utf8 strings to common data types.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out bool value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] bool&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Boolean, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-102">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-102">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-103">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-103">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-104">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-104">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-105">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-105">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-106">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-106">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-107">Utf8 文字列の先頭で <see cref="T:System.Boolean" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-107">Parses a <see cref="T:System.Boolean" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-108">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-108"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-109">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-109">Formats supported:</span></span> 

|<span data-ttu-id="a5680-110">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-110">Format string</span></span>|<span data-ttu-id="a5680-111">予期される形式の例</span><span class="sxs-lookup"><span data-stu-id="a5680-111">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="a5680-112">G (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-112">G (default)</span></span>|<span data-ttu-id="a5680-113">真/偽</span><span class="sxs-lookup"><span data-stu-id="a5680-113">True/False</span></span>|
|<span data-ttu-id="a5680-114">l</span><span class="sxs-lookup"><span data-stu-id="a5680-114">l</span></span>|<span data-ttu-id="a5680-115">True または false</span><span class="sxs-lookup"><span data-stu-id="a5680-115">true/false</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out byte value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int8&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Byte, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Byte" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-116">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-116">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-117">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-117">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-118">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-118">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-119">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-119">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-120">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-120">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-121">Utf8 文字列の先頭で <see cref="T:System.Byte" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-121">Parses a <see cref="T:System.Byte" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-122">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-122"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-123">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-123">Formats supported:</span></span> 

|<span data-ttu-id="a5680-124">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-124">Format string</span></span>|<span data-ttu-id="a5680-125">予期される形式の例</span><span class="sxs-lookup"><span data-stu-id="a5680-125">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="a5680-126">G または g (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-126">G/g (default)</span></span>| |
|<span data-ttu-id="a5680-127">D または d</span><span class="sxs-lookup"><span data-stu-id="a5680-127">D/d</span></span>|<span data-ttu-id="a5680-128">122</span><span class="sxs-lookup"><span data-stu-id="a5680-128">122</span></span>|
|<span data-ttu-id="a5680-129">N または n</span><span class="sxs-lookup"><span data-stu-id="a5680-129">N/n</span></span>|<span data-ttu-id="a5680-130">122</span><span class="sxs-lookup"><span data-stu-id="a5680-130">122</span></span>|       
|<span data-ttu-id="a5680-131">X/x</span><span class="sxs-lookup"><span data-stu-id="a5680-131">X/x</span></span>|<span data-ttu-id="a5680-132">7a</span><span class="sxs-lookup"><span data-stu-id="a5680-132">7a</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out DateTime value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.DateTime&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As DateTime, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-133">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-133">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-134">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-134">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-135">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-135">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-136">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-136">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-137">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-137">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-138">Utf8 文字列の先頭で <see cref="T:System.DateTime" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-138">Parses a <see cref="T:System.DateTime" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-139">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-139"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-140">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-140">Formats supported:</span></span>

|<span data-ttu-id="a5680-141">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-141">Format string</span></span>|<span data-ttu-id="a5680-142">予期される形式の例</span><span class="sxs-lookup"><span data-stu-id="a5680-142">Example expected format</span></span>|<span data-ttu-id="a5680-143">コメント</span><span class="sxs-lookup"><span data-stu-id="a5680-143">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="a5680-144">G (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-144">G  (default)</span></span>|<span data-ttu-id="a5680-145">05/25/2017 10:30:15</span><span class="sxs-lookup"><span data-stu-id="a5680-145">05/25/2017 10:30:15</span></span>| |
|<span data-ttu-id="a5680-146">R</span><span class="sxs-lookup"><span data-stu-id="a5680-146">R</span></span>|<span data-ttu-id="a5680-147">(火)、3 Jan 2017 08時 08分: 05 GMT</span><span class="sxs-lookup"><span data-stu-id="a5680-147">Tue, 03 Jan 2017 08:08:05 GMT</span></span>|<span data-ttu-id="a5680-148">(RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="a5680-148">(RFC 1123)</span></span>|
|<span data-ttu-id="a5680-149">l</span><span class="sxs-lookup"><span data-stu-id="a5680-149">l</span></span>|<span data-ttu-id="a5680-150">(火)、3 jan 2017 08時 08分: 05 gmt</span><span class="sxs-lookup"><span data-stu-id="a5680-150">tue, 03 jan 2017 08:08:05 gmt</span></span>|<span data-ttu-id="a5680-151">(RFC 1123 小文字)</span><span class="sxs-lookup"><span data-stu-id="a5680-151">(Lowercase RFC 1123)</span></span>|
|<span data-ttu-id="a5680-152">O</span><span class="sxs-lookup"><span data-stu-id="a5680-152">O</span></span>|<span data-ttu-id="a5680-153">2017-06-12T05:30:45.7680000-07:00</span><span class="sxs-lookup"><span data-stu-id="a5680-153">2017-06-12T05:30:45.7680000-07:00</span></span>|<span data-ttu-id="a5680-154">(ラウンドト リップが可能)</span><span class="sxs-lookup"><span data-stu-id="a5680-154">(Round-trippable)</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out DateTimeOffset value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.DateTimeOffset&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As DateTimeOffset, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-155">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-155">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-156">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-156">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-157">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-157">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-158">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-158">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-159">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-159">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-160">Utf8 文字列の先頭で <see cref="T:System.DateTimeOffset" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-160">Parses a <see cref="T:System.DateTimeOffset" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-161">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-161"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-162">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-162">Formats supported:</span></span>

|<span data-ttu-id="a5680-163">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-163">Format string</span></span>|<span data-ttu-id="a5680-164">予期される形式の例</span><span class="sxs-lookup"><span data-stu-id="a5680-164">Example expected format</span></span>|<span data-ttu-id="a5680-165">コメント</span><span class="sxs-lookup"><span data-stu-id="a5680-165">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="a5680-166">G (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-166">G  (default)</span></span>|<span data-ttu-id="a5680-167">05/25/2017 10:30:15</span><span class="sxs-lookup"><span data-stu-id="a5680-167">05/25/2017 10:30:15</span></span>| |
|<span data-ttu-id="a5680-168">R</span><span class="sxs-lookup"><span data-stu-id="a5680-168">R</span></span>|<span data-ttu-id="a5680-169">(火)、3 Jan 2017 08時 08分: 05 GMT</span><span class="sxs-lookup"><span data-stu-id="a5680-169">Tue, 03 Jan 2017 08:08:05 GMT</span></span>|<span data-ttu-id="a5680-170">(RFC 1123)</span><span class="sxs-lookup"><span data-stu-id="a5680-170">(RFC 1123)</span></span>|
|<span data-ttu-id="a5680-171">l</span><span class="sxs-lookup"><span data-stu-id="a5680-171">l</span></span>|<span data-ttu-id="a5680-172">(火)、3 jan 2017 08時 08分: 05 gmt</span><span class="sxs-lookup"><span data-stu-id="a5680-172">tue, 03 jan 2017 08:08:05 gmt</span></span>|<span data-ttu-id="a5680-173">(RFC 1123 小文字)</span><span class="sxs-lookup"><span data-stu-id="a5680-173">(Lowercase RFC 1123)</span></span>|
|<span data-ttu-id="a5680-174">O</span><span class="sxs-lookup"><span data-stu-id="a5680-174">O</span></span>|<span data-ttu-id="a5680-175">2017-06-12T05:30:45.7680000-07:00</span><span class="sxs-lookup"><span data-stu-id="a5680-175">2017-06-12T05:30:45.7680000-07:00</span></span>|<span data-ttu-id="a5680-176">(ラウンドト リップが可能)</span><span class="sxs-lookup"><span data-stu-id="a5680-176">(Round-trippable)</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out decimal value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Decimal&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Decimal, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-177">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-177">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-178">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-178">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-179">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-179">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-180">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-180">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-181">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-181">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-182">Utf8 文字列の先頭で <see cref="T:System.Decimal" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-182">Parses a <see cref="T:System.Decimal" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-183">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-183"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-184">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-184">Formats supported:</span></span>

|<span data-ttu-id="a5680-185">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-185">Format string</span></span>|<span data-ttu-id="a5680-186">予期される形式の例</span><span class="sxs-lookup"><span data-stu-id="a5680-186">Example expected format</span></span>|<span data-ttu-id="a5680-187">コメント</span><span class="sxs-lookup"><span data-stu-id="a5680-187">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="a5680-188">G または g (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-188">G/g  (default)</span></span>| |  
|<span data-ttu-id="a5680-189">F または f</span><span class="sxs-lookup"><span data-stu-id="a5680-189">F/f</span></span>|<span data-ttu-id="a5680-190">12.45</span><span class="sxs-lookup"><span data-stu-id="a5680-190">12.45</span></span>|<span data-ttu-id="a5680-191">固定小数点</span><span class="sxs-lookup"><span data-stu-id="a5680-191">Fixed point</span></span>|
|<span data-ttu-id="a5680-192">電子メール/電子メール</span><span class="sxs-lookup"><span data-stu-id="a5680-192">E/e</span></span>|<span data-ttu-id="a5680-193">1.245000e1</span><span class="sxs-lookup"><span data-stu-id="a5680-193">1.245000e1</span></span>|<span data-ttu-id="a5680-194">指数</span><span class="sxs-lookup"><span data-stu-id="a5680-194">Exponential</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out double value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] float64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Double, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-195">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-195">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-196">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-196">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-197">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-197">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-198">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-198">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-199">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-199">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-200">Utf8 文字列の先頭で <see cref="T:System.Double" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-200">Parses a <see cref="T:System.Double" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-201">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-201"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-202">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-202">Formats supported:</span></span>

|<span data-ttu-id="a5680-203">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-203">Format string</span></span>|<span data-ttu-id="a5680-204">予期される形式の例</span><span class="sxs-lookup"><span data-stu-id="a5680-204">Example expected format</span></span>|<span data-ttu-id="a5680-205">コメント</span><span class="sxs-lookup"><span data-stu-id="a5680-205">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="a5680-206">G または g (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-206">G/g  (default)</span></span>| |  
|<span data-ttu-id="a5680-207">F または f</span><span class="sxs-lookup"><span data-stu-id="a5680-207">F/f</span></span>|<span data-ttu-id="a5680-208">12.45</span><span class="sxs-lookup"><span data-stu-id="a5680-208">12.45</span></span>|<span data-ttu-id="a5680-209">固定小数点</span><span class="sxs-lookup"><span data-stu-id="a5680-209">Fixed point</span></span>|
|<span data-ttu-id="a5680-210">電子メール/電子メール</span><span class="sxs-lookup"><span data-stu-id="a5680-210">E/e</span></span>|<span data-ttu-id="a5680-211">1.245000e1</span><span class="sxs-lookup"><span data-stu-id="a5680-211">1.245000e1</span></span>|<span data-ttu-id="a5680-212">指数</span><span class="sxs-lookup"><span data-stu-id="a5680-212">Exponential</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out Guid value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.Guid&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Guid, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-213">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-213">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-214">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-214">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-215">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-215">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-216">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-216">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-217">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-217">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-218">Utf8 文字列の先頭で <see cref="T:System.Guid" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-218">Parses a <see cref="T:System.Guid" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-219">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-219"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-220">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-220">Formats supported:</span></span>

|<span data-ttu-id="a5680-221">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-221">Format string</span></span>|<span data-ttu-id="a5680-222">予期される形式</span><span class="sxs-lookup"><span data-stu-id="a5680-222">Expected format</span></span>|
|--|--|
|<span data-ttu-id="a5680-223">D (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-223">D (default)</span></span>|<span data-ttu-id="a5680-224">nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn</span><span class="sxs-lookup"><span data-stu-id="a5680-224">nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn</span></span>|
|<span data-ttu-id="a5680-225">B</span><span class="sxs-lookup"><span data-stu-id="a5680-225">B</span></span>|<span data-ttu-id="a5680-226">{nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}</span><span class="sxs-lookup"><span data-stu-id="a5680-226">{nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}</span></span>|
|<span data-ttu-id="a5680-227">P</span><span class="sxs-lookup"><span data-stu-id="a5680-227">P</span></span>|<span data-ttu-id="a5680-228">(この nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn)</span><span class="sxs-lookup"><span data-stu-id="a5680-228">(nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn)</span></span>|
|<span data-ttu-id="a5680-229">N</span><span class="sxs-lookup"><span data-stu-id="a5680-229">N</span></span>|<span data-ttu-id="a5680-230">nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn</span><span class="sxs-lookup"><span data-stu-id="a5680-230">nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out short value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int16&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Short, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int16" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-231">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-231">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-232">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-232">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-233">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-233">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-234">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-234">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-235">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-235">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-236">Utf8 文字列の先頭で <see cref="T:System.Int16" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-236">Parses an <see cref="T:System.Int16" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-237">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-237"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-238">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-238">Formats supported:</span></span>

|<span data-ttu-id="a5680-239">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-239">Format string</span></span>|<span data-ttu-id="a5680-240">予期される形式の例</span><span class="sxs-lookup"><span data-stu-id="a5680-240">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="a5680-241">G または g (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-241">G/g (default)</span></span>| |
|<span data-ttu-id="a5680-242">D または d</span><span class="sxs-lookup"><span data-stu-id="a5680-242">D/d</span></span>|<span data-ttu-id="a5680-243">32767</span><span class="sxs-lookup"><span data-stu-id="a5680-243">32767</span></span>|
|<span data-ttu-id="a5680-244">N または n</span><span class="sxs-lookup"><span data-stu-id="a5680-244">N/n</span></span>|<span data-ttu-id="a5680-245">32,767</span><span class="sxs-lookup"><span data-stu-id="a5680-245">32,767</span></span>|       
|<span data-ttu-id="a5680-246">X/x</span><span class="sxs-lookup"><span data-stu-id="a5680-246">X/x</span></span>|<span data-ttu-id="a5680-247">7 fff</span><span class="sxs-lookup"><span data-stu-id="a5680-247">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out int value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Integer, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-248">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-248">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-249">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-249">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-250">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-250">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-251">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-251">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-252">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-252">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-253">Utf8 文字列の先頭で <see cref="T:System.Int32" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-253">Parses an <see cref="T:System.Int32" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-254">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-254"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-255">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-255">Formats supported:</span></span>

|<span data-ttu-id="a5680-256">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-256">Format string</span></span>|<span data-ttu-id="a5680-257">予期される形式の例</span><span class="sxs-lookup"><span data-stu-id="a5680-257">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="a5680-258">G または g (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-258">G/g (default)</span></span>| |
|<span data-ttu-id="a5680-259">D または d</span><span class="sxs-lookup"><span data-stu-id="a5680-259">D/d</span></span>|<span data-ttu-id="a5680-260">32767</span><span class="sxs-lookup"><span data-stu-id="a5680-260">32767</span></span>|
|<span data-ttu-id="a5680-261">N または n</span><span class="sxs-lookup"><span data-stu-id="a5680-261">N/n</span></span>|<span data-ttu-id="a5680-262">32,767</span><span class="sxs-lookup"><span data-stu-id="a5680-262">32,767</span></span>|       
|<span data-ttu-id="a5680-263">X/x</span><span class="sxs-lookup"><span data-stu-id="a5680-263">X/x</span></span>|<span data-ttu-id="a5680-264">7 fff</span><span class="sxs-lookup"><span data-stu-id="a5680-264">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out long value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Long, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-265">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-265">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-266">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-266">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-267">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-267">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-268">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-268">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-269">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-269">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-270">Utf8 文字列の先頭で <see cref="T:System.Int64" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-270">Parses an <see cref="T:System.Int64" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-271">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-271"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-272">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-272">Formats supported:</span></span>

|<span data-ttu-id="a5680-273">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-273">Format string</span></span>|<span data-ttu-id="a5680-274">予期される形式の例</span><span class="sxs-lookup"><span data-stu-id="a5680-274">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="a5680-275">G または g (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-275">G/g (default)</span></span>| |
|<span data-ttu-id="a5680-276">D または d</span><span class="sxs-lookup"><span data-stu-id="a5680-276">D/d</span></span>|<span data-ttu-id="a5680-277">32767</span><span class="sxs-lookup"><span data-stu-id="a5680-277">32767</span></span>|
|<span data-ttu-id="a5680-278">N または n</span><span class="sxs-lookup"><span data-stu-id="a5680-278">N/n</span></span>|<span data-ttu-id="a5680-279">32,767</span><span class="sxs-lookup"><span data-stu-id="a5680-279">32,767</span></span>|       
|<span data-ttu-id="a5680-280">X/x</span><span class="sxs-lookup"><span data-stu-id="a5680-280">X/x</span></span>|<span data-ttu-id="a5680-281">7 fff</span><span class="sxs-lookup"><span data-stu-id="a5680-281">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out sbyte value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] int8&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As SByte, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.SByte" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-282">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-282">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-283">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-283">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-284">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-284">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-285">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-285">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-286">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-286">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-287">Utf8 文字列の先頭で <see cref="T:System.SByte" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-287">Parses an <see cref="T:System.SByte" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-288">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-288"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-289">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-289">Formats supported:</span></span> 

|<span data-ttu-id="a5680-290">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-290">Format string</span></span>|<span data-ttu-id="a5680-291">予期される形式の例</span><span class="sxs-lookup"><span data-stu-id="a5680-291">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="a5680-292">G または g (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-292">G/g (default)</span></span>| |
|<span data-ttu-id="a5680-293">D または d</span><span class="sxs-lookup"><span data-stu-id="a5680-293">D/d</span></span>|<span data-ttu-id="a5680-294">122</span><span class="sxs-lookup"><span data-stu-id="a5680-294">122</span></span>|
|<span data-ttu-id="a5680-295">N または n</span><span class="sxs-lookup"><span data-stu-id="a5680-295">N/n</span></span>|<span data-ttu-id="a5680-296">122</span><span class="sxs-lookup"><span data-stu-id="a5680-296">122</span></span>|       
|<span data-ttu-id="a5680-297">X/x</span><span class="sxs-lookup"><span data-stu-id="a5680-297">X/x</span></span>|<span data-ttu-id="a5680-298">7a</span><span class="sxs-lookup"><span data-stu-id="a5680-298">7a</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out float value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] float32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As Single, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-299">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-299">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-300">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-300">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-301">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-301">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-302">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-302">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-303">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-303">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-304">Utf8 文字列の先頭で <see cref="T:System.Single" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-304">Parses a <see cref="T:System.Single" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-305">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-305"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-306">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-306">Formats supported:</span></span> 

<span data-ttu-id="a5680-307">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-307">Format string</span></span>|<span data-ttu-id="a5680-308">Fornmat の例が必要です。</span><span class="sxs-lookup"><span data-stu-id="a5680-308">Example expected fornmat</span></span>|<span data-ttu-id="a5680-309">コメント</span><span class="sxs-lookup"><span data-stu-id="a5680-309">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="a5680-310">G または g (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-310">G/g  (default)</span></span>| |  
|<span data-ttu-id="a5680-311">F または f</span><span class="sxs-lookup"><span data-stu-id="a5680-311">F/f</span></span>|<span data-ttu-id="a5680-312">12.45</span><span class="sxs-lookup"><span data-stu-id="a5680-312">12.45</span></span>|<span data-ttu-id="a5680-313">固定小数点</span><span class="sxs-lookup"><span data-stu-id="a5680-313">Fixed point</span></span>|
|<span data-ttu-id="a5680-314">電子メール/電子メール</span><span class="sxs-lookup"><span data-stu-id="a5680-314">E/e</span></span>|<span data-ttu-id="a5680-315">1.245000e1</span><span class="sxs-lookup"><span data-stu-id="a5680-315">1.245000e1</span></span>|<span data-ttu-id="a5680-316">指数</span><span class="sxs-lookup"><span data-stu-id="a5680-316">Exponential</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out TimeSpan value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] valuetype System.TimeSpan&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As TimeSpan, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.TimeSpan" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-317">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-317">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-318">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-318">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-319">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-319">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-320">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-320">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-321">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-321">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-322">Utf8 文字列の先頭で <see cref="T:System.TimeSpan" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-322">Parses a <see cref="T:System.TimeSpan" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-323">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-323"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-324">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-324">Formats supported:</span></span> 

|<span data-ttu-id="a5680-325">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-325">Format string</span></span>|<span data-ttu-id="a5680-326">予期される形式</span><span class="sxs-lookup"><span data-stu-id="a5680-326">Expected format</span></span>|<span data-ttu-id="a5680-327">コメント</span><span class="sxs-lookup"><span data-stu-id="a5680-327">Comments</span></span>|
|--|--|--|
|<span data-ttu-id="a5680-328">c/t/T (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-328">c/t/T (default)</span></span>|<span data-ttu-id="a5680-329">[-][d] にします。hh:mm:ss [.fffffff]</span><span class="sxs-lookup"><span data-stu-id="a5680-329">[-][d.]hh:mm:ss[.fffffff]</span></span>|<span data-ttu-id="a5680-330">(定数の形式)</span><span class="sxs-lookup"><span data-stu-id="a5680-330">(constant format)</span></span>|
|<span data-ttu-id="a5680-331">G</span><span class="sxs-lookup"><span data-stu-id="a5680-331">G</span></span>|<span data-ttu-id="a5680-332">[-]d:hh:mm:ss.fffffff</span><span class="sxs-lookup"><span data-stu-id="a5680-332">[-]d:hh:mm:ss.fffffff</span></span>||<span data-ttu-id="a5680-333">(一般的な時間の長い)</span><span class="sxs-lookup"><span data-stu-id="a5680-333">(general long)</span></span>|
|<span data-ttu-id="a5680-334">G</span><span class="sxs-lookup"><span data-stu-id="a5680-334">g</span></span>|<span data-ttu-id="a5680-335">[-][d:][h]h:mm:ss[.f[f[f[f[f[f[f]]]]]]</span><span class="sxs-lookup"><span data-stu-id="a5680-335">[-][d:][h]h:mm:ss[.f[f[f[f[f[f[f]]]]]]</span></span>|<span data-ttu-id="a5680-336">(一般的な短い形式)</span><span class="sxs-lookup"><span data-stu-id="a5680-336">(general short)</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out ushort value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int16&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As UShort, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt16" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-337">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-337">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-338">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-338">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-339">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-339">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-340">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-340">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-341">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-341">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-342">Utf8 文字列の先頭で <see cref="T:System.UInt16" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-342">Parses a <see cref="T:System.UInt16" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-343">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-343"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-344">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-344">Formats supported:</span></span>

|<span data-ttu-id="a5680-345">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-345">Format string</span></span>|<span data-ttu-id="a5680-346">予期される形式の例</span><span class="sxs-lookup"><span data-stu-id="a5680-346">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="a5680-347">G または g (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-347">G/g (default)</span></span>| |
|<span data-ttu-id="a5680-348">D または d</span><span class="sxs-lookup"><span data-stu-id="a5680-348">D/d</span></span>|<span data-ttu-id="a5680-349">32767</span><span class="sxs-lookup"><span data-stu-id="a5680-349">32767</span></span>|
|<span data-ttu-id="a5680-350">N または n</span><span class="sxs-lookup"><span data-stu-id="a5680-350">N/n</span></span>|<span data-ttu-id="a5680-351">32,767</span><span class="sxs-lookup"><span data-stu-id="a5680-351">32,767</span></span>|       
|<span data-ttu-id="a5680-352">X/x</span><span class="sxs-lookup"><span data-stu-id="a5680-352">X/x</span></span>|<span data-ttu-id="a5680-353">7 fff</span><span class="sxs-lookup"><span data-stu-id="a5680-353">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out uint value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int32&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As UInteger, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-354">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-354">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-355">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-355">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-356">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-356">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-357">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-357">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-358">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-358">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-359">Utf8 文字列の先頭で <see cref="T:System.UInt32" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-359">Parses a <see cref="T:System.UInt32" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-360">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-360"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-361">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-361">Formats supported:</span></span>

|<span data-ttu-id="a5680-362">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-362">Format string</span></span>|<span data-ttu-id="a5680-363">予期される形式の例</span><span class="sxs-lookup"><span data-stu-id="a5680-363">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="a5680-364">G または g (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-364">G/g (default)</span></span>| |
|<span data-ttu-id="a5680-365">D または d</span><span class="sxs-lookup"><span data-stu-id="a5680-365">D/d</span></span>|<span data-ttu-id="a5680-366">32767</span><span class="sxs-lookup"><span data-stu-id="a5680-366">32767</span></span>|
|<span data-ttu-id="a5680-367">N または n</span><span class="sxs-lookup"><span data-stu-id="a5680-367">N/n</span></span>|<span data-ttu-id="a5680-368">32,767</span><span class="sxs-lookup"><span data-stu-id="a5680-368">32,767</span></span>|       
|<span data-ttu-id="a5680-369">X/x</span><span class="sxs-lookup"><span data-stu-id="a5680-369">X/x</span></span>|<span data-ttu-id="a5680-370">7 fff</span><span class="sxs-lookup"><span data-stu-id="a5680-370">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;byte&gt; source, out ulong value, out int bytesConsumed, char standardFormat = '\0');" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] unsigned int64&amp; value, [out] int32&amp; bytesConsumed, char standardFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (source As ReadOnlySpan(Of Byte), ByRef value As ULong, ByRef bytesConsumed As Integer, Optional standardFormat As Char = '\0') As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;byte&gt; *  *  * char -&gt; bool" Usage="System.Buffers.Text.Utf8Parser.TryParse (source, value, bytesConsumed, standardFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-2.1;netcore-2.2;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
        <Parameter Name="bytesConsumed" Type="System.Int32" RefType="out" />
        <Parameter Name="standardFormat" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="a5680-371">解析する Utf8 文字列。</span><span class="sxs-lookup"><span data-stu-id="a5680-371">The Utf8 string to parse.</span></span></param>
        <param name="value"><span data-ttu-id="a5680-372">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-372">When the method returns, contains the value parsed from <paramref name="source" />, if the parsing operation succeeded.</span></span></param>
        <param name="bytesConsumed"><span data-ttu-id="a5680-373">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5680-373">If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns.</span></span> <span data-ttu-id="a5680-374">メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="a5680-374">If the method fails, <paramref name="bytesConsumed" /> is set to 0.</span></span></param>
        <param name="standardFormat"><span data-ttu-id="a5680-375">Utf8 文字列の予期される形式。</span><span class="sxs-lookup"><span data-stu-id="a5680-375">The expected format of the Utf8 string.</span></span></param>
        <summary><span data-ttu-id="a5680-376">Utf8 文字列の先頭で <see cref="T:System.UInt64" /> を解析します。</span><span class="sxs-lookup"><span data-stu-id="a5680-376">Parses a <see cref="T:System.UInt64" /> at the start of a Utf8 string.</span></span></summary>
        <returns><span data-ttu-id="a5680-377">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5680-377"><see langword="true" /> for success; <see langword="false" /> if the string was not syntactically valid or an overflow or underflow occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="a5680-378">サポートされている形式:</span><span class="sxs-lookup"><span data-stu-id="a5680-378">Formats supported:</span></span>

|<span data-ttu-id="a5680-379">書式文字列</span><span class="sxs-lookup"><span data-stu-id="a5680-379">Format string</span></span>|<span data-ttu-id="a5680-380">予期される形式の例</span><span class="sxs-lookup"><span data-stu-id="a5680-380">Example expected format</span></span>|
|--|--|
|<span data-ttu-id="a5680-381">G または g (既定値)</span><span class="sxs-lookup"><span data-stu-id="a5680-381">G/g (default)</span></span>| |
|<span data-ttu-id="a5680-382">D または d</span><span class="sxs-lookup"><span data-stu-id="a5680-382">D/d</span></span>|<span data-ttu-id="a5680-383">32767</span><span class="sxs-lookup"><span data-stu-id="a5680-383">32767</span></span>|
|<span data-ttu-id="a5680-384">N または n</span><span class="sxs-lookup"><span data-stu-id="a5680-384">N/n</span></span>|<span data-ttu-id="a5680-385">32,767</span><span class="sxs-lookup"><span data-stu-id="a5680-385">32,767</span></span>|       
|<span data-ttu-id="a5680-386">X/x</span><span class="sxs-lookup"><span data-stu-id="a5680-386">X/x</span></span>|<span data-ttu-id="a5680-387">7 fff</span><span class="sxs-lookup"><span data-stu-id="a5680-387">7fff</span></span>|

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
