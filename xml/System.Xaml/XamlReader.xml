<Type Name="XamlReader" FullName="System.Xaml.XamlReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="361d6f6e42e4a0ec79f9b0006b2e2dd2f40184d4" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46661455" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XamlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XamlReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type XamlReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>XAML 入力を処理して XAML ノード ストリームを生成するクラスの基本定義を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlReader> 抽象クラスは、実装や作業結果のすべてのメンバーの定義を提供しません。 メンバーの実装が<xref:System.Xaml.XamlReader>はそのメンバーは、「解説」に記載されています。 具体的には、<xref:System.Xaml.XamlReader>が実装する必要があるいくつかの抽象メンバーといくつかの仮想メンバーです。  
  
 仮想メンバーの<xref:System.Xaml.XamlReader.ReadSubtree%2A>と<xref:System.Xaml.XamlReader.Skip%2A>各ほとんどの場合に適した既定の実装を提供します。 ただし、<xref:System.Xaml.XamlReader.ReadSubtree%2A>と<xref:System.Xaml.XamlReader.Skip%2A>既定の実装が実装する XAML リーダーの他の予期される動作に依存します。 以外に具体的には、依存している、<xref:System.Xaml.XamlReader.Read%2A>をオーバーライドします。 <xref:System.Xaml.XamlReader.Dispose%2A> 作業用の既定の実装を持つ仮想メンバーです。  
  
 次の 2 つのクラスは、.NET Framework XAML サービスと System.Xaml アセンブリに最も関連性が実用的な派生クラスです。  
  
-   <xref:System.Xaml.XamlObjectReader>、実行時に、アプリケーションのアクティブなオブジェクト グラフなど、オブジェクト グラフを読み取ります。  
  
-   <xref:System.Xaml.XamlXmlReader>、、の [全般] を使用して XML テキスト ファイルの形式で XAML を読み取ります<xref:System.Xml.XmlReader>ファイル、中間のヘルパー クラスとして読み込まれます。  
  
 他のフレームワークの他の XAML リーダーは、<xref:System.Windows.Baml2006.Baml2006Reader>と<xref:System.Activities.Debugger.XamlDebuggerXmlReader>します。  
  
 <xref:System.Xaml.XamlReader> 異なります[!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)]と<xref:System.Xml.XmlReader>ためにの設計原則<xref:System.Xaml.XamlReader>はありません、`Create`を基になる既定の XAML リーダー実装を返すメソッド。 代わりに、そのコンス トラクターまたはその他のクラスに固有のヘルパー Api を呼び出すことによって XAML リーダーの特定の派生クラスをインスタンス化する必要があります。  
  
## <a name="subtree-readers"></a>サブツリーのリーダー  
 ほとんどの場合、呼び出す<xref:System.Xaml.XamlReader>API から派生した XAML リーダーの特定のクラスのコンテキストで<xref:System.Xaml.XamlReader>します。 ただし、1 つのケースではアクセス<xref:System.Xaml.XamlReader>パブリックおよびからは派生しないのは実用的な XAML リーダー インスタンスの API<xref:System.Xaml.XamlObjectReader>または<xref:System.Xaml.XamlXmlReader>します。 この例は、呼び出すときに<xref:System.Xaml.XamlReader.ReadSubtree%2A>、返された、<xref:System.Xaml.XamlReader>インスタンス。 既定の実装で、<xref:System.Xaml.XamlReader>は内部クラスは、この API によって返されます。  
  
 <xref:System.Xaml.XamlReader>サブツリーの読み取りは、Api の有効なアクションをなどが取得した<xref:System.Xaml.XamlReader.Read%2A>と<xref:System.Xaml.XamlReader.NodeType%2A>、およびそれらのアクションが親のリーダー クラスに基づいています。 この設計では、サブツリーが入力されたフレームのレベルを追跡する内部クラス。 動作するサブツリー<xref:System.Xaml.XamlReader>により現在のノードの位置は、サブツリーの境界を超えて移動する場合、特定のサブツリーのリーダーがファイルの終わりを報告することを確認または`null`現在のノードでします。  
  
 特定のサブツリーのリーダーの使用状況に関する注意事項が含まれている<xref:System.Xaml.XamlReader>Api。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectReader" />
    <altmember cref="T:System.Xaml.XamlXmlReader" />
    <altmember cref="T:System.Xaml.XamlReaderSettings" />
    <related type="Article" href="http://msdn.microsoft.com/library/7c11abec-1075-474c-9d9b-778e5dab21c3">XAML ノード ストリームの構造と概念について</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Xaml.XamlReader" /> クラスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="xamlReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>XAML ノード ストリームを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基本の実装を呼び出す<xref:System.Xaml.XamlReader.Close%2A>呼び出し<xref:System.Xaml.XamlReader.Dispose%2A>で、`isDisposing`パラメーターとして`true`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="xamlReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースを解放するには <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Xaml.XamlReader" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 取得する基本クラスを呼び出す必要があります<xref:System.Xaml.XamlReader.IsDisposed%2A>  = `true`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Xaml.XamlReader.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> が呼び出されているかどうかを取得します。</summary>
        <value>
          <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> が呼び出されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEof">
      <MemberSignature Language="C#" Value="public abstract bool IsEof { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEof" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsEof" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEof As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsEof { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEof : bool" Usage="System.Xaml.XamlReader.IsEof" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスで実装されている場合に、リーダーがファイルの末尾に配置されているかどうかを示す値を取得します。</summary>
        <value>XAML ノード ストリームのファイルの概念上の末尾に配置されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サブツリーのリーダーが呼び出せる<xref:System.Xaml.XamlReader.IsEof%2A>、入力されたサブツリーの境界を正確に反映する動作を持つ。 詳細については、「サブツリーのリーダー」のセクションを参照してください。 <xref:System.Xaml.XamlReader>、を参照してくださいまたは<xref:System.Xaml.XamlReader.ReadSubtree%2A>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.IsEof" />
        <altmember cref="P:System.Xaml.XamlXmlReader.IsEof" />
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlMember Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember Member" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Member" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Member As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlMember ^ Member { System::Xaml::XamlMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Member : System.Xaml.XamlMember" Usage="System.Xaml.XamlReader.Member" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスで実装されており、リーダーが <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上に配置されている場合は、リーダーが現在配置されているメンバーを取得します。</summary>
        <value>現在のメンバー。リーダーがメンバー上に配置されていない場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サブツリーのリーダーが呼び出せる<xref:System.Xaml.XamlReader.Member%2A>動作の制限があります。 詳細については、「サブツリーのリーダー」のセクションを参照してください。 <xref:System.Xaml.XamlReader>、を参照してくださいまたは<xref:System.Xaml.XamlReader.ReadSubtree%2A>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Member" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Member" />
        <altmember cref="T:System.Xaml.XamlMember" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.NamespaceDeclaration Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.NamespaceDeclaration Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As NamespaceDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::NamespaceDeclaration ^ Namespace { System::Xaml::NamespaceDeclaration ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xaml.NamespaceDeclaration" Usage="System.Xaml.XamlReader.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.NamespaceDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスで実装されている場合に、現在のノードから XAML 名前空間情報を取得します。</summary>
        <value>XAML 名前空間情報 (使用可能な場合)。それ以外の場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この API の設計が null 以外の結果の場合にのみを返すには、<xref:System.Xaml.XamlReader.NodeType%2A>現在のノードが<xref:System.Xaml.XamlNodeType.NamespaceDeclaration>します。 プロパティは、XAML スキーマ コンテキストで解釈されるよう、オブジェクトまたは一般的なスコープの感覚でメンバーに適用される XAML 名前空間を報告しません。 アプリケーションは、操作を行うのための情報をキャッシュするための手段を提供する必要がありますとしてその XAML 名前空間は、方法には、ライターの XAML スキーマ コンテキスト報告する以外の方法では、その情報が必要な場合に、XAML ノードを走査します。 参照してください<xref:System.Xaml.XamlXmlReader.Namespace%2A>ノートについては、参照実装にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Namespace" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xaml.XamlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XamlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlNodeType NodeType { System::Xaml::XamlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xaml.XamlNodeType" Usage="System.Xaml.XamlReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスで実装された場合、現在のノードの型を取得します。</summary>
        <value>
          <see cref="T:System.Xaml.XamlNodeType" /> 列挙体の値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サブツリーのリーダーが呼び出せる<xref:System.Xaml.XamlReader.NodeType%2A>動作の制限があります。 詳細については、「サブツリーのリーダー」のセクションを参照してください。 <xref:System.Xaml.XamlReader>、を参照してくださいまたは<xref:System.Xaml.XamlReader.ReadSubtree%2A>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.NodeType" />
        <altmember cref="P:System.Xaml.XamlXmlReader.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Read();" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; bool" Usage="xamlReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスで実装された場合、処理対象から次の XAML ノードを読み取ります (ノードがある場合)。</summary>
        <returns>ノードがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サブツリーのリーダーが呼び出せる<xref:System.Xaml.XamlReader.Read%2A>動作の制限があります。 詳細については、「サブツリーのリーダー」のセクションを参照してください。 <xref:System.Xaml.XamlReader>、を参照してくださいまたは<xref:System.Xaml.XamlReader.ReadSubtree%2A>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xaml.XamlXmlReader.Read" />
        <altmember cref="M:System.Xaml.XamlObjectReader.Read" />
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.ReadSubtree" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSubtree () As XamlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlReader ^ ReadSubtree();" />
      <MemberSignature Language="F#" Value="abstract member ReadSubtree : unit -&gt; System.Xaml.XamlReader&#xA;override this.ReadSubtree : unit -&gt; System.Xaml.XamlReader" Usage="xamlReader.ReadSubtree " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Xaml.XamlReader" /> に基づく <see cref="T:System.Xaml.XamlReader" /> を返します。返された <see cref="T:System.Xaml.XamlReader" /> は、XAML ノード構造のサブツリーでの反復処理に使用されます。</summary>
        <returns>サブツリーの新しい XAML リーダー インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを持ち、既定の実装を返す有効な<xref:System.Xaml.XamlReader>します。 返された<xref:System.Xaml.XamlReader>特定を制限する内部クラスは、<xref:System.Xaml.XamlReader>アクション。 制限は一貫性のある目的に設定されたディメンションが指定されたサブツリーの XAML ノード セットは、大きなソースとファイルの終わりを返すことのみを読み取りまたは`null`サブツリーが終了すると、現在のノードにします。  
  
 一般に、最初から現在のノードを確認する必要があります<xref:System.Xaml.XamlReader.Read%2A>サブツリーのリーダーが必要かどうかを判断します。 これを確認する方法があります実装に固有です。ただし、すべてのサブツリーの複数のサブツリーのリーダーを作成しないでください。 さらに、特定のノードのケースのサブツリーのリーダーの呼び出しを回避 (たとえば、 <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>) ノードのサブツリーを含めることはできません。  
  
 サブツリーのリーダーを取得した後を呼び出す必要があります<xref:System.Xaml.XamlReader.Read%2A>が現在のノードを取得する (呼び出すまたは<xref:System.Xaml.XamlReader.Skip%2A>次のノードを取得する)。 自動的に取得しない最初のノードの位置がサブツリーのリーダーから作成するときにします。  
  
 呼び出して取得するリーダー<xref:System.Xaml.XamlReader.ReadSubtree%2A>この既定値からは実装は、内部クラスです。 内部クラスはその動作をに基づいて、<xref:System.Xaml.XamlReader>実装されている場合に使用<xref:System.Xaml.XamlReader.ReadSubtree%2A>が呼び出されます。 内部クラスの目的は、ラップする、<xref:System.Xaml.XamlReader.Read%2A>と一般的なトラバーサル動作します。 トラバーサルが追跡することによって目的のサブツリー内にとどめる<xref:System.Xaml.XamlNodeType.StartMember> / <xref:System.Xaml.XamlNodeType.EndMember>ペアまたは<xref:System.Xaml.XamlNodeType.StartObject> / <xref:System.Xaml.XamlNodeType.EndObject>ペア。 正しく返す`false`の<xref:System.Xaml.XamlReader.Read%2A>と`true`の<xref:System.Xaml.XamlReader.IsEof%2A>リーダーがの場合、サブツリーの最後のエントリ ポイントで定義されています。 一般であるとする、<xref:System.Xaml.XamlReader>サブツリーのリーダーから呼び出す API が全体として同じ実装<xref:System.Xaml.XamlReader>トラバーサルの動作の境界を除く。  
  
 ただし、<xref:System.Xaml.XamlReader.ReadSubtree%2A>仮想です。 そのため、特定の<xref:System.Xaml.XamlReader>実装とは異なる動作を提供できます、<xref:System.Xaml.XamlReader>内部ラッパーの動作と<xref:System.Xaml.XamlReader>実装でもを無効にできますサブツリーのリーダーの機能を返すことによって<xref:System.NotImplementedException>またはその他例外。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlReader.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスで実装されている場合に、情報セットに XAML スキーマ コンテキスト情報を提供するオブジェクトを取得します。</summary>
        <value>情報セットに XAML スキーマ コンテキスト情報を提供するオブジェクト。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.SchemaContext" />
        <altmember cref="P:System.Xaml.XamlXmlReader.SchemaContext" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Skip();" />
      <MemberSignature Language="F#" Value="abstract member Skip : unit -&gt; unit&#xA;override this.Skip : unit -&gt; unit" Usage="xamlReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のノードをスキップして、リーダーの位置を次のノードに進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 1 回スキップ、 <xref:System.Xaml.XamlReader.Read%2A> 、既定により呼び出されます<xref:System.Xaml.XamlReader.Skip%2A>実装します。 通常は呼び出すことはありません<xref:System.Xaml.XamlReader.Skip%2A>と<xref:System.Xaml.XamlReader.Read%2A>シーケンス。  
  
 既定で<xref:System.Xaml.XamlReader.Skip%2A>実装に応じて異なる動作が実行<xref:System.Xaml.XamlReader.NodeType%2A>のリーダーの位置が現在存在します。 リーダーの位置が現在存在する場合、<xref:System.Xaml.XamlNodeType.StartMember>または<xref:System.Xaml.XamlNodeType.StartObject>、メンバーまたはオブジェクトはスキップします。 その他の<xref:System.Xaml.XamlReader.NodeType%2A>値、アクションは実行されません呼び出す以外<xref:System.Xaml.XamlReader.Read%2A>現在の位置から。  
  
 サブツリーのリーダーが呼び出せる<xref:System.Xaml.XamlReader.Skip%2A>動作の制限があります。 詳細については、「サブツリーのリーダー」のセクションを参照してください。 <xref:System.Xaml.XamlReader>、を参照してくださいまたは<xref:System.Xaml.XamlReader.ReadSubtree%2A>します。  
  
 ノード ツリーの動作の<xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType>は同等の XML に基づいて<xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>します。 に基づいて、<xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>動作の等価性<xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType>ノードと 1 つのエントリ ノードだけでなく、そのサブツリーをスキップします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Xaml.XamlReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Type" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Xaml.XamlType" Usage="System.Xaml.XamlReader.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスで実装されている場合に、現在のノードの <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
        <value>現在のノードの <see cref="T:System.Xaml.XamlType" />。現在のリーダーの位置がオブジェクト上にない場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サブツリーのリーダーが呼び出せる<xref:System.Xaml.XamlReader.Type%2A>動作の制限があります。 詳細については、「サブツリーのリーダー」のセクションを参照してください。 <xref:System.Xaml.XamlReader>、を参照してくださいまたは<xref:System.Xaml.XamlReader.ReadSubtree%2A>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Type" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Type" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Xaml.XamlReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスで実装された場合、現在のノードの値を取得します。</summary>
        <value>現在のノードの値。現在のリーダーの位置が <see cref="F:System.Xaml.XamlNodeType.Value" /> ノード型にない場合は <see langword="null" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Value" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Value" />
      </Docs>
    </Member>
  </Members>
</Type>