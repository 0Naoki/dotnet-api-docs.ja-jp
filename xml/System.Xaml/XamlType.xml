<Type Name="XamlType" FullName="System.Xaml.XamlType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3faba62692ba6139b45fa826eb8db90e5cf230d2" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65014727" /></Metadata><TypeSignature Language="C#" Value="public class XamlType : IEquatable&lt;System.Xaml.XamlType&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlType extends System.Object implements class System.IEquatable`1&lt;class System.Xaml.XamlType&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlType" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlType&#xA;Implements IEquatable(Of XamlType)" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlType : IEquatable&lt;System::Xaml::XamlType ^&gt;" />
  <TypeSignature Language="F#" Value="type XamlType = class&#xA;    interface IEquatable&lt;XamlType&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xaml.XamlType&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>.NET Framework XAML サービスで実装されている XAML システム全体の一部として XAML 型に関する情報を報告します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 多くの Api で、<xref:System.Xaml.XamlType>クラスについてレポートするという概念が XAML 仕様 [MS XAML] の特定のセクションに似ていますが、XAML 型に関する情報を提供します。  
  
 <xref:System.Xaml.XamlType> 広く使われて、.NET Framework XAML サービス API の XAML 型に関するレポート情報です。 <xref:System.Xaml.XamlType> インスタンスを使用するために、または XAML ノード ストリーム、または類似の XAML 表現からのメンバーへのアクセスには、XAML の型について知っておく必要がある情報を報告します。 方法に似ていますが、reporting<xref:System.Type>など、CLR 入力システムは、リフレクション クラスと共に<xref:System.Reflection.MemberInfo>CLR 型とその使用状況に関する情報を提供します。  
  
 XAML 型システムを拡張するから派生できます<xref:System.Xaml.XamlType>します。 実効上には、するも実装する必要あります、<xref:System.Xaml.Schema.XamlTypeInvoker>します。 <xref:System.Xaml.Schema.XamlTypeInvoker>呼び出しの動作の一部として指定することをバッキング型システムを使用する汎用化された XAML 型システムを使用します。 特定のカスタム<xref:System.Xaml.Schema.XamlTypeInvoker>、既定で使用される CLR 型システムの依存関係を削減する方法を提供します。<xref:System.Xaml.XamlType>動作します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Xaml.XamlType" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type underlyingType, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (underlyingType As Type, schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlType(Type ^ underlyingType, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : Type * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (underlyingType, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="underlyingType" Type="System.Type" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="underlyingType">作成する XAML 型の基になる CLR <see cref="T:System.Type" />。</param>
        <param name="schemaContext">XAML リーダーまたは XAML ライターの XAML スキーマ コンテキスト。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Xaml.XamlType" />クラス基になる CLR 型情報に基づいています。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">1 つ以上の<paramref name="underlyingType" />または<paramref name="schemaContext" />は<see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlType (string typeName, System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; typeArguments, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string typeName, class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; typeArguments, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (typeName As String, typeArguments As IList(Of XamlType), schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlType(System::String ^ typeName, System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ typeArguments, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : string * System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (typeName, typeArguments, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="typeName">作成する型の名前。</param>
        <param name="typeArguments">型引数を<see cref="T:System.Xaml.XamlType" />ジェネリック型を表します。 指定できます (および多くの場合は) <see langword="null" />、表される型がジェネリック型ではないことを示しますが。</param>
        <param name="schemaContext">XAML リーダーと XAML ライターの XAML スキーマ コンテキスト。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Xaml.XamlType" />クラス型の文字列名に基づいています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これは、保護されたコンス トラクターです。 現在のパブリック派生クラスが存在しない構築のこの特定のパスを使用します。 既存のコンシューマーとして<xref:System.Xaml.XamlType>、他のコンス トラクター シグネチャを使用する必要があります (<xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29>、 <xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29>、または<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>) 初期化するために、<xref:System.Xaml.XamlType>オブジェクト。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">1 つ以上の<paramref name="typeName" />または<paramref name="schemaContext" />は<see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlTypeInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type underlyingType, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlTypeInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (underlyingType As Type, schemaContext As XamlSchemaContext, invoker As XamlTypeInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlType(Type ^ underlyingType, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlTypeInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : Type * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlTypeInvoker -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (underlyingType, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="underlyingType" Type="System.Type" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlTypeInvoker" />
      </Parameters>
      <Docs>
        <param name="underlyingType">作成する XAML 型の基になる型。</param>
        <param name="schemaContext">XAML リーダーの XAML スキーマ コンテキスト。</param>
        <param name="invoker"><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />に対して実行時のリフレクションを処理する実装を呼び出す、<see cref="T:System.Xaml.XamlType" />します。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Xaml.XamlType" />クラスが基になる型情報に基づいて、<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />実装します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">1 つ以上の<paramref name="underlyingType" />または<paramref name="schemaContext" />は<see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (string unknownTypeNamespace, string unknownTypeName, System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; typeArguments, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string unknownTypeNamespace, string unknownTypeName, class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; typeArguments, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (unknownTypeNamespace As String, unknownTypeName As String, typeArguments As IList(Of XamlType), schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlType(System::String ^ unknownTypeNamespace, System::String ^ unknownTypeName, System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ typeArguments, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : string * string * System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (unknownTypeNamespace, unknownTypeName, typeArguments, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="unknownTypeNamespace" Type="System.String" />
        <Parameter Name="unknownTypeName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="unknownTypeNamespace">文字列としての型の XAML 名前空間。</param>
        <param name="unknownTypeName">指定された型の名前<paramref name="unknownTypeNamespace" />XAML 名前空間。</param>
        <param name="typeArguments">型引数を<see cref="T:System.Xaml.XamlType" />ジェネリック型を表します。 指定できます (および多くの場合は) <see langword="null" />、表される型がジェネリック型ではないことを示しますが。</param>
        <param name="schemaContext">XAML リーダーまたは XAML ライターの XAML スキーマ コンテキスト。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Xaml.XamlType" />クラス XAML 名前空間と型の文字列名に基づいています。 このコンス トラクターでは、専用の分析とバッキングを持たないこと、サポートする型システムと XAML スキーマ コンテキストで認識されている型の使用法の XAML ノード記録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基になる型システムにマップされる XAML の型が使用可能な「不明」の型に対してのみ、このコンス トラクターを使用します。 このコンス トラクターが、結果が得られない、<xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=nameWithType>は`true`します。 既定のリフレクター ロジックと基になる型を報告する代わりに、<xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=nameWithType>します。 ただし、この動作を変更のため、<xref:System.Xaml.XamlType.LookupIsUnknown%2A>をオーバーライドします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">1 つ以上の<paramref name="unknownTypeNamespace" />、 <paramref name="unknownTypeName" />、または<paramref name="schemaContext" />は<see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="AllowedContentTypes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; AllowedContentTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; AllowedContentTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.AllowedContentTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowedContentTypes As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ AllowedContentTypes { System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowedContentTypes : System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="System.Xaml.XamlType.AllowedContentTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>として使用できる型の読み取り専用コレクションを取得、<see cref="P:System.Xaml.XamlType.ContentProperty" />値<see cref="T:System.Xaml.XamlType" />します。</summary>
        <value>コンテンツの種類の読み取り専用コレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 割り当て可能な型 (たとえば、許可されているコンテンツの種類である基本データ型に割り当て可能な) 特定のコンテンツ タイプは考慮されませんの目的で複数の種類<xref:System.Xaml.XamlType.AllowedContentTypes%2A>します。  
  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ BaseType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、<see cref="T:System.Xaml.XamlType" />のこの XAML 型の直接の基本型。 この値の決定が基になる型に基づいて<see cref="T:System.Xaml.XamlType" />とスキーマ コンテキスト。</summary>
        <value><see cref="T:System.Xaml.XamlType" />のこの XAML 型の直接の基本型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupBaseType%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupBaseType%2A>この型にします。 既定では、<xref:System.Xaml.XamlType.BaseType%2A>内部の定数を表す、<xref:System.Object>場合<xref:System.Xaml.XamlType.UnderlyingType%2A>は`null`します。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupBaseType%2A> 仮想、およびそのため、オーバーライドされることができます。 上書きされる可能性があります (悪意のある目的かどうかや、それ以外の場合) を基になる CLR 型の型システム情報と予想される方法で配置されなくされるように報告される XAML 型に関する型情報を変更します。 割り当て操作とアクセスのセキュリティ クリティカルなチェックには、代わりに、基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAssignTo">
      <MemberSignature Language="C#" Value="public virtual bool CanAssignTo (System.Xaml.XamlType xamlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanAssignTo(class System.Xaml.XamlType xamlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanAssignTo(System::Xaml::XamlType ^ xamlType);" />
      <MemberSignature Language="F#" Value="abstract member CanAssignTo : System.Xaml.XamlType -&gt; bool&#xA;override this.CanAssignTo : System.Xaml.XamlType -&gt; bool" Usage="xamlType.CanAssignTo xamlType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType">現在に対して確認する型<see cref="T:System.Xaml.XamlType" />します。</param>
        <summary>示す値を返しますこれのインスタンスかどうか<see cref="T:System.Xaml.XamlType" />指定した<see cref="T:System.Xaml.XamlType" />割り当て可能な型の一覧にします。</summary>
        <returns><see langword="true" /> 場合<paramref name="xamlType" />が割り当て可能な型のリスト。 それ以外の場合、<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 割り当て可能な型では、参照型のすべての機能はありませんが、割り当てのために使用できます。 たとえば、プロパティの値の型の一致の割り当てを使用できます。 XAML で割り当て可能な型の概念は、CLR 型システムへのキャストの概念に似ています。 たとえば、CLR 型システムでは、すべての型が、<xref:System.Object>割り当て可能な型のリストにします。  
  
 場合、2 つのいずれかの<xref:System.Xaml.XamlType>使用されるインスタンスの比較がある<xref:System.Xaml.XamlType.IsUnknown%2A>と等しい`true`、このメソッドは、特殊な不明なモードを返す`true`場合、2 つ<xref:System.Xaml.XamlType>インスタンスは同等です。  
  
 既定の実装は、CLR を使用して<xref:System.Type>から<xref:System.Xaml.XamlType.UnderlyingType%2A>この<xref:System.Xaml.XamlType>と、入力<xref:System.Xaml.XamlType>、および呼び出し<xref:System.Type.IsAssignableFrom%2A>します。 割り当て可能な型のさまざまな決定をする場合は、このメソッドをオーバーライドします。  
  
 Null を渡す`xamlType`、例外をスローしないと、常に返します`false`します。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.CanAssignTo%2A> 仮想、およびそのため、オーバーライドされることができます。 上書きされる可能性があります (悪意のある目的かどうかや、それ以外の場合) を基になる CLR 型の型キャストの動作と予想される方法で配置されなくように XAML 型の割り当てを変更します。 割り当て操作とアクセスのセキュリティ クリティカルなチェックには、代わりに、基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructionRequiresArguments">
      <MemberSignature Language="C#" Value="public bool ConstructionRequiresArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConstructionRequiresArguments" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ConstructionRequiresArguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConstructionRequiresArguments As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConstructionRequiresArguments { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ConstructionRequiresArguments : bool" Usage="System.Xaml.XamlType.ConstructionRequiresArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />引数を指定する必要があります (通じたジェネリック制約<see langword="x:TypeArguments" />、初期化テキスト、またはその他の XAML 手法) 型の有効なインスタンスを構築します。</summary>
        <value><see langword="true" /> インスタンスの作成には、引数値が必要な場合それ以外の場合、<see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentProperty">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember ContentProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember ContentProperty" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ContentProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentProperty As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlMember ^ ContentProperty { System::Xaml::XamlMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentProperty : System.Xaml.XamlMember" Usage="System.Xaml.XamlType.ContentProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、<see cref="T:System.Xaml.XamlMember" />コンテンツのプロパティのこの情報<see cref="T:System.Xaml.XamlType" />します。</summary>
        <value><see cref="T:System.Xaml.XamlMember" /> このコンテンツのプロパティの情報<see cref="T:System.Xaml.XamlType" />します。 あります<see langword="null" />コンテンツ プロパティが存在しない場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに適用することで、型の XAML コンテンツ プロパティを指定できますバインドを使用して、または CLR 型システムのバックアップ、<xref:System.Windows.Markup.ContentPropertyAttribute>型定義にします。  
  
 このプロパティに準拠し、 `[content property]` [MS XAML] の仕様の情報項目。  
  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupContentProperty%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupContentProperty%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentWrappers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; ContentWrappers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; ContentWrappers" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ContentWrappers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentWrappers As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ ContentWrappers { System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentWrappers : System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="System.Xaml.XamlType.ContentWrappers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>厳密に型指定された文字列など、厳密な型の一致ではない場合は、コンテンツのプロパティのコンテンツをラップする型を取得<see langword="Collection&lt;T&gt;" />します。</summary>
        <value>可能なコンテンツ ラッパー型の読み取り専用コレクションそれ以外の場合、<see langword="null" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、アカウントの制限の種類が一致するラッパーがない場合は、`null`します。  
  
 型として評価される<xref:System.Xaml.XamlType.CanAssignTo%2A>特定のコンテンツ タイプはいないと見なされますの目的で複数の種類<xref:System.Xaml.XamlType.ContentWrappers%2A>します。  
  
 CLR バインドで<xref:System.Xaml>と<xref:System.Xaml.XamlType>、XAML のコンテンツ ラッパー型と型に指定できます、<xref:System.Windows.Markup.ContentWrapperAttribute>します。  
  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupContentWrappers%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupContentWrappers%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeferringLoader">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; DeferringLoader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; DeferringLoader" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.DeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeferringLoader As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ DeferringLoader { System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeferringLoader : System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;" Usage="System.Xaml.XamlType.DeferringLoader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得します、<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />を表す、遅延読み込みのこの型の変換動作。</summary>
        <value><see cref="T:System.Xaml.Schema.XamlValueConverter`1" />で<see cref="T:System.Xaml.XamlDeferringLoader" />制約をこの種類の遅延読み込み動作を表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 WPF の XAML テンプレートの動作は、遅延読み込み動作の例を示します。  
  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupDeferringLoader%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupDeferringLoader%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のオブジェクトが別のオブジェクトと等しいかどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xamlType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">このオブジェクトと比較するオブジェクト。</param>
        <summary>現在のオブジェクトが別のオブジェクトと等しいかどうかを示します。</summary>
        <returns>現在のオブジェクトが <paramref name="obj" /> パラメーターと等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xaml.XamlType other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xaml.XamlType other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Xaml::XamlType ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Xaml.XamlType -&gt; bool" Usage="xamlType.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="other">このオブジェクトと比較するオブジェクト。</param>
        <summary>現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを示します。</summary>
        <returns>現在のオブジェクトが <paramref name="other" /> パラメーターと等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAliasedProperty">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetAliasedProperty (System.Xaml.XamlDirective directive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetAliasedProperty(class System.Xaml.XamlDirective directive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAliasedProperty (directive As XamlDirective) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlMember ^ GetAliasedProperty(System::Xaml::XamlDirective ^ directive);" />
      <MemberSignature Language="F#" Value="member this.GetAliasedProperty : System.Xaml.XamlDirective -&gt; System.Xaml.XamlMember" Usage="xamlType.GetAliasedProperty directive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directive" Type="System.Xaml.XamlDirective" />
      </Parameters>
      <Docs>
        <param name="directive">エイリアス化されたメンバーを検索対象となるディレクティブ。</param>
        <summary>この XAML ディレクティブにエイリアスである XAML メンバーを返します<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>エイリアスのメンバー場合が見つかりました。それ以外の場合、<see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このメソッドの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupAliasedProperty%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupAliasedProperty%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAttachableMembers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt; GetAllAttachableMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.Xaml.XamlMember&gt; GetAllAttachableMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAllAttachableMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllAttachableMembers () As ICollection(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::Xaml::XamlMember ^&gt; ^ GetAllAttachableMembers();" />
      <MemberSignature Language="F#" Value="member this.GetAllAttachableMembers : unit -&gt; System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.GetAllAttachableMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>これによって公開されているすべてのアタッチ可能なプロパティを含むコレクションを返します<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>0 個以上を含むコレクション<see cref="T:System.Xaml.XamlMember" />値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 各<xref:System.Xaml.XamlMember>、返されたコレクションでは、概念をサポートする値を含める必要があります<xref:System.Xaml.XamlMember>はアタッチ可能なメンバーです。 たとえば、メンバーを返す必要があります`true`の<xref:System.Xaml.XamlMember.IsAttachable%2A>の型を<xref:System.Xaml.XamlMember.TargetType%2A>など。  
  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このメソッドの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllMembers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt; GetAllMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.Xaml.XamlMember&gt; GetAllMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAllMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllMembers () As ICollection(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::Xaml::XamlMember ^&gt; ^ GetAllMembers();" />
      <MemberSignature Language="F#" Value="member this.GetAllMembers : unit -&gt; System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.GetAllMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>これによって公開されているすべてのメンバーを含むコレクションを返します<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>0 個以上を含むコレクション<see cref="T:System.Xaml.XamlMember" />値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupAllMembers%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachableMember">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetAttachableMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetAttachableMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAttachableMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttachableMember (name As String) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlMember ^ GetAttachableMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetAttachableMember : string -&gt; System.Xaml.XamlMember" Usage="xamlType.GetAttachableMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><c>ownerTypeName.MemberName</c> フォームで取得するアタッチ可能メンバーの名前。</param>
        <summary>この <see cref="T:System.Xaml.XamlType" /> の特定の名前の付いたアタッチ可能メンバーを表す <see cref="T:System.Xaml.XamlMember" /> を返します。</summary>
        <returns>要求されたアタッチ可能メンバーの <see cref="T:System.Xaml.XamlMember" /> オブジェクト。その名前のアタッチ可能メンバーが存在しない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupAttachableMember%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupAttachableMember%2A> 仮想、およびそのため、オーバーライドされることができます。 上書きされる可能性があります (悪意のある目的かどうかまたはそれ以外の場合) と予想される方法で不要になった位置が揃うように報告される XAML 型のメンバーを変更する、 <xref:System.ComponentModel.TypeDescriptor> `Get*`については、基になる CLR 型。 メンバーのレポートのセキュリティ クリティカルなチェックには、代わりに基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xamlType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このオブジェクトのハッシュ コードを返します。</summary>
        <returns>整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlMember ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetMember : string -&gt; System.Xaml.XamlMember" Usage="xamlType.GetMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">(文字列) として取得するメンバーの名前。</param>
        <summary>返します、<see cref="T:System.Xaml.XamlMember" />これからメンバーをという名前の特定の<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns><see cref="T:System.Xaml.XamlMember" />そのようなメンバーでした。 それ以外の場合は、メンバーの情報<see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値は、`name`修飾するが必要です。 アタッチされたメンバーを示す型修飾名を送信する必要があります<xref:System.Xaml.XamlType.GetAttachableMember%2A>代わりにします。 プレフィックス付きのメンバー名は使用できません。プレフィックスが使用状況と、XAML 型システムは、このような使用状況のコンテキストとプレフィックスのマッピング方法を知ることはできません。  
  
 このメソッドの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupMember%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupMember%2A> 仮想、およびそのため、オーバーライドされることができます。 上書きされる可能性があります (悪意のある目的かどうかまたはそれ以外の場合) と予想される方法で不要になった位置が揃うように報告される XAML 型のメンバーを変更する、 <xref:System.ComponentModel.TypeDescriptor> `Get*`については、基になる CLR 型。 メンバーのレポートのセキュリティ クリティカルなチェックには、代わりに基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPositionalParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; GetPositionalParameters (int parameterCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; GetPositionalParameters(int32 parameterCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionalParameters (parameterCount As Integer) As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ GetPositionalParameters(int parameterCount);" />
      <MemberSignature Language="F#" Value="member this.GetPositionalParameters : int -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.GetPositionalParameters parameterCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterCount">情報を表示する特定の構文またはコンス トラクター モードの個数 (アリティ)。</param>
        <summary>マークアップ拡張機能の種類、この特定のマークアップ拡張機能の使用でサポートされている位置指定パラメーターの型を返します<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>一覧<see cref="T:System.Xaml.XamlType" />、値を各<see cref="T:System.Xaml.XamlType" />は構文内でその位置の型です。 マークアップ拡張機能のマークアップ入力を指定するときに、同じ順序で種類を指定する必要があります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この API は、関連するは、この場合のみ<xref:System.Xaml.XamlType>マークアップ拡張機能を表します (<xref:System.Xaml.XamlType.IsMarkupExtension%2A>は`true`)。  
  
 入力`parameterCount`は特定の位置指定パラメーターの型を要求するはありません。 マークアップ拡張機能の使用のアリティを指定することがあります。 マークアップ拡張機能の使用は多くの場合、複数の「署名」を持つし、位置指定パラメーターの異なるパラメーター アリティ (数) を区別するために使用します。 ただし、arities の重複を許可し、差別化要因の位置指定パラメーターの型を使用するスキーマ コンテキストを構成することができます。 詳細については、「 <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A> 」を参照してください。 特定のアリティ (数) の場合、パラメーターの位置と種類は異なります。 特定のアリティのマークアップ拡張機能の使用の位置指定の型を取得するには、まず呼び出して<xref:System.Xaml.XamlType.GetPositionalParameters%2A>アリティ数を指定します。 返されるコレクションからその位置にある項目を取得します。  
  
 このメソッドの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupPositionalParameters%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXamlNamespaces">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetXamlNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetXamlNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetXamlNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetXamlNamespaces () As IList(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::String ^&gt; ^ GetXamlNamespaces();" />
      <MemberSignature Language="F#" Value="abstract member GetXamlNamespaces : unit -&gt; System.Collections.Generic.IList&lt;string&gt;&#xA;override this.GetXamlNamespaces : unit -&gt; System.Collections.Generic.IList&lt;string&gt;" Usage="xamlType.GetXamlNamespaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>XAML 名前空間に含まれている型の文字列識別子の一覧を返します。</summary>
        <returns>XAML 名前空間の URI 識別子の各文字列が、文字列値の一覧。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般的な XAML 名前空間識別子は、URI 形式の文字列です。  
  
 既定の実装の順序で、次を確認します。 構築で指定されている XAML 名前空間 (<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>署名のみ); とスキーマ コンテキストから使用できる名前空間。 これらはそれぞれ場合、 `null`、1 つの空の文字列を含む新しいリストが生成されます。 参照方法を変更するには、このメソッドをオーバーライドすることができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoker">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlTypeInvoker Invoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlTypeInvoker Invoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.Invoker" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Invoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlTypeInvoker ^ Invoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Invoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.XamlType.Invoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />これに関連付けられている実装<see cref="T:System.Xaml.XamlType" />します。</summary>
        <value><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />これに関連付けられている実装<see cref="T:System.Xaml.XamlType" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定内部 CLR リフレクション技法を使用しないかどうか、<xref:System.Xaml.XamlType>を呼び出すと、<xref:System.Xaml.XamlType.Invoker%2A>いずれかを呼び出すことができます<xref:System.Xaml.XamlType.LookupInvoker%2A>またはそのメソッドの特定のオーバーライド。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupInvoker%2A>この型にします。  
  
 場合、<xref:System.Xaml.XamlType.LookupInvoker%2A>のオーバーライド`null`、既定の実装を返す場合、または`null`がないのため<xref:System.Xaml.XamlType.UnderlyingType%2A>この<xref:System.Xaml.XamlType>、し<xref:System.Xaml.XamlType.Invoker%2A>返します<xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAmbient">
      <MemberSignature Language="C#" Value="public bool IsAmbient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAmbient" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsAmbient" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAmbient As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAmbient { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAmbient : bool" Usage="System.Xaml.XamlType.IsAmbient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />が XAML 定義によってアンビエント型を表します。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />アンビエント型を表します。 そうしないと、<see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupIsAmbient%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupIsAmbient%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Xaml.XamlType.IsArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />配列を表します。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />配列を表します。 そうしないと、<see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupCollectionKind%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupCollectionKind%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCollection">
      <MemberSignature Language="C#" Value="public bool IsCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCollection" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCollection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCollection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCollection : bool" Usage="System.Xaml.XamlType.IsCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />コレクションを表します。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />コレクションを表します。 そうしないと、<see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupCollectionKind%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupCollectionKind%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructible">
      <MemberSignature Language="C#" Value="public bool IsConstructible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructible" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsConstructible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsConstructible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsConstructible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructible : bool" Usage="System.Xaml.XamlType.IsConstructible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />が XAML 定義によって構築可能な型を表します。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />構築可能な型を表します。 そうしないと、<see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティに準拠し、 `[is default constructible]` [MS XAML] の仕様の情報項目。  
  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupIsConstructible%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupIsConstructible%2A>この型にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlType.ConstructionRequiresArguments" />
      </Docs>
    </Member>
    <Member MemberName="IsDictionary">
      <MemberSignature Language="C#" Value="public bool IsDictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDictionary" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsDictionary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDictionary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDictionary { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDictionary : bool" Usage="System.Xaml.XamlType.IsDictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />が XAML 定義によって、ディクショナリを表します。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />ディクショナリを表します。 そうしないと、<see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティに準拠し、 `[is dictionary]` [MS XAML] の仕様の情報項目。  
  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupCollectionKind%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupCollectionKind%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGeneric">
      <MemberSignature Language="C#" Value="public bool IsGeneric { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGeneric" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsGeneric" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsGeneric As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsGeneric { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGeneric : bool" Usage="System.Xaml.XamlType.IsGeneric" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />ジェネリック型を表します。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />ジェネリック型を表します。 そうしないと、<see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは null 値をチェックするヘルパー プロパティ<xref:System.Xaml.XamlType.TypeArguments%2A>します。 特定のない`Lookup`メソッドに関連する<xref:System.Xaml.XamlType.IsGeneric%2A>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMarkupExtension">
      <MemberSignature Language="C#" Value="public bool IsMarkupExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarkupExtension" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsMarkupExtension" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarkupExtension As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarkupExtension { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarkupExtension : bool" Usage="System.Xaml.XamlType.IsMarkupExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />マークアップ拡張機能を表します。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />マークアップ拡張機能を表します。 そうしないと、<see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XAML 仕様には、この型に割り当てられる必要があります`x:MarkupExtension`を返すために`true`の<xref:System.Xaml.XamlType.IsMarkupExtension%2A>します。  
  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameScope">
      <MemberSignature Language="C#" Value="public bool IsNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameScope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNameScope" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameScope As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameScope { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNameScope : bool" Usage="System.Xaml.XamlType.IsNameScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />が XAML 定義によって XAML 名前スコープを表します。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />XAML 名前スコープを表します。 そうしないと、<see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XAML 名前スコープに使用されるプロパティの名前の一意性を強制する`x:Name`  / `[name property]`します。 場合<xref:System.Xaml.XamlType.IsNameScope%2A>は`true`一意性を適用するためのいくつかのメカニズムが存在し、XAML 名前スコープを所有しているこの型の観点から評価する必要があります。 XAML 名前スコープは、別の XAML 名前スコープ所有型が検出されるまで、型のコンテンツを拡張します。  
  
 このプロパティに準拠し、 `[is name scope]` [MS XAML] の仕様の情報項目。  
  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupIsNameScope%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameValid">
      <MemberSignature Language="C#" Value="public bool IsNameValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameValid" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNameValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNameValid : bool" Usage="System.Xaml.XamlType.IsNameValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />が有効なを使用して初期化される<see langword="xamlName" />として文字列、<see cref="P:System.Xaml.XamlType.Name" />します。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />が有効なを使用して初期化される<see langword="xamlName" />文字列。 それ以外の場合、<see langword="false" />します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool" Usage="System.Xaml.XamlType.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />が XAML 定義によって null 許容型を表します。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />null 許容型を表します。 そうしないと、<see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティに準拠し、 `[is nullable]` [MS XAML] の仕様の情報項目。  
  
 既定内部 CLR リフレクション技法を使用していないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupIsNullable%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Xaml.XamlType.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />関連する型システムでパブリック型を表します。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />パブリック型を表す、それ以外の<see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupIsPublic%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupIsPublic%2A> 仮想、およびそのため、オーバーライドされることができます。 上書きされる可能性があります (悪意のある目的かどうかや、それ以外の場合)、基になる CLR 型の型システムとアクセスの情報と予想される方法で配置されなくように、報告されたアクセスについては、XAML 型を変更します。 割り当て操作とアクセスのセキュリティ クリティカルなチェックには、代わりに、基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknown">
      <MemberSignature Language="C#" Value="public bool IsUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnknown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnknown : bool" Usage="System.Xaml.XamlType.IsUnknown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />基になる型システムで解決できない型を表します。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />が解決できない型を表します。 そうしないと、<see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupIsUnknown%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。  
  
 関連する読み込みパスの<xref:System.Xaml.XamlObjectWriter>、<xref:System.Xaml.XamlType>を持つ`true`の<xref:System.Xaml.XamlType.IsUnknown%2A>オブジェクト グラフに書き込まれることはできません。 既定の実装  <xref:System.Xaml> 、<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=nameWithType>呼び出しがスローされます、<xref:System.Xaml.XamlObjectWriterException>ときに、関連する<xref:System.Xaml.XamlType>レポート`true`の<xref:System.Xaml.XamlType.IsUnknown%2A>します。 渡さないでください、<xref:System.Xaml.XamlType>を持つ<xref:System.Xaml.XamlType.IsUnknown%2A>として`true`から例外を処理する準備をする場合を除いて、 <xref:System.Xaml.XamlObjectWriter>、またはその他の方法を調整するが、<xref:System.Xaml.XamlObjectWriter>動作や、オブジェクトを作成する前に、XAML ノード ストリームグラフ。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUsableDuringInitialization">
      <MemberSignature Language="C#" Value="public bool IsUsableDuringInitialization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUsableDuringInitialization" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsUsableDuringInitialization" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUsableDuringInitialization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUsableDuringInitialization { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUsableDuringInitialization : bool" Usage="System.Xaml.XamlType.IsUsableDuringInitialization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />XAML の初期化中に、トップダウンをビルドします。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />XAML の初期化中に上から下へ、それ以外のビルドは<see langword="false" />します。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上から下へとは、オブジェクト グラフを作成するときに、XAML プロセッサの動作を近似するメタファです。 トップダウンを構築するには、親にアタッチされている型がインスタンス化。 し、そのプロパティが設定します。 トップダウンの構築は、プロパティ変更ハンドラーを複数回呼び出すことを回避できます。 このような処理はオブジェクト グラフに波及し、そのため、複数のハンドラーの呼び出しを排除し、オブジェクト グラフの起動時のパフォーマンスを最適化を提供します。  
  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A>この型にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
        <altmember cref="P:System.Windows.FrameworkElement.IsInitialized" />
      </Docs>
    </Member>
    <Member MemberName="IsWhitespaceSignificantCollection">
      <MemberSignature Language="C#" Value="public bool IsWhitespaceSignificantCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWhitespaceSignificantCollection" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWhitespaceSignificantCollection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWhitespaceSignificantCollection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWhitespaceSignificantCollection : bool" Usage="System.Xaml.XamlType.IsWhitespaceSignificantCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />XML 定義によって空白が有意なコレクションを表します。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />空白が有意なコレクションを表します。 そうしないと、<see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsXData">
      <MemberSignature Language="C#" Value="public bool IsXData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsXData" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsXData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsXData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsXData { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsXData : bool" Usage="System.Xaml.XamlType.IsXData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />XML が表現<see langword="XDATA" />が XAML 定義によって。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />表します<see langword="XDATA" />、それ以外の<see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティに準拠し、 `[is xdata]` [MS XAML] の仕様の情報項目。  
  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupIsXData%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupIsXData%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType ItemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType ItemType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ItemType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ItemType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ ItemType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ItemType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.ItemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>型情報が提供する値を取得、<see langword="Items" />プロパティのこの<see cref="T:System.Xaml.XamlType" />します。</summary>
        <value>A<see cref="T:System.Xaml.XamlType" />コレクション内の項目の型のオブジェクトをそれ以外の場合、<see langword="null" />この場合、<see cref="T:System.Xaml.XamlType" />コレクションを表していません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは関連するは、この場合のみ<xref:System.Xaml.XamlType>コレクションを表します (<xref:System.Xaml.XamlType.IsCollection%2A>は`true`)。 `Items`プロパティは、どのようなプロパティは、その種類のコレクションまたは配列で項目を保持します。  
  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupItemType%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupItemType%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType KeyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType KeyType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.KeyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ KeyType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.KeyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このキーのプロパティの型情報を提供する値を取得<see cref="T:System.Xaml.XamlType" />場合、<see cref="T:System.Xaml.XamlType" />ディクショナリを表します。</summary>
        <value>A<see cref="T:System.Xaml.XamlType" />のディクショナリの使用、それ以外の場合、キーの型のオブジェクトを<see langword="null" />この場合、<see cref="T:System.Xaml.XamlType" />ディクショナリを表していません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは関連するは、この場合のみ<xref:System.Xaml.XamlType>ディクショナリを表します (<xref:System.Xaml.XamlType.IsDictionary%2A>は`true`)。  
  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupKeyType%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupKeyType%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAliasedProperty">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupAliasedProperty (System.Xaml.XamlDirective directive);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupAliasedProperty(class System.Xaml.XamlDirective directive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAliasedProperty (directive As XamlDirective) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupAliasedProperty(System::Xaml::XamlDirective ^ directive);" />
      <MemberSignature Language="F#" Value="abstract member LookupAliasedProperty : System.Xaml.XamlDirective -&gt; System.Xaml.XamlMember&#xA;override this.LookupAliasedProperty : System.Xaml.XamlDirective -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupAliasedProperty directive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directive" Type="System.Xaml.XamlDirective" />
      </Parameters>
      <Docs>
        <param name="directive">エイリアス化されたメンバーを検索対象となるディレクティブ。</param>
        <summary>この XAML ディレクティブにエイリアスである XAML メンバーを返します<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>エイリアスのメンバー場合が見つかりました。それ以外の場合、<see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが<xref:System.Xaml.XamlType.GetAliasedProperty%2A>します。  
  
 既定の実装は、次の XAML ディレクティブの結果を返すことができます: `Key`;`Name`;`Uid`; と`xml:lang`します。 基になるリフレクションに依存し、返す可能性がありますもこれらの値`null`エイリアス化されたプロパティが見つからない場合。  
  
 既定の内部の CLR リフレクションには依存しないとメタデータやその他の手法を使用して、XAML 型システムの情報または型のスキーマ情報を報告する場合は、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xaml.XamlDirective" />
        <altmember cref="T:System.Xaml.XamlLanguage" />
      </Docs>
    </Member>
    <Member MemberName="LookupAllAttachableMembers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt; LookupAllAttachableMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlMember&gt; LookupAllAttachableMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllAttachableMembers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAllAttachableMembers () As IEnumerable(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlMember ^&gt; ^ LookupAllAttachableMembers();" />
      <MemberSignature Language="F#" Value="abstract member LookupAllAttachableMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;&#xA;override this.LookupAllAttachableMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.LookupAllAttachableMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>これによって公開されているすべてのアタッチ可能なプロパティを含む列挙可能なセットを返します<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>0 個以上を含む列挙可能なセットを<see cref="T:System.Xaml.XamlMember" />値。 それ以外の場合、<see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが<xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>します。  
  
 <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A> 、ジェネリック コレクションを返しますこれ`Lookup`メソッドがジェネリックの列挙可能なセットを返します。  
  
 既定の実装では、内部の CLR リフレクションを使用します。 ときに<xref:System.Xaml.XamlType.UnderlyingType%2A>は`null`、既定の実装を使用できる<xref:System.Xaml.XamlType.BaseType%2A>入手可能になった場合は、します。 この動作を呼び出す<xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>再帰的に有効な基本型を返す検索しようとする`null`有効な基本データ型が存在しない場合。  
  
 既定の内部の CLR リフレクションには依存しないとメタデータやその他の手法を使用して XAML 型システム情報または型のスキーマ情報を報告する場合は、このメソッドをオーバーライドします。 Null の戻り値は、システムまたはリフレクションの型のサポートの欠如のための情報を決定できない場合に用に予約する必要があります。 空を代わりに返す必要がありますがある場合、型が無効ですとリフレクションまたはその他の手法、使用可能な型には、アタッチ可能なメンバーはありません、<xref:System.Collections.Generic.IEnumerable%601>を設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAllMembers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt; LookupAllMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlMember&gt; LookupAllMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllMembers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAllMembers () As IEnumerable(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlMember ^&gt; ^ LookupAllMembers();" />
      <MemberSignature Language="F#" Value="abstract member LookupAllMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;&#xA;override this.LookupAllMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.LookupAllMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>これによって公開されているすべてのメンバーを含む列挙可能なセットを返します<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>0 個以上を含む列挙可能なセットを<see cref="T:System.Xaml.XamlMember" />値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが<xref:System.Xaml.XamlType.GetAllMembers%2A>します。  
  
 <xref:System.Xaml.XamlType.GetAllMembers%2A> 、ジェネリック コレクションを返しますこれ`Lookup`メソッドがジェネリックの列挙可能なセットを返します。  
  
 既定の実装では、内部の CLR リフレクションを使用します。 場合、<xref:System.Xaml.XamlType.UnderlyingType%2A>は`null`、既定の実装を使用できます<xref:System.Xaml.XamlType.BaseType%2A>入手可能になった場合は、します。 この動作を呼び出す<xref:System.Xaml.XamlType.LookupAllMembers%2A>再帰的に有効な基本型を返す検索しようとする`null`有効な基本データ型が存在しない場合。  
  
 既定の内部の CLR リフレクションには依存しないとメタデータやその他の手法を使用して XAML 型システム情報または型のスキーマ情報を報告する場合は、このメソッドをオーバーライドします。 Null の戻り値は、システムまたはリフレクションの型のサポートの欠如のための情報を決定できない場合に用に予約する必要があります。 リフレクションまたはその他の手法が使用可能な型が有効な場合型がメンバーを持たない場合は、空を代わりに返す必要があります<xref:System.Collections.Generic.IEnumerable%601>を設定します。  
  
 値を返す<xref:System.Xaml.XamlType.LookupAllMembers%2A>と<xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>相互に排他的である必要があります。 2 つの異なるとしてそのメンバーを報告する場合は、バッキング型システムのプロパティが標準的なインスタンスの使用状況とアタッチの使用をサポートできるような状況がある場合は、<xref:System.Xaml.XamlMember>内の別のアタッチ可能なリストに表示される値の 1 つの値、標準のメンバーの一覧です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAllowedContentTypes">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupAllowedContentTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupAllowedContentTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllowedContentTypes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAllowedContentTypes () As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ LookupAllowedContentTypes();" />
      <MemberSignature Language="F#" Value="abstract member LookupAllowedContentTypes : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;&#xA;override this.LookupAllowedContentTypes : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.LookupAllowedContentTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>として使用できる型の一覧を返します、<see cref="P:System.Xaml.XamlType.ContentProperty" />値<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>コンテンツの種類の一覧。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが<xref:System.Xaml.XamlType.AllowedContentTypes%2A>します。  
  
 型として評価される<xref:System.Xaml.XamlType.CanAssignTo%2A>特定のコンテンツ タイプはいないと見なされますの目的で複数の種類<xref:System.Xaml.XamlType.AllowedContentTypes%2A>します。  
  
 既定の実装の他のプロパティを使用できる<xref:System.Xaml.XamlType>(<xref:System.Xaml.XamlType.ContentWrappers%2A>、 <xref:System.Xaml.XamlType.ContentProperty%2A>、または<xref:System.Xaml.XamlType.ItemType%2A>) 結果を取得します。 `Lookup`オーバーライドの前のプロパティ リストは、この判断で呼び出すこともできます。  
  
 既定の内部の CLR リフレクションには依存しないとメタデータやその他の手法を使用して XAML 型システム情報または型のスキーマ情報を報告する場合は、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAttachableMember">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupAttachableMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupAttachableMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAttachableMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAttachableMember (name As String) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupAttachableMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member LookupAttachableMember : string -&gt; System.Xaml.XamlMember&#xA;override this.LookupAttachableMember : string -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupAttachableMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><c>ownerTypeName.MemberName</c> フォームで取得するアタッチ可能メンバーの名前。</param>
        <summary>この <see cref="T:System.Xaml.XamlType" /> から、特定の名前の付いたアタッチ可能なものを表す <see cref="T:System.Xaml.XamlMember" /> を返します。</summary>
        <returns>要求されたアタッチ可能メンバーの <see cref="T:System.Xaml.XamlMember" /> オブジェクト。その名前のアタッチ可能メンバーが存在しない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが<xref:System.Xaml.XamlType.GetAttachableMember%2A>します。  
  
 既定の実装では、内部の CLR リフレクションを使用します。 ときに<xref:System.Xaml.XamlType.UnderlyingType%2A>は`null`、既定の実装を使用できる<xref:System.Xaml.XamlType.BaseType%2A>入手可能になった場合は、します。 この動作を呼び出す<xref:System.Xaml.XamlType.LookupAttachableMember%2A>再帰的に有効な基本型を返す検索しようとする`null`有効な基本データ型が存在しない場合。  
  
 既定の内部の CLR リフレクションには依存しないとメタデータやその他の手法を使用して XAML 型システム情報または型のスキーマ情報を報告する場合は、このメソッドをオーバーライドします。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupAttachableMember%2A> 仮想、およびそのため、オーバーライドされることができます。 上書きされる可能性があります (悪意のある目的かどうかまたはそれ以外の場合) と予想される方法で不要になった位置が揃うように報告される XAML 型のメンバーを変更する、 <xref:System.ComponentModel.TypeDescriptor> `Get*`については、基になる CLR 型。 メンバーのレポートのセキュリティ クリティカルなチェックには、代わりに基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupBaseType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupBaseType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupBaseType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupBaseType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupBaseType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupBaseType();" />
      <MemberSignature Language="F#" Value="abstract member LookupBaseType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupBaseType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupBaseType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します、<see cref="T:System.Xaml.XamlType" />のこの XAML 型の直接の基本型。 この値の決定が基になる型に基づいて<see cref="T:System.Xaml.XamlType" />とスキーマ コンテキスト。</summary>
        <returns><see cref="T:System.Xaml.XamlType" />のこの XAML 型の直接の基本型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが<xref:System.Xaml.XamlType.BaseType%2A>します。  
  
 既定の実装を表す内部の定数を返す可能性があります、<xref:System.Object>場合<xref:System.Xaml.XamlType.UnderlyingType%2A>は`null`します。  
  
 既定の内部の CLR リフレクションには依存しないとメタデータやその他の手法を使用して XAML 型システム情報または型のスキーマ情報を報告する場合は、このメソッドをオーバーライドします。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupBaseType%2A> 仮想、およびそのため、オーバーライドされることができます。 上書きされる可能性があります (悪意のある目的かどうかや、それ以外の場合) を基になる CLR 型の型システム情報と予想される方法で配置されなくされるように報告される XAML 型に関する型情報を変更します。 割り当て操作とアクセスのセキュリティ クリティカルなチェックには、代わりに、基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCollectionKind">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlCollectionKind LookupCollectionKind ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Xaml.Schema.XamlCollectionKind LookupCollectionKind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupCollectionKind" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupCollectionKind () As XamlCollectionKind" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlCollectionKind LookupCollectionKind();" />
      <MemberSignature Language="F#" Value="abstract member LookupCollectionKind : unit -&gt; System.Xaml.Schema.XamlCollectionKind&#xA;override this.LookupCollectionKind : unit -&gt; System.Xaml.Schema.XamlCollectionKind" Usage="xamlType.LookupCollectionKind " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlCollectionKind</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>値を返します、<see cref="T:System.Xaml.Schema.XamlCollectionKind" />どの特定のコレクションを宣言する列挙体のように入力<see cref="T:System.Xaml.XamlType" />を使用します。</summary>
        <returns>値、<see cref="T:System.Xaml.Schema.XamlCollectionKind" />列挙体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは内部のプライベート メソッド (パブリック`CollectionKind`または`GetCollectionKind`に API が存在する<xref:System.Xaml.XamlType>)。  
  
 既定の実装では、内部の CLR リフレクションを使用します。 場合、<xref:System.Xaml.XamlType.UnderlyingType%2A>は`null`、既定の実装を使用できます<xref:System.Xaml.XamlType.BaseType%2A>入手可能になった場合は、します。 この動作を間接的に呼び出す<xref:System.Xaml.XamlType.LookupCollectionKind%2A>再帰的に有効な基本型を検索しようとする返します<xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType>有効な基本データ型が存在しない場合。 一般に、既定の実装が検索しよう、`Add`リフレクションによって基になる型のメソッド。 場合、<xref:System.Reflection.MethodInfo>の`Add`メソッドが判断するために十分な情報<xref:System.Xaml.Schema.XamlCollectionKind>値が返されます。 それ以外の場合は、 <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType>を返します。  
  
 既定の内部の CLR リフレクションには依存しないとメタデータやその他の手法を使用して XAML 型システム情報または型のスキーマ情報を報告する場合は、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupConstructionRequiresArguments">
      <MemberSignature Language="C#" Value="protected virtual bool LookupConstructionRequiresArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupConstructionRequiresArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupConstructionRequiresArguments" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupConstructionRequiresArguments () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupConstructionRequiresArguments();" />
      <MemberSignature Language="F#" Value="abstract member LookupConstructionRequiresArguments : unit -&gt; bool&#xA;override this.LookupConstructionRequiresArguments : unit -&gt; bool" Usage="xamlType.LookupConstructionRequiresArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの<see cref="T:System.Xaml.XamlType" />引数を指定する必要があります (通じたジェネリック制約<see langword="x:TypeArguments" />、初期化テキスト、またはその他の XAML 手法) 型の有効なインスタンスを構築します。</summary>
        <returns><see langword="true" /> インスタンスの作成には、引数値が必要な場合それ以外の場合、false です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが<xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>します。  
  
 既定の実装を返します`false`システムと入力の種類の clr 値型と見なされます。 値型、CLR リフレクション以外の場合<xref:System.Reflection.ConstructorInfo>既定のコンス トラクターが存在するかどうかを判断するために使用します。  
  
 既定の内部の CLR リフレクションには依存しないとメタデータやその他の手法を使用して XAML 型システム情報または型のスキーマ情報を報告する場合は、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupContentProperty">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupContentProperty ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupContentProperty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupContentProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupContentProperty () As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupContentProperty();" />
      <MemberSignature Language="F#" Value="abstract member LookupContentProperty : unit -&gt; System.Xaml.XamlMember&#xA;override this.LookupContentProperty : unit -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupContentProperty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します<see cref="T:System.Xaml.XamlMember" />コンテンツのプロパティのこの情報<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns><see cref="T:System.Xaml.XamlMember" /> このコンテンツのプロパティの情報<see cref="T:System.Xaml.XamlType" />します。 <see langword="null" /> でもかまいません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが<xref:System.Xaml.XamlType.ContentProperty%2A>します。  
  
 既定の実装<xref:System.Windows.Markup.ContentPropertyAttribute>型定義。 チェック<xref:System.Xaml.XamlType.BaseType%2A>属性に即時の基になる型の属性が見つからない場合。 かどうかこれらのチェックはコンテンツの種類を検出されず、既定の実装を返します`null`します。  
  
 既定の内部の CLR リフレクションには依存しないとメタデータやその他の手法を使用して XAML 型システム情報または型のスキーマ情報を報告する場合は、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupContentWrappers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupContentWrappers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupContentWrappers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupContentWrappers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupContentWrappers () As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ LookupContentWrappers();" />
      <MemberSignature Language="F#" Value="abstract member LookupContentWrappers : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;&#xA;override this.LookupContentWrappers : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.LookupContentWrappers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一覧を取得<see cref="T:System.Xaml.XamlType" />このコンテンツのラッパーを表す値<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>一連の<see cref="T:System.Xaml.XamlType" />このコンテンツのラッパーを表す値<see cref="T:System.Xaml.XamlType" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンテンツのラッパーは、そのコレクションで使用される型は、型システムを連続していない場合は、コンテンツのコレクション型を表すクラスです。 コンテンツ ラッパー コレクション項目の種類が以外の何らかの方法で制限される場合に予想される<xref:System.Object>またはニュートラル オブジェクトと同じです。 ただし、この制限と型システムではなく、デザインまたはその型を使用するプロパティの目的でのみ適用されます。 1 つ以上のコンテンツ ラッパーは、型に存在できます。  
  
 クラスの例と WPF XAML 実装からのシナリオでは、次を参照してください。<xref:System.Windows.Documents.InlineCollection>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCustomAttributeProvider">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupCustomAttributeProvider" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupCustomAttributeProvider () As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::ICustomAttributeProvider ^ LookupCustomAttributeProvider();" />
      <MemberSignature Language="F#" Value="abstract member LookupCustomAttributeProvider : unit -&gt; System.Reflection.ICustomAttributeProvider&#xA;override this.LookupCustomAttributeProvider : unit -&gt; System.Reflection.ICustomAttributeProvider" Usage="xamlType.LookupCustomAttributeProvider " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスで実装された場合、取得、<see cref="T:System.Reflection.ICustomAttributeProvider" />実装します。</summary>
        <returns><see cref="T:System.Reflection.ICustomAttributeProvider" /> の実装。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 CLR 属性の値を取得する代替方法を内部のリフレクションを提供するのには、このメソッドをオーバーライドします。 オーバーライドがない場合は、内部の reflector は、一般的な CLR リフレクションのロジックを使用します。  
  
 既定の実装では、`null` が返されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupDeferringLoader">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupDeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupDeferringLoader () As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ LookupDeferringLoader();" />
      <MemberSignature Language="F#" Value="abstract member LookupDeferringLoader : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;&#xA;override this.LookupDeferringLoader : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;" Usage="xamlType.LookupDeferringLoader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します、 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> XAML で宣言されたオブジェクトの遅延読み込みを使用するオブジェクト。</summary>
        <returns>A<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />を持つ、<see cref="T:System.Xaml.XamlDeferringLoader" />ジェネリックの制約。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが<xref:System.Xaml.XamlType.DeferringLoader%2A>します。 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.DeferringLoader%2A>をカスタムを内部のリフレクションを既定で有効になっても提供するよりも、別の値を返す<xref:System.Xaml.Schema.XamlTypeInvoker>情報。  
  
 既定の実装は、読み取りに基づいてオブジェクトを返します<xref:System.Windows.Markup.XamlDeferLoadAttribute>します。 チェック<xref:System.Xaml.XamlType.BaseType%2A>属性に即時の基になる型の属性が見つからない場合。 このメソッドが戻るかどうかは、値は使用できません、`null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupInvoker">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlTypeInvoker LookupInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlTypeInvoker LookupInvoker() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupInvoker" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupInvoker () As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlTypeInvoker ^ LookupInvoker();" />
      <MemberSignature Language="F#" Value="abstract member LookupInvoker : unit -&gt; System.Xaml.Schema.XamlTypeInvoker&#xA;override this.LookupInvoker : unit -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="xamlType.LookupInvoker " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します、<see cref="T:System.Xaml.Schema.XamlTypeInvoker" />これに関連付けられている<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />情報<see cref="T:System.Xaml.XamlType" />、それ以外の<see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.Invoker%2A>します。  
  
 既定の実装いる必要はありません、<xref:System.Xaml.XamlType>初期を渡すコンス トラクターのいずれかを使用して構築する<xref:System.Xaml.Schema.XamlTypeInvoker>します。 ただし、<xref:System.Xaml.XamlType.UnderlyingType%2A>の値が存在する必要があります、 <xref:System.Xaml.XamlType>、それ以外の既定の実装を返します`null`します。  
  
 派生クラスも作成する場合は、このメソッドをオーバーライド<xref:System.Xaml.Schema.XamlTypeInvoker>派生クラスを返すしようとします。 値を返す場合`null`、<xref:System.Xaml.XamlType.Invoker%2A>返します<xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType>呼び出し元にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsAmbient">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsAmbient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsAmbient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsAmbient" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsAmbient () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsAmbient();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsAmbient : unit -&gt; bool&#xA;override this.LookupIsAmbient : unit -&gt; bool" Usage="xamlType.LookupIsAmbient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの<see cref="T:System.Xaml.XamlType" />が XAML 定義によってアンビエント型を表します。</summary>
        <returns><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />アンビエント型を表します。 そうしないと、<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.IsAmbient%2A>します。  
  
 既定の実装で CLR リフレクションを使用して、<xref:System.Xaml.XamlType.UnderlyingType%2A>基本型を確認できます。 この実装を確認します、<xref:System.Windows.Markup.AmbientAttribute>をクラス レベルの関連する型の定義に適用して返す`true`ここでします。 その他のすべてのケースを返す`false`します。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.IsAmbient%2A>を内部のリフレクションを既定で有効になってよりも、別の値を返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsConstructible">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsConstructible ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsConstructible() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsConstructible" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsConstructible () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsConstructible();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsConstructible : unit -&gt; bool&#xA;override this.LookupIsConstructible : unit -&gt; bool" Usage="xamlType.LookupIsConstructible " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの<see cref="T:System.Xaml.XamlType" />が XAML 定義によって構築可能な型を表します。</summary>
        <returns><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />構築可能な型を表します。 そうしないと、<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.IsConstructible%2A>します。  
  
 既定の実装で CLR リフレクションを使用して、<xref:System.Xaml.XamlType.UnderlyingType%2A>します。 具体的なおよび終了した、入れ子にされない型があります。 既定の実装は、値型と戻り値の型は、かどうかを確認します。<xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>します。 Null <xref:System.Xaml.XamlType.UnderlyingType%2A>、このメソッドが戻る`true`します。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.IsConstructible%2A>を内部のリフレクションを既定で有効になってよりも、別の値を返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsMarkupExtension">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsMarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsMarkupExtension() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsMarkupExtension" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsMarkupExtension () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsMarkupExtension();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsMarkupExtension : unit -&gt; bool&#xA;override this.LookupIsMarkupExtension : unit -&gt; bool" Usage="xamlType.LookupIsMarkupExtension " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの<see cref="T:System.Xaml.XamlType" />マークアップ拡張機能を表します。</summary>
        <returns><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />マークアップ拡張機能を表します。 そうしないと、<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.IsMarkupExtension%2A>します。  
  
 既定の実装では、この呼び出しののみで構成されます。  
  
 `return CanAssignTo(XamlLanguage.MarkupExtension);`  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.IsMarkupExtension%2A>別のロジックを使用します。  
  
 XAML 仕様には、この型に割り当てられる必要があります`x:MarkupExtension`を返すために`true`の<xref:System.Xaml.XamlType.IsMarkupExtension%2A>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsNameScope">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsNameScope ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsNameScope() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsNameScope" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsNameScope () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsNameScope();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsNameScope : unit -&gt; bool&#xA;override this.LookupIsNameScope : unit -&gt; bool" Usage="xamlType.LookupIsNameScope " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの<see cref="T:System.Xaml.XamlType" />が XAML 定義によって XAML 名前スコープを表します。</summary>
        <returns><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />XAML 名前スコープを表します。 そうしないと、<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.IsNameScope%2A>します。  
  
 既定の実装を<xref:System.Xaml.XamlType.CanAssignTo%2A>型に対して直接呼び出す<xref:System.Windows.Markup.INameScope>します。 <xref:System.Windows.Markup.INameScope> WindowsBase.dll アセンブリで定義されているインターフェイス。 XAML 名前スコープの識別のためには、この手法が使用される XAML の WPF および Windows Workflow Foundation の実装の両方。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.IsNameScope%2A>別のロジックを使用します。  
  
 XAML 名前スコープまたは複数に使用されるプロパティの名前の一意性を強制する`x:Name`  / `[name property]`します。 場合<xref:System.Xaml.XamlType.IsNameScope%2A>は`true`一意性を適用するためのいくつかのメカニズムが存在する必要があり、XAML 名前スコープを所有しているこの型の観点から評価する必要があります。 XAML 名前スコープは、XAML 名前スコープを所有している別の型が検出されるまで、型のコンテンツを拡張します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectWriter.RootNameScope" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsNullable">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsNullable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsNullable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsNullable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsNullable () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsNullable();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsNullable : unit -&gt; bool&#xA;override this.LookupIsNullable : unit -&gt; bool" Usage="xamlType.LookupIsNullable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの<see cref="T:System.Xaml.XamlType" />が XAML 定義によって null 許容型を表します。</summary>
        <returns><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />null 許容型を表します。 そうしないと、<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.IsNullable%2A>します。  
  
 既定の実装により、CLR コア ライブラリ null 許容の概念と照合に基づいて決定<xref:System.Xaml.XamlType.UnderlyingType%2A>します。 Null <xref:System.Xaml.XamlType.UnderlyingType%2A>、返します`true`します。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.IsNullable%2A>別のロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsPublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsPublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsPublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsPublic" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsPublic () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsPublic();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsPublic : unit -&gt; bool&#xA;override this.LookupIsPublic : unit -&gt; bool" Usage="xamlType.LookupIsPublic " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの<see cref="T:System.Xaml.XamlType" />関連する型システムでパブリック型を表します。</summary>
        <returns><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />パブリック型を表す、それ以外の<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.IsPublic%2A>します。  
  
 既定の実装に対して null 以外の CLR リフレクションを使用して<xref:System.Xaml.XamlType.UnderlyingType%2A>します。 Null <xref:System.Xaml.XamlType.UnderlyingType%2A>、返します`true`します。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.IsPublic%2A>別のロジックを使用します。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupIsPublic%2A> 仮想、およびそのため、オーバーライドされることができます。 上書きされる可能性があります (悪意のある目的かどうかや、それ以外の場合)、基になる CLR 型の型システムまたはアクセスの情報と予想される方法で配置されなくように、報告されたアクセスについては、XAML 型を変更します。 割り当て操作とアクセスのセキュリティ クリティカルなチェックには、代わりに、基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsUnknown">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsUnknown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsUnknown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsUnknown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsUnknown () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsUnknown();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsUnknown : unit -&gt; bool&#xA;override this.LookupIsUnknown : unit -&gt; bool" Usage="xamlType.LookupIsUnknown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの<see cref="T:System.Xaml.XamlType" />基になる型システムで解決できない型を表します。</summary>
        <returns><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />nonresolvable 型を表します。 そうしないと、<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.IsUnknown%2A>します。  
  
 既定の実装では、CLR リフレクションを使用できます。 Null <xref:System.Xaml.XamlType.UnderlyingType%2A>、返します`true`します。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.IsUnknown%2A>別のロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsWhitespaceSignificantCollection">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWhitespaceSignificantCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWhitespaceSignificantCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsWhitespaceSignificantCollection () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsWhitespaceSignificantCollection();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsWhitespaceSignificantCollection : unit -&gt; bool&#xA;override this.LookupIsWhitespaceSignificantCollection : unit -&gt; bool" Usage="xamlType.LookupIsWhitespaceSignificantCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの<see cref="T:System.Xaml.XamlType" />XML 定義によって空白が有意なコレクションを表します。</summary>
        <returns><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />空白が有意なコレクションを表します。 そうしないと、<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>します。  
  
 既定の実装は、読み取りに基づいて値を返します<xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute>します。 チェック、<xref:System.Xaml.XamlType.BaseType%2A>属性に即時の基になる型の属性が見つからない場合。 返すかどうか、値は使用できません、`false`します。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>別のロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsXData">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsXData ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsXData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsXData" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsXData () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsXData();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsXData : unit -&gt; bool&#xA;override this.LookupIsXData : unit -&gt; bool" Usage="xamlType.LookupIsXData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの<see cref="T:System.Xaml.XamlType" />XML が表現<see langword="XDATA" />が XAML 定義によって、します。</summary>
        <returns><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />表します<see langword="XDATA" />、それ以外の<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.IsXData%2A>します。  
  
 既定の実装を<xref:System.Xaml.XamlType.CanAssignTo%2A>型に対して直接呼び出す<xref:System.Xml.Serialization.IXmlSerializable>します。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.IsXData%2A>別のロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupItemType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupItemType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupItemType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupItemType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupItemType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupItemType();" />
      <MemberSignature Language="F#" Value="abstract member LookupItemType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupItemType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupItemType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>型情報が提供する値を返します、<see langword="Items" />プロパティのこの<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>A<see cref="T:System.Xaml.XamlType" />コレクション内の項目の型のオブジェクトをそれ以外の場合、<see langword="null" />場合この<see cref="T:System.Xaml.XamlType" />コレクションを表していません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.ItemType%2A>します。  
  
 既定の実装のチェックなどの CLR リフレクションの概念を使用できます、`Add`メソッドによって<xref:System.Reflection.MethodInfo>を使用して、<xref:System.Reflection.ParameterInfo>チェック; <xref:System.Xaml.XamlType.IsArray%2A>; とチェック<xref:System.Xaml.XamlType.BaseType%2A>おり、同じロジックがあります。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.ItemType%2A>別のロジックを使用します。 あるケース<xref:System.Xaml.XamlType.LookupCollectionKind%2A>返します<xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType>返す必要があります`null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupKeyType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupKeyType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupKeyType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupKeyType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupKeyType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupKeyType();" />
      <MemberSignature Language="F#" Value="abstract member LookupKeyType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupKeyType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupKeyType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このキーのプロパティの型情報を提供する値を返します<see cref="T:System.Xaml.XamlType" />場合、<see cref="T:System.Xaml.XamlType" />ディクショナリを表します。</summary>
        <returns>A<see cref="T:System.Xaml.XamlType" />ディクショナリを使用したキーの型のオブジェクトまたは<see langword="null" />場合この<see cref="T:System.Xaml.XamlType" />ディクショナリを表していません</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.KeyType%2A>します。  
  
 既定の実装のチェックなどの CLR リフレクションの概念を使用できます、`Add`メソッドによって<xref:System.Reflection.MethodInfo>を使用して、 <xref:System.Reflection.ParameterInfo>; とチェック<xref:System.Xaml.XamlType.BaseType%2A>おり、同じロジックがあります。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.KeyType%2A>別のロジックを使用します。 あるケース<xref:System.Xaml.XamlType.LookupCollectionKind%2A>返さない<xref:System.Xaml.Schema.XamlCollectionKind.Dictionary?displayProperty=nameWithType>返す必要があります`null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupMarkupExtensionReturnType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupMarkupExtensionReturnType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupMarkupExtensionReturnType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupMarkupExtensionReturnType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupMarkupExtensionReturnType();" />
      <MemberSignature Language="F#" Value="abstract member LookupMarkupExtensionReturnType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupMarkupExtensionReturnType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupMarkupExtensionReturnType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返される型情報を提供する値を返します<see langword="ProvideValue" />この<see cref="T:System.Xaml.XamlType" />マークアップ拡張機能を表す場合は、します。</summary>
        <returns>A <see cref="T:System.Xaml.XamlType" /> ; マークアップ拡張機能の使用の戻り値の型のオブジェクトをそれ以外の場合、<see langword="null" />この場合、<see cref="T:System.Xaml.XamlType" />マークアップ拡張機能を表していません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>します。  
  
 既定の実装を返します、<xref:System.Xaml.XamlType>読み取りに基づいて<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>します。 チェック<xref:System.Xaml.XamlType.BaseType%2A>属性に即時の基になる型の属性が見つからない場合。 返すかどうか、値は使用できません、`null`します。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>別のロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupMember">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupMember (string name, bool skipReadOnlyCheck);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupMember(string name, bool skipReadOnlyCheck) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupMember (name As String, skipReadOnlyCheck As Boolean) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupMember(System::String ^ name, bool skipReadOnlyCheck);" />
      <MemberSignature Language="F#" Value="abstract member LookupMember : string * bool -&gt; System.Xaml.XamlMember&#xA;override this.LookupMember : string * bool -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupMember (name, skipReadOnlyCheck)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="skipReadOnlyCheck" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">(文字列) として取得するメンバーの名前。</param>
        <param name="skipReadOnlyCheck"><see langword="true" /> そのメンバーが持つ場合でも、メンバーを返す、<see langword="true" />値<see cref="P:System.Xaml.XamlMember.IsReadOnly" />;<see langword="false" />返されない、<see cref="P:System.Xaml.XamlMember.IsReadOnly" />メンバー。 既定値は <see langword="false" /> です。</param>
        <summary>返します、<see cref="T:System.Xaml.XamlMember" />これからメンバーをという名前の特定の<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns><see cref="T:System.Xaml.XamlMember" />メンバーでした。 それ以外の場合は、メンバーの情報<see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.GetMember%2A>します。  
  
 既定の実装を返します、<xref:System.Xaml.XamlType>に基づいて内部の CLR リフレクションとスキーマ コンテキストに対して評価します。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.GetMember%2A>別のロジックを使用します。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupMember%2A> 仮想、およびそのため、オーバーライドされることができます。 上書きされる可能性があります (悪意のある目的かどうかまたはそれ以外の場合) と予想される方法で不要になった位置が揃うように報告される XAML 型のメンバーを変更する、 <xref:System.ComponentModel.TypeDescriptor> `Get*`については、基になる CLR 型。 メンバーのレポートのセキュリティ クリティカルなチェックには、代わりに基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupPositionalParameters">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupPositionalParameters (int parameterCount);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupPositionalParameters(int32 parameterCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupPositionalParameters (parameterCount As Integer) As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ LookupPositionalParameters(int parameterCount);" />
      <MemberSignature Language="F#" Value="abstract member LookupPositionalParameters : int -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;&#xA;override this.LookupPositionalParameters : int -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.LookupPositionalParameters parameterCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterCount">情報を表示する特定の構文またはコンス トラクター モードの個数 (アリティ)。</param>
        <summary>マークアップ拡張機能の種類、この特定のマークアップ拡張機能の使用でサポートされている位置指定パラメーターの型を返します<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>一連の<see cref="T:System.Xaml.XamlType" />値 where これらの各<see cref="T:System.Xaml.XamlType" />は構文内でその位置の型です。 マークアップ拡張機能のマークアップ入力を指定するときは、同じ順序でこれらの型を指定する必要があります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.GetPositionalParameters%2A>します。  
  
 既定の実装では、コンス トラクターの検索とアリティのチェックに基づく内部のリフレクション情報を使用します。 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.GetPositionalParameters%2A>別のロジックを使用します。  
  
 この API は、関連するは、この場合のみ<xref:System.Xaml.XamlType>マークアップ拡張機能を表します (<xref:System.Xaml.XamlType.IsMarkupExtension%2A>は`true`)。  
  
 入力`parameterCount`は特定の位置指定パラメーターの型を要求するはありません。 マークアップ拡張機能の使用のアリティを指定することがあります。 マークアップ拡張機能の使用は多くの場合、複数の署名を持つし、位置指定パラメーターの異なるパラメーター アリティ (数) を区別するために使用します。 ただし、arities の重複を許可し、差別化要因の位置指定パラメーターの型を使用するスキーマ コンテキストを構成することができます。 詳細については、「 <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A> 」を参照してください。 特定のアリティ数では、パラメーターの位置と種類は異なります。 特定アリティのマークアップ拡張機能の使用の位置指定の型を取得するには、最初に呼び出す<xref:System.Xaml.XamlType.GetPositionalParameters%2A>アリティの数。 返されるコレクションからその位置にある項目を取得します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupSetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="protected virtual EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; LookupSetMarkupExtensionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; LookupSetMarkupExtensionHandler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupSetMarkupExtensionHandler () As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ LookupSetMarkupExtensionHandler();" />
      <MemberSignature Language="F#" Value="abstract member LookupSetMarkupExtensionHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;&#xA;override this.LookupSetMarkupExtensionHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="xamlType.LookupSetMarkupExtensionHandler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>マークアップ拡張機能のセット操作に使用するハンドラー コールバックを返します。</summary>
        <returns>マークアップ拡張機能のセット操作に使用するハンドラー コールバック。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定の実装は、読み取りに基づいて値を返します<xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>します。 チェック<xref:System.Xaml.XamlType.BaseType%2A>属性に即時の基になる型の属性が見つからない場合。 返すかどうか、値は使用できません、`null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupSetTypeConverterHandler">
      <MemberSignature Language="C#" Value="protected virtual EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; LookupSetTypeConverterHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; LookupSetTypeConverterHandler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupSetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupSetTypeConverterHandler () As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ LookupSetTypeConverterHandler();" />
      <MemberSignature Language="F#" Value="abstract member LookupSetTypeConverterHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;&#xA;override this.LookupSetTypeConverterHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="xamlType.LookupSetTypeConverterHandler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>型コンバーターを設定する場合に使用するハンドラーを返します。</summary>
        <returns>型コンバーターを設定する場合に使用するハンドラー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定の実装は、読み取りに基づいて値を返します<xref:System.Windows.Markup.XamlSetTypeConverterAttribute>します。 チェック<xref:System.Xaml.XamlType.BaseType%2A>属性に即時の基になる型の属性が見つからない場合。 返すかどうか、値は使用できません、`null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTrimSurroundingWhitespace">
      <MemberSignature Language="C#" Value="protected virtual bool LookupTrimSurroundingWhitespace ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupTrimSurroundingWhitespace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTrimSurroundingWhitespace () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupTrimSurroundingWhitespace();" />
      <MemberSignature Language="F#" Value="abstract member LookupTrimSurroundingWhitespace : unit -&gt; bool&#xA;override this.LookupTrimSurroundingWhitespace : unit -&gt; bool" Usage="xamlType.LookupTrimSurroundingWhitespace " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの<see cref="T:System.Xaml.XamlType" />を周囲の空白をトリムするモードを使用してシリアル化する必要があります。</summary>
        <returns><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />を周囲の空白をトリムするモードでシリアル化された。 それ以外にする必要があります<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A>します。  
  
 既定の実装は、読み取りに基づいて値を返します<xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute>します。 チェック<xref:System.Xaml.XamlType.BaseType%2A>属性に即時の基になる型の属性が見つからない場合。 返すかどうか、値は使用できません、`false`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTypeConverter">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; LookupTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; LookupTypeConverter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupTypeConverter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTypeConverter () As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ LookupTypeConverter();" />
      <MemberSignature Language="F#" Value="abstract member LookupTypeConverter : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;&#xA;override this.LookupTypeConverter : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;" Usage="xamlType.LookupTypeConverter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します、<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />を持つ、<see cref="T:System.ComponentModel.TypeConverter" />制約は、この値の型変換動作を表す<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>A<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />で<see cref="T:System.ComponentModel.TypeConverter" />制約の値の型変換動作を表す<see cref="T:System.Xaml.XamlType" />、それ以外の<see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.TypeConverter%2A>します。  
  
 既定の実装は、読み取りに基づいて値を返します<xref:System.ComponentModel.TypeConverterAttribute>します。 既定の実装を確認できますも<xref:System.Xaml.XamlType.BaseType%2A>属性に即時の基になる型の属性が見つからない場合。 列挙型、共通の値型とジェネリックの既定の変換の特別なロジックも含まれています。 返すかどうか、値は使用できません、`null`します。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.TypeConverter%2A>別のロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingType">
      <MemberSignature Language="C#" Value="protected virtual Type LookupUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Type LookupUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupUnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingType () As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Type ^ LookupUnderlyingType();" />
      <MemberSignature Language="F#" Value="abstract member LookupUnderlyingType : unit -&gt; Type&#xA;override this.LookupUnderlyingType : unit -&gt; Type" Usage="xamlType.LookupUnderlyingType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>CLR を返します<see cref="T:System.Type" />の基になるこの<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>CLR<see cref="T:System.Type" />の基になるこの<see cref="T:System.Xaml.XamlType" />、それ以外の<see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.UnderlyingType%2A>します。  
  
 既定の実装では、内部フィールドを返します。 構築時にそのフィールドが初期化される一般に、その値がコンス トラクターが呼び出された、指定した情報に基づいています。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.UnderlyingType%2A>別のロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUsableDuringInitialization">
      <MemberSignature Language="C#" Value="protected virtual bool LookupUsableDuringInitialization ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupUsableDuringInitialization() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupUsableDuringInitialization" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUsableDuringInitialization () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupUsableDuringInitialization();" />
      <MemberSignature Language="F#" Value="abstract member LookupUsableDuringInitialization : unit -&gt; bool&#xA;override this.LookupUsableDuringInitialization : unit -&gt; bool" Usage="xamlType.LookupUsableDuringInitialization " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの<see cref="T:System.Xaml.XamlType" />トップダウン XAML の初期化中にビルドします。</summary>
        <returns><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />XAML の初期化中に上から下へ、それ以外のビルドは<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上から下へとは、オブジェクト グラフを作成するときに、XAML プロセッサの動作を近似するメタファです。 トップダウンをビルドするときは、型をインスタンス化を親にアタッチされているし、そのプロパティが設定します。 トップダウンの構築は、プロパティ変更ハンドラーを複数回呼び出すことを回避できます。 このような処理はオブジェクト グラフに波及し、そのため、複数のハンドラーの呼び出しを排除し、オブジェクト グラフの起動時のパフォーマンスを最適化を提供します。  
  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>します。  
  
 既定の実装は、読み取りに基づいて値を返します<xref:System.Windows.Markup.UsableDuringInitializationAttribute>します。 チェック<xref:System.Xaml.XamlType.BaseType%2A>属性に即時の基になる型の属性が見つからない場合。 返すかどうか、値は使用できません、`false`します。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>別のロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupValueSerializer">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupValueSerializer () As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ LookupValueSerializer();" />
      <MemberSignature Language="F#" Value="abstract member LookupValueSerializer : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;&#xA;override this.LookupValueSerializer : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;" Usage="xamlType.LookupValueSerializer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します、<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />を持つ、<see cref="T:System.Windows.Markup.ValueSerializer" />制約で、この値に対する値のシリアル化動作を表す<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>A<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />で<see cref="T:System.Windows.Markup.ValueSerializer" />制約の値に対する値のシリアル化動作を表す<see cref="T:System.Xaml.XamlType" />、それ以外の<see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しによって呼び出される<xref:System.Xaml.XamlType.ValueSerializer%2A>します。  
  
 既定の実装は、読み取りに基づいて値を返します<xref:System.Windows.Markup.ValueSerializerAttribute>します。 チェック<xref:System.Xaml.XamlType.BaseType%2A>属性に即時の基になる型の属性が見つからない場合。 列挙型、共通の値型またはジェネリックの既定のシリアル化の特別なロジックも含まれています。 返すかどうか、値は使用できません、`null`します。  
  
 このメソッドをオーバーライドする場合は<xref:System.Xaml.XamlType.ValueSerializer%2A>別のロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkupExtensionReturnType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType MarkupExtensionReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType MarkupExtensionReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.MarkupExtensionReturnType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MarkupExtensionReturnType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ MarkupExtensionReturnType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MarkupExtensionReturnType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.MarkupExtensionReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返される型情報を提供する値を取得<see langword="ProvideValue" />この<see cref="T:System.Xaml.XamlType" />マークアップ拡張機能を表す場合は、します。</summary>
        <value>A <see cref="T:System.Xaml.XamlType" /> ; マークアップ拡張機能の使用の戻り値の型のオブジェクトをそれ以外の場合、<see langword="null" />この場合、<see cref="T:System.Xaml.XamlType" />マークアップ拡張機能を表していません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは関連するは、この場合のみ<xref:System.Xaml.XamlType>マークアップ拡張機能を表します (`x:MarkupExtension`が割り当て可能な型のリスト)。  
  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xaml.XamlType.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>型の文字列名を取得しますこの<see cref="T:System.Xaml.XamlType" />を表します。</summary>
        <value>この XAML 型の文字列名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、通常、スキーマで構築される名前を取得 (あたり、<xref:System.Xaml.XamlType.%23ctor%2A>署名)、またはの名前、 <xref:System.Type>CLR 型システムの適切なコンス トラクターを使用して構築した場合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xaml.XamlType xamlType1, class System.Xaml.XamlType xamlType2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (xamlType1 As XamlType, xamlType2 As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xaml::XamlType ^ xamlType1, System::Xaml::XamlType ^ xamlType2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xaml.XamlType * System.Xaml.XamlType -&gt; bool" Usage="xamlType1 = xamlType2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType1" Type="System.Xaml.XamlType" />
        <Parameter Name="xamlType2" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType1"><see cref="T:System.Xaml.XamlType" /> または <see langword="null" />。</param>
        <param name="xamlType2"><see cref="T:System.Xaml.XamlType" /> または <see langword="null" />。</param>
        <summary>指定した 2 つの <see cref="T:System.Xaml.XamlType" /> オブジェクトの値が同一かどうかを判断します。</summary>
        <returns><paramref name="xamlType1" /> の値が <paramref name="xamlType2" /> の値と同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xaml.XamlType xamlType1, class System.Xaml.XamlType xamlType2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (xamlType1 As XamlType, xamlType2 As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xaml::XamlType ^ xamlType1, System::Xaml::XamlType ^ xamlType2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xaml.XamlType * System.Xaml.XamlType -&gt; bool" Usage="System.Xaml.XamlType.op_Inequality (xamlType1, xamlType2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType1" Type="System.Xaml.XamlType" />
        <Parameter Name="xamlType2" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType1"><see cref="T:System.Xaml.XamlType" /> または <see langword="null" />。</param>
        <param name="xamlType2"><see cref="T:System.Xaml.XamlType" /> または <see langword="null" />。</param>
        <summary>指定した 2 つの <see cref="T:System.Xaml.XamlType" /> オブジェクトの値が異なるかどうかを判断します。</summary>
        <returns><see langword="true" /> の値が <paramref name="xamlType1" /> の値と異なる場合は <paramref name="xamlType2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredXamlNamespace">
      <MemberSignature Language="C#" Value="public string PreferredXamlNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PreferredXamlNamespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.PreferredXamlNamespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredXamlNamespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PreferredXamlNamespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredXamlNamespace : string" Usage="System.Xaml.XamlType.PreferredXamlNamespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このプライマリ XAML 名前空間は、1 つの XAML 名前空間を取得<see cref="T:System.Xaml.XamlType" />します。</summary>
        <value>この XAML 型のプライマリ XAML 名前空間の文字列としての識別子です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この実装は、呼び出し元と同じ値を提供します。<xref:System.Xaml.XamlType.GetXamlNamespaces%2A>と、返された列挙可能なセットから最初の値の文字列を取得します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlType.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アクティブな取得<see cref="T:System.Xaml.XamlSchemaContext" />これを処理するため<see cref="T:System.Xaml.XamlType" />します。</summary>
        <value>アクティブな<see cref="T:System.Xaml.XamlSchemaContext" />これを処理するため<see cref="T:System.Xaml.XamlType" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlSchemaContext> 必要なパラメーターのエントリを構築するときに、<xref:System.Xaml.XamlType>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xamlType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この文字列表現を返します<see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>この文字列表現<see cref="T:System.Xaml.XamlType" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlType>の実装<xref:System.Object.ToString%2A>を返します、<xref:System.Xaml.XamlType.Name%2A>のプロパティ、<xref:System.Xaml.XamlType>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimSurroundingWhitespace">
      <MemberSignature Language="C#" Value="public bool TrimSurroundingWhitespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimSurroundingWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TrimSurroundingWhitespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TrimSurroundingWhitespace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimSurroundingWhitespace { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.TrimSurroundingWhitespace : bool" Usage="System.Xaml.XamlType.TrimSurroundingWhitespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの<see cref="T:System.Xaml.XamlType" />がそのコンテンツを囲んでいる空白をトリムするシリアル化の空白処理動作します。</summary>
        <value><see langword="true" /> この場合<see cref="T:System.Xaml.XamlType" />空白文字を使用する型を表すトリム以外の場合、 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeArguments">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; TypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; TypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeArguments As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ TypeArguments { System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeArguments : System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="System.Xaml.XamlType.TypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>場合の型引数の一覧を取得します、この<see cref="T:System.Xaml.XamlType" />ジェネリック型を表します。</summary>
        <value>型引数の型の一覧それ以外の場合、<see langword="null" />この場合、<see cref="T:System.Xaml.XamlType" />ジェネリックを表していません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 特定のシナリオがある、<xref:System.Xaml.XamlType>を呼び出す場合、<xref:System.Xaml.XamlType.TypeArguments%2A>パラメーターは、種類がまだ開いてされるリストを返します。 この場合、1 つ以上で、返された<xref:System.Xaml.XamlType>値のプレース ホルダーの値になります<xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType>など`T`をジェネリックが開いていることを表し、します。 このシナリオは、表示された場合に発生することが、<xref:System.Xaml.XamlType>への呼び出しから<xref:System.Xaml.XamlSchemaContext.GetXamlType%2A>の代わりに XAML リーダーの実装から。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeConverter">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; TypeConverter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; TypeConverter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TypeConverter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeConverter As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ TypeConverter { System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeConverter : System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;" Usage="System.Xaml.XamlType.TypeConverter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />で<see cref="T:System.ComponentModel.TypeConverter" />制約型の値の変換動作を表す<see cref="T:System.Xaml.XamlType" />します。</summary>
        <value>A<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />で<see cref="T:System.ComponentModel.TypeConverter" />制約型の値の変換動作を表す<see cref="T:System.Xaml.XamlType" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupTypeConverter%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupTypeConverter%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingType">
      <MemberSignature Language="C#" Value="public Type UnderlyingType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.UnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ UnderlyingType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingType : Type" Usage="System.Xaml.XamlType.UnderlyingType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>CLR の取得<see cref="T:System.Type" />の基になるこの<see cref="T:System.Xaml.XamlType" />します。</summary>
        <value>CLR<see cref="T:System.Type" />の基になるこの<see cref="T:System.Xaml.XamlType" />します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSerializer">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; ValueSerializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; ValueSerializer" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSerializer As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ ValueSerializer { System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSerializer : System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;" Usage="System.Xaml.XamlType.ValueSerializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />で<see cref="T:System.Windows.Markup.ValueSerializer" />制約の値に対する値のシリアル化動作を表す<see cref="T:System.Xaml.XamlType" />します。</summary>
        <value>A<see cref="T:System.Xaml.Schema.XamlValueConverter`1" />で<see cref="T:System.Windows.Markup.ValueSerializer" />制約の値に対する値のシリアル化動作を表す<see cref="T:System.Xaml.XamlType" />、それ以外の<see langword="null" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定内部 CLR リフレクション技法を使用しないかどうか、 <xref:System.Xaml.XamlType>、このプロパティへの呼び出しを呼び出すことができます<xref:System.Xaml.XamlType.LookupValueSerializer%2A>の上書きを<xref:System.Xaml.XamlType>クラスを派生します。 戻り値およびその他の動作の詳細については、のドキュメントを参照してください。<xref:System.Xaml.XamlType.LookupValueSerializer%2A>この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>