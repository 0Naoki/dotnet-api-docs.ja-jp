<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlType.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d63614a-fd48-4a83-9dc4-ea1e401b6c1588e26b430c3cc3e4fb759456e24937af285897b6.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88e26b430c3cc3e4fb759456e24937af285897b6</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b4804968da1dfdf71c501075a5b66957b54f2e8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/27/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlType">
          <source>Reports information about XAML types as part of the overall XAML system that is implemented in .NET Framework XAML Services.</source>
          <target state="translated">.NET Framework XAML サービスに実装されている XAML システム全体の一部として、XAML 型に関する情報を報告します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>Many APIs in the <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> class provide information about XAML types, where the concept they report on is similar to particular sections of the XAML specification [MS-XAML].</source>
          <target state="translated">多くの Api、<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスで報告する概念は、XAML の仕様 [MS-XAML] の特定のセクションに似ています、XAML の型に関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is used extensively in the .NET Framework XAML Services API for reporting information about a XAML type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 広く使われて、.NET Framework XAML サービス API の XAML 型に関するレポート情報です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> reports the information that you might need to know about a XAML type in order to work with an instance or to access its members from a XAML node stream, or a similar XAML representation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> インスタンスを使用するために、または XAML ノード ストリーム、またはと同様に XAML 表現からのメンバーにアクセスする XAML の型について知っておく必要がある情報を報告します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>Its reporting is similar to how the <ph id="ph1">&lt;xref:System.Type&gt;</ph> in the CLR type system, together with reflection classes such as <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, provide information about a CLR type and its usage.</source>
          <target state="translated">ような方法は、reporting<ph id="ph1">&lt;xref:System.Type&gt;</ph>入力リフレクション クラスと共に、システムなど、CLR で<ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>CLR 型とその使用状況に関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>To extend the XAML type system, you can derive from <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">XAML 型システムを拡張するから派生できます<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>To do so effectively, you might also need to implement a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>.</source>
          <target state="translated">実効上には、する必要がありますも実装する、<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> enables the generalized XAML type system to work with the type system backing that you specify as part of the invocation behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>一般化された XAML 型システム呼び出しの動作の一部として指定することをバッキング型システムを使用するようになります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>The specific custom <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> provides a way to reduce the dependencies on the CLR type system, which are used by the default <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> behavior.</source>
          <target state="translated">特定のカスタム<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>、既定で使用される CLR 型システムへの依存関係を削減する方法を提供<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>動作します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlType">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
          <source>The underlying CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> for the XAML type to construct.</source>
          <target state="translated">作成する XAML 型の基になる CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
          <source>XAML schema context for XAML readers or XAML writers.</source>
          <target state="translated">XAML リーダーまたは XAML ライターの XAML スキーマ コンテキスト。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> class based on the underlying CLR type information.</source>
          <target state="translated">基になる CLR 型情報に基づいて、<ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
          <source>One or more of <ph id="ph1">&lt;paramref name="underlyingType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph> are <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">1 つ以上の <ph id="ph1">&lt;paramref name="underlyingType" /&gt;</ph> または <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>The name of the type to create.</source>
          <target state="translated">作成する型の名前。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>The type arguments for a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> that represents a generic type.</source>
          <target state="translated">ジェネリック型を表す <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の型引数。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Can be (and often is) <ph id="ph1">&lt;see langword="null" /&gt;</ph>, which indicates that the represented type is not a generic type.</source>
          <target state="translated">(多くの場合は) <ph id="ph1">&lt;see langword="null" /&gt;</ph> にできます。この値は、表される型がジェネリック型でないことを示します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>XAML schema context for XAML readers and XAML writers.</source>
          <target state="translated">XAML リーダーおよび XAML ライターの XAML スキーマ コンテキスト。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> class based on a string name for the type.</source>
          <target state="translated">型の文字列名に基づいて、<ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>This is a protected constructor.</source>
          <target state="translated">これは保護されたコンストラクターです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>No current public derived classes exist that use this particular path for construction.</source>
          <target state="translated">現在のパブリック派生クラスが存在しない構築のこの特定のパスを使用します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>As a consumer of the existing <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, you must use the other constructor signatures (<ph id="ph2">&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29&gt;</ph>, <ph id="ph3">&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph>, or <ph id="ph4">&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph>) to initialize a <ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph> object.</source>
          <target state="translated">既存のコンシューマーとして<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、他のコンス トラクター シグネチャを使用する必要があります (<ph id="ph2">&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29&gt;</ph>、 <ph id="ph3">&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph>、または<ph id="ph4">&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph>) 初期化するために、<ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>One or more of <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph> are <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">1 つ以上の <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> または <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
          <source>The underlying type for the XAML type to construct.</source>
          <target state="translated">作成する XAML 型の基になる型。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
          <source>XAML schema context for the XAML reader.</source>
          <target state="translated">XAML リーダーの XAML スキーマ コンテキスト。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> implementation that handles run-time reflection calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> に対してランタイムのリフレクション呼び出しを処理する <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 実装。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> class based on underlying type information and a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> implementation.</source>
          <target state="translated">基になる型情報、および <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の実装に基づいて、<ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
          <source>One or more of <ph id="ph1">&lt;paramref name="underlyingType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph> are <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">1 つ以上の <ph id="ph1">&lt;paramref name="underlyingType" /&gt;</ph> または <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>The XAML namespace for the type, as a string.</source>
          <target state="translated">文字列としての、型の XAML 名前空間。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>The name of the type in the provided <bpt id="p1">&lt;c&gt;</bpt>unknownTypeNamespace<ept id="p1">&lt;/c&gt;</ept> XAML namespace.</source>
          <target state="translated">指定された <bpt id="p1">&lt;c&gt;</bpt>unknownTypeNamespace<ept id="p1">&lt;/c&gt;</ept> XAML 名前空間内の型の名前。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>The type arguments for a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> that represents a generic type.</source>
          <target state="translated">ジェネリック型を表す <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の型引数。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Can be (and often is) <ph id="ph1">&lt;see langword="null" /&gt;</ph>, which indicates that the represented type is not a generic type.</source>
          <target state="translated">(多くの場合は) <ph id="ph1">&lt;see langword="null" /&gt;</ph> にできます。この値は、表される型がジェネリック型でないことを示します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>XAML schema context for XAML readers or XAML writers.</source>
          <target state="translated">XAML リーダーまたは XAML ライターの XAML スキーマ コンテキスト。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> class based on the XAML namespace and a string name for the type.</source>
          <target state="translated">XAML 名前空間と型の文字列名に基づいて、<ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>This constructor is exclusively for analysis and XAML-node recording of type usages that are known to not have backing in the supporting type system and XAML schema context.</source>
          <target state="translated">このコンストラクターは、サポートする型システムと XAML スキーマ コンテキストにバッキングを持たないことがわかっている型の使用法の分析および XAML ノード記録にのみ使用されます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Use this constructor only for "unknown" types where a XAML type that maps to an underlying type system is unavailable.</source>
          <target state="translated">このコンス トラクターを使用して、基になる型システムにマップされる XAML の型が使用可能な「不明」の種類に対してのみです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>This constructor might not produce a result where <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=nameWithType&gt;</ph> is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">このコンス トラクターが、結果が得られない、<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=nameWithType&gt;</ph>は<ph id="ph2">`true`</ph>します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Instead, the default reflector logic reports the underlying type as <ph id="ph1">&lt;xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">既定 reflector ロジックが、基になる型と型を報告する代わりに、<ph id="ph1">&lt;xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>However, this behavior can change because of the <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;</ph> override.</source>
          <target state="translated">ただし、この動作を変更のため、<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;</ph>をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>One or more of <ph id="ph1">&lt;paramref name="unknownTypeNamespace" /&gt;</ph>, <ph id="ph2">&lt;paramref name="unknownTypeName" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="schemaContext" /&gt;</ph> are <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">1 つ以上の <ph id="ph1">&lt;paramref name="unknownTypeNamespace" /&gt;</ph>、<ph id="ph2">&lt;paramref name="unknownTypeName" /&gt;</ph>、または <ph id="ph3">&lt;paramref name="schemaContext" /&gt;</ph> が <ph id="ph4">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.AllowedContentTypes">
          <source>Gets a read-only collection of the types that are usable as the <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ContentProperty" /&gt;</ph> value for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ContentProperty" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の値として使用できる、型の読み取り専用のコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.AllowedContentTypes">
          <source>A read-only collection of possible content types.</source>
          <target state="translated">使用可能なコンテンツ型の読み取り専用のコレクション。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.AllowedContentTypes">
          <source>Types that are assignable a specific content type (for example, assignable to a base type that is an allowed content type) are not considered multiple types for purposes of <ph id="ph1">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>.</source>
          <target state="translated">割り当て可能な型 (たとえば、許可されているコンテンツ型である基本型に割り当てることができる) 特定のコンテンツ タイプは考慮されませんの目的で複数の種類<ph id="ph1">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.AllowedContentTypes">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.BaseType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the immediate base type of this XAML type.</source>
          <target state="translated">この XAML 型の直接の基本型の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.BaseType">
          <source>Determination of this value is based on the underlying type of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> and schema context.</source>
          <target state="translated">この値は、この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の基になる型とスキーマ コンテキストに基づいて決定されます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the immediate base type of this XAML type.</source>
          <target state="translated">この XAML 型の直接の基本型の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>By default, <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> returns an internal constant that represents an <ph id="ph2">&lt;xref:System.Object&gt;</ph> if <ph id="ph3">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>表す内部定数、<ph id="ph2">&lt;xref:System.Object&gt;</ph>場合<ph id="ph3">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>は<ph id="ph4">`null`</ph>します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> 仮想で、そのため、オーバーライドできます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合) に報告された型の XAML 型情報が変更され、基になる CLR 型の型システム情報と予想される方法で整合不要になった。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">割り当て操作とアクセスのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>The type to check against the current <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> .</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> に対して確認する型。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>Returns a value that indicates whether an instance of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> has the specified <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> in its list of assignable types.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> のインスタンスの割り当て可能な型のリスト内に、指定された <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が含まれているかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="xamlType" /&gt;</ph> is in the assignable types list; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">割り当て可能な型のリストに <ph id="ph2">&lt;paramref name="xamlType" /&gt;</ph> が含まれている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>Although the assignable type does not have all the capabilities of the reference type, you can use it for assignment.</source>
          <target state="translated">割り当て可能な型では、参照型のすべての機能はありませんは、割り当てのため使用することができます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>For example, you can use assignment to make type matches for the values of a property.</source>
          <target state="translated">たとえば、プロパティの値の型が一致するようにするのに割り当てを使用することができます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>The concept of assignable types in XAML is similar to the concept of casting up in the CLR type system.</source>
          <target state="translated">XAML で割り当てることができる型の概念は、CLR 型システムへのキャストの概念に似ています。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>For example, under a CLR type system, every type has an <ph id="ph1">&lt;xref:System.Object&gt;</ph> in its assignable type list.</source>
          <target state="translated">たとえば、CLR 型システムでは、すべての型が、<ph id="ph1">&lt;xref:System.Object&gt;</ph>割り当て可能な型のリストにします。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>If one of the two <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> instances that are used for comparison has <ph id="ph2">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> equal to <ph id="ph3">`true`</ph>, this method has a special Unknown mode that returns <ph id="ph4">`true`</ph> if the two <ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph> instances are equivalent.</source>
          <target state="translated">場合、2 つのいずれかの<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>使用されるインスタンスの比較がある<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>と等しい<ph id="ph3">`true`</ph>、このメソッドは、特殊な不明なモードを返す<ph id="ph4">`true`</ph>場合、2 つ<ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph>のインスタンスが等しい。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>The default implementation uses the CLR <ph id="ph1">&lt;xref:System.Type&gt;</ph> from <ph id="ph2">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> for this <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> and the input <ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph>, and calls <ph id="ph5">&lt;xref:System.Type.IsAssignableFrom%2A&gt;</ph>.</source>
          <target state="translated">既定の実装が CLR を使用して<ph id="ph1">&lt;xref:System.Type&gt;</ph>から<ph id="ph2">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>この<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>し、入力<ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph>、および呼び出し<ph id="ph5">&lt;xref:System.Type.IsAssignableFrom%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>Override this method if you want a different determination of assignable types.</source>
          <target state="translated">割り当てられた型のさまざまな決定をする場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>Passing a null <ph id="ph1">`xamlType`</ph> does not throw an exception and always returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Null を渡す<ph id="ph1">`xamlType`</ph>、例外をスローしないと、常に返します<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> 仮想で、そのため、オーバーライドできます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the assignability of a XAML type so that it no longer aligns in an expected way with the type-casting behavior of its underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合) を基になる CLR 型の型キャストの動作に必要な方法で配置されなくされるように XAML 型の割り当てを変更します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">割り当て操作とアクセスのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.ConstructionRequiresArguments">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> must have arguments (generic constraints through <ph id="ph2">&lt;see langword="x:TypeArguments" /&gt;</ph>, initialization text, or other XAML techniques) to construct a valid instance of the type.</source>
          <target state="translated">型の有効なインスタンスを作成するために、この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が引数 (<ph id="ph2">&lt;see langword="x:TypeArguments" /&gt;</ph> を通じたジェネリック制約、初期化テキスト、または他の XAML 手法) を持つ必要があるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ConstructionRequiresArguments">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if construction of an instance requires some argument value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">インスタンスの作成に引数値が必要な場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ConstructionRequiresArguments">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ConstructionRequiresArguments">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the content property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> のコンテンツ プロパティの <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 情報を取得します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the content property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> のコンテンツ プロパティの <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 情報。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>May be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no content property exists.</source>
          <target state="translated">コンテンツ プロパティがない場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> になります。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>When using the binding or backing of the CLR type system, the XAML content property can be specified on a type by applying <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> to the type definition.</source>
          <target state="translated">ときにバインディングを使用して、または CLR 型システムのバックアップ、XAML コンテンツ プロパティを指定できます型に適用することで<ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>種類の定義にします。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>This property aligns to the <ph id="ph1">`[content property]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">このプロパティに揃えます、 <ph id="ph1">`[content property]`</ph> [MS-XAML] の仕様の情報項目。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed <ph id="ph1">&lt;see langword="Collection&amp;lt;T&amp;gt;" /&gt;</ph>.</source>
          <target state="translated">厳密に型指定された <ph id="ph1">&lt;see langword="Collection&amp;lt;T&amp;gt;" /&gt;</ph> の文字列などのように、型の一致が厳密でない場合に、コンテンツ プロパティのコンテンツをラップする型を取得します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>A read-only collection of possible content wrapper types; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">使用可能なコンテンツ ラッパー型の読み取り専用のコレクション、または <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>If there are no wrappers to account for type match loosening, this property is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">このプロパティは、型の一致が低下するためにラッパーがない場合は、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>Types that evaluate as <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> for a specific content type are not considered multiple types for purposes of <ph id="ph2">&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;</ph>.</source>
          <target state="translated">型として評価される<ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph>特定のコンテンツ タイプは考慮されませんの目的で複数の種類<ph id="ph2">&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>In the CLR binding for <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>, the XAML content wrapper type can be specified on a type as a <ph id="ph3">&lt;xref:System.Windows.Markup.ContentWrapperAttribute&gt;</ph>.</source>
          <target state="translated">CLR バインドで<ph id="ph1">&lt;xref:System.Xaml&gt;</ph>と<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>、として、型の XAML のコンテンツ ラッパー型を指定することができます、<ph id="ph3">&lt;xref:System.Windows.Markup.ContentWrapperAttribute&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.DeferringLoader">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that represents the deferred loading conversion behavior for this type.</source>
          <target state="translated">この型の遅延読み込みの変換動作を表す <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.DeferringLoader">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> constraint that represents the deferred loading behavior for this type.</source>
          <target state="translated">この型の遅延読み込みの動作を表す <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 制約のある <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.DeferringLoader">
          <source>XAML template behavior in WPF is an example of deferred loading behavior.</source>
          <target state="translated">WPF の XAML テンプレートの動作は、遅延読み込み動作の例を示します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.DeferringLoader">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.DeferringLoader">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlType">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">現在のオブジェクトが、別のオブジェクトと等しいかどうかを示します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Object)">
          <source>The object to compare with this object.</source>
          <target state="translated">このオブジェクトと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Object)">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">現在のオブジェクトが、別のオブジェクトと等しいかどうかを示します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のオブジェクトが <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> パラメーターと等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>、それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
          <source>An object to compare with this object.</source>
          <target state="translated">このオブジェクトと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
          <target state="translated">現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを示します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="other" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在のオブジェクトが <ph id="ph2">&lt;paramref name="other" /&gt;</ph> パラメーターと等しい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>、それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
          <source>The directive for which to find the aliased member.</source>
          <target state="translated">エイリアスが設定されたメンバーの検索対象となるディレクティブ。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
          <source>Returns the XAML member that is aliased to a XAML directive by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> によってエイリアスが XAML ディレクティブに設定された XAML メンバーを返します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
          <source>The aliased member, if found; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">見つかった場合はエイリアスが設定されたメンバー。それ以外の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this method can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このメソッドを呼び出すを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>Returns a collection that contains all the attachable properties that are exposed by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> で公開されているすべてのアタッチ可能なプロパティが含まれたコレクションを返します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>A collection that contains zero or more <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> values.</source>
          <target state="translated">0 個以上の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 値が含まれたコレクション。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>Each <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> in the returned collection should contain values that support the concept that the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> is an attachable member.</source>
          <target state="translated">各<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>返されたコレクションを含めることは、概念をサポートする値を<ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>アタッチ可能なメンバーは、します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>For example, members should return <ph id="ph1">`true`</ph> for <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph>, a type for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>, and so on.</source>
          <target state="translated">たとえば、メンバーを返す必要があります<ph id="ph1">`true`</ph>の<ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph>の型を<ph id="ph3">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>のようにします。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this method can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このメソッドを呼び出すを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAllMembers">
          <source>Returns a collection that contains all the members that are exposed by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> で公開されているすべてのメンバーが含まれたコレクションを返します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAllMembers">
          <source>A collection that contains zero or more <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> values.</source>
          <target state="translated">0 個以上の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 値が含まれたコレクション。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAllMembers">
          <source>Calls to this method can invoke <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph> overrides on <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">このメソッドを呼び出すを呼び出すことができます<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph>の上書きを<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>The name of the attachable member to get, in <bpt id="p1">&lt;c&gt;</bpt>ownerTypeName.MemberName<ept id="p1">&lt;/c&gt;</ept> form.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>ownerTypeName.MemberName<ept id="p1">&lt;/c&gt;</ept> フォームで取得するアタッチ可能メンバーの名前。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> representing a specific named attachable member of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の特定の名前の付いたアタッチ可能メンバーを表す <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> object for the requested attachable member; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if no attachable member by that name exists.</source>
          <target state="translated">要求されたアタッチ可能メンバーの <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> オブジェクト。その名前のアタッチ可能メンバーが存在しない場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>Calls to this method can invoke <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> overrides on <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">このメソッドを呼び出すを呼び出すことができます<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph>の上書きを<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> 仮想で、そのため、オーバーライドできます。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合) と予想される方法で不要になった位置が揃うように、報告された XAML 型のメンバーを変更する、 <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph>基になる CLR 型に関する情報。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">Reporting メンバーのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetHashCode">
          <source>Returns the hash code for this object.</source>
          <target state="translated">このオブジェクトのハッシュ コードを返します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetHashCode">
          <source>An integer hash code.</source>
          <target state="translated">整数のハッシュ コード。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>The name of the member to get (as a string).</source>
          <target state="translated">取得するメンバーの名前 (文字列)。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> for a specific named member from this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> から、特定の名前が付けられたメンバーの <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the member, if such a member was found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">該当するメンバーが見つかった場合はメンバーの <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 情報。それ以外の場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>The value for <ph id="ph1">`name`</ph> is expected to be unqualified.</source>
          <target state="translated">値は、<ph id="ph1">`name`</ph>修飾すると想定されます。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>Type-qualified names that indicate an attached member should be submitted to <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;</ph> instead.</source>
          <target state="translated">アタッチされたメンバーを示す型で修飾された名前を送信する必要があります<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;</ph>代わりにします。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>Prefixed member names should not be used; a prefix is situational to a usage and the XAML type system cannot know the context of such a usage and how the prefix is mapped.</source>
          <target state="translated">プレフィックス付きのメンバー名は使用できません。プレフィックスは使用状況と、XAML 型システムは、このような使用法のコンテキストとプレフィックスをマップする方法を知ることはできません。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>Calls to this method can invoke <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> overrides on <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">このメソッドを呼び出すを呼び出すことができます<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph>の上書きを<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> 仮想で、そのため、オーバーライドできます。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合) と予想される方法で不要になった位置が揃うように、報告された XAML 型のメンバーを変更する、 <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph>基になる CLR 型に関する情報。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">Reporting メンバーのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>The count (arity) of the particular syntax or constructor mode that you want information about.</source>
          <target state="translated">情報を取得する必要のある、特定の構文またはコンストラクター モードの個数 (アリティ)。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">マークアップ拡張型の場合は、この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の特定のマークアップ拡張機能の使用でサポートされている位置指定パラメーターの型を返します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> values, where each <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is the type for that position in the syntax.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 値のリスト。各 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> は、構文内でその位置の型に相当します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>You must specify the types in the same order when you supply markup input for the markup extension.</source>
          <target state="translated">マークアップ拡張機能のマークアップ入力を指定する場合は、型を同一の順序で指定する必要があります。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>This API is only relevant if this <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a markup extension (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph> is <ph id="ph3">`true`</ph>).</source>
          <target state="translated">この API は、関連する場合は、こののみ<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>マークアップ拡張機能を表します (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>は<ph id="ph3">`true`</ph>)。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>The input <ph id="ph1">`parameterCount`</ph> is not for requesting the type of a specific positional parameter.</source>
          <target state="translated">入力<ph id="ph1">`parameterCount`</ph>を使用しない特定の位置指定パラメーターの型を要求します。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>It is for specifying the arity of a markup extension usage.</source>
          <target state="translated">マークアップ拡張機能の使用のアリティを指定することがあります。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>Markup extension usage often has multiple "signatures" and uses different parameter arity (count) of positional parameters to differentiate.</source>
          <target state="translated">多くの場合、マークアップ拡張機能の使用は、複数の「署名」を持つし、区別するために位置指定パラメーターの異なるパラメーター アリティ (数) を使用します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</source>
          <target state="translated">ただし、重複 arities を許可して、差別化要因の位置指定パラメーターの型を使用するスキーマ コンテキストを構成することができます。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>For a specific arity (count), the parameter positions and types can vary.</source>
          <target state="translated">特定のアリティ (数) の場合、パラメーターの位置と型が異なります。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>To get the positional type of a specific arity's markup extension usage, you first call <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph> specifying the arity count.</source>
          <target state="translated">特定のアリティのマークアップ拡張機能の使用の位置指定の種類を取得するには、最初に呼び出す<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph>アリティ数を指定します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>Then get the item at that position from the returned collection.</source>
          <target state="translated">返されるコレクションからその位置に項目を取得します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>Calls to this method can invoke <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupPositionalParameters%2A&gt;</ph> overrides on <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">このメソッドを呼び出すを呼び出すことができます<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupPositionalParameters%2A&gt;</ph>の上書きを<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>Returns a list of string identifiers for XAML namespaces that the type is included in.</source>
          <target state="translated">型が含まれている XAML 名前空間の文字列識別子のリストを返します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>A list of string values, where each string is the URI identifier for a XAML namespace.</source>
          <target state="translated">文字列値のリスト。各文字列は XAML 名前空間の URI 識別子です。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>Typical XAML namespace identifiers are strings in URI form.</source>
          <target state="translated">一般的な XAML 名前空間の識別子は、URI 形式の文字列です。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>The default implementation checks the following, in order: the XAML namespace that is supplied in construction (<ph id="ph1">&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph> signature only); and the namespaces that are available from the schema context.</source>
          <target state="translated">既定の実装の順序で、次のチェック: 構築で指定されている XAML 名前空間 (<ph id="ph1">&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph>署名のみ); とスキーマ コンテキストから提供されている名前空間。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>If these are each <ph id="ph1">`null`</ph>, a new list is generated that contains a single empty string.</source>
          <target state="translated">これらはそれぞれ場合、 <ph id="ph1">`null`</ph>、1 つの空の文字列を含む新しいリストが生成されます。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>You can override this method to change the lookup methodology.</source>
          <target state="translated">参照方法を変更するには、このメソッドをオーバーライドすることができます。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.Invoker">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> に関連付けられている <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の実装を取得します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Invoker">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> に関連付けられている <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 実装。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Invoker">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calling <ph id="ph2">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph> can invoke either <ph id="ph3">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、呼び出し元<ph id="ph2">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph>いずれかを呼び出すことができます<ph id="ph3">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph>またはそのメソッドの特定のオーバーライドします。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Invoker">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Invoker">
          <source>If a <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph> override returns <ph id="ph2">`null`</ph>, or if the default implementation returns <ph id="ph3">`null`</ph> because of lack of <ph id="ph4">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> for this <ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph>, then <ph id="ph6">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph> returns <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph>オーバーライド<ph id="ph2">`null`</ph>、既定の実装を返す場合、または<ph id="ph3">`null`</ph>が不足しているのため<ph id="ph4">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>この<ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph>、し<ph id="ph6">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph>を返します<ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsAmbient">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an ambient type, as per the XAML definition.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が XAML 定義によってアンビエント型を表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsAmbient">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an ambient type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がアンビエント型を表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsAmbient">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsAmbient">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsArray">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an array.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が配列を表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsArray">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an array; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が配列を表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsArray">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsArray">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsCollection">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a collection.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がコレクションを表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsCollection">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a collection; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がコレクションを表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsCollection">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsCollection">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsConstructible">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a constructible type, as per the XAML definition.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が XAML 定義によって構築可能な型を表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsConstructible">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a constructible type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が構築可能な型を表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsConstructible">
          <source>This property aligns to the <ph id="ph1">`[is default constructible]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">このプロパティに揃えます、 <ph id="ph1">`[is default constructible]`</ph> [MS-XAML] の仕様の情報項目。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsConstructible">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsConstructible">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsDictionary">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a dictionary, as per the XAML definition.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が XAML 定義によってディクショナリを表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsDictionary">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a dictionary; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がディクショナリを表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsDictionary">
          <source>This property aligns to the <ph id="ph1">`[is dictionary]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">このプロパティに揃えます、 <ph id="ph1">`[is dictionary]`</ph> [MS-XAML] の仕様の情報項目。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsDictionary">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsDictionary">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsGeneric">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a generic type.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がジェネリック型を表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsGeneric">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a generic type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がジェネリック型を表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsGeneric">
          <source>This property is a helper property that checks for a null value of <ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph>.</source>
          <target state="translated">このプロパティは null 値をチェックするヘルパー プロパティ<ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsGeneric">
          <source>There is no specific <ph id="ph1">`Lookup`</ph> method related to <ph id="ph2">&lt;xref:System.Xaml.XamlType.IsGeneric%2A&gt;</ph>.</source>
          <target state="translated">固有の仕様がない<ph id="ph1">`Lookup`</ph>に関連するメソッド<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsGeneric%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsMarkupExtension">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a markup extension.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がマークアップ拡張機能を表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsMarkupExtension">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a markup extension; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がマークアップ拡張機能を表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsMarkupExtension">
          <source>In XAML specification terms, this type must be assignable to <ph id="ph1">`x:MarkupExtension`</ph> in order to return <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>.</source>
          <target state="translated">XAML の仕様の用語では、この型に割り当てることにする必要があります<ph id="ph1">`x:MarkupExtension`</ph>を返すために<ph id="ph2">`true`</ph>の<ph id="ph3">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsMarkupExtension">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsMarkupExtension">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a XAML namescope, as per the XAML definition.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が XAML 定義によって XAML 名前スコープを表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a XAML namescope; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が XAML 名前スコープを表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>A XAML namescope enforces the name uniqueness of the property or properties used for <ph id="ph1">`x:Name`</ph><ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>.</source>
          <target state="translated">XAML 名前スコープまたは複数のためのプロパティの名前の一意性を強制する<ph id="ph1">`x:Name`</ph> <ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>です。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph> is <ph id="ph2">`true`</ph>, some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph>は<ph id="ph2">`true`</ph>一意性を適用するためのいくつかのメカニズムが存在し、XAML 名前空間を所有しているこの種類の観点から評価する必要があります。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>The XAML namescope then extends to the content of the type until another XAML namescope-owning type is encountered.</source>
          <target state="translated">XAML 名前スコープは、別の XAML 名前スコープで所有されている型が検出されるまで、型のコンテンツを拡張します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>This property aligns to the <ph id="ph1">`[is name scope]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">このプロパティに揃えます、 <ph id="ph1">`[is name scope]`</ph> [MS-XAML] の仕様の情報項目。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsNameScope%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsNameScope%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsNameValid">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is initialized by using a valid <ph id="ph2">&lt;see langword="xamlName" /&gt;</ph> string as its <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.Name" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.Name" /&gt;</ph> に有効な <ph id="ph2">&lt;see langword="xamlName" /&gt;</ph> 文字列を使用して初期化されているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameValid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is initialized by using a valid <ph id="ph3">&lt;see langword="xamlName" /&gt;</ph> string; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が有効な <ph id="ph1">&lt;see langword="true" /&gt;</ph> 文字列を使用して初期化されている場合は <ph id="ph3">&lt;see langword="xamlName" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsNullable">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a nullable type, as per the XAML definition.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が XAML 定義によって null 許容型を表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNullable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a nullable type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が null 許容型を表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNullable">
          <source>This property aligns to the <ph id="ph1">`[is nullable]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">このプロパティに揃えます、 <ph id="ph1">`[is nullable]`</ph> [MS-XAML] の仕様の情報項目。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNullable">
          <source>If you are not using the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsNullable%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用していないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsNullable%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsPublic">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a public type in the relevant type system.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が関連する型システムでパブリック型を表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a public type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がパブリック型を表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsPublic">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsPublic">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> 仮想で、そのため、オーバーライドできます。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsPublic">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system and access information of its underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合)、基になる CLR 型の型システムとアクセスの情報と予想される方法で整合不要になったように XAML 型についての報告されたアクセスを変更します。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsPublic">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">割り当て操作とアクセスのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsUnknown">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a type that cannot be resolved in the underlying type system.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が基になる型システムで解決できない型を表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUnknown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an unresolvable type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が解決できない型を表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUnknown">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUnknown">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, a <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> that has <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> cannot be written into an object graph.</source>
          <target state="translated">関係する読み込みパスの<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>、<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>を持つ<ph id="ph3">`true`</ph>の<ph id="ph4">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>オブジェクト グラフに書き込まれることはできません。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUnknown">
          <source>Under the default implementations in <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> , the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=nameWithType&gt;</ph> call throws a <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph> reports <ph id="ph5">`true`</ph> for <ph id="ph6">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">既定の実装  <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> 、<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=nameWithType&gt;</ph>スローされます、<ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph>ときに、関連する<ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph>レポート<ph id="ph5">`true`</ph>の<ph id="ph6">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUnknown">
          <source>You should not pass a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that has <ph id="ph2">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> as <ph id="ph3">`true`</ph> unless you are prepared to handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior or the XAML node stream prior to writing the object graph.</source>
          <target state="translated">渡さないでください、<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>を持つ<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>として<ph id="ph3">`true`</ph>から例外を処理する準備済みでない限り、 <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>、その他の方法を調整することも、<ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>動作や、オブジェクト グラフを作成する前に、XAML ノード ストリーム。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is built top-down during XAML initialization.</source>
          <target state="translated">XAML の初期化中にこの <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がトップダウンで構築されるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is built top-down during XAML initialization; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">XAML の初期化中にこの <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がトップダウンで構築される場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>Top-down is a metaphor that approximates XAML processor behavior when creating the object graph.</source>
          <target state="translated">上から下へは、オブジェクト グラフを作成するときに、XAML プロセッサの動作を概算する比喩です。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>When built top-down, a type is instantiated, attached to the parent, and then has its properties set.</source>
          <target state="translated">トップダウンをビルドすると、型がインスタンス化される、親にアタッチされているし、そのプロパティが設定されます。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>Top-down construction avoids invoking property-changed handlers multiple times.</source>
          <target state="translated">トップダウンの構築では、ハンドラーのプロパティ変更の複数回の呼び出しで回避できます。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</source>
          <target state="translated">このような処理は、オブジェクト グラフに波及し、そのため、複数のハンドラーの呼び出しを排除し、オブジェクト グラフの起動時のパフォーマンスの最適化を提供します。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a whitespace significant collection, as per the XML definition.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が XML 定義によって有意な空白のコレクションを表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a whitespace significant collection; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が有意な空白のコレクションを表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsXData">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents XML <ph id="ph2">&lt;see langword="XDATA" /&gt;</ph>, as per the XAML definition.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が XAML 定義によって XML <ph id="ph2">&lt;see langword="XDATA" /&gt;</ph> を表すかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsXData">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents <ph id="ph3">&lt;see langword="XDATA" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が <ph id="ph1">&lt;see langword="true" /&gt;</ph> を表す場合は <ph id="ph3">&lt;see langword="XDATA" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsXData">
          <source>This property aligns to the <ph id="ph1">`[is xdata]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">このプロパティに揃えます、 <ph id="ph1">`[is xdata]`</ph> [MS-XAML] の仕様の情報項目。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsXData">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsXData">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.ItemType">
          <source>Gets a value that provides the type information for the <ph id="ph1">&lt;see langword="Items" /&gt;</ph> property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の <ph id="ph1">&lt;see langword="Items" /&gt;</ph> プロパティの型情報を提供する値を取得します。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ItemType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the type of the items in the collection; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a collection.</source>
          <target state="translated">コレクション内のアイテムの型の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> オブジェクト。この <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がコレクションを表していない場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ItemType">
          <source>This property is only relevant if this <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a collection (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsCollection%2A&gt;</ph> is <ph id="ph3">`true`</ph>).</source>
          <target state="translated">このプロパティは関連する場合は、こののみ<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>コレクションを表します (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsCollection%2A&gt;</ph>は<ph id="ph3">`true`</ph>)。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ItemType">
          <source>The <ph id="ph1">`Items`</ph> property is whatever property holds items in that type of collection or array.</source>
          <target state="translated"><ph id="ph1">`Items`</ph>プロパティは、どのようなプロパティは、その種類のコレクションまたは配列に項目を保持します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ItemType">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ItemType">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.KeyType">
          <source>Gets a value that provides the type information for the key property of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, if the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a dictionary.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がディクショナリを表す場合、この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> のキー プロパティの型情報を提供する値を取得します。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.KeyType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the type of the key for dictionary usage, otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a dictionary.</source>
          <target state="translated">ディクショナリを使用する場合はキーの型の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> オブジェクト。この <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がディクショナリを表していない場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.KeyType">
          <source>This property is only relevant if this <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a dictionary (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsDictionary%2A&gt;</ph> is <ph id="ph3">`true`</ph>).</source>
          <target state="translated">このプロパティは関連する場合は、こののみ<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>ディクショナリを表します (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsDictionary%2A&gt;</ph>は<ph id="ph3">`true`</ph>)。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.KeyType">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.KeyType">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>The directive for which to find the aliased member.</source>
          <target state="translated">エイリアスが設定されたメンバーの検索対象となるディレクティブ。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>Returns the XAML member that is aliased to a XAML directive by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> によってエイリアスが XAML ディレクティブに設定された XAML メンバーを返します。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>The aliased member, if found; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">見つかった場合はエイリアスが設定されたメンバー。それ以外の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAliasedProperty%2A&gt;</ph>.</source>
          <target state="translated">呼び出し元から値を取得するときに、このメソッドを呼び出すことができます<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAliasedProperty%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>The default implementation can return results for the following XAML directives: <ph id="ph1">`Key`</ph>; <ph id="ph2">`Name`</ph>; <ph id="ph3">`Uid`</ph>; and <ph id="ph4">`xml:lang`</ph>.</source>
          <target state="translated">既定の実装は、次の XAML ディレクティブの結果を返すことができます:<ph id="ph1">`Key`</ph>です。<ph id="ph2">`Name`</ph>;<ph id="ph3">`Uid`</ph>; and <ph id="ph4">`xml:lang`</ph>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>Values for these depend on underlying reflection and might still return <ph id="ph1">`null`</ph> if no aliased property is found.</source>
          <target state="translated">基になるリフレクションに依存およびが返すもこれらの値<ph id="ph1">`null`</ph>エイリアス プロパティが見つからない場合。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or the schema information of a type.</source>
          <target state="translated">既定内部の CLR リフレクションには依存しないと、XAML 型システム情報または型のスキーマ情報を報告のメタデータまたはその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>Returns an enumerable set that contains all attachable properties that are exposed by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> で公開されているすべてのアタッチ可能なプロパティが含まれた列挙可能なセットを返します。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>An enumerable set that contains zero or more <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> values; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">0 個以上の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 値が含まれている列挙可能なセット。または <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;</ph>.</source>
          <target state="translated">呼び出し元から値を取得するときに、このメソッドを呼び出すことができます<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>Although <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;</ph> returns a generic collection, this <ph id="ph2">`Lookup`</ph> method returns a generic enumerable set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;</ph> 、ジェネリック コレクションを返しますこれ<ph id="ph2">`Lookup`</ph>メソッドがジェネリックの列挙可能なセットを返します。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">既定の実装では、内部の CLR リフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>When <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the default implementation can use <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, if it is available.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>は<ph id="ph2">`null`</ph>、既定の実装を使用できる<ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>が利用可能な場合は。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>This behavior calls <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> recursively to attempt to find a valid base type and returns <ph id="ph2">`null`</ph> if no valid base type exists.</source>
          <target state="translated">この動作を呼び出す<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph>再帰的に有効な基本型を返すを検索しようとする<ph id="ph2">`null`</ph>有効な基本型が存在しない場合。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</source>
          <target state="translated">Null の戻り値は、型のシステムやリフレクションのサポートの不足のための情報を決定できない場合に用に予約する必要があります。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>If a type is valid and reflection or other techniques are available, but a type does not have attachable members, you should instead return an empty <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> set.</source>
          <target state="translated">場合は、型が有効では、リフレクションやその他の手法は、利用可能、型には、アタッチ可能なメンバーはありませんは、空を代わりに返す必要があります<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>を設定します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>Returns an enumerable set that contains all the members that are exposed by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> で公開されているすべてのメンバーが含まれた列挙可能なセットを返します。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>An enumerable set that contains zero or more <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> values.</source>
          <target state="translated">0 個以上の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 値が含まれている列挙可能なセット。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;</ph>.</source>
          <target state="translated">呼び出し元から値を取得するときに、このメソッドを呼び出すことができます<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>Although <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;</ph> returns a generic collection, this <ph id="ph2">`Lookup`</ph> method returns a generic enumerable set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;</ph> 、ジェネリック コレクションを返しますこれ<ph id="ph2">`Lookup`</ph>メソッドがジェネリックの列挙可能なセットを返します。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">既定の実装では、内部の CLR リフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>For cases where <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the default implementation can use <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, if it is available.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>は<ph id="ph2">`null`</ph>、既定の実装を使用できます<ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>が利用可能な場合は。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>This behavior calls <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph> recursively to attempt to find a valid base type, and returns <ph id="ph2">`null`</ph> if no valid base type exists.</source>
          <target state="translated">この動作を呼び出す<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph>再帰的に有効な基本型を返すを検索しようとする<ph id="ph2">`null`</ph>有効な基本型が存在しない場合。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</source>
          <target state="translated">Null の戻り値は、型のシステムやリフレクションのサポートの不足のための情報を決定できない場合に用に予約する必要があります。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>If a type is valid, reflection or other techniques are available; if a type does not have members, you should instead return an empty <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> set.</source>
          <target state="translated">リフレクションまたは他の手法が使用可能な型が有効な場合型がメンバーを持たない場合は、空を代わりに返す必要があります<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>を設定します。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>Return values for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> should be mutually exclusive.</source>
          <target state="translated">値を返す<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph>相互に排他的にする必要があります。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>If you have a situation where a backing type system property can support a standard instance usage as well as an attachable usage, that member should be reported as two different <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> values, with one value appearing in the attachable list and another in the standard members list.</source>
          <target state="translated">2 つの異なるとしてそのメンバーが報告される場合は、バッキング型システムのプロパティが、アタッチ可能な使用法と同様に、標準インスタンスの使用をサポートできる場合がある場合は、<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>アタッチ可能な一覧と、標準的なメンバー リスト内の別に表示される値の 1 つの値。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>Returns a list of the types that are usable as the <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ContentProperty" /&gt;</ph> value for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ContentProperty" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 値として使用できる、型のリストを返します。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>A list of possible content types.</source>
          <target state="translated">使用可能なコンテンツ型のリスト。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>.</source>
          <target state="translated">呼び出し元から値を取得するときに、このメソッドを呼び出すことができます<ph id="ph1">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>Types that evaluate as <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> for a specific content type are not considered multiple types for purposes of <ph id="ph2">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>.</source>
          <target state="translated">型として評価される<ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph>特定のコンテンツ タイプは考慮されませんの目的で複数の種類<ph id="ph2">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>The default implementation can use other properties of <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> (<ph id="ph2">&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph>) to obtain a result.</source>
          <target state="translated">既定の実装は、の他のプロパティを使用できます<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>(<ph id="ph2">&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;</ph>、または<ph id="ph4">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph>) 結果を取得します。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>The <ph id="ph1">`Lookup`</ph> overrides for the preceding property list can also be invoked in this determination.</source>
          <target state="translated"><ph id="ph1">`Lookup`</ph>オーバーライドの前のプロパティ リストは、この判断で呼び出すこともできます。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>The name of the attachable member to get, in <bpt id="p1">&lt;c&gt;</bpt>ownerTypeName.MemberName<ept id="p1">&lt;/c&gt;</ept> form.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>ownerTypeName.MemberName<ept id="p1">&lt;/c&gt;</ept> フォームで取得するアタッチ可能メンバーの名前。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> for a specific named attachable from this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> から、特定の名前の付いたアタッチ可能なものを表す <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> object for the requested attachable member; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if no attachable member by that name exists.</source>
          <target state="translated">要求されたアタッチ可能メンバーの <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> オブジェクト。その名前のアタッチ可能メンバーが存在しない場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;</ph>.</source>
          <target state="translated">呼び出し元から値を取得するときに、このメソッドを呼び出すことができます<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">既定の実装では、内部の CLR リフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>When <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the default implementation can use <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, if it is available.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>は<ph id="ph2">`null`</ph>、既定の実装を使用できる<ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>が利用可能な場合は。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>This behavior calls <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> recursively to attempt to find a valid base type and returns <ph id="ph2">`null`</ph> if no valid base type exists.</source>
          <target state="translated">この動作を呼び出す<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph>再帰的に有効な基本型を返すを検索しようとする<ph id="ph2">`null`</ph>有効な基本型が存在しない場合。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> 仮想で、そのため、オーバーライドできます。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合) と予想される方法で不要になった位置が揃うように、報告された XAML 型のメンバーを変更する、 <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph>基になる CLR 型に関する情報。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">Reporting メンバーのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the immediate base type of this XAML type.</source>
          <target state="translated">この XAML 型の直接の基本型の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>Determination of this value is based on the underlying type of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> and schema context.</source>
          <target state="translated">この値は、この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の基になる型とスキーマ コンテキストに基づいて決定されます。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the immediate base type of this XAML type.</source>
          <target state="translated">この XAML 型の直接の基本型の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>.</source>
          <target state="translated">呼び出し元から値を取得するときに、このメソッドを呼び出すことができます<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>The default implementation might return an internal constant that represents the <ph id="ph1">&lt;xref:System.Object&gt;</ph> if <ph id="ph2">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">既定の実装を表す内部定数を返す場合があります、<ph id="ph1">&lt;xref:System.Object&gt;</ph>場合<ph id="ph2">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>は<ph id="ph3">`null`</ph>します。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> 仮想で、そのため、オーバーライドできます。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合) に報告された型の XAML 型情報が変更され、基になる CLR 型の型システム情報と予想される方法で整合不要になった。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">割り当て操作とアクセスのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>Returns a value of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlCollectionKind" /&gt;</ph> enumeration that declares which specific collection type this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> uses.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlCollectionKind" /&gt;</ph> で使用される特定のコレクション型を宣言する <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 列挙体の値を返します。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>A value of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlCollectionKind" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlCollectionKind" /&gt;</ph> 列挙体の値。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>This method is invoked by an internal private method (no public <ph id="ph1">`CollectionKind`</ph> or <ph id="ph2">`GetCollectionKind`</ph> API exists on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>).</source>
          <target state="translated">このメソッドは、内部プライベート メソッドによって呼び出されます (パブリック<ph id="ph1">`CollectionKind`</ph>または<ph id="ph2">`GetCollectionKind`</ph>に API が存在する<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">既定の実装では、内部の CLR リフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>For cases where <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the default implementation can use <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, if it is available.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>は<ph id="ph2">`null`</ph>、既定の実装を使用できます<ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>が利用可能な場合は。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>This behavior indirectly calls <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> recursively to attempt to find a valid base type; it returns <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph> if no valid base type exists.</source>
          <target state="translated">この動作を間接的に呼び出す<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>に有効な基本型を検索しようとしています。 再帰的に返します<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph>有効な基本型が存在しない場合。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>In general, the default implementation attempts to find the <ph id="ph1">`Add`</ph> method of the underlying type by reflection.</source>
          <target state="translated">既定の実装が検索しようとした一般に、<ph id="ph1">`Add`</ph>リフレクションによって基になる型のメソッドです。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>If found, the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> of the <ph id="ph2">`Add`</ph> method is enough information to determine which <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlCollectionKind&gt;</ph> value should be returned.</source>
          <target state="translated">場合が見つかると、<ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph>の<ph id="ph2">`Add`</ph>メソッドが判断するために必要な情報<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlCollectionKind&gt;</ph>値が返されます。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>Otherwise, it returns <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">それ以外の場合は、<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> must have arguments (generic constraints through <ph id="ph2">&lt;see langword="x:TypeArguments" /&gt;</ph>, initialization text, or other XAML techniques) to construct a valid instance of the type.</source>
          <target state="translated">型の有効なインスタンスを作成するために、この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が引数 (<ph id="ph2">&lt;see langword="x:TypeArguments" /&gt;</ph> を通じたジェネリック制約、初期化テキスト、または他の XAML 手法) を持つ必要があるかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if construction of an instance requires some argument value; otherwise, false.</source>
          <target state="translated">インスタンスの作成に引数値が必要な場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;</ph>.</source>
          <target state="translated">呼び出し元から値を取得するときに、このメソッドを呼び出すことができます<ph id="ph1">&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source>The default implementation returns <ph id="ph1">`false`</ph> for types considered value types in the CLR type system.</source>
          <target state="translated">既定の実装を返します<ph id="ph1">`false`</ph>CLR で値型と見なされますの種類のシステムと入力します。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source>For other than value types, CLR reflection <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> is used to determine whether a default constructor exists.</source>
          <target state="translated">値型、CLR リフレクション以外の場合<ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph>既定のコンス トラクターが存在するかどうかを調べるために使用します。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the content property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> のコンテンツ プロパティの <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 情報を返します。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the content property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> のコンテンツ プロパティの <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 情報。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>May be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> でもかまいません。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;</ph>.</source>
          <target state="translated">呼び出し元から値を取得するときに、このメソッドを呼び出すことができます<ph id="ph1">&lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>The default implementation checks for <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> on the type definition.</source>
          <target state="translated">既定の実装<ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>型定義。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>属性に直接の基になる型の属性が見つからない場合。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>If these checks do not discover a content type, the default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">既定の実装を返しますのかどうか、これらのチェックはコンテンツの種類を検出しません、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>Gets a list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> values that represent the content wrappers for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> のコンテンツ ラッパーを表す <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 値のリストを取得します。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> values that represent the content wrappers for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> のコンテンツ ラッパーを表す <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 値のリスト。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>A content wrapper is a class that represents the content collection type when the types that are used in that collection are not contiguous to the type system.</source>
          <target state="translated">コンテンツのラッパーは、そのコレクションに使用される型は、型システムを連続していないときにコンテンツのコレクション型を表すクラスです。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>The types of collection items for the content wrapper are expected to be limited in some manner beyond <ph id="ph1">&lt;xref:System.Object&gt;</ph> or a neutral object equivalent.</source>
          <target state="translated">コンテンツ ラッパー コレクション項目の種類を超えるいくつかの方法で制限されるとして予想される<ph id="ph1">&lt;xref:System.Object&gt;</ph>または同等のニュートラル オブジェクト。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>However, this limitation is only enforced by the design or purpose of the properties that use that type, and not by the type system.</source>
          <target state="translated">ただし、このような制限が、およびデザインまたはその型を使用するプロパティの目的は、型システムではなくにのみ適用されます。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>More than one content wrapper can exist on a type.</source>
          <target state="translated">1 つ以上のコンテンツ ラッパーは、型に存在できます。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>For an example class and scenario from the WPF XAML implementation, see <ph id="ph1">&lt;xref:System.Windows.Documents.InlineCollection&gt;</ph>.</source>
          <target state="translated">クラスの例と WPF XAML 実装からシナリオの場合は、「<ph id="ph1">&lt;xref:System.Windows.Documents.InlineCollection&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
          <source>When implemented in a derived class, returns an <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> implementation.</source>
          <target state="translated">派生クラスで実装される場合、<ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> 実装を返します。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> の実装。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
          <source>Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</source>
          <target state="translated">CLR 属性の値を取得する代替方法を内部のリフレクションを提供するには、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
          <source>In absence of an override, the internal reflector uses typical CLR reflection logic.</source>
          <target state="translated">上書きがない場合では、内部 reflector は、一般的な CLR ロジックでリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
          <source>The default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">既定の実装では、<ph id="ph1">`null`</ph> が返されます。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used for deferred loading of XAML-declared objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> オブジェクトを返します。これは XAML で宣言されたオブジェクトの遅延読み込みに使用されます。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that has a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> constraint on the generic.</source>
          <target state="translated">ジェネリックの <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 制約のある <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;</ph>.</source>
          <target state="translated">呼び出し元から値を取得するときに、このメソッドを呼び出すことができます<ph id="ph1">&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;</ph> to return a different value than is enabled by default internal reflection and are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> information.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;</ph>をカスタムを既定の内部リフレクションで有効になっても提供するよりも、別の値を返す<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>情報。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>The default implementation returns an object on the basis of reading <ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph>.</source>
          <target state="translated">既定の実装は、読み取りに基づいてオブジェクトを返します<ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>It can also  check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>属性に直接の基になる型の属性が見つからない場合。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>If a value is unavailable, this method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">このメソッドが戻るかどうかは、値は使用できません、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> に関連付けられた <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> information for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 情報、または <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>The default implementation does not require that a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> be constructed by using one of the constructors that pass an initial <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>.</source>
          <target state="translated">既定の実装で、いる必要はありません、<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>初期を渡すコンス トラクターのいずれかを使用して構築する<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>However, an <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> value must exist for the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>; otherwise, the default implementation returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">ただし、<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>の値が存在する必要があります、<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>以外の場合、既定の実装を返します<ph id="ph3">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>Override this method if you also create a derived class from <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> and intend to return the derived class.</source>
          <target state="translated">派生クラスも作成する場合は、このメソッドをオーバーライド<ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>および派生クラスを返すようにします。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>If you return <ph id="ph1">`null`</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph> returns <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> to callers.</source>
          <target state="translated">返す場合<ph id="ph1">`null`</ph>、<ph id="ph2">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph>返します<ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>の呼び出し元にします。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an ambient type, as per the XAML definition.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が XAML 定義によってアンビエント型を表すかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an ambient type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がアンビエント型を表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>The default implementation uses CLR reflection on the <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> and can check the base types.</source>
          <target state="translated">既定の実装で CLR のリフレクションを使用して、<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>基本型を確認できます。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>This implementation checks for the <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> that is applied to the relevant type's definition at the class level and returns <ph id="ph2">`true`</ph> in this case.</source>
          <target state="translated">この実装を確認、<ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>をクラス レベルで、関連する種類の定義に適用して返す<ph id="ph2">`true`</ph>ここでします。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>All other cases return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">その他のすべてのケースを返す<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;</ph> to return a different value than is enabled by default internal reflection.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;</ph>既定内部リフレクションで有効になっても、異なる値を返すにします。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a constructible type, as per the XAML definition.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が XAML 定義によって構築可能な型を表すかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a constructible type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が構築可能な型を表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>The default implementation uses CLR reflection on the <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>.</source>
          <target state="translated">既定の実装で CLR のリフレクションを使用して、<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>The type must be concrete, non-nested, and closed.</source>
          <target state="translated">型は、具象、入れ子にされないおよび終了する必要があります。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>The default implementation checks whether the type is a value type and the return of <ph id="ph1">&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;</ph>.</source>
          <target state="translated">既定の実装は、型が値型との戻り値かどうかを確認します。<ph id="ph1">&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>For a null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>, this method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>、このメソッドが戻る<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;</ph> to return a different value than is enabled by default internal reflection.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;</ph>既定内部リフレクションで有効になっても、異なる値を返すにします。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a markup extension.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がマークアップ拡張機能を表すかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a markup extension; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がマークアップ拡張機能を表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source>The default implementation consists only of this call:</source>
          <target state="translated">既定の実装は、この呼び出しののみで構成されます。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source>In XAML specification terms, this type must be assignable to <ph id="ph1">`x:MarkupExtension`</ph> in order to return <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>.</source>
          <target state="translated">XAML の仕様の用語では、この型に割り当てることにする必要があります<ph id="ph1">`x:MarkupExtension`</ph>を返すために<ph id="ph2">`true`</ph>の<ph id="ph3">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a XAML namescope, as per the XAML definition.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が XAML 定義によって XAML 名前スコープを表すかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a XAML namescope; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が XAML 名前スコープを表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>The default implementation makes a <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> call indirectly against the type <ph id="ph2">&lt;xref:System.Windows.Markup.INameScope&gt;</ph>.</source>
          <target state="translated">既定の実装、<ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph>型に対して直接呼び出す<ph id="ph2">&lt;xref:System.Windows.Markup.INameScope&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> is an interface that is defined in the assembly WindowsBase.dll.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> WindowsBase.dll アセンブリで定義されているインターフェイスです。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>This technique for XAML namescope identification is used both by WPF and Windows Workflow Foundation implementations of XAML.</source>
          <target state="translated">XAML 名前スコープ識別するためには、この手法を使用する XAML の WPF と Windows Workflow Foundation の実装によって両方です。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>A XAML namescope enforces the name uniqueness of the property or properties that are used for <ph id="ph1">`x:Name`</ph><ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>.</source>
          <target state="translated">XAML 名前スコープまたは複数に使用されるプロパティの名前の一意性を強制する<ph id="ph1">`x:Name`</ph> <ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>です。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph> is <ph id="ph2">`true`</ph>, then some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph>は<ph id="ph2">`true`</ph>一意性を適用するためのいくつかのメカニズムが存在する必要があり、XAML 名前空間を所有しているこの種類の観点から評価する必要があります。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>The XAML namescope then extends to the content of the type until another XAML namescope owning type is encountered.</source>
          <target state="translated">XAML 名前スコープは、XAML 名前スコープを所有している別の型が検出されるまで、型のコンテンツを拡張します。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a nullable type, as per the XAML definition.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が XAML 定義によって null 許容型を表すかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a nullable type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が null 許容型を表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source>The default implementation makes a determination based on the CLR core library nullable concept, checked against <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>.</source>
          <target state="translated">既定の実装は、概念に基づいて CLR コア ライブラリ null 許容型、照合決定<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source>For a null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>, it returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>、返します<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a public type in the relevant type system.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が関連する型システムでパブリック型を表すかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a public type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がパブリック型を表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>The default implementation uses CLR reflection against a non-null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>.</source>
          <target state="translated">既定の実装が null でないに対して CLR リフレクションを使用して<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>For a null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>, it returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>、返します<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> 仮想で、そのため、オーバーライドできます。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system or access information of its underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合)、基になる CLR 型の型システムまたはアクセスの情報と予想される方法で整合しなくように XAML 型についての報告されたアクセスを変更します。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">割り当て操作とアクセスのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a type that cannot be resolved in the underlying type system.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が基になる型システムで解決できない型を表すかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a nonresolvable type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が解決できない型を表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source>The default implementation can use CLR reflection.</source>
          <target state="translated">既定の実装では、CLR のリフレクションを使用できます。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source>For a null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>, it returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>、返します<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a whitespace significant collection, as per the XML definition.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が XML 定義によって有意な空白のコレクションを表すかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a white-space significant collection; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が有意な空白のコレクションを表す場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;</ph>.</source>
          <target state="translated">既定の実装が読み取りに基づいた値を返します<ph id="ph1">&lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>It can also check the <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック、<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>属性に直接の基になる型の属性が見つからない場合。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>If a value is not available, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsXData">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents XML <ph id="ph2">&lt;see langword="XDATA" /&gt;</ph>, as per the XAML definition.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が XAML 定義によって XML <ph id="ph2">&lt;see langword="XDATA" /&gt;</ph> を表すかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsXData">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents <ph id="ph3">&lt;see langword="XDATA" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が <ph id="ph1">&lt;see langword="true" /&gt;</ph> を表す場合は <ph id="ph3">&lt;see langword="XDATA" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsXData">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsXData">
          <source>The default implementation makes a <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> call indirectly against the type <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated">既定の実装、<ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph>型に対して直接呼び出す<ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsXData">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>Returns a value that provides the type information for the <ph id="ph1">&lt;see langword="Items" /&gt;</ph> property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の <ph id="ph1">&lt;see langword="Items" /&gt;</ph> プロパティの型情報を提供する値を返します。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the type of the items in the collection; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph> if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a collection.</source>
          <target state="translated">コレクション内のアイテムの型の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> オブジェクト。この <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がコレクションを表していない場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>The default implementation can use CLR reflection concepts, such as checking for an <ph id="ph1">`Add`</ph> method by <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> and using the <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>; checking <ph id="ph4">&lt;xref:System.Xaml.XamlType.IsArray%2A&gt;</ph>; and checking <ph id="ph5">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> and trying the same logic there.</source>
          <target state="translated">既定の実装の確認などの CLR リフレクションの概念を使用できます、<ph id="ph1">`Add`</ph>メソッドによって<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>を使用して、<ph id="ph3">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>以外の場合はチェック<ph id="ph4">&lt;xref:System.Xaml.XamlType.IsArray%2A&gt;</ph>; とチェック<ph id="ph5">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>があるのと同じロジックをしようとします。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>Cases where <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> returns <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph> should return <ph id="ph3">`null`</ph>.</source>
          <target state="translated">あるケース<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>返します<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph>返す必要があります<ph id="ph3">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>Returns a value that provides the type information for the key property of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, if the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a dictionary.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がディクショナリを表す場合、この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> のキー プロパティの型情報を提供する値を返します。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the type of the key for dictionary usage, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a dictionary,</source>
          <target state="translated">ディクショナリを使用する場合はキーの型の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> オブジェクト。この <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がディクショナリを表していない場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>The default implementation can use CLR reflection concepts, such as checking for an <ph id="ph1">`Add`</ph> method by <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> and using the <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>; and checking <ph id="ph4">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> and trying the same logic there.</source>
          <target state="translated">既定の実装の確認などの CLR リフレクションの概念を使用できます、<ph id="ph1">`Add`</ph>メソッドによって<ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph>を使用して、 <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>; とチェック<ph id="ph4">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>があるのと同じロジックをしようとします。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>Cases where <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> does not return <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.Dictionary?displayProperty=nameWithType&gt;</ph> should return <ph id="ph3">`null`</ph>.</source>
          <target state="translated">あるケース<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph>返さない<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.Dictionary?displayProperty=nameWithType&gt;</ph>返す必要があります<ph id="ph3">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>Returns a value that provides the type information for the returned <ph id="ph1">&lt;see langword="ProvideValue" /&gt;</ph> of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, if it represents a markup extension.</source>
          <target state="translated">マークアップ拡張機能を表す場合、この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の返された <ph id="ph1">&lt;see langword="ProvideValue" /&gt;</ph> の型情報を提供する値を返します。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the return type for markup extension usage; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a markup extension.</source>
          <target state="translated">マークアップ拡張機能を使用する場合は戻り値の型の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> オブジェクト。この <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がマークアップ拡張機能を表していない場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>The default implementation returns a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> on the basis of reading <ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph>.</source>
          <target state="translated">既定の実装を返します、<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>読み取りに基づいて<ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>属性に直接の基になる型の属性が見つからない場合。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>If a value is not available, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>The name of the member to get (as a string).</source>
          <target state="translated">取得するメンバーの名前 (文字列)。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to return a member even if that member has a <ph id="ph2">&lt;see langword="true" /&gt;</ph> value for <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.IsReadOnly" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> to not return a <ph id="ph5">&lt;see cref="P:System.Xaml.XamlMember.IsReadOnly" /&gt;</ph> member.</source>
          <target state="translated">メンバーの <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.IsReadOnly" /&gt;</ph> の値が <ph id="ph1">&lt;see langword="true" /&gt;</ph> であってもメンバーを返す場合は <ph id="ph2">&lt;see langword="true" /&gt;</ph>。<ph id="ph5">&lt;see cref="P:System.Xaml.XamlMember.IsReadOnly" /&gt;</ph> のメンバーを返さない場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> for a specific named member from this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> から、特定の名前が付けられたメンバーの <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the member, if a member was found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">該当するメンバーが見つかった場合はメンバーの <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 情報。それ以外の場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>The default implementation returns a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> based on internal CLR reflection and evaluation against the schema context.</source>
          <target state="translated">既定の実装を返します、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> CLR の内部のリフレクションとスキーマのコンテキストで評価に基づいています。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> 仮想で、そのため、オーバーライドできます。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合) と予想される方法で不要になった位置が揃うように、報告された XAML 型のメンバーを変更する、 <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph>基になる CLR 型に関する情報。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">Reporting メンバーのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>The count (arity) of the particular syntax or constructor mode that you want information about.</source>
          <target state="translated">情報を取得する必要のある、特定の構文またはコンストラクター モードの個数 (アリティ)。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">マークアップ拡張型の場合は、この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の特定のマークアップ拡張機能の使用でサポートされている位置指定パラメーターの型を返します。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> values where each such <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is the type for that position in the syntax.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 値のリスト。各 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> は構文内でその位置の型に相当します。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>You must specify those types in the same order when supplying markup input for the markup extension.</source>
          <target state="translated">マークアップ拡張機能のマークアップ入力を指定する場合は、これらの型を同一の順序で指定する必要があります。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>The default implementation uses internal reflection information based on finding constructors and checking the arity.</source>
          <target state="translated">既定の実装では、コンス トラクターを検索して、アリティのチェックに基づく内部のリフレクション情報を使用します。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>This API is only relevant if this <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a markup extension (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph> is <ph id="ph3">`true`</ph>).</source>
          <target state="translated">この API は、関連する場合は、こののみ<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>マークアップ拡張機能を表します (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>は<ph id="ph3">`true`</ph>)。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>The input <ph id="ph1">`parameterCount`</ph> is not for requesting the type of a specific positional parameter.</source>
          <target state="translated">入力<ph id="ph1">`parameterCount`</ph>を使用しない特定の位置指定パラメーターの型を要求します。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>It is for specifying the arity of a markup extension usage.</source>
          <target state="translated">マークアップ拡張機能の使用のアリティを指定することがあります。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>Markup extension usage often has multiple signatures and uses different parameter arity (count) of positional parameters to differentiate.</source>
          <target state="translated">多くの場合、マークアップ拡張機能の使用は、複数の署名を持つし、区別するために位置指定パラメーターの異なるパラメーター アリティ (数) を使用します。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</source>
          <target state="translated">ただし、重複 arities を許可して、差別化要因の位置指定パラメーターの型を使用するスキーマ コンテキストを構成することができます。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>For a specific arity count, the parameter positions and types can vary.</source>
          <target state="translated">特定のアリティ count の場合は、パラメーターの位置と型が異なります。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>To get the positional type of a specific arity's markup extension usage, you first call <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph> with the arity count.</source>
          <target state="translated">特定のアリティのマークアップ拡張機能の使用の位置指定の種類を取得するには、最初に呼び出す<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph>アリティ カウントします。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>Then get the item at that position from the returned collection.</source>
          <target state="translated">返されるコレクションからその位置に項目を取得します。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
          <source>Returns a handler callback to use for the set operations of markup extensions.</source>
          <target state="translated">マークアップ拡張機能のセット操作で使用するハンドラー コールバックを返します。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
          <source>A handler callback to use for the set operations of markup extensions.</source>
          <target state="translated">マークアップ拡張機能のセット操作で使用するハンドラー コールバック。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;</ph>.</source>
          <target state="translated">既定の実装が読み取りに基づいた値を返します<ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>属性に直接の基になる型の属性が見つからない場合。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
          <source>Returns a handler to use for type converter setting cases.</source>
          <target state="translated">型コンバーターを設定する場合に使用するハンドラーを返します。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
          <source>A handler to use for type converter setting cases.</source>
          <target state="translated">型コンバーターを設定する場合に使用するハンドラー。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt;</ph>.</source>
          <target state="translated">既定の実装が読み取りに基づいた値を返します<ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>属性に直接の基になる型の属性が見つからない場合。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> should be serialized using a mode that  trims surrounding whitespace.</source>
          <target state="translated">周囲の空白をトリムするモードを使用して、この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> をシリアル化する必要があるかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> should be serialized in a mode that trims surrounding whitespace; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">周囲の空白をトリムするモードでこの <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> をシリアル化する必要がある場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;</ph>.</source>
          <target state="translated">既定の実装が読み取りに基づいた値を返します<ph id="ph1">&lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>属性に直接の基になる型の属性が見つからない場合。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source>If a value is unavailable, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that has a <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint, which represents type-conversion behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> の値に対する型変換動作を表す <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 制約がある <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint that represents type-conversion behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> の値に対する型変換動作を表す <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 制約を持つ <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>、または <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>.</source>
          <target state="translated">既定の実装が読み取りに基づいた値を返します<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>The default implementation can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">既定の実装を確認できますも<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>属性に直接の基になる型の属性が見つからない場合。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>It also includes special logic for default conversion of enumerations, common value types, and generics.</source>
          <target state="translated">列挙型、共通の値型とジェネリックの既定の変換の特別なロジックも含まれています。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>Returns the CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that underlies this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> の基になる CLR <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>The CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that underlies this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> の基になる CLR <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>、または <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>The default implementation returns an internal field.</source>
          <target state="translated">既定の実装では、内部のフィールドを返します。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>That field is generally initialized during construction and its value is based on which constructor was called and the information that you provided.</source>
          <target state="translated">構築時にそのフィールドが初期化される一般にし、その値がコンス トラクターが呼び出されたと指定した情報に基づいています。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is built top-down during XAML initialization.</source>
          <target state="translated">XAML の初期化中にこの <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がトップダウンで構築されるかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is built top-down during XAML initialization; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">XAML の初期化中にこの <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がトップダウンで構築される場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>Top-down is a metaphor that approximates XAML processor behavior when it creates the object graph.</source>
          <target state="translated">上から下へは、オブジェクト グラフを作成するときに、XAML プロセッサの動作を概算する比喩です。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>When built top-down, a type is instantiated, attached to the parent, and has its properties set.</source>
          <target state="translated">構築時に、トップダウン、型がインスタンス化される、親にアタッチされているし、そのプロパティが設定します。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>Top-down construction avoids invoking property-changed handlers multiple times.</source>
          <target state="translated">トップダウンの構築では、ハンドラーのプロパティ変更の複数回の呼び出しで回避できます。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</source>
          <target state="translated">このような処理は、オブジェクト グラフに波及し、そのため、複数のハンドラーの呼び出しを排除し、オブジェクト グラフの起動時のパフォーマンスの最適化を提供します。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;</ph>.</source>
          <target state="translated">既定の実装が読み取りに基づいた値を返します<ph id="ph1">&lt;xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>属性に直接の基になる型の属性が見つからない場合。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>If a value is unavailable, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that has a <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint, which represents value serialization behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> の値に対する値のシリアル化動作を表す <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> 制約がある <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint that represents value serialization behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> の値に対する値のシリアル化動作を表す <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> 制約を持つ <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>、または <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;</ph>.</source>
          <target state="translated">呼び出しによって、このメソッドを呼び出せる<ph id="ph1">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>.</source>
          <target state="translated">既定の実装が読み取りに基づいた値を返します<ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック<ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>属性に直接の基になる型の属性が見つからない場合。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>It also includes special logic for default serialization of enumerations, common value types, or generics.</source>
          <target state="translated">列挙型、共通の値型またはジェネリックの既定のシリアル化の特別なロジックも含まれています。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;</ph> to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は<ph id="ph1">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;</ph>別のロジックを使用します。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.MarkupExtensionReturnType">
          <source>Gets a value that provides the type information for the returned <ph id="ph1">&lt;see langword="ProvideValue" /&gt;</ph> of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, if it represents a markup extension.</source>
          <target state="translated">マークアップ拡張機能を表す場合、この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の返された <ph id="ph1">&lt;see langword="ProvideValue" /&gt;</ph> の型情報を提供する値を取得します。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.MarkupExtensionReturnType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the return type for markup extension usage; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a markup extension.</source>
          <target state="translated">マークアップ拡張機能を使用する場合は戻り値の型の <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> オブジェクト。この <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がマークアップ拡張機能を表していない場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.MarkupExtensionReturnType">
          <source>This property is only relevant if this <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a markup extension (<ph id="ph2">`x:MarkupExtension`</ph> is in the assignable types list).</source>
          <target state="translated">このプロパティは関連する場合のみ<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>マークアップ拡張機能を表します (<ph id="ph2">`x:MarkupExtension`</ph>が割り当てられた型リスト)。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.MarkupExtensionReturnType">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.MarkupExtensionReturnType">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.Name">
          <source>Gets the string name of the type that this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が表す型の文字列名を取得します。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Name">
          <source>The string name of this XAML type.</source>
          <target state="translated">この XAML 型の文字列名。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Name">
          <source>This property typically gets the schema-constructed name (per the <ph id="ph1">&lt;xref:System.Xaml.XamlType.%23ctor%2A&gt;</ph> signature), or the name of the <ph id="ph2">&lt;xref:System.Type&gt;</ph>, if it is constructed by using the pertinent constructor of the CLR type system.</source>
          <target state="translated">このプロパティは、通常、スキーマで構築された名前を取得 (あたり、<ph id="ph1">&lt;xref:System.Xaml.XamlType.%23ctor%2A&gt;</ph>署名)、またはの名前、 <ph id="ph2">&lt;xref:System.Type&gt;</ph>CLR 型システムの適切なコンス トラクターを使用して構成する場合は、します。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> または <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> または <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> objects have the same value.</source>
          <target state="translated">指定した 2 つの <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> オブジェクトの値が同一かどうかを判断します。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="xamlType1" /&gt;</ph> is the same as the value of <ph id="ph3">&lt;paramref name="xamlType2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="xamlType1" /&gt;</ph> の値が <ph id="ph3">&lt;paramref name="xamlType2" /&gt;</ph> の値と同じ場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> または <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> または <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> objects have different values.</source>
          <target state="translated">指定した 2 つの <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> オブジェクトの値が異なるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="xamlType1" /&gt;</ph> is different from the value of <ph id="ph3">&lt;paramref name="xamlType2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の値が <ph id="ph2">&lt;paramref name="xamlType1" /&gt;</ph> の値と異なる場合は <ph id="ph3">&lt;paramref name="xamlType2" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.PreferredXamlNamespace">
          <source>Gets the single XAML namespace that is the primary XAML namespace for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> のプライマリ XAML 名前空間である単一の名前空間を取得します。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.PreferredXamlNamespace">
          <source>The identifier, as a string, of the primary XAML namespace for this XAML type.</source>
          <target state="translated">文字列で表される、この XAML 型のプライマリ XAML 名前空間の識別子。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.PreferredXamlNamespace">
          <source>This implementation provides the same value as calling <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A&gt;</ph> and then getting the first value string from the returned enumerable set.</source>
          <target state="translated">この実装は呼び出すことと同じ値を提供<ph id="ph1">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A&gt;</ph>と返される列挙可能なセットから最初の値の文字列を取得します。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.SchemaContext">
          <source>Gets the active <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> for processing this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> を処理するアクティブな <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.SchemaContext">
          <source>The active <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> for processing this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> を処理するアクティブな <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.SchemaContext">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> is a required parameter entry when constructing a <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> 必要なパラメーターの入力を構築するときに、<ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.ToString">
          <source>Returns a string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の文字列表現を返します。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.ToString">
          <source>A string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> の文字列表現。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.ToString">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> implementation of <ph id="ph2">&lt;xref:System.Object.ToString%2A&gt;</ph> returns the <ph id="ph3">&lt;xref:System.Xaml.XamlType.Name%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>の実装<ph id="ph2">&lt;xref:System.Object.ToString%2A&gt;</ph>を返します、<ph id="ph3">&lt;xref:System.Xaml.XamlType.Name%2A&gt;</ph>のプロパティ、<ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> has whitespace handling behavior for serialization that trims the surrounding whitespace in its content.</source>
          <target state="translated">コンテンツを囲んでいる空白をトリムするシリアル化の空白処理動作がこの <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> に含まれているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a type that uses whitespace trimming; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> が空白をトリムする型を表している場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.TypeArguments">
          <source>Gets a list of type arguments for cases where this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a generic.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がジェネリックを表す場合に型引数のリストを取得します。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeArguments">
          <source>A list of type argument types; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>, if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a generic.</source>
          <target state="translated">型引数の型のリスト。または、この <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> がジェネリックを表していない場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeArguments">
          <source>There are certain scenarios for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> where calling the <ph id="ph2">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph> parameter returns a list where the types are still open.</source>
          <target state="translated">特定のシナリオがある、<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>を呼び出す場合、<ph id="ph2">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph>パラメーターは、型がまだ開いて一覧を返します。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeArguments">
          <source>In this case, one or more of the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> values will have placeholder values for <ph id="ph2">&lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType&gt;</ph>, such as <ph id="ph3">`T`</ph>, to represent that the generic is still open.</source>
          <target state="translated">この場合は、1 つ以上で、返された<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>値のプレース ホルダーの値になります<ph id="ph2">&lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType&gt;</ph>など<ph id="ph3">`T`</ph>をジェネリックがまだ開いていることを示します。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeArguments">
          <source>This scenario can occur if you get a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> from a call to <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%2A&gt;</ph>, instead of from a XAML reader implementation.</source>
          <target state="translated">このシナリオは、取得する場合に発生することができます、<ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>への呼び出しから<ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%2A&gt;</ph>の代わりに XAML リーダーの実装からです。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.TypeConverter">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint that represents type conversion behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> の値に対する型変換動作を表す <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 制約を持つ <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeConverter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint that represents type conversion behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> の値に対する型変換動作を表す <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 制約を持つ <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeConverter">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeConverter">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</ph>この型にします。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.UnderlyingType">
          <source>Gets the CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that underlies this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> の基になる CLR <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.UnderlyingType">
          <source>The CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that underlies this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> の基になる CLR <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.ValueSerializer">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint that represents value serialization behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> の値に対する値のシリアル化動作を表す <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> 制約を持つ <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ValueSerializer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint that represents value serialization behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> の値に対する値のシリアル化動作を表す <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> 制約を持つ <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>、または <ph id="ph4">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ValueSerializer">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>、このプロパティへの呼び出しを呼び出すことができます<ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;</ph>の上書きを<ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>クラスを派生します。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ValueSerializer">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;</ph> on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して<ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;</ph>この型にします。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>