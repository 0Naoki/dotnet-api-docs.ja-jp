<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlObjectWriter.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ca402de94a9fb4c2404a3eb885b3a1fc9d0fc4b6.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca402de94a9fb4c2404a3eb885b3a1fc9d0fc4b6</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlObjectWriter">
          <source>Creates an object graph from a source XAML node stream.</source>
          <target state="translated">作成元の XAML ノード ストリームからオブジェクト グラフを作成します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The <ph id="ph1">`Write`</ph> methods of <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> implement a pattern so that the <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> uses the <ph id="ph4">&lt;xref:System.Xaml.XamlWriter&gt;</ph> that is defined by the <ph id="ph5">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">`Write`</ph>のメソッド<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>パターンを実装するように、<ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>を使用して、<ph id="ph4">&lt;xref:System.Xaml.XamlWriter&gt;</ph>によって定義されている、<ph id="ph5">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph> logic switches between the <ph id="ph2">`Write`</ph> methods, depending on which node type is at the current position in the reader.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph> ロジックを切り替えます、<ph id="ph2">`Write`</ph>メソッド、型が、リーダーの現在位置にあるはどのノードによって異なります。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Scope</source>
          <target state="translated">スコープ</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> has a concept of scope; that is, the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> maintains a conceptual point of reference in its output object graph.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> ; されるスコープの概念を持つ、<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>出力オブジェクト グラフ内の参照の概念のポイントを保持します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>For a particular scope, certain operations might be valid or invalid, or produce a no-operation result.</source>
          <target state="translated">特定のスコープの特定の操作では、有効または無効にするまたは非操作の結果を生成可能性があります。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>For example, if you call <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph> to write directives for initialization on an object that already exists as an instance, the default implementation throws an exception.</source>
          <target state="translated">呼び出す場合など、<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph>インスタンスとして既にオブジェクトで初期化が存在するは、ディレクティブを書き込みは、既定の実装が例外をスローします。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>A possible technique for tracking scope in a custom <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> is to align the node actions with a stack or frame class.</source>
          <target state="translated">カスタムのスコープを追跡する方法<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>にスタックまたはフレーム クラスを持つノードの操作を配置します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The stack or frame can keep track of push and pop for each level of object-model depth that is entered or exited while the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> writes the object graph.</source>
          <target state="translated">スタックまたはフレームを追跡できますプッシュおよびポップが入力したか、終了しているオブジェクト モデル階層の各レベルの中に、<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>オブジェクト グラフを書き込みます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Callbacks</source>
          <target state="translated">コールバック</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>To support intermediate and advanced <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> scenarios, the mechanism of writing an object graph provides callback entry points that occur when a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> commits or is about to commit certain actions.</source>
          <target state="translated">中間と高度なをサポートするために<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>シナリオでは、オブジェクト グラフの書き込みのメカニズムを提供コールバックが発生するエントリ ポイントと、<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>がコミットまたは特定の操作をコミットしようとしています。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Some callbacks are enabled in the settings and are not specific to the object type or the member being written; however, callback information is often available in context or is in the event data that is sent through the callback.</source>
          <target state="translated">コールバックの一部の設定で有効になっているし、オブジェクトの種類または書き込み対象のメンバーに限定されません。ただし、コールバック情報はコンテキストには多くの場合、または、コールバックを通じて送信されるデータでは、イベント。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The following is a list of relevant callbacks:</source>
          <target state="translated">関連するコールバックの一覧を次に示します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A&gt;</ph> is invoked when the scope goes to a new object and at the <ph id="ph2">&lt;xref:System.ComponentModel.ISupportInitialize.BeginInit%2A&gt;</ph> phase of object lifetime for each created object.</source>
          <target state="translated">宣言されているコールバック<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A&gt;</ph>に新しいオブジェクトがスコープになるときに呼び出される、<ph id="ph2">&lt;xref:System.ComponentModel.ISupportInitialize.BeginInit%2A&gt;</ph>作成した各オブジェクトについてオブジェクトの有効期間のフェーズです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A&gt;</ph> is invoked when the scope goes to a new object and at the <ph id="ph2">&lt;xref:System.ComponentModel.ISupportInitialize.EndInit%2A&gt;</ph> phase of object lifetime for each created object.</source>
          <target state="translated">宣言されているコールバック<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A&gt;</ph>に新しいオブジェクトがスコープになるときに呼び出される、<ph id="ph2">&lt;xref:System.ComponentModel.ISupportInitialize.EndInit%2A&gt;</ph>作成した各オブジェクトについてオブジェクトの有効期間のフェーズです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A&gt;</ph> is invoked when the scope starts in an object, and occurs when the first <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph> call to that object scope is made but not yet committed.</source>
          <target state="translated">宣言されているコールバック<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A&gt;</ph>スコープは、オブジェクトを起動し、発生したときに呼び出されるときに、最初<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph>そのオブジェクトのスコープへの呼び出しが行われたが、コミットされていません。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A&gt;</ph> is invoked when the scope starts in an object, and happens when the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> call to that object scope is made but not yet committed.</source>
          <target state="translated">宣言されているコールバック<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A&gt;</ph>スコープは、オブジェクトを起動し、動作が呼び出されるときに、<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>そのオブジェクトのスコープへの呼び出しが行われたが、コミットされていません。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A&gt;</ph> is invoked when <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.OnSetValue%2A&gt;</ph> is called.</source>
          <target state="translated">宣言されているコールバック<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A&gt;</ph>ときに呼び出される<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.OnSetValue%2A&gt;</ph>と呼びます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Writing Dictionary Keys</source>
          <target state="translated">ディクショナリ キーの記述</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> supports type conversion on the constraints of a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> before the dictionary contents are added to the object graph.</source>
          <target state="translated">既定の実装<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>の制約条件の型変換をサポートする<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>ディクショナリの前に、内容が、オブジェクト グラフに追加されます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>In this manner, a generic dictionary can be keyed at run time by objects and can match the relevant generic <ph id="ph1">`Add`</ph> and indexer behavior.</source>
          <target state="translated">この方法でジェネリック ディクショナリが実行時にオブジェクトによってキー指定されることができ、関連するジェネリックに適合する<ph id="ph1">`Add`</ph>およびインデクサー動作します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>However, as implemented for the base <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, this capability exists only for object graph creation from the base <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class and not for derived classes of <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">ただし、ベースの実装として<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>、この機能にのみ存在ベースからのオブジェクト グラフの作成<ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>クラスの派生クラスではなく<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Checks for Disposed</source>
          <target state="translated">チェックの破棄</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>XAML writers are potentially used for deferred operations or where a call is made against a XAML writer instance that has been disposed in the interim.</source>
          <target state="translated">XAML ライターは、可能性のある、遅延の操作またはその前に破棄されている XAML ライターのインスタンスに対して呼び出しが行われる場所に使用されます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Various APIs of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> might throw <ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph> in these cases.</source>
          <target state="translated">さまざまな Api<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>スローする可能性があります<ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph>このような場合です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlObjectWriter">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
          <source>A XAML schema context that is shared with the XAML reader that provides nodes for writing.</source>
          <target state="translated">書き込み用のノードを提供する XAML リーダーとの間で共有される XAML スキーマ コンテキスト。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> class using  the XAML schema context that is used by a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> で使用される XAML スキーマ コンテキストを使用して、<ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
          <source><ph id="ph1">&lt;paramref name="schemaContext" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="schemaContext" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
          <source>A XAML schema context that is shared with the XAML reader that provides nodes for writing.</source>
          <target state="translated">書き込み用のノードを提供する XAML リーダーとの間で共有される XAML スキーマ コンテキスト。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
          <source>A settings object that specifies certain options for <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> behavior and output.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> の動作および出力の特定のオプションを指定する設定オブジェクト。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> class using the context that is used by a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> and its settings.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> が使用するコンテキストとその設定を使用して、<ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
          <source><ph id="ph1">&lt;paramref name="schemaContext" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="schemaContext" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.Clear">
          <source>Resets all possible frames and clears the object graph.</source>
          <target state="translated">すべての使用可能なフレームをリセットし、オブジェクト グラフをクリアします。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release the managed resources; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">マネージ リソースを解放するには <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>, and optionally, releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
          <source>The object to report on.</source>
          <target state="translated">報告する対象のオブジェクト。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
          <source>The object is packaged into <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> when the handler is invoked.</source>
          <target state="translated">このオブジェクトは、ハンドラーの呼び出し時に <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> にパッケージ化されます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
          <source>Invokes any <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /&gt;</ph> method that is associated with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> に関連付けられている任意の <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
          <source>The object to report on.</source>
          <target state="translated">報告する対象のオブジェクト。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
          <source>The value  is packaged into <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> when the handler is invoked.</source>
          <target state="translated">この値は、ハンドラーの呼び出し時に <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> にパッケージ化されます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
          <source>Invokes any <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /&gt;</ph> method that is associated with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> に関連付けられている任意の <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
          <source>The object to report on.</source>
          <target state="translated">報告する対象のオブジェクト。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
          <source>This is packaged into <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> when the handler is invoked.</source>
          <target state="translated">これは、ハンドラーの呼び出し時に <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> にパッケージ化されます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
          <source>Invokes any <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /&gt;</ph> referenced method that is associated with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> に関連付けられている任意の <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> 参照メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
          <source>The value to pass through <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> when the handler is invoked.</source>
          <target state="translated">ハンドラーの呼び出し時に <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> を通じて渡される値。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
          <source>Invokes any <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /&gt;</ph> referenced method that is associated with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> に関連付けられている任意の <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> 参照メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>The object to report as the source to the handler.</source>
          <target state="translated">送信元としてハンドラーに報告するオブジェクト。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>The name of the property to set, which is passed to the handler as part of <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph>.</source>
          <target state="translated">設定するプロパティの名前。これは、<ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph> の一部としてハンドラーに渡されます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>The value to provide for the property that is named by <bpt id="p1">&lt;c&gt;</bpt>property<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>property<ept id="p1">&lt;/c&gt;</ept> で指定されたプロパティに提供する値。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>The value is passed to the handler as part of <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph>.</source>
          <target state="translated">この値は、<ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph> の一部としてハンドラーに渡されます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>Invokes any <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /&gt;</ph> referenced method that is associated with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> for this writer, as long as <ph id="ph3">&lt;paramref name="handled" /&gt;</ph> in <ph id="ph4">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph> event data is not <ph id="ph5">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /&gt;</ph> イベント データの <ph id="ph3">&lt;paramref name="handled" /&gt;</ph> が <ph id="ph5">&lt;see langword="true" /&gt;</ph> でない場合に、このライターの <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> に関連付けられている任意の <ph id="ph4">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph> 参照メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>A Boolean value that is set by any associated handler; otherwise, <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">関連付けられている任意のハンドラーによって設定されたブール値。それ以外の場合は <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>If the <ph id="ph1">`SetValue`</ph> operation for this XAML writer has an associated handler (a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A&gt;</ph> is declared in <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriterSettings&gt;</ph>), this method creates new <ph id="ph4">&lt;xref:System.Windows.Markup.XamlSetValueEventArgs&gt;</ph> and passes them to the handler.</source>
          <target state="translated">場合、<ph id="ph1">`SetValue`</ph>この XAML ライターの操作に関連付けられたハンドラーが必要がある (、<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A&gt;</ph>で宣言された<ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriterSettings&gt;</ph>)、このメソッドを新規作成<ph id="ph4">&lt;xref:System.Windows.Markup.XamlSetValueEventArgs&gt;</ph>ハンドラーに渡します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>The return value is set by reading the <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A&gt;</ph> value that is passed through the event data.</source>
          <target state="translated">読み取ることによって、戻り値が設定されて、<ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A&gt;</ph>イベント データを通じて渡される値。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>If no handler exists and this method is invoked, the call returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">呼び出しが返されたかどうかは、ハンドラーがないし、このメソッドが呼び出される、<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source>Gets the last object that was written.</source>
          <target state="translated">最後に書き込まれたオブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source>Typically only called when the node stream is at its end and the object graph is complete.</source>
          <target state="translated">通常、ノード ストリームがその末尾に達したとき、およびオブジェクト グラフが完成したときにだけ呼び出されます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source>The last object written, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">最後に書き込まれたオブジェクト、または <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source>The most typical usage of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.Result%2A&gt;</ph> is to call it only when the node stream is known to be at its end, and the object graph is complete.</source>
          <target state="translated">最も一般的な使用法<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.Result%2A&gt;</ph>をノード ストリームは、最後にあることがわかっており、オブジェクト グラフが完全な場合だけに呼び出すことです。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source>Otherwise, the object graph is likely to be incomplete, and is not useful for most platform scenarios.</source>
          <target state="translated">それ以外の場合、オブジェクト グラフが不完全になる可能性は、ほとんどのプラットフォームのシナリオに便利です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.Result%2A&gt;</ph> typically only contains a non-null value if it is called immediately after a call to <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>, and if the current scope is in the member where the object provides a value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.Result%2A&gt;</ph> 通常への呼び出しの直後に呼び出された場合のみ、null 以外の値を含む<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>、し、現在のスコープが、メンバーのオブジェクトが値を提供します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlObjectWriter.RootNameScope">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.INameScope" /&gt;</ph> service that maintains the XAML namescope for the absolute node root of the XAML object writer.</source>
          <target state="translated">XAML オブジェクト ライターの絶対ノード ルートの XAML 名前スコープを管理する <ph id="ph1">&lt;see cref="T:System.Windows.Markup.INameScope" /&gt;</ph> サービスを取得します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.RootNameScope">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Markup.INameScope" /&gt;</ph> service that maintains the XAML namescope for the current root of the object writer.</source>
          <target state="translated">オブジェクト ライターの現在のルートの XAML 名前スコープを管理する <ph id="ph1">&lt;see cref="T:System.Windows.Markup.INameScope" /&gt;</ph> サービス。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.RootNameScope">
          <source>The value of this property may come from the object writer context.</source>
          <target state="translated">このプロパティの値は、オブジェクト ライターのコンテキストから取得可能性があります。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>Gets the active XAML schema context.</source>
          <target state="translated">アクティブな XAML スキーマ コンテキストを取得します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>The XAML schema context.</source>
          <target state="translated">XAML スキーマ コンテキスト。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>XAML schema context is a necessary information source for most practical object-writing scenarios.</source>
          <target state="translated">XAML スキーマ コンテキストは、オブジェクト記述の最も現実的なシナリオに必要な情報源です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>The XAML schema context influences the type lookup for backing types and holds information about the assemblies where backing types exist.</source>
          <target state="translated">XAML スキーマ コンテキストでは、バッキング型の型の検索に影響し、アセンブリに関する情報を保持するには、バッキング型が存在します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>The default XAML schema context is based on CLR type-mapping rules.</source>
          <target state="translated">既定の XAML スキーマ コンテキストは、CLR 型マッピングの規則に基づいています。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>Frameworks typically provide their own XAML schema context in order to assure that that the assembly-loading mechanisms match the framework's programming amd application models.</source>
          <target state="translated">通常、フレームワークは、アセンブリの読み込み機構がフレームワークの amd アプリケーションのプログラミング モデルと一致していることを保証するために、独自の XAML スキーマ コンテキストを提供します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
          <source>The line number from the reader.</source>
          <target state="translated">リーダーからの行番号。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
          <source>The line position from the reader.</source>
          <target state="translated">リーダーからの行の位置。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
          <source>Implements <ph id="ph1">&lt;see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /&gt;</ph> and provides line information for exceptions.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /&gt;</ph> を実装し、例外の行情報を提供します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
          <source>This service method is not intended to be called directly from your code.</source>
          <target state="translated">このサービス メソッドは、コードから直接呼び出されるものではありません。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
          <source>However, if you are creating a derived class from <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> and expect to report a context where line numbers are unavailable or not useful, this method may be called.</source>
          <target state="translated">ただし、派生クラスを作成する場合は<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>と行番号は使用できません、コンテキストを報告する予定または、このメソッド呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
          <source>Gets a value that reports whether a line information service should provide values and therefore, should also call the <ph id="ph1">&lt;see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /&gt;</ph> method when it is relevant.</source>
          <target state="translated">行情報サービスによって値が提供され、関連する場合に <ph id="ph1">&lt;see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /&gt;</ph> メソッドの呼び出しも行われるかどうかを報告する値を取得します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if line information is used by the writer; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ライターが行情報を使用する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
          <source>This implementation always returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">この実装は常に <ph id="ph1">`true`</ph> を返します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteEndMember">
          <source>Closes the current member scope, and may write the value of the member scope while it closes.</source>
          <target state="translated">現在のメンバー スコープを閉じます。閉じるときにメンバー スコープの値を書き込む場合があります。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteEndMember">
          <source>The new scope becomes the parent object scope of the member.</source>
          <target state="translated">新しいスコープは、メンバーの親オブジェクトのスコープになります。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteEndMember">
          <source>Failed to create member value from a value node that is encountered between this call and a previous <ph id="ph1">&lt;see langword="StartMember" /&gt;</ph>.</source>
          <target state="translated">この呼び出しと前の <ph id="ph1">&lt;see langword="StartMember" /&gt;</ph> の間で見つかる値ノードからメンバーの値を作成できませんでした。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteEndObject">
          <source>Closes the current object scope in the writer.</source>
          <target state="translated">ライターの現在のオブジェクト スコープを閉じます。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteEndObject">
          <source>The new object scope becomes the parent member scope.</source>
          <target state="translated">新しいオブジェクト スコープは、親メンバーのスコープになります。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteEndObject">
          <source>If this <ph id="ph1">`EndObject`</ph> position scope is closing the root object, the new object scope becomes the root scope.</source>
          <target state="translated">この場合<ph id="ph1">`EndObject`</ph>位置のスコープが、ルート オブジェクトを終了して、新しいオブジェクトのスコープのルート スコープになります。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteEndObject">
          <source>The call to <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> might not yet have created the object because an object member might be a necessary initialization pathway, such as initialization text or initialization parameters.</source>
          <target state="translated">呼び出し<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>がまだ作成していないオブジェクトのオブジェクト メンバーの初期化のテキストや初期化パラメーターなどの必要な初期化経路可能性があるためです。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteEndObject">
          <source>For these cases, the call to <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> actually writes the object.</source>
          <target state="translated">このような場合、呼び出し<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>実際には、オブジェクトを書き込みます。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>Writes the conceptual <ph id="ph1">&lt;see langword="StartObject" /&gt;</ph> into the object graph when the specified object is a default or implicit value of the parent property.</source>
          <target state="translated">指定したオブジェクトが親プロパティの既定または暗黙の値である場合に、概念上の <ph id="ph1">&lt;see langword="StartObject" /&gt;</ph> をオブジェクト グラフに書き込みます。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>The implicit value comes from information that is obtained from the XAML schema context and backing type information, instead of being specified as an object value in the input XAML node set.</source>
          <target state="translated">暗黙の値は、入力 XAML ノード セットでオブジェクト値として指定されているのではなく、XAML スキーマ コンテキストから取得した情報およびバッキング型情報から取得します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>The difference between writing with <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> and writing with <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> can be seen in the resulting object graph.</source>
          <target state="translated">記述の違い<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph>およびで書き込み<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>生成されたオブジェクト グラフに表示できます。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> does not construct an instance of a type because the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> API has no information to inform the object graph of what to construct.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> 型のインスタンスを構築しません、 <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> API に構築するためにどのようなオブジェクト グラフに通知する情報はありません。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>Instead, the object was created when the parent property was initialized; so a <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> does not need to construct it.</source>
          <target state="translated">代わりに、親プロパティが初期化されています。 ときに、オブジェクトの作成ように、<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>構築する必要はありません。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>In contrast, <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> specifies that an instance of that type should be constructed and inserted into the object graph.</source>
          <target state="translated">これに対し、<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>その型のインスタンスを構築し、オブジェクト グラフに挿入するように指定します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>If you think of the XAML node stream as a series of frames, a <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> is balanced to a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> call.</source>
          <target state="translated">一連のフレームとして XAML ノード ストリームを検討する場合、<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph>に分散された、<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>呼び出します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>Therefore, the number of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> plus <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> calls should equal the number of <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> calls as part of a complete object-writing evaluation of the XAML node stream.</source>
          <target state="translated">そのため、数<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph>plus<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>呼び出しの数に一致する必要があります<ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>XAML ノード ストリームの完全なオブジェクトの記述評価の一部として呼び出しです。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>The conceptual <ph id="ph1">`StartObject`</ph> position for an implicit object in the object graph is necessary because although the object value itself is an implicit default, that object might still have members that need to be written based on the XAML node stream.</source>
          <target state="translated">概念<ph id="ph1">`StartObject`</ph>自体オブジェクトの値には、暗黙の既定値が、そのオブジェクト必要がありますが必要なメンバーを書き込むに基づいて、XAML ノード ストリームのために、オブジェクト グラフ内の暗黙的なオブジェクトは必要なを配置します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>A typical scenario where this occurs is when <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> writes member nodes for a collection property, and the collection initialization is implicit to creating the object that owns the collection property.</source>
          <target state="translated">これが発生する一般的な状況は<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>コレクション プロパティ、およびコレクションの初期化メンバー ノードの書き込みは暗黙的コレクションのプロパティを所有するオブジェクトの作成にします。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>The namespace declaration to write.</source>
          <target state="translated">書き込む名前空間宣言。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>Defines a namespace declaration that applies to the next object scope or member scope.</source>
          <target state="translated">次のオブジェクト スコープまたはメンバー スコープに適用される名前空間の宣言を定義します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>A namespace declaration can be written if the current scope is a root scope, object scope, or member scope.</source>
          <target state="translated">かどうか、現在のスコープは、ルート スコープ、オブジェクトのスコープ、またはメンバーのスコープ、名前空間の宣言を記述できます。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>However, <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> can only be called immediately before a call to one of the following: <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph>.</source>
          <target state="translated">ただし、 <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> 、次のいずれかの呼び出しの直前にのみ呼び出すことができます: <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>、または<ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>The consecutive <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> case is for writing multiple namespace declarations to the same node.</source>
          <target state="translated">連続した<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph>ケースは、同じノードに複数の名前空間宣言を記述します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>Eventually, either <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph> must be called.</source>
          <target state="translated">最終的には、いずれか<ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph>呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> does not use a <ph id="ph2">`Start`</ph><ph id="ph3">/</ph><ph id="ph4">`End`</ph> metaphor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> 使用しない、 <ph id="ph2">`Start`</ph> <ph id="ph3">/</ph> <ph id="ph4">`End`</ph>比喩します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>Although a XAML namespace has members in the CLR representation sense, the members are known and do not need to be represented as a special type of <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> for extensibility.</source>
          <target state="translated">XAML 名前空間には、CLR 表現意味でメンバーがいますが、メンバーは、れの特殊な型として表現されている必要はありません<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>に機能を拡張します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>To access the values of a <ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration&gt;</ph>, you access its <ph id="ph2">&lt;xref:System.Xaml.NamespaceDeclaration.Namespace%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Xaml.NamespaceDeclaration.Prefix%2A&gt;</ph> properties.</source>
          <target state="translated">値にアクセスする、 <ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration&gt;</ph>、アクセスするその<ph id="ph2">&lt;xref:System.Xaml.NamespaceDeclaration.Namespace%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Xaml.NamespaceDeclaration.Prefix%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>A namespace declaration may have a <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> value for the prefix.</source>
          <target state="translated">名前空間の宣言があります、<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>プレフィックスの値。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>A <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> prefix represents a declaration of the default XAML namespace.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>プレフィックスが既定の XAML 名前空間の宣言を表します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>Do not attempt to use null to represent the default prefix;  it throws an exception in this API.</source>
          <target state="translated">既定のプレフィックスを表すために null を使用しないでください。 この API で例外がスローされます。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration&gt;</ph>.</source>
          <target state="translated">詳細については、「<ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>The <ph id="ph1">&lt;paramref name="namespaceDeclaration" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="namespaceDeclaration" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>A component of <ph id="ph1">&lt;paramref name="namespaceDeclaration" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="namespaceDeclaration" /&gt;</ph> のコンポーネントが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>Tried to write a XAML namespace node in an invalid scope.</source>
          <target state="translated">XAML 名前空間ノードを無効なスコープで記述しようとしました。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>The XAML property to write.</source>
          <target state="translated">書き込む XAML プロパティ。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>Typically you obtain this value from a XAML reader through the XAML node stream intermediate.</source>
          <target state="translated">通常、この値は XAML リーダーから XAML ノード ストリームを介して取得します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>Writes a new member node into the current object scope, and the scope becomes a new member scope.</source>
          <target state="translated">現在のオブジェクト スコープに新しいメンバー ノードを書き込みます。スコープは新しいメンバーのスコープになります。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>Watch for a <ph id="ph1">&lt;xref:System.Xaml.XamlDuplicateMemberException&gt;</ph>, which occurs when the same XAML property is set twice in the XAML input.</source>
          <target state="translated">監視、 <ph id="ph1">&lt;xref:System.Xaml.XamlDuplicateMemberException&gt;</ph>、XAML 入力に 2 回、同じ XAML プロパティが設定されている場合に発生します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>In simple cases, such as when the same property is set in both attribute syntax and property element syntax, you can easily see this exception in the input markup.</source>
          <target state="translated">属性構文とプロパティ要素構文の両方で同じプロパティを設定する場合などの単純なケースで入力マークアップでは、この例外を簡単に参照してくださいことができます。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>However, more subtle cases can occur that are more difficult to spot.</source>
          <target state="translated">ただしより微妙なケースがスポットより難しくは発生します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>For example, this exception might occur if you set a XAML content property, if you involve XAML ambient properties, and if a property enables both an attachable usage and an instance usage.</source>
          <target state="translated">たとえば、XAML のアンビエント プロパティが含まれる場合、XAML コンテンツ プロパティを設定した場合、およびプロパティが、アタッチ可能な使用法とインスタンスの使用状況の両方を有効にした場合に、この例外が発生する可能性があります。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>In the debugging phases of development, you can often locate this exception by viewing the intermediate XAML node representation that connects the markup read and the object graph write.</source>
          <target state="translated">開発のデバッグの段階で、マークアップを読み取ると、オブジェクト グラフの書き込みを接続する中間の XAML ノードの表現を表示することによって、多くの場合、この例外を検索できます。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;paramref name="property" /&gt;</ph> has <ph id="ph2">&lt;see cref="P:System.Xaml.XamlMember.IsUnknown" /&gt;</ph> set to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="property" /&gt;</ph> の <ph id="ph2">&lt;see cref="P:System.Xaml.XamlMember.IsUnknown" /&gt;</ph> が <ph id="ph3">&lt;see langword="true" /&gt;</ph> に設定されました。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;see cref="P:System.Xaml.XamlLanguage.UnknownContent" /&gt;</ph> passed, which indicates that the XAML node stream contained content for an object that does not support content.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xaml.XamlLanguage.UnknownContent" /&gt;</ph> が渡されました。これは、XAML ノード ストリームにコンテンツをサポートしないオブジェクトのコンテンツが含まれることを示します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>Attempted to write a start member in an invalid scope.</source>
          <target state="translated">開始メンバーを無効なスコープで記述しようとしました。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;paramref name="property" /&gt;</ph> specifies a property that is already explicitly set in the parent object scope.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="property" /&gt;</ph> は、親オブジェクトのスコープで既に明示的に設定されているプロパティを指定します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;paramref name="property" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="property" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>The type to write.</source>
          <target state="translated">書き込む型。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Typically you obtain this value from a XAML reader.</source>
          <target state="translated">通常この値は XAML リーダーから取得します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Writes an object node into the current scope, and sets the scope to a new object scope.</source>
          <target state="translated">現在のスコープにオブジェクト ノードを書き込みます。スコープを新しいオブジェクトのスコープに設定します。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Processing an <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsUnknown" /&gt;</ph> type and cannot create an object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsUnknown" /&gt;</ph> 型を処理します。オブジェクトを作成できません。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Attempted to write a start object in an invalid scope.</source>
          <target state="translated">開始オブジェクトを無効なスコープで記述しようとしました。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Attempted to write a root object when the root object was already provided in the settings.</source>
          <target state="translated">ルート オブジェクトが既に設定に提供されたときにルート オブジェクトを書き込もうとしました。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;paramref name="xamlType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xamlType" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>If the current scope is inside a collection, dictionary, or array, the new instance should be added to the collection, dictionary, or array by using the <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method of the relevant type.</source>
          <target state="translated">使用して、コレクション、ディクショナリ、または配列を新しいインスタンスを追加する必要があります、現在のスコープが、コレクション、ディクショナリ、または配列内にある場合は、<ph id="ph1">&lt;see langword="Add" /&gt;</ph>関連する型のメソッドです。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Otherwise, the member should be assigned to the new instance.</source>
          <target state="translated">それ以外の場合、新しいインスタンスをメンバーに割り当てます。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
          <source>The value to write.</source>
          <target state="translated">書き込む値。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
          <source>Writes a value to the current member scope.</source>
          <target state="translated">現在のメンバー スコープに値を書き込みます。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
          <source>If the current scope is inside a collection, dictionary, or array object, the value should be added to the collection, dictionary, or array.</source>
          <target state="translated">現在のスコープがコレクション、ディクショナリ、または配列オブジェクトの内部にある場合、値はコレクション、ディクショナリ、または配列内に追加されます。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
          <source>Attempted to write a value in an invalid scope.</source>
          <target state="translated">無効なスコープで値を書き込もうとしました。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>