<Type Name="XamlObjectWriter" FullName="System.Xaml.XamlObjectWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="88e6ca45083f7c3b687072f89d33f2067088da08" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53390860" /></Metadata><TypeSignature Language="C#" Value="public class XamlObjectWriter : System.Xaml.XamlWriter, System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlObjectWriter extends System.Xaml.XamlWriter implements class System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlObjectWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlObjectWriter&#xA;Inherits XamlWriter&#xA;Implements IXamlLineInfoConsumer" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlObjectWriter : System::Xaml::XamlWriter, System::Xaml::IXamlLineInfoConsumer" />
  <TypeSignature Language="F#" Value="type XamlObjectWriter = class&#xA;    inherit XamlWriter&#xA;    interface IXamlLineInfoConsumer" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xaml.XamlWriter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xaml.IXamlLineInfoConsumer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>作成元の XAML ノード ストリームからオブジェクト グラフを作成します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Write`メソッドの<xref:System.Xaml.XamlObjectWriter>パターンを実装できるように、<xref:System.Xaml.XamlObjectWriter>を使用して、<xref:System.Xaml.XamlWriter>によって定義されている、<xref:System.Xaml.XamlWriter.WriteNode%2A>メソッド。 <xref:System.Xaml.XamlWriter.WriteNode%2A> ロジックを切り替えます、`Write`メソッド、型が、リーダーの現在位置にあるがどのノードによって異なります。  
  
## <a name="scope"></a>スコープ  
 A <xref:System.Xaml.XamlObjectWriter> ; はスコープの概念があります、<xref:System.Xaml.XamlObjectWriter>出力されたオブジェクト グラフ内の参照の概念の点が維持されます。 特定のスコープの特定の操作では、有効または無効にするか操作なしの結果を生成可能性があります。 呼び出す場合など、<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>既定の実装をインスタンスとして既にオブジェクトで初期化が存在するは、ディレクティブを記述するには、例外をスローします。  
  
 カスタムのスコープを追跡する方法<xref:System.Xaml.XamlObjectWriter>にスタックまたはフレーム クラスを使用してノードの操作を揃えることです。 Stack またはフレームの追跡できるプッシュおよびポップが入力を開始または終了するオブジェクト モデル階層の各レベルの中に、<xref:System.Xaml.XamlObjectWriter>オブジェクト グラフを書き込みます。  
  
## <a name="callbacks"></a>コールバック  
 中間および高度をサポートするために<xref:System.Xaml.XamlObjectWriter>シナリオでは、オブジェクト グラフの書き込みのメカニズムは、コールバックが発生するエントリ ポイントと、<xref:System.Xaml.XamlObjectWriter>がコミットまたは特定の操作をコミットしようとしています。 いくつかのコールバックの設定で有効になっているし、オブジェクト型またはメンバーの書き込み対象に固有ではありません。ただし、コールバックの情報を使用すると、コンテキストには多くの場合、コールバックを通じて送信されるデータでは、イベント。 関連するコールバックの一覧を次には。  
  
-   宣言されているコールバック<xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A>スコープに新しいオブジェクトになったときに呼び出される、<xref:System.ComponentModel.ISupportInitialize.BeginInit%2A>オブジェクト作成された各オブジェクトの有効期間のフェーズ。  
  
-   宣言されているコールバック<xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A>スコープに新しいオブジェクトになったときに呼び出される、<xref:System.ComponentModel.ISupportInitialize.EndInit%2A>オブジェクト作成された各オブジェクトの有効期間のフェーズ。  
  
-   宣言されているコールバック<xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A>スコープが、オブジェクトで開始し、発生したときに呼び出されるときに最初の<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>そのオブジェクトのスコープへの呼び出しが行われたが、コミットされていません。  
  
-   宣言されているコールバック<xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A>スコープは、オブジェクトで開始し、発生するときに呼び出されるときに、<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>そのオブジェクトのスコープへの呼び出しが行われたが、コミットされていません。  
  
-   宣言されているコールバック<xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A>ときに呼び出される<xref:System.Xaml.XamlObjectWriter.OnSetValue%2A>が呼び出されます。  
  
## <a name="writing-dictionary-keys"></a>ディクショナリ キーの記述  
 既定の実装<xref:System.Xaml.XamlObjectWriter>の制約の型変換をサポートする<xref:System.Collections.Generic.Dictionary%602>ディクショナリの前に、内容がオブジェクト グラフに追加されます。 この方法でジェネリック ディクショナリを実行時にオブジェクトがキーに入力して、該当するジェネリックに一致することができます`Add`とインデクサーの動作。 ただし、基本の実装として<xref:System.Xaml.XamlObjectWriter>、ベースからオブジェクト グラフの作成にのみこの機能が存在する<xref:System.Collections.Generic.Dictionary%602>クラスの派生クラスではなく<xref:System.Collections.Generic.Dictionary%602>します。  
  
## <a name="checks-for-disposed"></a>チェックの破棄  
 XAML ライターは、可能性のある、遅延の動作やそれまでの間に破棄されている XAML ライターのインスタンスに対して呼び出しが行われる場所に使用されます。 さまざまな Api<xref:System.Xaml.XamlObjectWriter>をスローする可能性<xref:System.ObjectDisposedException>このような場合。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlWriter" />
    <altmember cref="T:System.Xaml.XamlObjectReader" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Xaml.XamlObjectWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriter(System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlObjectWriter : System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlObjectWriter" Usage="new System.Xaml.XamlObjectWriter schemaContext" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="schemaContext">書き込み用のノードを提供する XAML リーダーとの間で共有される XAML スキーマ コンテキスト。</param>
        <summary><see cref="T:System.Xaml.XamlObjectWriter" /> で使用される XAML スキーマ コンテキストを使用して、<see cref="T:System.Xaml.XamlReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="schemaContext" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext, System.Xaml.XamlObjectWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.XamlObjectWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext, settings As XamlObjectWriterSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriter(System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::XamlObjectWriterSettings ^ settings);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlObjectWriter : System.Xaml.XamlSchemaContext * System.Xaml.XamlObjectWriterSettings -&gt; System.Xaml.XamlObjectWriter" Usage="new System.Xaml.XamlObjectWriter (schemaContext, settings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="settings" Type="System.Xaml.XamlObjectWriterSettings" />
      </Parameters>
      <Docs>
        <param name="schemaContext">書き込み用のノードを提供する XAML リーダーとの間で共有される XAML スキーマ コンテキスト。</param>
        <param name="settings"><see cref="T:System.Xaml.XamlObjectWriter" /> の動作および出力の特定のオプションを指定する設定オブジェクト。</param>
        <summary><see cref="T:System.Xaml.XamlObjectWriter" /> が使用するコンテキストとその設定を使用して、<see cref="T:System.Xaml.XamlReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="schemaContext" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="xamlObjectWriter.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべての使用可能なフレームをリセットし、オブジェクト グラフをクリアします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="xamlObjectWriter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースを解放するには <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary><see cref="T:System.Xaml.XamlObjectWriter" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterBeginInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterBeginInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterBeginInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterBeginInit (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterBeginInit(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterBeginInit : obj -&gt; unit&#xA;override this.OnAfterBeginInit : obj -&gt; unit" Usage="xamlObjectWriter.OnAfterBeginInit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">報告する対象のオブジェクト。 このオブジェクトは、ハンドラーの呼び出し時に <see cref="T:System.Xaml.XamlObjectEventArgs" /> にパッケージ化されます。</param>
        <summary>この <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> の <see cref="T:System.Xaml.XamlObjectWriterSettings" /> に関連付けられている任意の <see cref="T:System.Xaml.XamlObjectWriter" /> メソッドを呼び出します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterEndInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterEndInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterEndInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterEndInit (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterEndInit(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterEndInit : obj -&gt; unit&#xA;override this.OnAfterEndInit : obj -&gt; unit" Usage="xamlObjectWriter.OnAfterEndInit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">報告する対象のオブジェクト。 この値は、ハンドラーの呼び出し時に <see cref="T:System.Xaml.XamlObjectEventArgs" /> にパッケージ化されます。</param>
        <summary>この <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> の <see cref="T:System.Xaml.XamlObjectWriterSettings" /> に関連付けられている任意の <see cref="T:System.Xaml.XamlObjectWriter" /> メソッドを呼び出します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterProperties (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterProperties(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterProperties : obj -&gt; unit&#xA;override this.OnAfterProperties : obj -&gt; unit" Usage="xamlObjectWriter.OnAfterProperties value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">報告する対象のオブジェクト。 これは、ハンドラーの呼び出し時に <see cref="T:System.Xaml.XamlObjectEventArgs" /> にパッケージ化されます。</param>
        <summary>この <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> の <see cref="T:System.Xaml.XamlObjectWriterSettings" /> に関連付けられている任意の <see cref="T:System.Xaml.XamlObjectWriter" /> 参照メソッドを呼び出します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeProperties (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeProperties(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnBeforeProperties : obj -&gt; unit&#xA;override this.OnBeforeProperties : obj -&gt; unit" Usage="xamlObjectWriter.OnBeforeProperties value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">ハンドラーの呼び出し時に <see cref="T:System.Xaml.XamlObjectEventArgs" /> を通じて渡される値。</param>
        <summary>この <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> の <see cref="T:System.Xaml.XamlObjectWriterSettings" /> に関連付けられている任意の <see cref="T:System.Xaml.XamlObjectWriter" /> 参照メソッドを呼び出します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSetValue">
      <MemberSignature Language="C#" Value="protected virtual bool OnSetValue (object eventSender, System.Xaml.XamlMember member, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnSetValue(object eventSender, class System.Xaml.XamlMember member, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnSetValue (eventSender As Object, member As XamlMember, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnSetValue(System::Object ^ eventSender, System::Xaml::XamlMember ^ member, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnSetValue : obj * System.Xaml.XamlMember * obj -&gt; bool&#xA;override this.OnSetValue : obj * System.Xaml.XamlMember * obj -&gt; bool" Usage="xamlObjectWriter.OnSetValue (eventSender, member, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSender" Type="System.Object" />
        <Parameter Name="member" Type="System.Xaml.XamlMember" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventSender">送信元としてハンドラーに報告するオブジェクト。</param>
        <param name="member">設定するプロパティの名前。これは、<see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> の一部としてハンドラーに渡されます。</param>
        <param name="value"><paramref name="property" /> で指定されたプロパティに提供する値。 この値は、<see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> の一部としてハンドラーに渡されます。</param>
        <summary><see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> イベント データの <paramref name="handled" /> が <see langword="true" /> でない場合に、このライターの <see cref="T:System.Xaml.XamlObjectWriterSettings" /> に関連付けられている任意の <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 参照メソッドを呼び出します。</summary>
        <returns>関連付けられている任意のハンドラーによって設定されたブール値。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、`SetValue`この XAML ライターの操作に関連付けられたハンドラー (、<xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A>で宣言されている<xref:System.Xaml.XamlObjectWriterSettings>)、このメソッドを新規作成<xref:System.Windows.Markup.XamlSetValueEventArgs>をハンドラーに渡します。 戻り値の設定を読み取ることによって、<xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A>イベント データを通じて渡される値。 呼び出しが返されますかどうかは、ハンドラーが存在しないと、このメソッドが呼び出され、`false`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.Result" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ Result { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Result : obj" Usage="System.Xaml.XamlObjectWriter.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最後に書き込まれたオブジェクトを取得します。 通常、ノード ストリームがその末尾に達したとき、およびオブジェクト グラフが完成したときにだけ呼び出されます。</summary>
        <value>最後に書き込まれたオブジェクト、または <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 最も一般的な使用状況<xref:System.Xaml.XamlObjectWriter.Result%2A>ノード ストリームの末尾にあることがわかっており、オブジェクト グラフが完了している場合にのみ呼び出すことです。 それ以外の場合、オブジェクト グラフは、完了すると、する可能性があり、ほとんどのプラットフォームのシナリオに適していません。  
  
 <xref:System.Xaml.XamlObjectWriter.Result%2A> 通常の呼び出しの直後に呼び出された場合のみ null 以外の値を含む<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>、し、現在のスコープが、メンバー オブジェクトが値を提供します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootNameScope">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.INameScope RootNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.INameScope RootNameScope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.RootNameScope" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootNameScope As INameScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::INameScope ^ RootNameScope { System::Windows::Markup::INameScope ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RootNameScope : System.Windows.Markup.INameScope" Usage="System.Xaml.XamlObjectWriter.RootNameScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.INameScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XAML オブジェクト ライターの絶対ノード ルートの XAML 名前スコープを管理する <see cref="T:System.Windows.Markup.INameScope" /> サービスを取得します。</summary>
        <value>オブジェクト ライターの現在のルートの XAML 名前スコープを管理する <see cref="T:System.Windows.Markup.INameScope" /> サービス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブジェクト ライターのコンテキストからこのプロパティの値があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public override System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlObjectWriter.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アクティブな XAML スキーマ コンテキストを取得します。</summary>
        <value>XAML スキーマ コンテキスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XAML スキーマ コンテキストは、オブジェクトの記述の最も実用的なシナリオに必要な情報ソースです。 XAML スキーマ コンテキストでは、バッキング型の型の照合に影響し、バッキング型が存在する場合、アセンブリに関する情報を保持します。 既定の XAML スキーマ コンテキストは、CLR 型のマッピングの規則に基づいています。 通常、フレームワークは、一致している amd アプリケーション モデルのプログラミング フレームワークのアセンブリの読み込みメカニズムを確保するために、独自の XAML スキーマ コンテキストを提供します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineInfo">
      <MemberSignature Language="C#" Value="public void SetLineInfo (int lineNumber, int linePosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLineInfo(int32 lineNumber, int32 linePosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLineInfo (lineNumber As Integer, linePosition As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetLineInfo(int lineNumber, int linePosition);" />
      <MemberSignature Language="F#" Value="abstract member SetLineInfo : int * int -&gt; unit&#xA;override this.SetLineInfo : int * int -&gt; unit" Usage="xamlObjectWriter.SetLineInfo (lineNumber, linePosition)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
        <Parameter Name="linePosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">リーダーからの行番号。</param>
        <param name="linePosition">リーダーからの行の位置。</param>
        <summary><see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> を実装し、例外の行情報を提供します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このサービス メソッドは、コードから直接呼び出すものではありません。 ただしからの派生クラスを作成する場合<xref:System.Xaml.XamlObjectWriter>と行番号が使用可能なコンテキストを報告する期待または有用でない、このメソッドを呼び出せません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProvideLineInfo">
      <MemberSignature Language="C#" Value="public bool ShouldProvideLineInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldProvideLineInfo" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldProvideLineInfo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldProvideLineInfo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldProvideLineInfo : bool" Usage="System.Xaml.XamlObjectWriter.ShouldProvideLineInfo" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行情報サービスによって値が提供され、関連する場合に <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> メソッドの呼び出しも行われるかどうかを報告する値を取得します。</summary>
        <value>ライターが行情報を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この実装は常に `true` を返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndMember">
      <MemberSignature Language="C#" Value="public override void WriteEndMember ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndMember" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndMember ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndMember();" />
      <MemberSignature Language="F#" Value="override this.WriteEndMember : unit -&gt; unit" Usage="xamlObjectWriter.WriteEndMember " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のメンバー スコープを閉じます。閉じるときにメンバー スコープの値を書き込む場合があります。 新しいスコープは、メンバーの親オブジェクトのスコープになります。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">この呼び出しと前の <see langword="StartMember" /> の間で見つかる値ノードからメンバーの値を作成できませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public override void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndObject();" />
      <MemberSignature Language="F#" Value="override this.WriteEndObject : unit -&gt; unit" Usage="xamlObjectWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ライターの現在のオブジェクト スコープを閉じます。 新しいオブジェクト スコープは、親メンバーのスコープになります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この場合`EndObject`位置のスコープがルート オブジェクトを終了して、新しいオブジェクトのスコープがルート スコープになります。  
  
 呼び出し<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>がまだ作成していないオブジェクトをオブジェクトのメンバーの初期化テキスト、初期化パラメーターなどの必要な初期化経路可能性があるためです。 呼び出すような場合、<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>実際には、オブジェクトを書き込みます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteGetObject">
      <MemberSignature Language="C#" Value="public override void WriteGetObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteGetObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteGetObject" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteGetObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteGetObject();" />
      <MemberSignature Language="F#" Value="override this.WriteGetObject : unit -&gt; unit" Usage="xamlObjectWriter.WriteGetObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指定したオブジェクトが親プロパティの既定または暗黙の値である場合に、概念上の <see langword="StartObject" /> をオブジェクト グラフに書き込みます。 暗黙の値は、入力 XAML ノード セットでオブジェクト値として指定されているのではなく、XAML スキーマ コンテキストから取得した情報およびバッキング型情報から取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 書き込みの間の差<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A>と書き込みの<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>結果として得られるオブジェクトのグラフで確認できます。 <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> 型のインスタンスを作成しませんので、 <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> API に何を構築するは、オブジェクト グラフを通知する情報はありません。 オブジェクトが代わりに、親プロパティが初期化されています。 ときに作成ように、<xref:System.Xaml.XamlObjectWriter>構築する必要はありません。 これに対し、<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>その型のインスタンスを構築し、オブジェクト グラフに挿入されたことを指定します。  
  
 一連のフレームとして XAML ノード ストリームの思われる場合、<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A>にバランスが取れて、<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>呼び出します。 数、したがって<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A>plus<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>呼び出しの数に一致する必要があります<xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>XAML ノード ストリームの完全なオブジェクトの記述評価の一部として呼び出します。  
  
 概念`StartObject`位置、そのオブジェクトを記述する必要に応じて、XAML ノード ストリームのメンバーがありますオブジェクトの値自体には、暗黙の既定が、オブジェクト グラフの暗黙的なオブジェクトが必要です。 これが典型的なシナリオは<xref:System.Xaml.XamlObjectWriter>コレクション プロパティ、およびコレクションの初期化のメンバー ノードの書き込みに暗黙的にコレクションのプロパティを所有するオブジェクトを作成します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNamespace">
      <MemberSignature Language="C#" Value="public override void WriteNamespace (System.Xaml.NamespaceDeclaration namespaceDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteNamespace(class System.Xaml.NamespaceDeclaration namespaceDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteNamespace(System::Xaml::NamespaceDeclaration ^ namespaceDeclaration);" />
      <MemberSignature Language="F#" Value="override this.WriteNamespace : System.Xaml.NamespaceDeclaration -&gt; unit" Usage="xamlObjectWriter.WriteNamespace namespaceDeclaration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceDeclaration" Type="System.Xaml.NamespaceDeclaration" />
      </Parameters>
      <Docs>
        <param name="namespaceDeclaration">書き込む名前空間宣言。</param>
        <summary>次のオブジェクト スコープまたはメンバー スコープに適用される名前空間の宣言を定義します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のスコープはルート スコープ、オブジェクトのスコープ、またはメンバーのスコープのかどうか、名前空間宣言を記述できます。 ただし、 <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> 、次のいずれかへの呼び出しの直前にのみ呼び出すことができます: <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>、 <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>、または<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>します。 連続した<xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>ケースが同じノードに複数の名前空間宣言を書き込むためです。 最終的には、いずれか<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>または<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>呼び出す必要があります。  
  
 <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> 使用しない、 `Start` / `End`メタファです。 XAML 名前空間には、CLR 表現の意味でメンバーがいますが、メンバーが呼ばれ、特別な種類のとして表現する必要はありません<xref:System.Xaml.XamlMember>機能を拡張します。 値にアクセスする、<xref:System.Xaml.NamespaceDeclaration>にアクセスするその<xref:System.Xaml.NamespaceDeclaration.Namespace%2A>と<xref:System.Xaml.NamespaceDeclaration.Prefix%2A>プロパティ。  
  
 名前空間宣言があります、<xref:System.String.Empty?displayProperty=nameWithType>プレフィックスの値。 A<xref:System.String.Empty?displayProperty=nameWithType>プレフィックスが既定の XAML 名前空間の宣言を表します。 既定のプレフィックスを表すために null を使用しようとはしないでください。 この API で例外がスローされます。 詳細については、「<xref:System.Xaml.NamespaceDeclaration>」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="namespaceDeclaration" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="namespaceDeclaration" /> のコンポーネントが <see langword="null" /> です。</exception>
        <exception cref="T:System.Xaml.XamlObjectReaderException">XAML 名前空間ノードを無効なスコープで記述しようとしました。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartMember">
      <MemberSignature Language="C#" Value="public override void WriteStartMember (System.Xaml.XamlMember property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartMember(class System.Xaml.XamlMember property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartMember (property As XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartMember(System::Xaml::XamlMember ^ property);" />
      <MemberSignature Language="F#" Value="override this.WriteStartMember : System.Xaml.XamlMember -&gt; unit" Usage="xamlObjectWriter.WriteStartMember property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="property">書き込む XAML プロパティ。 通常、この値は XAML リーダーから XAML ノード ストリームを介して取得します。</param>
        <summary>現在のオブジェクト スコープに新しいメンバー ノードを書き込みます。スコープは新しいメンバーのスコープになります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  監視、 <xref:System.Xaml.XamlDuplicateMemberException>、2 回入力 XAML で同じ XAML プロパティが設定されている場合に発生します。 属性構文とプロパティ要素構文の両方で同じプロパティを設定する場合などの単純なケースで入力のマークアップでは、この例外を簡単に確認できます。 ただしより微妙なケースが特定する困難は発生します。 たとえば、この例外には、XAML のアンビエント プロパティが含まれる場合、XAML コンテンツ プロパティを設定した場合、プロパティ、アタッチ可能な使用法とインスタンスの使用量の両方を利用する場合があります。 開発のデバッグの段階では、マークアップを読み取ると、オブジェクト グラフの書き込みを接続する中間の XAML ノード表現を表示して多くの場合、この例外を確認できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException"><paramref name="property" /> の <see cref="P:System.Xaml.XamlMember.IsUnknown" /> が <see langword="true" /> に設定されました。  
  
または 
 <see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> が渡されました。これは、XAML ノード ストリームにコンテンツをサポートしないオブジェクトのコンテンツが含まれることを示します。  
  
または 
開始メンバーを無効なスコープで記述しようとしました。</exception>
        <exception cref="T:System.Xaml.XamlDuplicateMemberException"><paramref name="property" /> は、親オブジェクトのスコープで既に明示的に設定されているプロパティを指定します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="property" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public override void WriteStartObject (System.Xaml.XamlType xamlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartObject(class System.Xaml.XamlType xamlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartObject(System::Xaml::XamlType ^ xamlType);" />
      <MemberSignature Language="F#" Value="override this.WriteStartObject : System.Xaml.XamlType -&gt; unit" Usage="xamlObjectWriter.WriteStartObject xamlType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType">書き込む型。 通常この値は XAML リーダーから取得します。</param>
        <summary>現在のスコープにオブジェクト ノードを書き込みます。スコープを新しいオブジェクトのスコープに設定します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException"><see cref="P:System.Xaml.XamlType.IsUnknown" /> 型を処理します。オブジェクトを作成できません。  
  
または 
開始オブジェクトを無効なスコープで記述しようとしました。</exception>
        <exception cref="T:System.Xaml.XamlParseException">ルート オブジェクトが既に設定に提供されたときにルート オブジェクトを書き込もうとしました。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="xamlType" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="overrides"><para>使用して、コレクション、ディクショナリ、または配列に新しいインスタンスを追加する必要があります、現在のスコープがコレクション、ディクショナリ、または配列内にある場合は、<see langword="Add" />関連する型のメソッド。 それ以外の場合、メンバーは、新しいインスタンスに割り当てられる必要があります。</para></block>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public override void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.WriteValue : obj -&gt; unit" Usage="xamlObjectWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>現在のメンバー スコープに値を書き込みます。 現在のスコープがコレクション、ディクショナリ、または配列オブジェクトの内部にある場合、値はコレクション、ディクショナリ、または配列内に追加されます。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">無効なスコープで値を書き込もうとしました。</exception>
      </Docs>
    </Member>
  </Members>
</Type>