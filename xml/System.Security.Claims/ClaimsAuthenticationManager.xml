<Type Name="ClaimsAuthenticationManager" FullName="System.Security.Claims.ClaimsAuthenticationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="10292ce7dd245b3f3cdb26ecfc6eb397301111ad" /><Meta Name="ms.sourcegitcommit" Value="9e3550fb2088d4faf2043f0acb29da4555519937" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/12/2018" /><Meta Name="ms.locfileid" Value="53296476" /></Metadata><TypeSignature Language="C#" Value="public class ClaimsAuthenticationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthenticationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthenticationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthenticationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthenticationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthenticationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>クレーム認証マネージャーの基本実装を定義します。 クレーム認証マネージャーは、実行がアプリケーション コードに到達する前に、処理ロジック (フィルター処理、検証、拡張機能) を受信プリンシパル内のクレームのコレクションに適用するための場所を、クレーム処理パイプラインに提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クレーム認証マネージャーは、アプリケーションの機能拡張ポイント要求処理パイプラインの検証、フィルター処理、変更に使用できる、着信要求、またはによって提示されるクレームのセットに新しい要求を挿入、 <xref:System.Security.Claims.ClaimsPrincipal> RP の前にアプリケーション コードが実行されます。 カスタム実装を返すことができますも<xref:System.Security.Claims.ClaimsPrincipal>に RP アプリケーションで必要な場合。 によって提供される既定の実装、<xref:System.Security.Claims.ClaimsAuthenticationManager>クラス内のクレームを返します、<xref:System.Security.Claims.ClaimsPrincipal>未変更の状態ただし、このクラスから派生し、上書き、<xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A>内のクレームを変更する方法、 <xref:System.Security.Claims.ClaimsPrincipal> (またはカスタムを返す。<xref:System.Security.Claims.ClaimsPrincipal>).  
  
 カスタム クレーム認証マネージャーを作成するための一般的な理由は、追加、削除、またはより RP アプリケーションによって管理される、おそらくでのみ認識個人情報に基づくクレームを変換します。 たとえば、RP アプリケーションによって管理されで見つかった名前クレームの値に基づくクレーム認証マネージャーによって返される要求プリンシパルに追加し、データ ベースでショッピング カート アプリケーションで顧客の購入の履歴を維持する可能性があります、受信プリンシパル。  
  
 使用するアプリケーションを構成することができます、`ClaimsAuthenticationManager`プログラムを使用するか、<xref:System.IdentityModel.Configuration.IdentityConfiguration>クラス、または構成を通じて、 [ &lt;claimsAuthenticationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md)要素 (子要素は、 [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)要素)。 オーバーライドすることができます、<xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A>のカスタムの子要素の処理を提供するメソッドを`<claimsAuthenticationManager>`要素により、カスタムのマネージャーを構成できます。 基本実装<xref:System.Security.Claims.ClaimsAuthenticationManager>すべての子要素を処理しません。  
  
 Windows Identity Foundation (WIF) によって、起動要求パイプラインからすることにより、クレーム認証マネージャーを使用するアプリケーションを構成します。  
  
   
  
## Examples  
 次のコードでは、入力方向の要求にいずれかのチェックを実行せず、受信プリンシパルにロール クレームを追加します。 マネージャーの単純な要求ベース認証を示します。 
  
 [!code-csharp[WifWebApplication1#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifwebapplication1/cs/myclaimsauthenticationmanager/simpleclaimsauthenticatonmanager.cs#1)]  
  
 次の XML に示す、`<claimsAuthenticationManager>`要素。  
  
```xml  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthenticationManager type="MyClaimsAuthenticationManager.SimpleClaimsAuthenticatonManager, MyClaimsAuthenticationManager" />  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthenticationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthenticationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public virtual System.Security.Claims.ClaimsPrincipal Authenticate (string resourceName, System.Security.Claims.ClaimsPrincipal incomingPrincipal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Claims.ClaimsPrincipal Authenticate(string resourceName, class System.Security.Claims.ClaimsPrincipal incomingPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Authenticate (resourceName As String, incomingPrincipal As ClaimsPrincipal) As ClaimsPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Claims::ClaimsPrincipal ^ Authenticate(System::String ^ resourceName, System::Security::Claims::ClaimsPrincipal ^ incomingPrincipal);" />
      <MemberSignature Language="F#" Value="abstract member Authenticate : string * System.Security.Claims.ClaimsPrincipal -&gt; System.Security.Claims.ClaimsPrincipal&#xA;override this.Authenticate : string * System.Security.Claims.ClaimsPrincipal -&gt; System.Security.Claims.ClaimsPrincipal" Usage="claimsAuthenticationManager.Authenticate (resourceName, incomingPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsPrincipal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="incomingPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
      </Parameters>
      <Docs>
        <param name="resourceName">要求されているリソースのアドレス。</param>
        <param name="incomingPrincipal">リソースにアクセスしようとしている認証されたユーザーを表すクレーム プリンシパル。</param>
        <summary>派生クラスでオーバーライドされると、RP アプリケーションの要件と一致する <see cref="T:System.Security.Claims.ClaimsPrincipal" /> オブジェクトを返します。 既定の実装は受信 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> を変更しません。</summary>
        <returns>RP アプリケーションに必要な変更を含むクレーム プリンシパル。 既定の実装は、受信クレーム プリンシパルを修正せず返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A>メソッドが呼び出されるフィルター処理する派生クラスでは、このメソッドをオーバーライドすることができます、要求処理パイプラインでは、変更、またはに RP アプリケーションのポリシーに従って要求プリンシパルに信頼性情報を挿入します。 RP アプリケーションの要件に応じてのカスタム実装をさらに返すことができます<xref:System.Security.Claims.ClaimsPrincipal>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthenticationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">カスタム構成要素。 リスト内の各ノードは <see cref="T:System.Xml.XmlElement" /> 型です。</param>
        <summary>派生クラスでオーバーライドされると、XML からカスタム構成を読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A>メソッド構成インフラストラクチャによって呼び出されます。 このメソッドが呼び出されたときに、`nodelist`の最上位レベルの子要素が表示されます、 [ &lt;claimsAuthenticationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md)構成ファイルからの要素。 属性または派生クラスを定義する構成スキーマに応じて子要素を含むこれらの各要素が、さらに、します。 下の子要素が表示されない場合、`<claimsAuthenticationManager>`構成ファイル内の要素、このメソッドは呼び出されません。  
  
 既定の実装をスローする<xref:System.NotImplementedException>します。 構成ファイルから、クレーム認証マネージャーの初期化を有効にする派生クラスでは、このメソッドをオーバーライドします。 たとえば、構成要素が; 要求プリンシパルを認証するときに、その後にポリシーを表す場合があります。または、追加の要求のプリンシパルに追加する元の属性ストアをポイントする使用する場合があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>