<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c72b41e033ca5ca7fbd9a2ecd7b933ad2ce249f2" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58719801" /></Metadata><TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthorizationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>クレーム承認マネージャーの基本実装を定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthorizationManager>クラスは、クレーム承認マネージャーの基本実装を提供します。 クレーム承認マネージャーは、次の 2 つのシナリオで使用できます。  
  
-   Web ベースのアプリケーションとサービスでは、クレーム承認マネージャーをアプリケーション コードの前に、入力方向の要求の値に基づいてリソースへのアクセスを承認することができます。、機能拡張ポイントを提供する処理パイプラインに追加することができます。実際に実装して、要求されたリソースが呼び出されます。  
  
-   使用すると、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>クラスまたは<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>アプリケーション用に構成されているクレーム承認マネージャーを実行するシステムによって呼び出されますコードで、命令型または宣言型のいずれかの要求ベースのアクセスを実行するクラスを確認します、。確認してください。 Web ベースのアプリケーションとデスクトップ アプリケーションの両方では、クレームに基づくアクセス チェックを実行できます。  
  
 によって提供される既定の実装、<xref:System.Security.Claims.ClaimsAuthorizationManager>クラスは、表示される各要求へのアクセスを承認。 ただし、このクラスから派生し、上書き、<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>承認ロジックを提供するメソッド。  
  
 クレーム承認マネージャーの使用は省略可能です。 クレーム承認マネージャーを使用してプログラムでいずれかを使用するアプリケーションを構成することができます、<xref:System.IdentityModel.Configuration.IdentityConfiguration>クラスまたは値を指定では宣言によって、 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)子要素である要素の[ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)アプリケーション構成ファイル内の要素。 かどうか、アプリケーションが web サイトまたはインターネット インフォメーション サービス (IIS) でホストされている web アプリケーションでも追加する必要あります、 <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> ASP.NET HTTP モジュールのコレクション。  
  
> [!IMPORTANT]
>  使用すると、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>クラスまたは<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>クラス、アクセス チェックを実行するために使用されるクレーム承認マネージャーは、id の構成で指定されている 1 つ、<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType>プロパティ。 構成ファイルでは、`<identityConfiguration>`を既定値から参照されているセクション`<federationConfiguration>`要素。 これは Windows Communication Foundation (WCF) サービスとデスクトップ アプリケーションについても当てはまります。  
  
 <xref:System.Security.Claims.ClaimsAuthorizationManager>基底クラスに追加の構成になりません。 ただし、上書きすることができます、<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>派生クラスの子要素から、クレーム承認マネージャーの初期化を提供する、`<claimsAuthorizationElement>`します。 一般的なシナリオでは、これらの子要素を使用して、どのリソースにアクセスするために必要などの要求の種類と値を決定する承認ポリシーを指定します。 実装の使用法および構文がどのような意味を定義する自由が厳格な要件はありません。  
  
   
  
## Examples  
 コード例で使用される、<xref:System.Security.Claims.ClaimsAuthorizationManager>トピックから取得されますが、`Claims Based Authorization`サンプル。 このサンプルでは、構成で指定されているポリシーに基づいて項目を承認できるカスタム クレーム承認マネージャーを提供します。 カスタム クレーム承認マネージャーは、次の 3 つの基本的なコンポーネントで構成されています: から派生したクラス<xref:System.Security.Claims.ClaimsAuthorizationManager>、マネージャーを実装する、`ResourceAction`リソースと、アクションのペアをクラスと、ポリシーのリーダーを読み取り、コンパイルされるポリシー構成ファイルで指定します。 これは、ポリシーをコンパイルし、リソースへのアクセスを許可するために、プリンシパルを評価するクレーム承認マネージャーで使用します。 簡潔にするには、すべての要素が表示されます。 Wif とそのダウンロード場所についてこのサンプルと他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)します。  
  
 次のコードでは、カスタム クレーム承認マネージャーの実装を示します。 <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>メソッドを読み取って (表示されない) ポリシーのリーダー ヘルパー クラスを使用して、ポリシー構成からをコンパイルし、<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>メソッドが許可されたり、このポリシーに基づいてアクセスを拒否します。  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 次のコードは、`ResourceAction`カスタム クレーム マネージャーによって使用されるクラス。  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 次の XML では、承認マネージャーの IIS 7.5 でホストされる web アプリケーションは、上記の要求を構成する方法を示します。 クレーム承認マネージャーの構成に固有の要素のみが表示されます。 なおへの参照、<xref:System.IdentityModel.Services.ClaimsAuthorizationModule>クラスは、パイプラインの下に追加する必要があります、`<system.Webserver>`要素。 サイトおよびアプリケーションのバージョンの IIS 7 よりも前の IIS でホストされているは、モジュールを パイプラインに追加することができます、`<system.Web>`要素。 この構成では、表示が、コメント アウトされています。  
  
 カスタム クレーム承認マネージャーによって使用されるポリシーが指定された`<policy>`下の要素、 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)要素。 最初のポリシーでは、プリンシパルが、指定したリソースで指定されたアクションを実行するために指定された要求の 1 つを持つ必要があります。 2 番目のポリシーでは、プリンシパルは指定したリソースで指定されたアクションを実行できるように両方の要求を持つ必要があります。 他のユーザーに、プリンシパルは継承要求に関係なくアクセスを自動的に付与されます。  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthorizationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool&#xA;override this.CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool" Usage="claimsAuthorizationManager.CheckAccess context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">認証がチェックされるサブジェクト、リソース、およびアクションを含む認証コンテキスト。</param>
        <summary>派生クラスで実装された場合、指定されたリソースで指定されたアクションを実行するために、指定されたコンテキストでサブジェクトの承認を確認します。</summary>
        <returns>サブジェクトが指定したリソースで指定されたアクションを実行することが承認されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基本の実装は常に返します`true`へのアクセスを承認します。 RP アプリケーションの要件に基づいてアクセスを承認する派生クラスでこのメソッドをオーバーライドすることができます。 このメソッドが戻る場合`false`、Windows Identity Foundation (WIF) は、呼び出し元に、未承認エラーを返します。 それ以外の場合、実行は、RP アプリケーションに渡されます。  
  
   
  
## Examples  
 コード例で使用される、<xref:System.Security.Claims.ClaimsAuthorizationManager>トピックから取得されますが、`Claims Based Authorization`サンプル。 このサンプルでは、構成で指定されているポリシーに基づいて項目を承認できるカスタム クレーム承認マネージャーを提供します。 カスタム クレーム承認マネージャーは、次の 3 つの基本的なコンポーネントで構成されています: から派生したクラス<xref:System.Security.Claims.ClaimsAuthorizationManager>、マネージャーを実装する、`ResourceAction`リソースと、アクションのペアをクラスと、ポリシーのリーダーを読み取り、コンパイルされるポリシー構成ファイルで指定します。 これは、ポリシーをコンパイルし、リソースへのアクセスを許可するために、プリンシパルを評価するクレーム承認マネージャーで使用します。 簡潔にするには、すべての要素が表示されます。 Wif とそのダウンロード場所についてこのサンプルと他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)します。  
  
 次のコードは、オーバーライド、<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>メソッド。 このメソッドは、許可または読み取りし、構成ファイルからコンパイルされたポリシーに基づいてアクセスを拒否します。  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 次のコードは、`ResourceAction`カスタム クレーム マネージャーによって使用されるクラス。  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 カスタム クレーム承認マネージャーによって使用されるポリシーが指定された`<policy>`下の要素、 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)要素。 このポリシーを読んで、コンパイルして、<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>メソッド。 最初のポリシーでは、プリンシパルが、指定したリソースで指定されたアクションを実行するために指定された要求の 1 つを持つ必要があります。 2 番目のポリシーでは、プリンシパルは指定したリソースで指定されたアクションを実行できるように両方の要求を持つ必要があります。 他のユーザーに、プリンシパルは継承要求に関係なくアクセスを自動的に付与されます。  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthorizationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">カスタム構成要素。 リスト内の各ノードは <see cref="T:System.Xml.XmlElement" /> 型です。</param>
        <summary>派生クラスでオーバーライドされると、XML からカスタム構成を読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A>メソッド構成インフラストラクチャによって呼び出されます。 このメソッドが呼び出されたときに、`nodelist`の最上位レベルの子要素が表示されます、 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)構成ファイルからの要素。 属性または派生クラスを定義する構成スキーマに応じて子要素を含むこれらの各要素が、さらに、します。 下の子要素が表示されない場合、`<claimsAuthorizationManager>`構成ファイル内の要素、このメソッドは呼び出されません。  
  
 既定の実装をスローする<xref:System.NotImplementedException>します。 構成ファイルからのクレーム承認マネージャーの初期化を有効にする派生クラスでは、このメソッドをオーバーライドします。 通常、構成要素は、承認ポリシーを表現する使用します。ただし、要素を定義でき、アプリケーションの要件に基づいて意味のある任意の方法で使用できます。  
  
   
  
## Examples  
 コード例で使用される、<xref:System.Security.Claims.ClaimsAuthorizationManager>トピックから取得されますが、`Claims Based Authorization`サンプル。 このサンプルでは、構成で指定されているポリシーに基づいて項目を承認できるカスタム クレーム承認マネージャーを提供します。 カスタム クレーム承認マネージャーは、次の 3 つの基本的なコンポーネントで構成されています: から派生したクラス<xref:System.Security.Claims.ClaimsAuthorizationManager>、マネージャーを実装する、`ResourceAction`リソースと、アクションのペアをクラスと、ポリシーのリーダーを読み取り、コンパイルされるポリシー構成ファイルで指定します。 これは、ポリシーをコンパイルし、リソースへのアクセスを許可するために、プリンシパルを評価するクレーム承認マネージャーで使用します。 簡潔にするには、すべての要素が表示されます。 Wif とそのダウンロード場所についてこのサンプルと他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)します。  
  
 次のコードは、オーバーライド、<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>メソッド。 このメソッドは (非表示)、ポリシー リーダーのヘルパー クラスを読み取って、構成ファイルで指定された承認ポリシーをコンパイルします。 ポリシーがディクショナリに追加され、によってアクセスされる、`ResourceAction`が対象としています、リソースとアクションから作成されるキー オブジェクト。  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 次のコードは、`ResourceAction`カスタム クレーム マネージャーによって使用されるクラス。  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 カスタム クレーム承認マネージャーによって使用されるポリシーが指定された`<policy>`下の要素、 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)要素。 このポリシーを読んで、コンパイルして、<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>メソッド。 最初のポリシーでは、プリンシパルが、指定したリソースで指定されたアクションを実行するために指定された要求の 1 つを持つ必要があります。 2 番目のポリシーでは、プリンシパルは指定したリソースで指定されたアクションを実行できるように両方の要求を持つ必要があります。 他のユーザーに、プリンシパルは継承要求に関係なくアクセスを自動的に付与されます。  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>