<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa77fc99c06460c962f41c33b11554f448051d19" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36531911" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthorizationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="578b1-101">クレーム承認マネージャーの基本実装を定義します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="578b1-101">Defines the base implementation for a claims authorization manager.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="578b1-102"><xref:System.Security.Claims.ClaimsAuthorizationManager>クラスは、クレーム承認マネージャーの基本実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="578b1-102">The <xref:System.Security.Claims.ClaimsAuthorizationManager> class provides the base implementation for a claims authorization manager.</span></span> <span data-ttu-id="578b1-103">クレーム承認マネージャーは、次の 2 つのシナリオで使用できます。</span><span class="sxs-lookup"><span data-stu-id="578b1-103">A claims authorization manager can be used in the following two scenarios:</span></span>  
  
-   <span data-ttu-id="578b1-104">Web ベースのアプリケーションとサービスでは、クレーム承認マネージャーをアプリケーション コードの前に、入力方向の要求の値に基づいてリソースへのアクセスを承認することができます。、機能拡張ポイントを提供する処理パイプラインに追加することができます。実際に実装して、要求されたリソースが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="578b1-104">In web-based applications and services, a claims authorization manager  can be added to the processing pipeline to provide an extensibility point from which you can authorize access to a resource according to the value of incoming claims before the application code that actually implements the requested resource is called.</span></span>  
  
-   <span data-ttu-id="578b1-105">使用すると、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>クラスまたは<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>アプリケーション用に構成されているクレーム承認マネージャーを実行するシステムによって呼び出されますコードで、命令型または宣言型のいずれかの要求ベースのアクセスを実行するクラスを確認します、。確認してください。</span><span class="sxs-lookup"><span data-stu-id="578b1-105">When you use the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> class or the <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> class to perform either imperative or declarative claims-based access checks in your code, the claims authorization manager that is configured for your application is called by the system to perform the check.</span></span> <span data-ttu-id="578b1-106">Web ベースのアプリケーションとデスクトップ アプリケーションの両方では、クレームに基づくアクセス チェックを実行できます。</span><span class="sxs-lookup"><span data-stu-id="578b1-106">Claims-based access checks can be performed in both web-based applications and desktop applications.</span></span>  
  
 <span data-ttu-id="578b1-107">によって提供される既定の実装、<xref:System.Security.Claims.ClaimsAuthorizationManager>クラスは、表示される各要求へのアクセスを承認。 ただし、このクラスから派生し、上書き、<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>承認ロジックを提供するメソッド。</span><span class="sxs-lookup"><span data-stu-id="578b1-107">The default implementation provided by the <xref:System.Security.Claims.ClaimsAuthorizationManager> class authorizes access for each claim presented; however, you can derive from this class and override the <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> method to provide your own authorization logic.</span></span>  
  
 <span data-ttu-id="578b1-108">クレーム承認マネージャーの使用は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="578b1-108">The use of a claims authorization manager is optional.</span></span> <span data-ttu-id="578b1-109">クレーム承認マネージャーを使用してプログラムでいずれかを使用するアプリケーションを構成することができます、<xref:System.IdentityModel.Configuration.IdentityConfiguration>クラスまたは値を指定では宣言によって、 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)子要素である要素の[ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)アプリケーション構成ファイル内の要素。</span><span class="sxs-lookup"><span data-stu-id="578b1-109">You can configure your application to use a claims authorization manager either programmatically by using the <xref:System.IdentityModel.Configuration.IdentityConfiguration> class or declaratively, by specifying the [&lt;claimsAuthorizationManager&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) element, which is a child element of the [&lt;identityConfiguration&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) element in your application configuration file.</span></span> <span data-ttu-id="578b1-110">かどうか、アプリケーションが web サイトまたはインターネット インフォメーション サービス (IIS) でホストされている web アプリケーションでも追加する必要あります、 <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> ASP.NET HTTP モジュールのコレクション。</span><span class="sxs-lookup"><span data-stu-id="578b1-110">If your application is a web site or a web application hosted in Internet Information Services (IIS), you must also add the <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> in the ASP.NET HTTP Modules collection.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="578b1-111">使用すると、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>クラスまたは<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>クラス、アクセス チェックを実行するために使用されるクレーム承認マネージャーは、id の構成で指定されている 1 つ、<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="578b1-111">When you use the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> class or the <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> class, the claims authorization manager that is used to perform the access check is the one that is specified in the identity configuration under the <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="578b1-112">構成ファイルでは、`<identityConfiguration>`を既定値から参照されているセクション`<federationConfiguration>`要素。</span><span class="sxs-lookup"><span data-stu-id="578b1-112">In a configuration file, it is the `<identityConfiguration>` section that is referenced from the default `<federationConfiguration>` element.</span></span> <span data-ttu-id="578b1-113">これは Windows Communication Foundation (WCF) サービスとデスクトップ アプリケーションについても当てはまります。</span><span class="sxs-lookup"><span data-stu-id="578b1-113">This is true even for Windows Communication Foundation (WCF) services and desktop applications.</span></span>  
  
 <span data-ttu-id="578b1-114"><xref:System.Security.Claims.ClaimsAuthorizationManager>基底クラスに追加の構成になりません。 ただし、上書きすることができます、<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>派生クラスの子要素から、クレーム承認マネージャーの初期化を提供する、`<claimsAuthorizationElement>`します。</span><span class="sxs-lookup"><span data-stu-id="578b1-114">The <xref:System.Security.Claims.ClaimsAuthorizationManager> base class does not take any additional configuration; however, you can override the <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> in derived classes to provide initialization of your claims authorization manager from child elements of the `<claimsAuthorizationElement>`.</span></span> <span data-ttu-id="578b1-115">一般的なシナリオでは、これらの子要素を使用して、どのリソースにアクセスするために必要などの要求の種類と値を決定する承認ポリシーを指定します。</span><span class="sxs-lookup"><span data-stu-id="578b1-115">The typical scenario is to use these child elements to specify authorization policies which determine which claim types and values are required in order to gain access to which resource.</span></span> <span data-ttu-id="578b1-116">実装の使用法および構文がどのような意味を定義する自由が厳格な要件はありません。</span><span class="sxs-lookup"><span data-stu-id="578b1-116">This is not a hard requirement, though you are free to define whatever usage and syntax make sense for your implementation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="578b1-117">コード例で使用される、<xref:System.Security.Claims.ClaimsAuthorizationManager>トピックから取得されますが、`Claims Based Authorization`サンプル。</span><span class="sxs-lookup"><span data-stu-id="578b1-117">The code examples that are used in the <xref:System.Security.Claims.ClaimsAuthorizationManager> topics are taken from the `Claims Based Authorization` sample.</span></span> <span data-ttu-id="578b1-118">このサンプルでは、構成で指定されているポリシーに基づいて項目を承認できるカスタム クレーム承認マネージャーを提供します。</span><span class="sxs-lookup"><span data-stu-id="578b1-118">This sample provides a custom claims authorization manager that can authorize subjects based on a policy that is specified in configuration.</span></span> <span data-ttu-id="578b1-119">カスタム クレーム承認マネージャーは、次の 3 つの基本的なコンポーネントで構成されています: から派生したクラス<xref:System.Security.Claims.ClaimsAuthorizationManager>、マネージャーを実装する、`ResourceAction`リソースと、アクションのペアをクラスと、ポリシーのリーダーを読み取り、コンパイルされるポリシー構成ファイルで指定します。</span><span class="sxs-lookup"><span data-stu-id="578b1-119">The custom claims authorization manager consists of three basic components: a class derived from <xref:System.Security.Claims.ClaimsAuthorizationManager> that implements the manager, the `ResourceAction` class that pairs a resource and an action, and a policy reader that reads and compiles policy that is specified in the configuration file.</span></span> <span data-ttu-id="578b1-120">これは、ポリシーをコンパイルし、リソースへのアクセスを許可するために、プリンシパルを評価するクレーム承認マネージャーで使用します。</span><span class="sxs-lookup"><span data-stu-id="578b1-120">This compiled policy can then be used by the claims authorization manager to evaluate a principal in order to authorize access to resources.</span></span> <span data-ttu-id="578b1-121">簡潔にするには、すべての要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="578b1-121">Not all elements are shown for the sake of brevity.</span></span> <span data-ttu-id="578b1-122">Wif とそのダウンロード場所についてこのサンプルと他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)します。</span><span class="sxs-lookup"><span data-stu-id="578b1-122">For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 <span data-ttu-id="578b1-123">次のコードでは、カスタム クレーム承認マネージャーの実装を示します。</span><span class="sxs-lookup"><span data-stu-id="578b1-123">The following code shows the implementation of the custom claims authorization manager.</span></span> <span data-ttu-id="578b1-124"><xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>メソッドを読み取って (表示されない) ポリシーのリーダー ヘルパー クラスを使用して、ポリシー構成からをコンパイルし、<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>メソッドが許可されたり、このポリシーに基づいてアクセスを拒否します。</span><span class="sxs-lookup"><span data-stu-id="578b1-124">The <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> method reads and compiles the policy from configuration by using the policy reader helper class (not shown) and the <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> method grants or denies access based on this policy.</span></span>  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 <span data-ttu-id="578b1-125">次のコードは、`ResourceAction`カスタム クレーム マネージャーによって使用されるクラス。</span><span class="sxs-lookup"><span data-stu-id="578b1-125">The following code shows the `ResourceAction` class used by the custom claims manager.</span></span>  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 <span data-ttu-id="578b1-126">次の XML では、承認マネージャーの IIS 7.5 でホストされる web アプリケーションは、上記の要求を構成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="578b1-126">The following XML shows how to configure the claims authorization manager shown above for a web application hosted in IIS 7.5.</span></span> <span data-ttu-id="578b1-127">クレーム承認マネージャーの構成に固有の要素のみが表示されます。</span><span class="sxs-lookup"><span data-stu-id="578b1-127">Only the elements specific to the configuration of the claims authorization manager are shown.</span></span> <span data-ttu-id="578b1-128">なおへの参照、<xref:System.IdentityModel.Services.ClaimsAuthorizationModule>クラスは、パイプラインの下に追加する必要があります、`<system.Webserver>`要素。</span><span class="sxs-lookup"><span data-stu-id="578b1-128">Note that a reference to the <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> class must be added to the pipeline under the `<system.Webserver>` element.</span></span> <span data-ttu-id="578b1-129">サイトおよびアプリケーションのバージョンの IIS 7 よりも前の IIS でホストされているは、モジュールを パイプラインに追加することができます、`<system.Web>`要素。</span><span class="sxs-lookup"><span data-stu-id="578b1-129">For sites and applications hosted in versions of IIS prior to IIS 7 the modules can be added to the pipeline under the `<system.Web>` element.</span></span> <span data-ttu-id="578b1-130">この構成では、表示が、コメント アウトされています。</span><span class="sxs-lookup"><span data-stu-id="578b1-130">This configuration is shown but commented out.</span></span>  
  
 <span data-ttu-id="578b1-131">カスタム クレーム承認マネージャーによって使用されるポリシーが指定された`<policy>`下の要素、 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)要素。</span><span class="sxs-lookup"><span data-stu-id="578b1-131">The policy used by the claims authorization manager is specified by custom `<policy>` elements under the [&lt;claimsAuthorizationManager&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) element.</span></span> <span data-ttu-id="578b1-132">最初のポリシーでは、プリンシパルが、指定したリソースで指定されたアクションを実行するために指定された要求の 1 つを持つ必要があります。</span><span class="sxs-lookup"><span data-stu-id="578b1-132">In the first policy, the principal must possess one of the specified claims in order to perform the specified action on the specified resource.</span></span> <span data-ttu-id="578b1-133">2 番目のポリシーでは、プリンシパルは指定したリソースで指定されたアクションを実行できるように両方の要求を持つ必要があります。</span><span class="sxs-lookup"><span data-stu-id="578b1-133">In the second policy, the principal must possess both claims to be able to perform the specified action on the specified resource.</span></span> <span data-ttu-id="578b1-134">他のユーザーに、プリンシパルは継承要求に関係なくアクセスを自動的に付与されます。</span><span class="sxs-lookup"><span data-stu-id="578b1-134">In all others, the principal is automatically granted access regardless of the claims it possesses.</span></span>  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthoirzationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="578b1-135">
            <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b1-135">Initializes a new instance of the <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool&#xA;override this.CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool" Usage="claimsAuthorizationManager.CheckAccess context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="578b1-136">認証がチェックされるサブジェクト、リソース、およびアクションを含む認証コンテキスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b1-136">The authorization context that contains the subject, resource, and action for which authorization is to be checked.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="578b1-137">派生クラスで実装された場合、指定されたリソースで指定されたアクションを実行するために、指定されたコンテキストでサブジェクトの承認を確認します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b1-137">When implemented in a derived class, checks authorization for the subject in the specified context to perform the specified action on the specified resource.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="578b1-138">サブジェクトが指定したリソースで指定されたアクションを実行することが承認されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b1-138">
              <see langword="true" /> if the subject is authorized to perform the specified action on the specified resource; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="578b1-139">基本の実装は常に返します`true`へのアクセスを承認します。</span><span class="sxs-lookup"><span data-stu-id="578b1-139">The base implementation always returns `true`, which authorizes access.</span></span> <span data-ttu-id="578b1-140">RP アプリケーションの要件に基づいてアクセスを承認する派生クラスでこのメソッドをオーバーライドすることができます。</span><span class="sxs-lookup"><span data-stu-id="578b1-140">You can override this method in a derived class to authorize access based on the requirements of your RP application.</span></span> <span data-ttu-id="578b1-141">このメソッドが戻る場合`false`、Windows Identity Foundation (WIF) は、呼び出し元に、未承認エラーを返します。 それ以外の場合、実行は、RP アプリケーションに渡されます。</span><span class="sxs-lookup"><span data-stu-id="578b1-141">If this method returns `false`, Windows Identity Foundation (WIF) returns an unauthorized error to the caller; otherwise, execution is passed to the RP application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="578b1-142">コード例で使用される、<xref:System.Security.Claims.ClaimsAuthorizationManager>トピックから取得されますが、`Claims Based Authorization`サンプル。</span><span class="sxs-lookup"><span data-stu-id="578b1-142">The code examples that are used in the <xref:System.Security.Claims.ClaimsAuthorizationManager> topics are taken from the `Claims Based Authorization` sample.</span></span> <span data-ttu-id="578b1-143">このサンプルでは、構成で指定されているポリシーに基づいて項目を承認できるカスタム クレーム承認マネージャーを提供します。</span><span class="sxs-lookup"><span data-stu-id="578b1-143">This sample provides a custom claims authorization manager that can authorize subjects based on a policy that is specified in configuration.</span></span> <span data-ttu-id="578b1-144">カスタム クレーム承認マネージャーは、次の 3 つの基本的なコンポーネントで構成されています: から派生したクラス<xref:System.Security.Claims.ClaimsAuthorizationManager>、マネージャーを実装する、`ResourceAction`リソースと、アクションのペアをクラスと、ポリシーのリーダーを読み取り、コンパイルされるポリシー構成ファイルで指定します。</span><span class="sxs-lookup"><span data-stu-id="578b1-144">The custom claims authorization manager consists of three basic components: a class derived from <xref:System.Security.Claims.ClaimsAuthorizationManager> that implements the manager, the `ResourceAction` class that pairs a resource and an action, and a policy reader that reads and compiles policy that is specified in the configuration file.</span></span> <span data-ttu-id="578b1-145">これは、ポリシーをコンパイルし、リソースへのアクセスを許可するために、プリンシパルを評価するクレーム承認マネージャーで使用します。</span><span class="sxs-lookup"><span data-stu-id="578b1-145">This compiled policy can then be used by the claims authorization manager to evaluate a principal in order to authorize access to resources.</span></span> <span data-ttu-id="578b1-146">簡潔にするには、すべての要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="578b1-146">Not all elements are shown for the sake of brevity.</span></span> <span data-ttu-id="578b1-147">Wif とそのダウンロード場所についてこのサンプルと他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)します。</span><span class="sxs-lookup"><span data-stu-id="578b1-147">For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 <span data-ttu-id="578b1-148">次のコードは、オーバーライド、<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="578b1-148">The following code shows the override of the <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> method.</span></span> <span data-ttu-id="578b1-149">このメソッドは、許可または読み取りし、構成ファイルからコンパイルされたポリシーに基づいてアクセスを拒否します。</span><span class="sxs-lookup"><span data-stu-id="578b1-149">This method grants or denies access based on a policy read and compiled from the configuration file.</span></span>  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 <span data-ttu-id="578b1-150">次のコードは、`ResourceAction`カスタム クレーム マネージャーによって使用されるクラス。</span><span class="sxs-lookup"><span data-stu-id="578b1-150">The following code shows the `ResourceAction` class used by the custom claims manager.</span></span>  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 <span data-ttu-id="578b1-151">カスタム クレーム承認マネージャーによって使用されるポリシーが指定された`<policy>`下の要素、 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)要素。</span><span class="sxs-lookup"><span data-stu-id="578b1-151">The policy used by the claims authorization manager is specified by custom `<policy>` elements under the [&lt;claimsAuthorizationManager&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) element.</span></span> <span data-ttu-id="578b1-152">このポリシーを読んで、コンパイルして、<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="578b1-152">This policy is read and compiled by the <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> method.</span></span> <span data-ttu-id="578b1-153">最初のポリシーでは、プリンシパルが、指定したリソースで指定されたアクションを実行するために指定された要求の 1 つを持つ必要があります。</span><span class="sxs-lookup"><span data-stu-id="578b1-153">In the first policy, the principal must possess one of the specified claims in order to perform the specified action on the specified resource.</span></span> <span data-ttu-id="578b1-154">2 番目のポリシーでは、プリンシパルは指定したリソースで指定されたアクションを実行できるように両方の要求を持つ必要があります。</span><span class="sxs-lookup"><span data-stu-id="578b1-154">In the second policy, the principal must possess both claims to be able to perform the specified action on the specified resource.</span></span> <span data-ttu-id="578b1-155">他のユーザーに、プリンシパルは継承要求に関係なくアクセスを自動的に付与されます。</span><span class="sxs-lookup"><span data-stu-id="578b1-155">In all others, the principal is automatically granted access regardless of the claims it possesses.</span></span>  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthorizationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">
          <span data-ttu-id="578b1-156">カスタム構成要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b1-156">The custom configuration elements.</span>
          </span>
          <span data-ttu-id="578b1-157">リスト内の各ノードは <see cref="T:System.Xml.XmlElement" /> 型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b1-157">Each node in the list is of type <see cref="T:System.Xml.XmlElement" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="578b1-158">派生クラスでオーバーライドされると、XML からカスタム構成を読み込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="578b1-158">When overridden in a derived class, loads custom configuration from XML.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="578b1-159"><xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A>メソッド構成インフラストラクチャによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="578b1-159">The <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> method is called by the configuration infrastructure.</span></span> <span data-ttu-id="578b1-160">このメソッドが呼び出されたときに、`nodelist`の最上位レベルの子要素が表示されます、 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)構成ファイルからの要素。</span><span class="sxs-lookup"><span data-stu-id="578b1-160">When this method is called, the `nodelist` will contain the top-level child elements of the [&lt;claimsAuthorizationManager&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) element from the configuration file.</span></span> <span data-ttu-id="578b1-161">属性または派生クラスを定義する構成スキーマに応じて子要素を含むこれらの各要素が、さらに、します。</span><span class="sxs-lookup"><span data-stu-id="578b1-161">Each of these elements may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.</span></span> <span data-ttu-id="578b1-162">下の子要素が表示されない場合、`<claimsAuthorizationManager>`構成ファイル内の要素、このメソッドは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="578b1-162">If no child elements appear under the `<claimsAuthorizationManager>` element in the configuration file, this method is not called.</span></span>  
  
 <span data-ttu-id="578b1-163">既定の実装をスローする<xref:System.NotImplementedException>します。</span><span class="sxs-lookup"><span data-stu-id="578b1-163">The default implementation throws a <xref:System.NotImplementedException>.</span></span> <span data-ttu-id="578b1-164">構成ファイルからのクレーム承認マネージャーの初期化を有効にする派生クラスでは、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="578b1-164">Override this method in your derived class to enable initialization of your claims authorization manager from a configuration file.</span></span> <span data-ttu-id="578b1-165">通常、構成要素は、承認ポリシーを表現する使用します。ただし、要素を定義でき、アプリケーションの要件に基づいて意味のある任意の方法で使用できます。</span><span class="sxs-lookup"><span data-stu-id="578b1-165">Typically, the configuration elements are used to express an authorization policy; however, you can define elements and use them in any way that makes sense based on the requirements of your application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="578b1-166">コード例で使用される、<xref:System.Security.Claims.ClaimsAuthorizationManager>トピックから取得されますが、`Claims Based Authorization`サンプル。</span><span class="sxs-lookup"><span data-stu-id="578b1-166">The code examples that are used in the <xref:System.Security.Claims.ClaimsAuthorizationManager> topics are taken from the `Claims Based Authorization` sample.</span></span> <span data-ttu-id="578b1-167">このサンプルでは、構成で指定されているポリシーに基づいて項目を承認できるカスタム クレーム承認マネージャーを提供します。</span><span class="sxs-lookup"><span data-stu-id="578b1-167">This sample provides a custom claims authorization manager that can authorize subjects based on a policy that is specified in configuration.</span></span> <span data-ttu-id="578b1-168">カスタム クレーム承認マネージャーは、次の 3 つの基本的なコンポーネントで構成されています: から派生したクラス<xref:System.Security.Claims.ClaimsAuthorizationManager>、マネージャーを実装する、`ResourceAction`リソースと、アクションのペアをクラスと、ポリシーのリーダーを読み取り、コンパイルされるポリシー構成ファイルで指定します。</span><span class="sxs-lookup"><span data-stu-id="578b1-168">The custom claims authorization manager consists of three basic components: a class derived from <xref:System.Security.Claims.ClaimsAuthorizationManager> that implements the manager, the `ResourceAction` class that pairs a resource and an action, and a policy reader that reads and compiles policy that is specified in the configuration file.</span></span> <span data-ttu-id="578b1-169">これは、ポリシーをコンパイルし、リソースへのアクセスを許可するために、プリンシパルを評価するクレーム承認マネージャーで使用します。</span><span class="sxs-lookup"><span data-stu-id="578b1-169">This compiled policy can then be used by the claims authorization manager to evaluate a principal in order to authorize access to resources.</span></span> <span data-ttu-id="578b1-170">簡潔にするには、すべての要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="578b1-170">Not all elements are shown for the sake of brevity.</span></span> <span data-ttu-id="578b1-171">Wif とそのダウンロード場所についてこのサンプルと他のサンプルについては、次を参照してください。 [WIF コード サンプル インデックス](~/docs/framework/security/wif-code-sample-index.md)します。</span><span class="sxs-lookup"><span data-stu-id="578b1-171">For information about this sample and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/docs/framework/security/wif-code-sample-index.md).</span></span>  
  
 <span data-ttu-id="578b1-172">次のコードは、オーバーライド、<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="578b1-172">The following code shows the override of the <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> method.</span></span> <span data-ttu-id="578b1-173">このメソッドは (非表示)、ポリシー リーダーのヘルパー クラスを読み取って、構成ファイルで指定された承認ポリシーをコンパイルします。</span><span class="sxs-lookup"><span data-stu-id="578b1-173">This method uses a helper policy reader class (not shown) to read and compile authorization policies specified in the configuration file.</span></span> <span data-ttu-id="578b1-174">ポリシーがディクショナリに追加され、によってアクセスされる、`ResourceAction`が対象としています、リソースとアクションから作成されるキー オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="578b1-174">Policies are added to a dictionary and are accessed by a `ResourceAction` key object that is created from the resource and action for which they are intended.</span></span>  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 <span data-ttu-id="578b1-175">次のコードは、`ResourceAction`カスタム クレーム マネージャーによって使用されるクラス。</span><span class="sxs-lookup"><span data-stu-id="578b1-175">The following code shows the `ResourceAction` class used by the custom claims manager.</span></span>  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 <span data-ttu-id="578b1-176">カスタム クレーム承認マネージャーによって使用されるポリシーが指定された`<policy>`下の要素、 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)要素。</span><span class="sxs-lookup"><span data-stu-id="578b1-176">The policy used by the claims authorization manager is specified by custom `<policy>` elements under the [&lt;claimsAuthorizationManager&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) element.</span></span> <span data-ttu-id="578b1-177">このポリシーを読んで、コンパイルして、<xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="578b1-177">This policy is read and compiled by the <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> method.</span></span> <span data-ttu-id="578b1-178">最初のポリシーでは、プリンシパルが、指定したリソースで指定されたアクションを実行するために指定された要求の 1 つを持つ必要があります。</span><span class="sxs-lookup"><span data-stu-id="578b1-178">In the first policy, the principal must possess one of the specified claims in order to perform the specified action on the specified resource.</span></span> <span data-ttu-id="578b1-179">2 番目のポリシーでは、プリンシパルは指定したリソースで指定されたアクションを実行できるように両方の要求を持つ必要があります。</span><span class="sxs-lookup"><span data-stu-id="578b1-179">In the second policy, the principal must possess both claims to be able to perform the specified action on the specified resource.</span></span> <span data-ttu-id="578b1-180">他のユーザーに、プリンシパルは継承要求に関係なくアクセスを自動的に付与されます。</span><span class="sxs-lookup"><span data-stu-id="578b1-180">In all others, the principal is automatically granted access regardless of the claims it possesses.</span></span>  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>