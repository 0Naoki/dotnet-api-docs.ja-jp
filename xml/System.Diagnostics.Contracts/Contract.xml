<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Contract.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac518ccddeb7c646934cfcc1b40673135a0998cbc53.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">18ccddeb7c646934cfcc1b40673135a0998cbc53</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.</source>
          <target state="translated">実行前の状態、実行後の状態、オブジェクトの不変部分などのプログラム コントラクトを表す静的メソッドを格納します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Code contract classes let you specify preconditions, postconditions, and object invariants in your code.</source>
          <target state="translated">コード コントラクト クラスでは、コード内の事前条件、事後条件、およびオブジェクト不変条件を指定できます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Preconditions are requirements that must be met when entering a method or property.</source>
          <target state="translated">事前条件とは、メソッドやプロパティに入るときに満たされている必要がある要件です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Postconditions describe expectations at the time the method or property code exits.</source>
          <target state="translated">事後条件は、メソッドやプロパティのコードが終了するときの予測を表します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Object invariants describe the expected state for a class that has no condition problems.</source>
          <target state="translated">オブジェクトの不変部分では、条件の問題を持たないクラスに対して予期される状態について説明します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>For more information about preconditions, postconditions, and object invariants, see <bpt id="p1">[</bpt>Code Contracts<ept id="p1">](~/docs/framework/debug-trace-profile/code-contracts.md)</ept>.</source>
          <target state="translated">事前条件、事後条件、およびオブジェクト不変条件の詳細については、次を参照してください。<bpt id="p1">[</bpt>コード コントラクト<ept id="p1">](~/docs/framework/debug-trace-profile/code-contracts.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>For tools and detailed instructions for using code contracts, see <bpt id="p1">[</bpt>Code Contracts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site.</source>
          <target state="translated">コード コントラクトを使用するためのツールおよび詳細な手順については、MSDN DevLabs Web サイトの「<bpt id="p1">[</bpt>Code Contracts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept>」(コード コントラクト) を参照してください。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>You must use a binary rewriter to insert run-time enforcement of contracts.</source>
          <target state="translated">バイナリ リライターを使用すると、コントラクトの実行時の強制を挿入する必要があります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Otherwise, contracts such as the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType&gt;</ph> method can only be tested statically and will not throw exceptions during run time if a contract is violated.</source>
          <target state="translated">それ以外の場合、コントラクトなど、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType&gt;</ph>メソッドをテストするために静的にし、コントラクトに違反する場合、実行時に例外をスローしませんがします。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>You can download the binary rewriter CCRewrite from <bpt id="p1">[</bpt>Code Contracts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site.</source>
          <target state="translated">バイナリ リライター CCRewrite をダウンロードすることから<bpt id="p1">[</bpt>コード コントラクト<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept>MSDN DevLabs Web サイトです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>CCRewrite comes with a Visual Studio add-in that enables you to activate run-time contract enforcement from the project <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> page.</source>
          <target state="translated">CCRewrite が付属して、Visual Studio アドインのプロジェクトから実行時のコントラクトの実施をアクティブ化することができます<bpt id="p1">**</bpt>プロパティ<ept id="p1">**</ept>ページ。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.Contracts.Contract">
          <source>The binary rewriter and the Visual Studio add-in do not ship with <ph id="ph1">[!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)]</ph> or the Windows SDK.</source>
          <target state="translated">バイナリ リライターと Visual Studio アドインでは付属していません<ph id="ph1">[!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)]</ph>または Windows SDK。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Contracts.Contract">
          <source>In debug builds, performs a run-time test for a specified condition.</source>
          <target state="translated">デバッグ ビルドで、指定された条件のランタイム テストを実行します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
          <source>The conditional expression to test.</source>
          <target state="translated">テストする条件式。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
          <source>Checks for a condition; if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>, follows the escalation policy set for the analyzer.</source>
          <target state="translated">条件をチェックし、その条件が <ph id="ph1">&lt;see langword="false" /&gt;</ph> の場合は、アナライザーに設定されたエスカレーション ポリシーに従います。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
          <source>The default escalation policy is to notify the attached debugger about a contract failure or to display an <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> dialog box if a debugger is not attached.</source>
          <target state="translated">既定のエスカレーション ポリシーがコントラクト エラー、アタッチされたデバッガーに通知したり、表示するには、 <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept>ダイアログ ボックスで、デバッガーがアタッチされていない場合。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
          <source>Optionally, the analyzer can be instructed to throw an exception.</source>
          <target state="translated">必要に応じて、アナライザーは、例外をスローするよう指示できます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
          <source>The conditional expression to test.</source>
          <target state="translated">テストする条件式。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
          <source>A message to display if the condition is not met.</source>
          <target state="translated">条件が一致しない場合に表示するメッセージ。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
          <source>Checks for a condition; if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>, follows the escalation policy set by the analyzer and displays the specified message.</source>
          <target state="translated">条件をチェックし、その条件が <ph id="ph1">&lt;see langword="false" /&gt;</ph> の場合は、アナライザーによって設定されたエスカレーション ポリシーに従い、指定されたメッセージを表示します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
          <source>The default escalation policy is to notify the attached debugger about a contract failure or to display an <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> dialog box if a debugger is not attached.</source>
          <target state="translated">既定のエスカレーション ポリシーがコントラクト エラー、アタッチされたデバッガーに通知したり、表示するには、 <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept>ダイアログ ボックスで、デバッガーがアタッチされていない場合。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
          <source>Optionally, the analyzer can be instructed to throw an exception.</source>
          <target state="translated">必要に応じて、アナライザーは、例外をスローするよう指示できます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
          <source>The <ph id="ph1">`userMessage`</ph> parameter is passed to the debugger output.</source>
          <target state="translated"><ph id="ph1">`userMessage`</ph>パラメーターは、デバッガーの出力に渡されます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
          <source>If <ph id="ph1">`userMessage`</ph> is not a constant string literal, tools may not be able to read it.</source>
          <target state="translated">場合<ph id="ph1">`userMessage`</ph>定数文字列ではないリテラル、ツールできないことがありますを読むことです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Instructs code analysis tools to assume that a condition is <ph id="ph1">&lt;see langword="true" /&gt;</ph>, even if it cannot be statically proven to always be <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">常に <ph id="ph1">&lt;see langword="true" /&gt;</ph> であるとは静的に証明されない場合でも、条件が <ph id="ph2">&lt;see langword="true" /&gt;</ph> であると想定するようコード分析ツールに指示します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
          <source>The conditional expression to assume <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> に想定する条件式。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
          <source>Instructs code analysis tools to assume that the specified condition is <ph id="ph1">&lt;see langword="true" /&gt;</ph>, even if it cannot be statically proven to always be <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">常に <ph id="ph1">&lt;see langword="true" /&gt;</ph> であるとは静的に証明されない場合でも、指定された条件が <ph id="ph2">&lt;see langword="true" /&gt;</ph> であると想定するようコード分析ツールに指示します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
          <source>At run time, using this method is equivalent to using the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%29&gt;</ph> method.</source>
          <target state="translated">実行時に、このメソッドを使用すると、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
          <source>The conditional expression to assume <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> に想定する条件式。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
          <source>The message to post if the assumption fails.</source>
          <target state="translated">想定が失敗した場合にポストするメッセージ。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
          <source>Instructs code analysis tools to assume that a condition is <ph id="ph1">&lt;see langword="true" /&gt;</ph>, even if it cannot be statically proven to always be <ph id="ph2">&lt;see langword="true" /&gt;</ph>, and displays a message if the assumption fails.</source>
          <target state="translated">常に <ph id="ph1">&lt;see langword="true" /&gt;</ph> であるとは静的に証明されない場合でも、条件が <ph id="ph2">&lt;see langword="true" /&gt;</ph> であると想定するようコード分析ツールに指示し、想定が失敗した場合はメッセージを表示します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
          <source>If <ph id="ph1">`userMessage`</ph> is not a constant string literal, the contract may not be understood by tools.</source>
          <target state="translated">場合<ph id="ph1">`userMessage`</ph>リテラルではなく文字列定数、ツールによって、コントラクトを理解できない可能性があります。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
          <source>At run time, using this method is equivalent to using the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%2CSystem.String%29&gt;</ph> method.</source>
          <target state="translated">実行時に、このメソッドを使用すると、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%2CSystem.String%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>Occurs when a contract fails.</source>
          <target state="translated">コントラクトが失敗すると発生します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>The event information for this event is supplied by the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs?displayProperty=nameWithType&gt;</ph> object that is passed to the event handler.</source>
          <target state="translated">このイベントのイベント情報は、によって提供される、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs?displayProperty=nameWithType&gt;</ph>イベント ハンドラーに渡されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>This event notifies a managed application environment such as an interactive interpreter or a Web browser host that a contract has failed.</source>
          <target state="translated">このイベントは、対話型のインタープリターまたはコントラクトが失敗した Web ブラウザーのホストなどのマネージ アプリケーション環境を通知します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>Before doing so, it will raise an event that an application can handle as it sees fit.</source>
          <target state="translated">これを行うには、前に、アプリケーションが適切に処理できるイベントが発生します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>For example, if code is being run in a testing framework, you can log a test failure and then end the test.</source>
          <target state="translated">たとえば、テスト フレームワークでコードが実行されている場合は、テストの失敗をログし、テストを終了します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>The default implementation of the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Internal.ContractHelper.RaiseContractFailedEvent%2A&gt;</ph> method in the .NET Framework class library is to call each handler that is registered with the <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.Contract.ContractFailed&gt;</ph> event.</source>
          <target state="translated">既定の実装、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Internal.ContractHelper.RaiseContractFailedEvent%2A&gt;</ph>に登録されている各ハンドラーを呼び出すには、.NET Framework クラス ライブラリ内のメソッド、<ph id="ph2">&lt;xref:System.Diagnostics.Contracts.Contract.ContractFailed&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>Exceptions thrown by handlers are ignored, but each handler can indicate whether the failure is handled by calling the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled%2A&gt;</ph> method for the event arguments.</source>
          <target state="translated">ハンドラーによってスローされた例外は無視されますが、各ハンドラーは、呼び出すことにより、障害を処理するかどうかを示すことができます、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled%2A&gt;</ph>メソッド、イベント引数。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>If any handler sets the failure as handled, the method returns <ph id="ph1">`null`</ph> and no further action is taken.</source>
          <target state="translated">このメソッドを返しますのかどうか、いずれかのハンドラーは、処理済みとしてエラーを設定、<ph id="ph1">`null`</ph>し、これ以上の操作は実行されません。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>Alternatively, handlers can call the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind%2A&gt;</ph> method to instruct the code to unwind.</source>
          <target state="translated">代わりに、ハンドラーを呼び出すことができます、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind%2A&gt;</ph>にアンワインド コードを指示するためのメソッドです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>In that case, an exception is thrown after all handlers have executed.</source>
          <target state="translated">その場合は、すべてのイベント ハンドラーが実行された後に例外がスローされます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Diagnostics.Contracts.Contract.ContractFailed">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
          <source>Marks the end of the contract section when a method's contracts contain only preconditions in the <ph id="ph1">&lt;see langword="if" /&gt;</ph><ph id="ph2">-</ph><ph id="ph3">&lt;see langword="then" /&gt;</ph><ph id="ph4">-</ph><ph id="ph5">&lt;see langword="throw" /&gt;</ph> form.</source>
          <target state="translated">メソッドのコントラクトに <ph id="ph1">&lt;see langword="if" /&gt;</ph><ph id="ph2">-</ph><ph id="ph3">&lt;see langword="then" /&gt;</ph><ph id="ph4">-</ph><ph id="ph5">&lt;see langword="throw" /&gt;</ph> の形式で実行前の状態のみが含まれる場合に、コントラクト セクションの終わりをマークします。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
          <source>Most code already contains some parameter validation in the form of <ph id="ph1">`if`</ph><ph id="ph2">-</ph><ph id="ph3">`then`</ph><ph id="ph4">-</ph><ph id="ph5">`throw`</ph> code.</source>
          <target state="translated">ほとんどのコードが既にいくつかの形式でパラメーターの検証を含む<ph id="ph1">`if`</ph> <ph id="ph2">-</ph> <ph id="ph3">`then`</ph> <ph id="ph4">-</ph> <ph id="ph5">`throw`</ph>コード。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
          <source>The contract tools recognize <ph id="ph1">`if`</ph><ph id="ph2">-</ph><ph id="ph3">`then`</ph><ph id="ph4">-</ph><ph id="ph5">`throw`</ph> statements as preconditions when the statements appear first inside a method, and the entire set of such statements is followed by an explicit <ph id="ph6">&lt;xref:System.Diagnostics.Contracts.Contract&gt;</ph> method call, such as a <ph id="ph7">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Diagnostics.Contracts.Contract.EnsuresOnThrow%2A&gt;</ph>, or <ph id="ph10">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A&gt;</ph>.</source>
          <target state="translated">コントラクトのツールを認識<ph id="ph1">`if`</ph> <ph id="ph2">-</ph> <ph id="ph3">`then`</ph> <ph id="ph4">-</ph> <ph id="ph5">`throw`</ph>ステートメント、ステートメントが、メソッド内で先頭に表示され、このようなステートメントのセット全体が後に、明示的なときに前提条件として<ph id="ph6">&lt;xref:System.Diagnostics.Contracts.Contract&gt;</ph>メソッドの呼び出しなど、 <ph id="ph7">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A&gt;</ph>、 <ph id="ph8">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph>、 <ph id="ph9">&lt;xref:System.Diagnostics.Contracts.Contract.EnsuresOnThrow%2A&gt;</ph>、または<ph id="ph10">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
          <source>When <ph id="ph1">`if`</ph><ph id="ph2">-</ph><ph id="ph3">`then`</ph><ph id="ph4">-</ph><ph id="ph5">`throw`</ph> statements appear in this form, the contract tools recognize them as legacy-require statements.</source>
          <target state="translated">ときに<ph id="ph1">`if`</ph> <ph id="ph2">-</ph> <ph id="ph3">`then`</ph> <ph id="ph4">-</ph> <ph id="ph5">`throw`</ph>コントラクト ツールでは、それらを認識レガシとしてこのフォームで、ステートメントが表示されます-ステートメントを必要とします。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A&gt;</ph> form is used only if no other contracts follow the <ph id="ph2">`if`</ph><ph id="ph3">-</ph><ph id="ph4">`then`</ph><ph id="ph5">-</ph><ph id="ph6">`throw`</ph> sequences, but they should still be tagged as legacy-requires.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A&gt;</ph>フォームを使用して他のコントラクトが後にない場合にのみ、 <ph id="ph2">`if`</ph> <ph id="ph3">-</ph> <ph id="ph4">`then`</ph> <ph id="ph5">-</ph> <ph id="ph6">`throw`</ph>シーケンスが、まだタグ付けするかレガシとしての必要があります。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Specifies a postcondition contract for the enclosing method or property.</source>
          <target state="translated">外側のメソッドまたはプロパティの実行後の状態のコントラクトを指定します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>The conditional expression to test.</source>
          <target state="translated">テストする条件式。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>The expression may include <ph id="ph1">&lt;see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /&gt;</ph>, and <ph id="ph3">&lt;see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /&gt;</ph> values.</source>
          <target state="translated">式には <ph id="ph1">&lt;see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /&gt;</ph>、<ph id="ph2">&lt;see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /&gt;</ph>、および <ph id="ph3">&lt;see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /&gt;</ph> の各値を使用できます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>Specifies a postcondition contract for the enclosing method or property.</source>
          <target state="translated">外側のメソッドまたはプロパティの実行後の状態のコントラクトを指定します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>The <ph id="ph1">`condition`</ph> parameter specifies a postcondition that is expected to be <ph id="ph2">`true`</ph> when the enclosing method or property returns normally.</source>
          <target state="translated"><ph id="ph1">`condition`</ph>パラメーターを指定すると想定されます事後<ph id="ph2">`true`</ph>外側のメソッドまたはプロパティには、返されるときに通常します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">このメソッドの呼び出しは、メソッドまたはその他のコードの前に、プロパティの先頭にする必要があります。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>You must use the binary rewriter (available at <bpt id="p1">[</bpt>Code Contracts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site) for run-time enforcement of this postcondition.</source>
          <target state="translated">バイナリ リライターを使用する必要があります (で利用可能な<bpt id="p1">[</bpt>コード コントラクト<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept>MSDN DevLabs Web サイトで) この事後条件の適用が実行時にします。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph> method to ensure that an expected value is returned.</source>
          <target state="translated">次の例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph>想定した値が返されるようにするメソッド。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractClassAttribute&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractClassAttribute&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>The conditional expression to test.</source>
          <target state="translated">テストする条件式。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>The expression may include <ph id="ph1">&lt;see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /&gt;</ph> values.</source>
          <target state="translated">式には <ph id="ph1">&lt;see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /&gt;</ph> および <ph id="ph2">&lt;see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /&gt;</ph> の各値を使用できます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>The message to display if the expression is not <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">式が <ph id="ph1">&lt;see langword="true" /&gt;</ph> でない場合に表示するメッセージ。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>Specifies a postcondition contract for a provided exit condition and a message to display if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">指定された終了条件の実行後の状態のコントラクトと、条件が <ph id="ph1">&lt;see langword="false" /&gt;</ph> の場合に表示するメッセージを指定します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>The <ph id="ph1">`condition`</ph> parameter specifies a postcondition that is expected to be <ph id="ph2">`true`</ph> when the enclosing method or property returns normally.</source>
          <target state="translated"><ph id="ph1">`condition`</ph>パラメーターを指定すると想定されます事後<ph id="ph2">`true`</ph>外側のメソッドまたはプロパティには、返されるときに通常します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">このメソッドの呼び出しは、メソッドまたはその他のコードの前に、プロパティの先頭にする必要があります。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</source>
          <target state="translated">このコントラクトはクライアントに公開されます。そのため、外側のメソッドとして少なくともとして表示されている参照メンバーのみが必要があります。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>You must use the binary rewriter (available at <bpt id="p1">[</bpt>Code Contracts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site) for run-time enforcement of this postcondition.</source>
          <target state="translated">バイナリ リライターを使用する必要があります (で利用可能な<bpt id="p1">[</bpt>コード コントラクト<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept>MSDN DevLabs Web サイトで) この事後条件の適用が実行時にします。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
          <source>If <ph id="ph1">`userMessage`</ph> is not a constant string literal, the contract may not be understood by tools.</source>
          <target state="translated">場合<ph id="ph1">`userMessage`</ph>リテラルではなく文字列定数、ツールによって、コントラクトを理解できない可能性があります。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Specifies a postcondition contract for the enclosing method or property based on the provided exception and condition.</source>
          <target state="translated">指定された例外および条件に基づいて、外側のメソッドまたはプロパティに実行後の状態のコントラクトを指定します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
          <source>The type of exception that invokes the postcondition check.</source>
          <target state="translated">実行後の状態のチェックを起動する例外の種類。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
          <source>The conditional expression to test.</source>
          <target state="translated">テストする条件式。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
          <source>Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.</source>
          <target state="translated">指定された例外および条件に基づいて、外側のメソッドまたはプロパティに実行後の状態のコントラクトを指定します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
          <source>The <ph id="ph1">`condition`</ph> parameter specifies a postcondition that is expected to be <ph id="ph2">`true`</ph> when the enclosing method or property terminates abnormally and an exception of type <ph id="ph3">`TException`</ph> is thrown.</source>
          <target state="translated"><ph id="ph1">`condition`</ph>パラメーターを指定すると想定されます事後<ph id="ph2">`true`</ph>と外側のメソッドまたはプロパティが異常終了したと型の例外<ph id="ph3">`TException`</ph>がスローされます。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">このメソッドの呼び出しは、メソッドまたはその他のコードの前に、プロパティの先頭にする必要があります。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
          <source>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</source>
          <target state="translated">このコントラクトはクライアントに公開されます。そのため、外側のメソッドとして少なくともとして表示されている参照メンバーのみが必要があります。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
          <source>You must use the binary rewriter for run-time enforcement of this postcondition.</source>
          <target state="translated">この事後条件の実行時の強制のバイナリ リライターを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>The type of exception that invokes the postcondition check.</source>
          <target state="translated">実行後の状態のチェックを起動する例外の種類。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>The conditional expression to test.</source>
          <target state="translated">テストする条件式。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>The message to display if the expression is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">式が <ph id="ph1">&lt;see langword="false" /&gt;</ph> の場合に表示するメッセージ。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>Specifies a postcondition contract and a message to display if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph> for the enclosing method or property, based on the provided exception and condition.</source>
          <target state="translated">指定された例外および条件に基づいて、実行後の状態のコントラクトと、外側のメソッドまたはプロパティの条件が <ph id="ph1">&lt;see langword="false" /&gt;</ph> の場合に表示するメッセージを指定します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>The <ph id="ph1">`condition`</ph> parameter specifies a postcondition that is expected to be <ph id="ph2">`true`</ph> when the enclosing method or property terminates abnormally and an exception of type <ph id="ph3">`TException`</ph> is thrown.</source>
          <target state="translated"><ph id="ph1">`condition`</ph>パラメーターを指定すると想定されます事後<ph id="ph2">`true`</ph>と外側のメソッドまたはプロパティが異常終了したと型の例外<ph id="ph3">`TException`</ph>がスローされます。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>The <ph id="ph1">`message`</ph> parameter specifies a message to display if the condition is <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`message`</ph>パラメーターを指定、条件がある場合に表示するメッセージ<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">このメソッドの呼び出しは、メソッドまたはその他のコードの前に、プロパティの先頭にする必要があります。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</source>
          <target state="translated">このコントラクトはクライアントに公開されます。そのため、外側のメソッドとして少なくともとして表示されている参照メンバーのみが必要があります。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>You must use the binary rewriter for run-time enforcement of this postcondition.</source>
          <target state="translated">この事後条件の実行時の強制のバイナリ リライターを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
          <source>If <ph id="ph1">`userMessage`</ph> is not a constant string literal, the contract may not be understood by tools.</source>
          <target state="translated">場合<ph id="ph1">`userMessage`</ph>リテラルではなく文字列定数、ツールによって、コントラクトを理解できない可能性があります。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>The first integer to pass to <bpt id="p1">&lt;c&gt;</bpt>predicate<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>predicate<ept id="p1">&lt;/c&gt;</ept> に渡す最初の整数。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>One more than the last integer to pass to <bpt id="p1">&lt;c&gt;</bpt>predicate<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>predicate<ept id="p1">&lt;/c&gt;</ept> に渡す最後の整数より 1 だけ大きい数。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>The function to evaluate for any value of the integer in the specified range.</source>
          <target state="translated">指定した範囲内の任意の整数値を評価する関数。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>Determines whether a specified test is true for any integer within a range of integers.</source>
          <target state="translated">ある整数範囲内のすべての整数について指定したテストが true かどうかを判定します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph> for any integer starting from <ph id="ph4">&lt;paramref name="fromInclusive" /&gt;</ph> to <ph id="ph5">&lt;paramref name="toExclusive" /&gt;</ph> - 1.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> から <ph id="ph4">&lt;paramref name="fromInclusive" /&gt;</ph> - 1 の範囲の任意の整数に対して、<ph id="ph5">&lt;paramref name="toExclusive" /&gt;</ph> が <ph id="ph1">&lt;see langword="true" /&gt;</ph> を返す場合は <ph id="ph3">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>The <ph id="ph1">`toExclusive`</ph> parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0.</source>
          <target state="translated"><ph id="ph1">`toExclusive`</ph>パラメーターは 1 つの 0 から始まる整数の範囲の長さを使用して容易にするために最後の整数を超える。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>For example, it would be set to 5 for integers 0 through 4.</source>
          <target state="translated">たとえば、整数 0 ~ 4 を 5 に設定するは。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="toExclusive" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="fromInclusive" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toExclusive" /&gt;</ph> は <ph id="ph2">&lt;paramref name="fromInclusive" /&gt;</ph> より小さい値です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>The type that is contained in <bpt id="p1">&lt;c&gt;</bpt>collection<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">含まれている型<bpt id="p1">&lt;c&gt;</bpt>コレクション<ept id="p1">&lt;/c&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>The collection from which elements of type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> will be drawn to pass to <bpt id="p2">&lt;c&gt;</bpt>predicate<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p2">&lt;c&gt;</bpt>predicate<ept id="p2">&lt;/c&gt;</ept> に渡される型 <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> の要素が含まれているコレクション。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>The function to evaluate for an element in <bpt id="p1">&lt;c&gt;</bpt>collection<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>collection<ept id="p1">&lt;/c&gt;</ept> 内の要素を評価する関数。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>Determines whether an element within a collection of elements exists within a function.</source>
          <target state="translated">ある要素のコレクション内の要素が関数内に存在するかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if and only if <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph> for any element of type <ph id="ph4">&lt;paramref name="T" /&gt;</ph> in <ph id="ph5">&lt;paramref name="collection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 内の型 <ph id="ph4">&lt;paramref name="T" /&gt;</ph> の任意の要素に対して、<ph id="ph5">&lt;paramref name="collection" /&gt;</ph> が <ph id="ph1">&lt;see langword="true" /&gt;</ph> を返す場合にのみ <ph id="ph3">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> または <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>The first integer to pass to <bpt id="p1">&lt;c&gt;</bpt>predicate<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>predicate<ept id="p1">&lt;/c&gt;</ept> に渡す最初の整数。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>One more than the last integer to pass to <bpt id="p1">&lt;c&gt;</bpt>predicate<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>predicate<ept id="p1">&lt;/c&gt;</ept> に渡す最後の整数より 1 だけ大きい数。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>The function to evaluate for the existence of the integers in the specified range.</source>
          <target state="translated">指定された範囲の整数の存在を評価する関数。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>Determines whether a particular condition is valid for all integers in a specified range.</source>
          <target state="translated">指定した範囲内のすべての整数について特定の状態が有効かどうかを判定します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph> for all integers starting from <ph id="ph4">&lt;paramref name="fromInclusive" /&gt;</ph> to <ph id="ph5">&lt;paramref name="toExclusive" /&gt;</ph> - 1.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> から <ph id="ph4">&lt;paramref name="fromInclusive" /&gt;</ph> - 1 の範囲のすべての整数に対して、<ph id="ph5">&lt;paramref name="toExclusive" /&gt;</ph> が <ph id="ph1">&lt;see langword="true" /&gt;</ph> を返す場合は <ph id="ph3">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>The <ph id="ph1">`toExclusive`</ph> parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0.</source>
          <target state="translated"><ph id="ph1">`toExclusive`</ph>パラメーターは 1 つの 0 から始まる整数の範囲の長さを使用して容易にするために最後の整数を超える。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>For example, it would be set to 5 for integers 0 through 4.</source>
          <target state="translated">たとえば、整数 0 ~ 4 を 5 に設定するは。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.ForAll%2A&gt;</ph> method to determine whether an array has a null element.</source>
          <target state="translated">次の例で使用する方法、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.ForAll%2A&gt;</ph>配列が null の要素を持つかどうかを調べます。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="predicate" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="toExclusive" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="fromInclusive" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toExclusive" /&gt;</ph> は <ph id="ph2">&lt;paramref name="fromInclusive" /&gt;</ph> より小さい値です。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>The type that is contained in <bpt id="p1">&lt;c&gt;</bpt>collection<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">含まれている型<bpt id="p1">&lt;c&gt;</bpt>コレクション<ept id="p1">&lt;/c&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>The collection from which elements of type <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> will be drawn to pass to <bpt id="p2">&lt;c&gt;</bpt>predicate<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p2">&lt;c&gt;</bpt>predicate<ept id="p2">&lt;/c&gt;</ept> に渡される型 <bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> の要素が含まれているコレクション。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>The function to evaluate for the existence of all the elements in <bpt id="p1">&lt;c&gt;</bpt>collection<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>collection<ept id="p1">&lt;/c&gt;</ept> 内のすべての要素の存在を評価する関数。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>Determines whether all the elements in a collection exist within a function.</source>
          <target state="translated">コレクション内のすべての要素が関数内に存在するかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if and only if <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph> for all elements of type <ph id="ph4">&lt;paramref name="T" /&gt;</ph> in <ph id="ph5">&lt;paramref name="collection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> 内の型 <ph id="ph4">&lt;paramref name="T" /&gt;</ph> のすべての要素に対して、<ph id="ph5">&lt;paramref name="collection" /&gt;</ph> が <ph id="ph1">&lt;see langword="true" /&gt;</ph> を返す場合にのみ <ph id="ph3">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.ForAll%2A&gt;</ph> method to determine whether a collection has a null element.</source>
          <target state="translated">次の例で使用する方法、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.ForAll%2A&gt;</ph>コレクションに null 要素があるかどうかを調べます。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> または <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Specifies a contract for an enclosing method or property.</source>
          <target state="translated">外側のメソッドまたはプロパティのコントラクトを指定します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>The conditional expression to test.</source>
          <target state="translated">テストする条件式。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>Specifies an invariant contract for the enclosing method or property.</source>
          <target state="translated">外側のメソッドまたはプロパティの不変コントラクトを指定します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Invariant%2A&gt;</ph> contracts are contained within a method that is identified by the <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&gt;</ph> attribute; typically, the method is named <ph id="ph3">`ObjectInvariant`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Invariant%2A&gt;</ph> によって識別されるメソッド内でコントラクトが含まれている、<ph id="ph2">&lt;xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&gt;</ph>属性以外の場合は、メソッドの名前は通常、<ph id="ph3">`ObjectInvariant`</ph>です。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>This contract can be specified only in a dedicated invariant method that is declared on a class.</source>
          <target state="translated">このコントラクトは、クラスで宣言されている専用のインバリアント メソッドでのみ指定できます。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>If the method is not sealed, it should refer only to protected members, not private members, so that subclasses can be sure to maintain the invariants.</source>
          <target state="translated">メソッドは封印されていない場合は、サブクラスは、インバリアントを維持することを確認できるようにプライベート メンバーではなく、プロテクト メンバーにのみ参照する必要があります。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.</source>
          <target state="translated">このコントラクトがクライアントに公開されていません。そのため、外側のメソッドよりも小さく表示されるメンバーを参照して可能性があります。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>You must use the binary rewriter for run-time enforcement of this invariant.</source>
          <target state="translated">このインバリアントの実行時の強制のバイナリ リライターを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>Invariants are conditionally defined based on the presence of the <ph id="ph1">`CONTRACTS FULL`</ph> symbol.</source>
          <target state="translated">不変部分は条件付きで定義されているの存在に基づいて、<ph id="ph1">`CONTRACTS FULL`</ph>シンボル。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>During run-time checking, invariants are checked at the end of each public method.</source>
          <target state="translated">ランタイム チェックで各パブリック メソッドの最後にチェックされます。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class.</source>
          <target state="translated">不変式は、同じクラスのパブリック メソッドを示して、通常ならそのパブリック メソッドの最後に行われる不変式のチェックが無効になり、そのクラスの最も外側のメソッド呼び出しの最後にのみチェックします。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
          <source>This also happens if the class is re-entered because of a call to a method on another class.</source>
          <target state="translated">別のクラスのメソッドの呼び出しのためにクラスへの再入がなされる場合も同様です。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>The conditional expression to test.</source>
          <target state="translated">テストする条件式。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>The message to display if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">条件が <ph id="ph1">&lt;see langword="false" /&gt;</ph> の場合に表示するメッセージ。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.</source>
          <target state="translated">外側のメソッドまたはプロパティの不変コントラクトを指定し、コントラクトの条件が失敗した場合はメッセージを表示します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Invariant%2A&gt;</ph> contracts are contained within a method that is identified by the <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&gt;</ph> attribute; typically, the method is named <ph id="ph3">`ObjectInvariant`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Invariant%2A&gt;</ph> によって識別されるメソッド内でコントラクトが含まれている、<ph id="ph2">&lt;xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&gt;</ph>属性以外の場合は、メソッドの名前は通常、<ph id="ph3">`ObjectInvariant`</ph>です。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>This contract can be specified only in a dedicated invariant method that is declared on a class.</source>
          <target state="translated">このコントラクトは、クラスで宣言されている専用のインバリアント メソッドでのみ指定できます。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.</source>
          <target state="translated">このコントラクトがクライアントに公開されていません。そのため、外側のメソッドよりも小さく表示されるメンバーを参照して可能性があります。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>You must use the binary rewriter for run-time enforcement of this invariant.</source>
          <target state="translated">このインバリアントの実行時の強制のバイナリ リライターを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>Invariants are conditionally defined on the <ph id="ph1">`CONTRACTS FULL`</ph> symbol.</source>
          <target state="translated">不変部分がで定義された条件付きで、<ph id="ph1">`CONTRACTS FULL`</ph>シンボル。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>During run-time checking, invariants are checked at the end of each public method.</source>
          <target state="translated">ランタイム チェックで各パブリック メソッドの最後にチェックされます。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class.</source>
          <target state="translated">不変式は、同じクラスのパブリック メソッドを示して、通常ならそのパブリック メソッドの最後に行われる不変式のチェックが無効になり、そのクラスの最も外側のメソッド呼び出しの最後にのみチェックします。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
          <source>This also happens if the class is re-entered because of a call to a method on another class.</source>
          <target state="translated">別のクラスのメソッドの呼び出しのためにクラスへの再入がなされる場合も同様です。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
          <source>The type of value.</source>
          <target state="translated">値の型。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
          <source>The value to represent (field or parameter).</source>
          <target state="translated">表す値 (フィールドまたはパラメーター)。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
          <source>Represents values as they were at the start of a method or property.</source>
          <target state="translated">メソッドまたはプロパティの開始時の値を表します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
          <source>The value of the parameter or field at the start of a method or property.</source>
          <target state="translated">メソッドまたはプロパティの開始時のフィールドまたはパラメーターの値。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
          <source>This method can be used only in the conditional expression for the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph> contract.</source>
          <target state="translated">このメソッドを条件付きの式でのみ使用できます、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph>コントラクト。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
          <source>The following example shows the use of the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.OldValue%2A&gt;</ph> method to ensure that a count has been updated.</source>
          <target state="translated">次の例では、使用、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.OldValue%2A&gt;</ph>カウントが更新されたことを確認します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractClassAttribute&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractClassAttribute&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.Contracts.Contract">
          <source>Specifies a precondition contract for an enclosing method or property.</source>
          <target state="translated">外側のメソッドまたはプロパティの実行前の状態のコントラクトを指定します。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
          <source>The conditional expression to test.</source>
          <target state="translated">テストする条件式。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
          <source>Specifies a precondition contract for the enclosing method or property.</source>
          <target state="translated">外側のメソッドまたはプロパティの実行前の状態のコントラクトを指定します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">このメソッドの呼び出しは、メソッドまたはその他のコードの前に、プロパティの先頭にする必要があります。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
          <source>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</source>
          <target state="translated">このコントラクトはクライアントに公開されます。そのため、外側のメソッドとして少なくともとして表示されている参照メンバーのみが必要があります。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
          <source>Use this method instead of the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%29?displayProperty=nameWithType&gt;</ph> method when backward compatibility does not force you to throw a particular exception.</source>
          <target state="translated">代わりにこのメソッドを使用して、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%29?displayProperty=nameWithType&gt;</ph>メソッドは旧バージョンとの互換性を強制しません、特定の例外をスローするとします。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
          <source>The conditional expression to test.</source>
          <target state="translated">テストする条件式。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
          <source>The message to display if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">条件が <ph id="ph1">&lt;see langword="false" /&gt;</ph> の場合に表示するメッセージ。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
          <source>Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.</source>
          <target state="translated">外側のメソッドまたはプロパティの実行前の状態のコントラクトを指定し、コントラクトの条件が失敗した場合はメッセージを表示します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">このメソッドの呼び出しは、メソッドまたはその他のコードの前に、プロパティの先頭にする必要があります。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
          <source>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</source>
          <target state="translated">このコントラクトはクライアントに公開されます。そのため、外側のメソッドとして少なくともとして表示されている参照メンバーのみが必要があります。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
          <source>Use this method instead of the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method when backward compatibility does not force you to throw a particular exception.</source>
          <target state="translated">代わりにこのメソッドを使用して、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%2CSystem.String%29?displayProperty=nameWithType&gt;</ph>メソッドは旧バージョンとの互換性を強制しません、特定の例外をスローするとします。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>The exception to throw if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">条件が <ph id="ph1">&lt;see langword="false" /&gt;</ph> の場合にスローする例外。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>The conditional expression to test.</source>
          <target state="translated">テストする条件式。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.</source>
          <target state="translated">外側のメソッドまたはプロパティの実行前の状態のコントラクトを指定し、コントラクトの条件が失敗した場合は例外をスローします。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>You must turn on run-time checking to use the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A&gt;</ph> method.</source>
          <target state="translated">実行時に使用するチェックを有効にして、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>If run-time checking is turned off, the process will be terminated.</source>
          <target state="translated">ランタイム チェックがオフの場合は、プロセスは終了されます。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>To obtain the tools for runtime checking, see <bpt id="p1">[</bpt>Code Contracts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site.</source>
          <target state="translated">ランタイム チェックするためのツールを入手する<bpt id="p1">[</bpt>コード コントラクト<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept>MSDN DevLabs Web サイトです。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">このメソッドの呼び出しは、メソッドまたはその他のコードの前に、プロパティの先頭にする必要があります。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</source>
          <target state="translated">このコントラクトはクライアントに公開されます。そのため、外側のメソッドとして少なくともとして表示されている参照メンバーのみが必要があります。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
          <source>Use this method instead of the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%29?displayProperty=nameWithType&gt;</ph> method when you want to throw an exception if the precondition fails.</source>
          <target state="translated">代わりにこのメソッドを使用して、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%29?displayProperty=nameWithType&gt;</ph>メソッドは、前提条件が失敗した場合に例外をスローするとします。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>The exception to throw if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">条件が <ph id="ph1">&lt;see langword="false" /&gt;</ph> の場合にスローする例外。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>The conditional expression to test.</source>
          <target state="translated">テストする条件式。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>The message to display if the condition is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">条件が <ph id="ph1">&lt;see langword="false" /&gt;</ph> の場合に表示するメッセージ。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.</source>
          <target state="translated">外側のメソッドまたはプロパティの実行前の状態のコントラクトを指定し、コントラクトの条件が失敗した場合は指定されたメッセージで例外をスローします。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>You must turn on run-time checking to use the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A&gt;</ph> method.</source>
          <target state="translated">実行時に使用するチェックを有効にして、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>If run-time checking is turned off, the process will be terminated.</source>
          <target state="translated">ランタイム チェックがオフの場合は、プロセスは終了されます。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>To obtain the tools for runtime checking, see <bpt id="p1">[</bpt>Code Contracts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site.</source>
          <target state="translated">ランタイム チェックするためのツールを入手する<bpt id="p1">[</bpt>コード コントラクト<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept>MSDN DevLabs Web サイトです。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>This method call must be at the beginning of a method or property, before any other code.</source>
          <target state="translated">このメソッドの呼び出しは、メソッドまたはその他のコードの前に、プロパティの先頭にする必要があります。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</source>
          <target state="translated">このコントラクトはクライアントに公開されます。そのため、外側のメソッドとして少なくともとして表示されている参照メンバーのみが必要があります。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
          <source>Use this method instead of the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method when you want to throw an exception if the precondition fails.</source>
          <target state="translated">代わりにこのメソッドを使用して、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%2CSystem.String%29?displayProperty=nameWithType&gt;</ph>メソッドは、前提条件が失敗した場合に例外をスローするとします。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Result``1">
          <source>Type of return value of the enclosing method or property.</source>
          <target state="translated">外側のメソッドまたはプロパティの戻り値の型。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Result``1">
          <source>Represents the return value of a method or property.</source>
          <target state="translated">メソッドまたはプロパティの戻り値を表します。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.Result``1">
          <source>Return value of the enclosing method or property.</source>
          <target state="translated">外側のメソッドまたはプロパティの戻り値。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Result``1">
          <source>This method can be used only in the conditional expression for the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph> contract.</source>
          <target state="translated">このメソッドを条件付きの式でのみ使用できます、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph>コントラクト。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Result``1">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Result%2A&gt;</ph> method to specify an expected return value.</source>
          <target state="translated">次の例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Result%2A&gt;</ph>想定される戻り値を指定します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.Result``1">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractClassAttribute&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.ContractClassAttribute&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>The type of the <ph id="ph1">&lt;see langword="out" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="out" /&gt;</ph> パラメーターの型。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>The <ph id="ph1">&lt;see langword="out" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="out" /&gt;</ph> パラメーター。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>Represents the final (output) value of an <ph id="ph1">&lt;see langword="out" /&gt;</ph> parameter when returning from a method.</source>
          <target state="translated">メソッドから戻るときの <ph id="ph1">&lt;see langword="out" /&gt;</ph> パラメーターの最後の (出力) 値を表します。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>The output value of the <ph id="ph1">&lt;see langword="out" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="out" /&gt;</ph> パラメーターの出力値。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>This method can be used only in the conditional expression for the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph> contract.</source>
          <target state="translated">このメソッドを条件付きの式でのみ使用できます、<ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph>コントラクト。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>As with the <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.OldValue%2A&gt;</ph> method, you can omit the generic type parameter whenever the compiler is able to infer its type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.OldValue%2A&gt;</ph> メソッドと同様に、コンパイラが型を推論できる場合はジェネリック型パラメーターを省略できます。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>The contract rewriter replaces the method call with the value of the <ph id="ph1">`out`</ph> parameter.</source>
          <target state="translated">このメソッドの呼び出しは、コントラクト リライターによって <ph id="ph1">`out`</ph> パラメーターの値に置き換えられます。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.ValueAtReturn%2A&gt;</ph> method may appear only in postconditions.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.Contracts.Contract.ValueAtReturn%2A&gt;</ph> メソッドは事後条件でしか使用できません。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>The argument to the method must be an <ph id="ph1">`out`</ph> parameter or a field of a structure <ph id="ph2">`out`</ph> parameter.</source>
          <target state="translated">このメソッドの引数は、<ph id="ph1">`out`</ph> パラメーターか、構造体の <ph id="ph2">`out`</ph> パラメーターのフィールド</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
          <source>The latter is also useful when referring to fields in the postcondition of a structure constructor.</source>
          <target state="translated">(構造体コンストラクターの事後条件でフィールドを参照する場合にも便利です) でなければなりません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>