<Type Name="Timer" FullName="System.Timers.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9cc59ace9aec449d4419a4b242c58dbbaf76179a" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70631864" /></Metadata><TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1">
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0;netstandard-2.1">
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>一定の間隔の経過後にイベントを生成します。オプションとして、反復イベントを生成することもできます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンポーネントは、 <xref:System.Timers.Timer.Interval%2A>プロパティのミリ秒数が経過し<xref:System.Timers.Timer.Elapsed>た後にアプリケーションでイベントを発生させる、サーバーベースのタイマーです。 <xref:System.Timers.Timer> <xref:System.Timers.Timer>オブジェクトを構成し<xref:System.Timers.Timer.AutoReset%2A>て、イベントを1回だけ、またはプロパティを使用して繰り返し発生させることができます。 通常、 <xref:System.Timers.Timer>オブジェクトはクラスレベルで宣言されるので、必要な限りスコープ内にとどまります。 その後、イベントを<xref:System.Timers.Timer.Elapsed>処理して通常の処理を行うことができます。 たとえば、1日24時間、週7日、稼働状態を維持する必要がある重要なサーバーがあるとします。 オブジェクトを<xref:System.Timers.Timer>使用するサービスを作成して、サーバーを定期的にチェックし、システムが稼働していることを確認することができます。 システムが応答していない場合、サービスはサーバーの再起動または管理者への通知を試みることができます。  
  
> [!IMPORTANT]
> <xref:System.Timers.Timer>クラスは、.NET Standard 1.6 およびそれより下位のバージョンなど、.net のすべての実装とバージョンで使用できるわけではありません。
> このような場合は、代わりに<xref:System.Threading.Timer?displayProperty=nameWithType>クラスを使用できます。
  
 この型は <xref:System.IDisposable> インターフェイスを実装します。 型の使用が完了したら、直接的または間接的に型を破棄する必要があります。 直接的に型を破棄するには、`try` / `catch` ブロック内で <xref:System.IDisposable.Dispose%2A> メソッドを呼び出します。 間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。 詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。  
  
 サーバーベース<xref:System.Timers.Timer?displayProperty=nameWithType>のクラスは、マルチスレッド環境のワーカースレッドで使用するように設計されています。 サーバータイマーは、発生<xref:System.Timers.Timer.Elapsed>したイベントを処理するためにスレッド間を移動できます。その結果、イベントを発生させるときの Windows タイマーよりも精度が向上します。  
  
 コンポーネント<xref:System.Timers.Timer?displayProperty=nameWithType>は、 <xref:System.Timers.Timer.Interval%2A>プロパティ<xref:System.Timers.Timer.Elapsed>の値 (ミリ秒単位) に基づいてイベントを発生させます。 このイベントを処理して、必要な処理を実行できます。 たとえば、販売注文をデータベースに継続的にポストするオンライン販売アプリケーションがあるとします。 出荷の指示をコンパイルするサービスは、各注文を個別に処理するのではなく、注文のバッチで動作します。 を使用すると<xref:System.Timers.Timer> 、バッチ処理を30分ごとに開始できます。  
  
> [!IMPORTANT]
>  System.string クラスには、システムクロックと同じ解決策があります。 これは、 <xref:System.Timers.Timer.Interval%2A>プロパティ<xref:System.Timers.Timer.Elapsed>がシステムクロックの解像度よりも小さい場合に、システムクロックの解決によって定義された間隔でイベントを発生させることを意味します。 詳細については、<xref:System.Timers.Timer.Interval%2A> プロパティを参照してください。  
  
 が<xref:System.Timers.Timer.AutoReset%2A>に<xref:System.Timers.Timer?displayProperty=nameWithType> <xref:System.Timers.Timer.Elapsed> <xref:System.Timers.Timer.Interval%2A>設定されている場合、オブジェクトは、最初の経過後に1回だけイベントを発生させます。 `false` に<xref:System.Timers.Timer.Elapsed> <xref:System.Timers.Timer.AutoReset%2A>よって定義された間隔で定期的にイベントを発生さ`true`せるには、をに設定します。これは既定値です。 <xref:System.Timers.Timer.Interval%2A>  
  
 コンポーネント<xref:System.Timers.Timer>は、イベント<xref:System.Timers.Timer.Elapsed>のイベントハンドラーによってスローされたすべての例外をキャッチし、抑制します。 この動作は、.NET Framework の今後のリリースで変更される可能性があります。 ただし、これは非同期に実行され、 `await`演算子 (のC#場合) または`Await`演算子 (Visual Basic) を含むイベントハンドラーには当てはまりません。 これらのイベントハンドラーでスローされる例外は、次の例に示すように、呼び出し元のスレッドに反映されます。 非同期メソッドでスローされる例外の詳細については、「[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 プロパティが`null`の場合、 <xref:System.Timers.Timer.Elapsed>イベントは<xref:System.Threading.ThreadPool>スレッドで発生します。 <xref:System.Timers.Timer.SynchronizingObject%2A> <xref:System.Timers.Timer.Elapsed>イベントの処理時間がよりも<xref:System.Timers.Timer.Interval%2A>長くなると、別<xref:System.Threading.ThreadPool>のスレッドでイベントが再度発生する可能性があります。 この場合、イベントハンドラーは再入可能である必要があります。  
  
> [!NOTE]
>  イベント処理メソッドは、別のスレッドが<xref:System.Timers.Timer.Stop%2A>メソッドを呼び出したとき、または<xref:System.Timers.Timer.Enabled%2A>プロパティをに設定する`false`ときに、1つのスレッドで実行されることがあります。 これにより、タイマー <xref:System.Timers.Timer.Elapsed>が停止した後にイベントが発生する可能性があります。 コードの使用例、<xref:System.Timers.Timer.Stop%2A>メソッドは、この競合状態を回避するために 1 つのメソッドを示しています。  
  
 がで<xref:System.Timers.Timer.SynchronizingObject%2A> <xref:System.Timers.Timer.Dispose%2A> <xref:System.Timers.Timer.Stop%2A> <xref:System.Timers.Timer.Enabled%2A> `false`ない `null` 場合でも、メソッドまたはメソッドが呼び出された後、またはプロパティがに設定された後に、イベントが発生する可能性があります。これは、 <xref:System.Timers.Timer.Elapsed>  <xref:System.Timers.Timer.Elapsed>イベントは、スレッドプールのスレッドで実行するために常にキューに登録されます。 この競合状態がのイベント ハンドラーを示すフラグを設定するには解決するのには 1 つのメソッド、<xref:System.Timers.Timer.Elapsed>後続のイベントを無視するイベントです。  
  
 ユーザーインターフェイス要素に<xref:System.Timers.Timer?displayProperty=nameWithType>タイマーを配置せずに、フォームやコントロールなどのユーザーインターフェイス要素を持つクラスを使用する場合は、イベントがになるように、 <xref:System.Timers.Timer>を含むフォーム<xref:System.Timers.Timer.SynchronizingObject%2A>またはコントロールをプロパティに割り当てます。ユーザーインターフェイススレッドにマーシャリングされます。  
  
 の<xref:System.Timers.Timer>インスタンスの既定のプロパティ値の一覧につい<xref:System.Timers.Timer.%23ctor%2A>ては、コンストラクターを参照してください。  
  
> [!TIP]
>  .Net にはという`Timer`4 つのクラスが含まれており、それぞれが異なる機能を提供していることに注意してください。  
>   
> - <xref:System.Timers.Timer?displayProperty=nameWithType>(このトピック): 一定の間隔でイベントを発生します。 クラスは、マルチスレッド環境でサーバーベースまたはサービスコンポーネントとして使用することを目的としています。ユーザーインターフェイスはなく、実行時には表示されません。  
> - <xref:System.Threading.Timer?displayProperty=nameWithType>: スレッドプールのスレッドで、一定の間隔で単一のコールバックメソッドを実行します。 コールバックメソッドは、タイマーがインスタンス化され、変更できないときに定義されます。 <xref:System.Timers.Timer?displayProperty=nameWithType>クラスと同様に、このクラスは、マルチスレッド環境でサーバーベースまたはサービスコンポーネントとして使用することを意図しています。ユーザーインターフェイスはなく、実行時には表示されません。  
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType>(.NET Framework のみ): 一定の間隔でイベントを発生させる Windows フォームコンポーネント。 このコンポーネントにはユーザー インターフェイスがなく、シングルスレッド環境で使用するように設計されています。  
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType>(.NET Framework のみ): 非同期または同期 web ページのポストバックを一定の間隔で実行する ASP.NET コンポーネント。  

## Examples  
 次の例では`System.Timers.Timer` 、2秒 ( <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2000 ミリ秒) ごとにイベントを発生させるオブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。 イベントハンドラーは、発生するたびに<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティの値を表示します。  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この型<see langword="static" />のすべてのパブリックメンバーは、スレッドセーフです。 インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、すべてのプロパティを初期値に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、の<xref:System.Timers.Timer>インスタンスのプロパティの初期値を示します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|100ミリ秒|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|null 参照 (Visual Basic の場合は `Nothing`)。|  
  
   
  
## Examples  
 次の例では<xref:System.Timers.Timer> 、2秒 ( <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2000 ミリ秒) ごとにイベントを発生させるオブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。 イベントハンドラーは、発生するたびに<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティの値を表示します。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberSignature Language="F#" Value="new System.Timers.Timer : double -&gt; System.Timers.Timer" Usage="new System.Timers.Timer interval" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval">ミリ秒単位でのイベントの発生間隔。 この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。</param>
        <summary><see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、<see cref="P:System.Timers.Timer.Interval" /> プロパティを指定したミリ秒数に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、 <xref:System.Timers.Timer.Interval%2A>新しいタイマーインスタンスのプロパティを設定しますが、タイマーを有効にしません。  
  
   
  
## Examples  
 次の例では<xref:System.Timers.Timer> 、2秒 ( <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2000 ミリ秒) ごとにイベントを発生させるオブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。 イベントハンドラーは、発生するたびに<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティの値を表示します。  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="interval" /> パラメーターの値は 0 以下か、または <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoReset : bool with get, set" Usage="System.Timers.Timer.AutoReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerAutoReset")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Timers.Timer" /> が <see cref="E:System.Timers.Timer.Elapsed" /> イベントを一度のみ発生させる (<see langword="false" />) か、または繰り返し発生させる (<see langword="true" />) かを示すブール値を取得または設定します。</summary>
        <value>指定した間隔が経過するたびに <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。最初の間隔が経過した後に 1 回だけ <see langword="false" /> イベントを発生させる場合は <see cref="E:System.Timers.Timer.Elapsed" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Start%2A> <xref:System.Timers.Timer>メソッドが呼び出されたときにが既に有効になっている場合、間隔はリセットされます。 が<xref:System.Timers.Timer.AutoReset%2A> <xref:System.Timers.Timer.Start%2A>の場合は、カウントを再び開始するためにメソッドを呼び出す必要があります。 `false`  
  
 間隔をリセットすると、 <xref:System.Timers.Timer.Elapsed>イベントが発生したときに影響を及ぼします。 たとえば、間隔を5秒に設定し、 <xref:System.Timers.Timer.Enabled%2A>プロパティをに`true`設定すると、 <xref:System.Timers.Timer.Enabled%2A>が設定された時点でカウントが開始されます。 カウントが3秒<xref:System.Timers.Timer.Elapsed>のときに間隔を10秒にリセットすると、 <xref:System.Timers.Timer.Enabled%2A>プロパティがに`true`設定された後、最初の13秒間イベントが発生します。  
  
   
  
## Examples  
 次の例では<xref:System.Timers.Timer> 、 <xref:System.Timers.Timer.Elapsed> 1.5 秒後にイベントを発生させるを作成します。 そのイベントハンドラーに "Hello World!" と表示されます。 コンソールで。  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="timer.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 デザイン[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用されるコンポーネントの初期化を開始します。 メソッド<xref:System.Timers.Timer.EndInit%2A>は、初期化を終了します。 メソッドとメソッド<xref:System.Timers.Timer.EndInit%2A>を使用すると、完全に初期化される前に、コントロールが使用されなくなります。 <xref:System.Timers.Timer.BeginInit%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="timer.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Timers.Timer" /> で使用したリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Timers.Timer.Close%2A>は`Dispose`メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>現在の <see cref="T:System.Timers.Timer" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberSignature Language="F#" Value="member this.Elapsed : System.Timers.ElapsedEventHandler " Usage="member this.Elapsed : System.Timers.ElapsedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerIntervalElapsed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>間隔が経過すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Enabled%2A> <xref:System.Timers.Timer.Interval%2A>プロパティ<xref:System.Timers.Timer.Elapsed> が `true` で、プロパティによって定義された時間間隔 (ミリ秒単位) が経過すると、イベントが発生します。 プロパティが`true`の場合、イベントは<xref:System.Timers.Timer.Interval%2A>プロパティによって定義された間隔で繰り返し発生します。それ以外の場合は、最初に<xref:System.Timers.Timer.Interval%2A>値が経過したときに1回だけイベントが発生します。 <xref:System.Timers.Timer.AutoReset%2A>  
  
 を<xref:System.Timers.Timer.Interval%2A> 開始 <xref:System.Timers.Timer> した後にを設定した場合、カウントはリセットされます。 たとえば、間隔を5秒に設定し、をに<xref:System.Timers.Timer.Enabled%2A> `true`設定した場合、 <xref:System.Timers.Timer.Enabled%2A>が設定された時点でカウントが開始されます。 [カウント] <xref:System.Timers.Timer.Elapsed>を3秒に設定した場合、間隔を10秒にリセットすると、がに`true`設定さ<xref:System.Timers.Timer.Enabled%2A>れてから13秒後にイベントが発生します。  
  
 プロパティが`null`の場合、 <xref:System.Timers.Timer.Elapsed>イベントは<xref:System.Threading.ThreadPool>スレッドで発生します。 <xref:System.Timers.Timer.SynchronizingObject%2A> <xref:System.Timers.Timer.Elapsed>イベントの処理時間がより<xref:System.Timers.Timer.Interval%2A>長い場合、イベントは別<xref:System.Threading.ThreadPool>のスレッドで再び発生する可能性があります。 この場合、イベントハンドラーは再入可能である必要があります。  
  
> [!NOTE]
>  イベント処理メソッドは、別のスレッドが<xref:System.Timers.Timer.Stop%2A>メソッドを呼び出したとき、または<xref:System.Timers.Timer.Enabled%2A>プロパティをに設定する`false`ときに、1つのスレッドで実行されることがあります。 これにより、タイマー <xref:System.Timers.Timer.Elapsed>が停止した後にイベントが発生する可能性があります。 コードの使用例、<xref:System.Timers.Timer.Stop%2A>メソッドは、この競合状態を回避するために 1 つのメソッドを示しています。  
  
 がで<xref:System.Timers.Timer.SynchronizingObject%2A> <xref:System.Timers.Timer.Dispose%2A> <xref:System.Timers.Timer.Stop%2A> <xref:System.Timers.Timer.Enabled%2A> `false`ない `null` 場合でも、メソッドまたはメソッドが呼び出された後、またはプロパティがに設定された後に、イベントが発生する可能性があります。これは、 <xref:System.Timers.Timer.Elapsed>  <xref:System.Timers.Timer.Elapsed>イベントは、スレッドプールのスレッドで実行するために常にキューに登録されます。 この競合状態がのイベント ハンドラーを示すフラグを設定するには解決するのには 1 つのメソッド、<xref:System.Timers.Timer.Elapsed>後続のイベントを無視するイベントです。  
  
 コンポーネント<xref:System.Timers.Timer>は、イベント<xref:System.Timers.Timer.Elapsed>のイベントハンドラーによってスローされたすべての例外をキャッチし、抑制します。 この動作は、.NET Framework の今後のリリースで変更される可能性があります。  
  
   
  
## Examples  
 次の例では<xref:System.Timers.Timer> 、2秒 ( <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2000 ミリ秒) ごとにイベントを発生させるオブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。 イベントハンドラーは、発生するたびに<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティの値を表示します。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Timers.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerEnabled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる必要があるかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Start%2A> <xref:System.Timers.Timer.Enabled%2A> `false` <xref:System.Timers.Timer.Stop%2A>をに設定することはと同じですが、をに設定することは、を呼び出す場合と同じです。 `true`  <xref:System.Timers.Timer.Enabled%2A>  
  
> [!NOTE]
>  <xref:System.Timers.Timer.Elapsed>イベントを発生させるシグナルは、常に<xref:System.Threading.ThreadPool>スレッドで実行するためにキューに入れられます。 これにより、 <xref:System.Timers.Timer.Elapsed> <xref:System.Timers.Timer.Enabled%2A>プロパティがに設定された後にイベント`false`が発生する可能性があります。 コード例を<xref:System.Timers.Timer.Stop%2A>メソッドは、この競合状態を回避する 1 つのメソッドを示しています。  
  
 が<xref:System.Timers.Timer.Enabled%2A> `false` <xref:System.Timers.Timer.Elapsed> <xref:System.Timers.Timer>に設定 `true` され、がに設定されている場合、は、最初の間隔が経過したときに1回だけイベントを発生 <xref:System.Timers.Timer.AutoReset%2A> させます。  
  
 <xref:System.Timers.Timer>が開始した後に間隔が設定されている場合、カウントはリセットされます。 たとえば、間隔を5秒に設定し、 <xref:System.Timers.Timer.Enabled%2A>プロパティをに`true`設定すると、 <xref:System.Timers.Timer.Enabled%2A>が設定された時点でカウントが開始されます。 [カウント] <xref:System.Timers.Timer.Elapsed>を3秒に設定した場合、間隔を10秒にリセットすると、がに`true`設定さ<xref:System.Timers.Timer.Enabled%2A>れてから13秒後にイベントが発生します。  
  
> [!NOTE]
>  Microsoft Visual Studio のようなビジュアルデザイナーの中には、新しい<xref:System.Timers.Timer.Enabled%2A> <xref:System.Timers.Timer>を挿入`true`するときにプロパティをに設定するものがあります。  
  
   
  
## Examples  
 次の例では<xref:System.Timers.Timer> 、2秒 ( <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2000 ミリ秒) ごとにイベントを発生させるオブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。 イベントハンドラーは、発生するたびに<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティの値を表示します。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">タイマーが破棄されたため、このプロパティは設定できません。</exception>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Timers.Timer.Interval" /> プロパティは、タイマーが有効になる前に <see cref="F:System.Int32.MaxValue" /> より大きい値に設定されました。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="timer.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 デザイン[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]環境では、このメソッドを使用して、フォームまたは別のコンポーネントによって使用されるコンポーネントの初期化を終了します。 メソッド<xref:System.Timers.Timer.BeginInit%2A>は、初期化を開始します。 メソッドとメソッド<xref:System.Timers.Timer.EndInit%2A>を使用すると、完全に初期化される前に、コントロールが使用されなくなります。 <xref:System.Timers.Timer.BeginInit%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Timers.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerInterval")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔を取得または設定します。</summary>
        <value>ミリ秒単位での <see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔。 この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。 既定値は 100 ミリ秒です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Interval%2A>プロパティを使用して、 <xref:System.Timers.Timer.Elapsed>イベントが発生する頻度を決定します。 クラスは<xref:System.Timers.Timer>システムクロックに依存するので、システムクロックと同じ解像度になります。 これは、 <xref:System.Timers.Timer.Interval%2A>プロパティ<xref:System.Timers.Timer.Elapsed>がシステムクロックの解像度よりも小さい場合に、システムクロックの解決によって定義された間隔でイベントを発生させることを意味します。 次の例では<xref:System.Timers.Timer.Interval%2A> 、プロパティを5ミリ秒に設定します。 システムクロックの解像度[!INCLUDE[win7](~/includes/win7-md.md)]が約15ミリ秒であるシステムで実行すると、イベントは5ミリ秒ごとではなく約15ミリ秒ごとに発生します。  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 次のコードを使用して、現在のシステムのシステムクロックの解決方法を決定できます。  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 かどうか、アプリが必要以上の解像度によって提供されるよりも、<xref:System.Timers.Timer>クラスまたはシステム クロック、高解像度のマルチ メディア タイマーを使用して、参照してください。[メソッド: 高分解能タイマを使用する](https://msdn.microsoft.com/library/aa964692.aspx)します。  
  
 <xref:System.Timers.Timer>が開始した後に間隔が設定されている場合、カウントはリセットされます。 たとえば、間隔を5秒に設定し、 <xref:System.Timers.Timer.Enabled%2A>プロパティをに`true`設定すると、 <xref:System.Timers.Timer.Enabled%2A>が設定された時点でカウントが開始されます。 [カウント] <xref:System.Timers.Timer.Elapsed>を3秒に設定した場合、間隔を10秒にリセットすると、がに`true`設定さ<xref:System.Timers.Timer.Enabled%2A>れてから13秒後にイベントが発生します。  
  
 が<xref:System.Timers.Timer.Enabled%2A> `false` <xref:System.Timers.Timer.Elapsed> <xref:System.Timers.Timer>に設定 `true` され、がに設定されている場合、は、最初の間隔が経過したときに1回だけイベントを発生 <xref:System.Timers.Timer.AutoReset%2A> させます。 <xref:System.Timers.Timer.Enabled%2A>次に、を`false`に設定します。  
  
> [!NOTE]
>  と<xref:System.Timers.Timer.Enabled%2A> `false` <xref:System.Timers.Timer.Enabled%2A> <xref:System.Timers.Timer.Elapsed>の両方がに設定されていて、 <xref:System.Timers.Timer.Interval%2A>タイマーが既に有効になっている場合、プロパティを設定すると、プロパティがに設定されているかのように、イベントが1回発生します。 <xref:System.Timers.Timer.AutoReset%2A> `true`. イベントを発生させずに間隔を設定するには、 <xref:System.Timers.Timer.Enabled%2A>プロパティを`true`一時的にに<xref:System.Timers.Timer.Interval%2A>設定し、プロパティを目的の<xref:System.Timers.Timer.Enabled%2A>時間間隔に設定してから、 `false`すぐにプロパティをに戻します。  
  
   
  
## Examples  
 次の例では<xref:System.Timers.Timer> 、2秒 ( <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2000 ミリ秒) ごとにイベントを発生させるオブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。 イベントハンドラーは、発生するたびに<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティの値を表示します。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">間隔が 0 以下です。  
  
- または - 
間隔が <see cref="F:System.Int32.MaxValue" /> よりも大きく、タイマーが現在有効になっています。 (タイマーが現在有効になっていない場合は、有効になるまで例外はスローされません。)</exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Timers.Timer.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>デザイン モードで <see cref="T:System.Timers.Timer" /> をコンテナーにバインドするサイトを取得または設定します。</summary>
        <value><see cref="T:System.Timers.Timer" /> オブジェクトをコンテナーにバインドするサイトを表す <see cref="T:System.ComponentModel.ISite" /> インターフェイス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サイトは<xref:System.ComponentModel.Component> 、を<xref:System.ComponentModel.Container>にバインドし、それらの間の通信を有効にすると共に、コンテナーがそのコンポーネントを管理する方法を提供します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Timers.Timer.Enabled" /> を <see langword="true" /> に設定して、<see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 が<xref:System.Timers.Timer.Start%2A> `false`呼び出され <xref:System.Timers.Timer.Elapsed>  、がに <xref:System.Timers.Timer> 設定されている場合、は、最初に間隔が経過したときに1回だけイベントを発生させます。 <xref:System.Timers.Timer.AutoReset%2A> が<xref:System.Timers.Timer.Start%2A> `true`呼び出され <xref:System.Timers.Timer.Elapsed>  、がの <xref:System.Timers.Timer> 場合、は、最初に間隔が経過したときにイベントを発生させ、指定した間隔でイベントを発生させ続けます。 <xref:System.Timers.Timer.AutoReset%2A>  
  
 をに<xref:System.Timers.Timer.Enabled%2A> `true`設定することによって、タイミングを開始することもできます。  
  
> [!NOTE]
>  が<xref:System.Timers.Timer.AutoReset%2A> <xref:System.Timers.Timer.Start%2A>の場合は、カウントを再び開始するためにメソッドを呼び出す必要があります。 `false`  
  
 タイマーが有効に<xref:System.Timers.Timer.Start%2A>なっているときのメソッドの呼び出しは効果がありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="T:System.Timers.Timer" /> の作成時に設定された間隔が <see cref="F:System.Int32.MaxValue" /> + 1 以上か、0 未満に設定されています。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Timers.Timer.Enabled" /> を <see langword="false" /> に設定して、<see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 をに<xref:System.Timers.Timer.Enabled%2A> `false`設定して、タイミングを停止することもできます。  
  
> [!NOTE]
>  <xref:System.Timers.Timer.Elapsed>イベントを発生させるシグナルは、常に<xref:System.Threading.ThreadPool>スレッドでの実行のためにキューに入れられるので、イベント処理メソッドは、メソッドの<xref:System.Timers.Timer.Stop%2A>呼び出しが別のスレッドで実行されるときに、1つのスレッドで実行される可能性があります。 これにより、 <xref:System.Timers.Timer.Elapsed> <xref:System.Timers.Timer.Stop%2A>メソッドが呼び出された後にイベントが発生する可能性があります。 「[例](#examples)」セクションの2番目のコード例は、この競合状態を回避する方法の1つを示しています。  
  
   
  
## Examples  
 次の例では`System.Timers.Timer` 、2秒 ( <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2000 ミリ秒) ごとにイベントを発生させるオブジェクトをインスタンス化し、イベントのイベントハンドラーを設定して、タイマーを開始します。 イベントハンドラーは、発生するたびに<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティの値を表示します。 ユーザーが enter キーを押すと、アプリケーションはアプリケーションを<xref:System.Timers.Timer.Stop%2A>終了する前にメソッドを呼び出します。  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 次のコード例を呼び出すスレッドを防ぐために 1 つのメソッドを示しています、<xref:System.Timers.Timer.Stop%2A>メソッドまで、現在の実行を続行できなく<xref:System.Timers.Timer.Elapsed>イベント終了すると、2 つの操作を防止するためにも<xref:System.Timers.Timer.Elapsed>を同じイベント ハンドラーの実行からのイベント時間 (再入とも呼ばれます)。  
  
 この例では、100テストの実行を実行します。 テストが実行されるたびに、タイマーは150ミリ秒の間隔で開始されます。 イベントハンドラーは、 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>メソッドを使用して、50 ~ 200 ミリ秒の長さでランダムに変化するタスクをシミュレートします。 また、テストメソッドは、1秒間待機してからタイマーを停止する制御スレッドを開始します。 コントロールスレッドがタイマーを停止したときにイベントが処理されている場合、制御スレッドはイベントが完了するまで待機してから続行する必要があります。  
  
 メソッド<xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>のオーバーロードは、再入を回避し、実行中のイベントが終了するまで制御スレッドが続行されないようにするために使用されます。 イベントハンドラーは、 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29>メソッドを使用して、コントロール変数を1に設定します。ただし、値が現在0の場合に限ります。 これはアトミック操作です。 戻り値が0の場合、コントロール変数が1に設定され、イベントハンドラーが処理を続行します。 戻り値が0以外の場合は、再入を避けるために、イベントは単に破棄されます。 (すべてのイベントを実行するために必要な場合、<xref:System.Threading.Monitor>クラスは、イベントを同期するメソッドの向上になります)。イベント ハンドラーの終了時に、設定コントロール変数戻るを 0 にします。 この例では、再入によって破棄され、 <xref:System.Timers.Timer.Stop%2A>メソッドが呼び出された後に発生した、実行されたイベントの合計数を記録します。  
  
 コントロールスレッドは、 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29>メソッドを使用して、コントロール変数を-1 (マイナス 1) に設定します。ただし、値が現在0の場合に限ります。 アトミック操作が0以外の値を返す場合、イベントは現在実行中です。 制御スレッドが待機して、もう一度試行します。 この例では、コントロールスレッドがイベントの終了を待機する必要があった回数を記録します。  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Timers.Timer.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Timers.TimersDescription("TimerSynchronizingObject")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを取得または設定します。</summary>
        <value>指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを表す <see cref="T:System.ComponentModel.ISynchronizeInvoke" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 が<xref:System.Timers.Timer.SynchronizingObject%2A> <xref:System.Timers.Timer.Elapsed>の場合、イベントを処理するメソッドは、システムスレッドプールからのスレッドで呼び出されます。 `null` システムスレッドプールの詳細については、 <xref:System.Threading.ThreadPool>「」を参照してください。  
  
 ボタンなどのビジュアル Windows フォームコンポーネントによってイベントが処理される場合、システムスレッドプールを介してコンポーネントにアクセスすると、例外が発生するか、または機能しない可能性があります。 <xref:System.Timers.Timer.Elapsed> この効果を回避する<xref:System.Timers.Timer.SynchronizingObject%2A>には、を Windows フォームコンポーネントに設定します。これ<xref:System.Timers.Timer.Elapsed>により、イベントを処理するメソッドが、コンポーネントが作成されたのと同じスレッドで呼び出されます。  
  
> [!NOTE]
>  <xref:System.Timers.Timer.SynchronizingObject%2A>プロパティがでない`null`場合でも<xref:System.Timers.Timer.Elapsed> 、メソッド<xref:System.Timers.Timer.Dispose%2A>また<xref:System.Timers.Timer.Stop%2A>はメソッドが呼び出された後、または<xref:System.Timers.Timer.Enabled%2A>プロパティがに`false`設定された後にイベントが発生することがあります。これは、発生するシグナルであるためです。イベント<xref:System.Timers.Timer.Elapsed>は、スレッドプールのスレッドで実行するために常にキューに登録されます。 この競合状態がのイベント ハンドラーを示すフラグを設定するには解決するのには 1 つのメソッド、<xref:System.Timers.Timer.Elapsed>後続のイベントを無視するイベントです。  
  
 が Visual Studio 内で Windows フォームデザイナーで使用されて<xref:System.Timers.Timer.SynchronizingObject%2A>いる場合、はを含む<xref:System.Timers.Timer>コントロールに自動的に設定されます。 <xref:System.Timers.Timer> たとえば、を (から<xref:System.Timers.Timer> <xref:System.Windows.Forms.Form> `Form1` <xref:System.Timers.Timer> 継承する `Form1` ) のデザイナーに配置すると、のプロパティはのインスタンスに設定されます。 <xref:System.Timers.Timer.SynchronizingObject%2A>  
  
   
  
## Examples  
 次の例は、非常に単純なテキストファイルエディターとして機能する Windows フォームアプリです。 テキストボックス内のテキストが保存されていない場合、アプリケーションは、テキストボックスの内容を保存するかどうかを1分間隔でユーザーに要求します。  これ<xref:System.Timers.Timer.Interval%2A>を行うには、プロパティが1分 (6万ミリ秒) <xref:System.Timers.Timer.SynchronizingObject%2A>に設定され、 <xref:System.Windows.Forms.Form>プロパティがオブジェクトに設定されます。  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 この例では、次のコントロールをフォームに追加する必要があります。  
  
-   という名前`TextBox1`のコントロール (既定の名前)。 <xref:System.Windows.Forms.TextBox>  
  
-   という名前`Button1`のコントロール (既定の名前)。 <xref:System.Windows.Forms.Button>  
  
-   という名前`SaveSaveFileDialog1`のコントロール (既定の名前)。 <xref:System.Windows.Forms.SaveFileDialog>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>
