<Type Name="Timer" FullName="System.Timers.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="79a6b0af70c0710c65111696c47831bcfbd33e64" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39830071" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>一定の間隔の経過後にイベントを生成します。オプションとして、反復イベントを生成することもできます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer>コンポーネントは、サーバー ベースのタイマーを発生させる、<xref:System.Timers.Timer.Elapsed>ミリ秒単位の数値の後にアプリケーション内のイベント、<xref:System.Timers.Timer.Interval%2A>プロパティが経過しました。 構成することができます、<xref:System.Timers.Timer>を使用して 1 回だけまたは繰り返しイベントを発生させるオブジェクト、<xref:System.Timers.Timer.AutoReset%2A>プロパティ。 通常、<xref:System.Timers.Timer>に必要な限り、スコープに収まるように、クラス レベルのオブジェクトが宣言されています。 処理することができますし、その<xref:System.Timers.Timer.Elapsed>通常の処理を提供するイベントです。 たとえば、保持する必要がある重要なサーバー 24 時間、日、週 7 日間を実行します。 使用するサービスを作成、<xref:System.Timers.Timer>オブジェクトを定期的にサーバーを確認し、システムが稼働していることを確認します。 システムが応答していない場合、サービスは、サーバーを再起動したり、管理者に通知する試みますでした。  
  
> [!IMPORTANT]
> <xref:System.Timers.Timer>クラスは、すべての .NET 実装と .NET Standard 1.6 より下位のバージョンなどのバージョンを使用することはありません。
> このような場合は、使用することができます、<xref:System.Threading.Timer?displayProperty=nameWithType>クラスの代わりにします。
  
 この型は、<xref:System.IDisposable>インターフェイス。 型の使用が完了したら、直接的または間接的にそれを破棄する必要があります。 型の直接 dispose を呼び出してその<xref:System.IDisposable.Dispose%2A>メソッド、 `try` / `catch`ブロックします。 直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(で C# の場合) または`Using`(Visual Basic) でします。 詳細については、"を使用して、オブジェクトを実装する IDisposable"のセクションを参照してください、<xref:System.IDisposable>インターフェイスに関するトピック。  
  
 サーバー ベース<xref:System.Timers.Timer?displayProperty=nameWithType>クラスがマルチ スレッド環境でのワーカー スレッドで使用するために設計されています。 サーバーのタイマーは、発生したを処理するスレッド間で移動できます<xref:System.Timers.Timer.Elapsed>イベント、Windows の時刻にイベントを発生させるタイマーよりも正確になります。  
  
 <xref:System.Timers.Timer?displayProperty=nameWithType>コンポーネントが発生、<xref:System.Timers.Timer.Elapsed>の値 (ミリ秒単位) に基づいて、イベント、<xref:System.Timers.Timer.Interval%2A>プロパティ。 必要な処理を実行するには、このイベントを処理することができます。 たとえば、継続的にデータベースへの販売注文を投稿するオンライン販売アプリケーションがあるとします。 出荷の指示をコンパイルするサービスは、個別に各注文を処理するのではなく、注文のバッチで動作します。 使用できます、<xref:System.Timers.Timer>を 30 分ごとに処理するバッチを開始します。  
  
> [!IMPORTANT]
>  System.Timers.Timer クラスには、システム クロックと同じ解像度があります。 つまり、<xref:System.Timers.Timer.Elapsed>場合、システム時計の解像度によって定義された間隔でイベントが起動、<xref:System.Timers.Timer.Interval%2A>プロパティは、システム時計の解像度より小さい。 詳細については、<xref:System.Timers.Timer.Interval%2A> プロパティを参照してください。  
  
 ときに<xref:System.Timers.Timer.AutoReset%2A>に設定されている`false`、<xref:System.Timers.Timer?displayProperty=nameWithType>オブジェクト、<xref:System.Timers.Timer.Elapsed>イベント 1 回だけで、最初より後<xref:System.Timers.Timer.Interval%2A>が経過しました。 発生を保持する、<xref:System.Timers.Timer.Elapsed>によって定義された間隔で定期的にイベント、<xref:System.Timers.Timer.Interval%2A>設定<xref:System.Timers.Timer.AutoReset%2A>に`true`、これは、既定値。  
  
 <xref:System.Timers.Timer>コンポーネントをキャッチし、イベント ハンドラーによってスローされる例外すべてを抑制します、<xref:System.Timers.Timer.Elapsed>イベント。 この動作は、.NET Framework の将来のリリースで変更されます。 ただし、非同期的に実行とそのイベント ハンドラーの場合は true ではないこと、`await`演算子 (c#) または`Await`演算子 (Visual Basic) でします。 これらのイベント ハンドラーでスローされた例外は、次の例に示すように、呼び出し元のスレッドに反映されます。 非同期メソッドでスローされた例外の詳細については、次を参照してください。[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 場合、<xref:System.Timers.Timer.SynchronizingObject%2A>プロパティは`null`、<xref:System.Timers.Timer.Elapsed>イベントの発生を<xref:System.Threading.ThreadPool>スレッド。 処理中の場合、<xref:System.Timers.Timer.Elapsed>よりも長いイベント継続<xref:System.Timers.Timer.Interval%2A>、別のイベントを再度発生させる可能性があります<xref:System.Threading.ThreadPool>スレッド。 このような状況では、イベント ハンドラーが再入可能な必要があります。  
  
> [!NOTE]
>  イベント処理メソッドが 1 つのスレッドを別のスレッドを呼び出すのと同時実行、<xref:System.Timers.Timer.Stop%2A>メソッドまたはセット、<xref:System.Timers.Timer.Enabled%2A>プロパティを`false`します。 これで発生する可能性があります、<xref:System.Timers.Timer.Elapsed>タイマーが停止した後に発生します。 コードの使用例、<xref:System.Timers.Timer.Stop%2A>メソッドは、この競合状態を回避するために 1 つの方法を示しています。  
  
 場合でも<xref:System.Timers.Timer.SynchronizingObject%2A>ない`null`、<xref:System.Timers.Timer.Elapsed>後にイベントを発生させる、<xref:System.Timers.Timer.Dispose%2A>または<xref:System.Timers.Timer.Stop%2A>メソッドが呼び出された後または、<xref:System.Timers.Timer.Enabled%2A>プロパティ設定されて`false`のため、させる、シグナル<xref:System.Timers.Timer.Elapsed>イベントは常にスレッド プールのスレッドで実行をキューに配置します。 この競合状態がのイベント ハンドラーを示すフラグを設定するには解決するのには 1 つの方法、<xref:System.Timers.Timer.Elapsed>後続のイベントを無視するイベントです。  
  
 使用する場合、<xref:System.Timers.Timer?displayProperty=nameWithType>クラス、フォームやそのユーザー インターフェイス要素に、タイマーをかけることがなく、コントロールなどのユーザー インターフェイス要素に割り当てるフォームまたはコントロールを含む、<xref:System.Timers.Timer>を<xref:System.Timers.Timer.SynchronizingObject%2A>プロパティ、イベントが実行されるようユーザー インターフェイス スレッドにマーシャ リングします。  
  
 インスタンスの既定のプロパティ値の一覧については<xref:System.Timers.Timer>を参照してください、<xref:System.Timers.Timer.%23ctor%2A>コンス トラクター。  
  
> [!TIP]
>  .NET がという名前の 4 つのクラスが含まれることに注意してください`Timer`、それぞれ異なる機能を備えたの。  
>   
> - <xref:System.Timers.Timer?displayProperty=nameWithType> (このトピック): 一定の間隔でイベントを発生させます。 サーバー ベースとして使用またはマルチ スレッド環境でサービス コンポーネントのクラスが対象としていますユーザー インターフェイスがないと、実行時に表示されていません。  
> - <xref:System.Threading.Timer?displayProperty=nameWithType>: 定期的な間隔でスレッド プールのスレッドで 1 つのコールバック メソッドを実行します。 タイマーがインスタンス化され、変更できないときに、コールバック メソッドが定義されます。 ように、<xref:System.Timers.Timer?displayProperty=nameWithType>クラスでは、このクラスは、マルチ スレッド環境でサーバー ベースまたはサービス コンポーネントとして使用するためです。 ユーザー インターフェイスを持たないは実行時に表示されません。  
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET framework のみ): Windows フォーム コンポーネントを一定の間隔でイベントを発生させます。 このコンポーネントにはユーザー インターフェイスがなく、シングルスレッド環境で使用するように設計されています。  
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET framework のみ): 一定の間隔で非同期または同期の web ページのポストバックを実行する ASP.NET コンポーネント。  

## Examples  
 次の例では、インスタンス化、`System.Timers.Timer`を発生させるオブジェクト、<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>イベント (2,000 ミリ秒単位)、2 秒間隔が、イベントのイベント ハンドラーを設定し、タイマーを開始します。 イベント ハンドラーの値を表示する、<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティが発生するたびにします。  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>すべてのパブリック<see langword="static" />この型のメンバーはスレッド セーフです。 インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、すべてのプロパティを初期値に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表のインスタンスの初期プロパティ値<xref:System.Timers.Timer>します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|100 ミリ秒|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|null 参照 (Visual Basic の場合は `Nothing`)。|  
  
   
  
## Examples  
 次の例では、インスタンス化、<xref:System.Timers.Timer>を発生させるオブジェクト、 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2 秒 (2000 ミリ秒) ごとのイベントがイベントのイベント ハンドラーを設定し、タイマーを開始します。 イベント ハンドラーの値を表示する、<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティが発生するたびにします。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberSignature Language="F#" Value="new System.Timers.Timer : double -&gt; System.Timers.Timer" Usage="new System.Timers.Timer interval" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval">ミリ秒単位でのイベントの発生間隔。 この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。</param>
        <summary>
          <see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、<see cref="P:System.Timers.Timer.Interval" /> プロパティを指定したミリ秒数に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターの設定、<xref:System.Timers.Timer.Interval%2A>タイマーの新しいインスタンスのプロパティ、タイマーを有効にしません。  
  
   
  
## Examples  
 次の例では、インスタンス化、<xref:System.Timers.Timer>を発生させるオブジェクト、 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2 秒 (2000 ミリ秒) ごとのイベントがイベントのイベント ハンドラーを設定し、タイマーを開始します。 イベント ハンドラーの値を表示する、<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティが発生するたびにします。  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="interval" /> パラメーターの値は 0 以下か、または <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoReset : bool with get, set" Usage="System.Timers.Timer.AutoReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0">
          <AttributeName>System.Timers.TimersDescription("TimerAutoReset")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Timers.Timer" /> が <see cref="E:System.Timers.Timer.Elapsed" /> イベントを一度のみ発生させる (<see langword="false" />) か、または繰り返し発生させる (<see langword="true" />) かを示すブール値を取得または設定します。</summary>
        <value>指定した間隔が経過するたびに <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。最初の間隔が経過した後に 1 回だけ <see langword="false" /> イベントを発生させる場合は <see cref="E:System.Timers.Timer.Elapsed" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Timers.Timer>をまだ有効にすると、<xref:System.Timers.Timer.Start%2A>メソッドが呼び出されると、間隔をリセットします。 場合<xref:System.Timers.Timer.AutoReset%2A>は`false`、<xref:System.Timers.Timer.Start%2A>カウントをもう一度開始するには、メソッドを呼び出す必要があります。  
  
 間隔をリセットするときに影響を与える、<xref:System.Timers.Timer.Elapsed>イベントが発生します。 たとえば、間隔 5 秒に設定し、設定すると、<xref:System.Timers.Timer.Enabled%2A>プロパティを`true`、カウントの開始時に<xref:System.Timers.Timer.Enabled%2A>設定されています。 10 秒が、カウントがある場合、3 秒間に間隔をリセットする場合、<xref:System.Timers.Timer.Elapsed>イベントは 13 秒後に初めて、<xref:System.Timers.Timer.Enabled%2A>プロパティに設定されました`true`。  
  
   
  
## Examples  
 次の例では、作成、<xref:System.Timers.Timer>が<xref:System.Timers.Timer.Elapsed>1.5 秒後にイベントが発生します。 そのイベント ハンドラーは、"Hello World!"を表示します コンソール。  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="timer.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用されるコンポーネントの初期化を開始します。 <xref:System.Timers.Timer.EndInit%2A>メソッドは、初期化を終了します。 使用して、<xref:System.Timers.Timer.BeginInit%2A>と<xref:System.Timers.Timer.EndInit%2A>メソッドにより、コントロールは完全に初期化される前に使用されているからです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="timer.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Timers.Timer" /> で使用したリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Close%2A>メソッドを呼び出します、`Dispose`メソッド。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>現在の <see cref="T:System.Timers.Timer" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberSignature Language="F#" Value="member this.Elapsed : System.Timers.ElapsedEventHandler " Usage="member this.Elapsed : System.Timers.ElapsedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0">
          <AttributeName>System.Timers.TimersDescription("TimerIntervalElapsed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>間隔が経過すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Elapsed>イベントは、<xref:System.Timers.Timer.Enabled%2A>プロパティは`true`によって定義された時間間隔 (ミリ秒単位)、<xref:System.Timers.Timer.Interval%2A>プロパティが経過するとします。 場合、<xref:System.Timers.Timer.AutoReset%2A>プロパティは`true`、によって定義された間隔でイベントが繰り返し発生した、<xref:System.Timers.Timer.Interval%2A>プロパティ; イベントが発生した場合は、最初に 1 回だけ、<xref:System.Timers.Timer.Interval%2A>が経過するまでの値します。  
  
 場合<xref:System.Timers.Timer.Interval%2A>後に設定されて、<xref:System.Timers.Timer>が開始されると、カウントがリセットされます。 たとえば、間隔 5 秒に設定し、設定すると<xref:System.Timers.Timer.Enabled%2A>に`true`、カウントの開始時に<xref:System.Timers.Timer.Enabled%2A>設定されています。 10 秒のカウントがある場合、3 秒間に間隔をリセットする場合、<xref:System.Timers.Timer.Elapsed>イベントは 13 秒後に初めて<xref:System.Timers.Timer.Enabled%2A>に設定された`true`。  
  
 場合、<xref:System.Timers.Timer.SynchronizingObject%2A>プロパティは`null`、<xref:System.Timers.Timer.Elapsed>イベントの発生を<xref:System.Threading.ThreadPool>スレッド。 場合の処理、<xref:System.Timers.Timer.Elapsed>よりも長いイベント継続<xref:System.Timers.Timer.Interval%2A>、別のイベントを再度発生させる可能性があります<xref:System.Threading.ThreadPool>スレッド。 このような状況では、イベント ハンドラーが再入可能な必要があります。  
  
> [!NOTE]
>  イベント処理メソッドが 1 つのスレッドを別のスレッドを呼び出すのと同時実行、<xref:System.Timers.Timer.Stop%2A>メソッドまたはセット、<xref:System.Timers.Timer.Enabled%2A>プロパティを`false`します。 これで発生する可能性があります、<xref:System.Timers.Timer.Elapsed>タイマーが停止した後に発生します。 コードの使用例、<xref:System.Timers.Timer.Stop%2A>メソッドは、この競合状態を回避するために 1 つの方法を示しています。  
  
 場合でも<xref:System.Timers.Timer.SynchronizingObject%2A>ない`null`、<xref:System.Timers.Timer.Elapsed>後にイベントを発生させる、<xref:System.Timers.Timer.Dispose%2A>または<xref:System.Timers.Timer.Stop%2A>メソッドが呼び出された後または、<xref:System.Timers.Timer.Enabled%2A>プロパティ設定されて`false`のため、させる、シグナル<xref:System.Timers.Timer.Elapsed>イベントは常にスレッド プールのスレッドで実行をキューに配置します。 この競合状態がのイベント ハンドラーを示すフラグを設定するには解決するのには 1 つの方法、<xref:System.Timers.Timer.Elapsed>後続のイベントを無視するイベントです。  
  
 <xref:System.Timers.Timer>コンポーネントをキャッチし、イベント ハンドラーによってスローされる例外すべてを抑制します、<xref:System.Timers.Timer.Elapsed>イベント。 この動作は、.NET Framework の将来のリリースで変更されます。  
  
   
  
## Examples  
 次の例では、インスタンス化、<xref:System.Timers.Timer>を発生させるオブジェクト、 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2 秒 (2000 ミリ秒) ごとのイベントがイベントのイベント ハンドラーを設定し、タイマーを開始します。 イベント ハンドラーの値を表示する、<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティが発生するたびにします。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Timers.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0">
          <AttributeName>System.Timers.TimersDescription("TimerEnabled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる必要があるかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定<xref:System.Timers.Timer.Enabled%2A>に`true`は呼び出すことと同じ<xref:System.Timers.Timer.Start%2A>、設定中に<xref:System.Timers.Timer.Enabled%2A>に`false`は呼び出すことと同じ<xref:System.Timers.Timer.Stop%2A>します。  
  
> [!NOTE]
>  シグナルを発生させる、<xref:System.Timers.Timer.Elapsed>の実行のイベントが常にキューに、<xref:System.Threading.ThreadPool>スレッド。 これで発生する可能性があります、<xref:System.Timers.Timer.Elapsed>イベントが発生した後、<xref:System.Timers.Timer.Enabled%2A>プロパティに設定されて`false`します。 コード例を<xref:System.Timers.Timer.Stop%2A>メソッドは、この競合状態を回避する 1 つの方法を示しています。  
  
 場合<xref:System.Timers.Timer.Enabled%2A>に設定されている`true`と<xref:System.Timers.Timer.AutoReset%2A>に設定されている`false`、<xref:System.Timers.Timer>を発生させます、<xref:System.Timers.Timer.Elapsed>が経過すると、最初の間隔に 1 回だけです。  
  
 後に、間隔が設定されている場合、<xref:System.Timers.Timer>が開始されると、カウントがリセットされます。 たとえば、間隔 5 秒に設定し、設定すると、<xref:System.Timers.Timer.Enabled%2A>プロパティを`true`、カウントの開始時に<xref:System.Timers.Timer.Enabled%2A>設定されています。 10 秒のカウントがある場合、3 秒間に間隔をリセットする場合、<xref:System.Timers.Timer.Elapsed>イベントは 13 秒後に初めて<xref:System.Timers.Timer.Enabled%2A>に設定された`true`。  
  
> [!NOTE]
>  ビジュアル デザイナー、Microsoft Visual studio でなどの設定、<xref:System.Timers.Timer.Enabled%2A>プロパティを`true`新しい挿入するときに<xref:System.Timers.Timer>します。  
  
   
  
## Examples  
 次の例では、インスタンス化、<xref:System.Timers.Timer>を発生させるオブジェクト、 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2 秒 (2000 ミリ秒) ごとのイベントがイベントのイベント ハンドラーを設定し、タイマーを開始します。 イベント ハンドラーの値を表示する、<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティが発生するたびにします。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">タイマーが破棄されたため、このプロパティは設定できません。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Timers.Timer.Interval" /> プロパティは、タイマーが有効になる前に <see cref="F:System.Int32.MaxValue" /> より大きい値に設定されました。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="timer.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用されるコンポーネントの初期化を終了します。 <xref:System.Timers.Timer.BeginInit%2A>メソッドは、初期化を開始します。 使用して、<xref:System.Timers.Timer.BeginInit%2A>と<xref:System.Timers.Timer.EndInit%2A>メソッドにより、コントロールは完全に初期化される前に使用されているからです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Timers.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0">
          <AttributeName>System.Timers.TimersDescription("TimerInterval")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔を取得または設定します。</summary>
        <value>ミリ秒単位での <see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔。 この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。 既定値は 100 ミリ秒です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用する、<xref:System.Timers.Timer.Interval%2A>を確認する頻度は、プロパティ、<xref:System.Timers.Timer.Elapsed>イベントが発生します。 <xref:System.Timers.Timer>クラスは、システム クロックに依存、システム クロックと同じ解像度があります。 つまり、<xref:System.Timers.Timer.Elapsed>場合、システム時計の解像度によって定義された間隔でイベントが起動、<xref:System.Timers.Timer.Interval%2A>プロパティは、システム時計の解像度より小さい。 次の例のセット、 <xref:System.Timers.Timer.Interval%2A> 5 ミリ秒プロパティ。 実行されると、[!INCLUDE[win7](~/includes/win7-md.md)]システム 5 ミリ秒間隔よりも約 15 ミリ秒ごと、そのシステム クロックが解像度は約 15 ミリ秒、イベントが発生します。  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 次のコードを使用すると、現在のシステムのシステム時計の解像度を判断します。  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 かどうか、アプリが必要以上の解像度によって提供されるよりも、<xref:System.Timers.Timer>クラスまたはシステム クロック、高解像度のマルチ メディア タイマーを使用して、参照してください。[方法: 高分解能タイマを使用する](http://msdn.microsoft.com/library/aa964692.aspx)します。  
  
 後に、間隔が設定されている場合、<xref:System.Timers.Timer>が開始されると、カウントがリセットされます。 たとえば、間隔 5 秒に設定し、設定すると、<xref:System.Timers.Timer.Enabled%2A>プロパティを`true`、カウントの開始時に<xref:System.Timers.Timer.Enabled%2A>設定されています。 10 秒のカウントがある場合、3 秒間に間隔をリセットする場合、<xref:System.Timers.Timer.Elapsed>イベントは 13 秒後に初めて<xref:System.Timers.Timer.Enabled%2A>に設定された`true`。  
  
 場合<xref:System.Timers.Timer.Enabled%2A>に設定されている`true`と<xref:System.Timers.Timer.AutoReset%2A>に設定されている`false`、<xref:System.Timers.Timer>を発生させます、<xref:System.Timers.Timer.Elapsed>が経過すると、最初の間隔に 1 回だけです。 <xref:System.Timers.Timer.Enabled%2A> 設定されている、`false`します。  
  
> [!NOTE]
>  場合<xref:System.Timers.Timer.Enabled%2A>と<xref:System.Timers.Timer.AutoReset%2A>に設定されて`false`、およびタイマーが以前有効になって、設定、<xref:System.Timers.Timer.Interval%2A>プロパティ原因、<xref:System.Timers.Timer.Elapsed>イベントが 1 回発生する場合と、 <xref:System.Timers.Timer.Enabled%2A> に設定されたプロパティ`true`. 間隔を設定すると、イベントを発生させることがなく、一時的に設定できます、<xref:System.Timers.Timer.Enabled%2A>プロパティを`true`設定、<xref:System.Timers.Timer.Interval%2A>プロパティ、目的の時間間隔をすぐに設定し、<xref:System.Timers.Timer.Enabled%2A>プロパティ`false`。  
  
   
  
## Examples  
 次の例では、インスタンス化、<xref:System.Timers.Timer>を発生させるオブジェクト、 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2 秒 (2000 ミリ秒) ごとのイベントがイベントのイベント ハンドラーを設定し、タイマーを開始します。 イベント ハンドラーの値を表示する、<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティが発生するたびにします。  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">間隔が 0 以下です。  
  
- または - 
間隔が <see cref="F:System.Int32.MaxValue" /> よりも大きく、タイマーが現在有効になっています。 (タイマーが現在有効になっていない場合は、有効になるまで例外はスローされません。)</exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Timers.Timer.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>デザイン モードで <see cref="T:System.Timers.Timer" /> をコンテナーにバインドするサイトを取得または設定します。</summary>
        <value>
          <see cref="T:System.Timers.Timer" /> オブジェクトをコンテナーにバインドするサイトを表す <see cref="T:System.ComponentModel.ISite" /> インターフェイス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サイト バインドを<xref:System.ComponentModel.Component>を<xref:System.ComponentModel.Container>と、それらの間の通信を有効にするだけでなく、コンテナーは、そのコンポーネントを管理するための手段を提供します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Timers.Timer.Enabled" /> を <see langword="true" /> に設定して、<see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合<xref:System.Timers.Timer.Start%2A>が呼び出されますと<xref:System.Timers.Timer.AutoReset%2A>に設定されている`false`、<xref:System.Timers.Timer>を発生させます、<xref:System.Timers.Timer.Elapsed>が経過すると、最初の間隔に 1 回だけです。 場合<xref:System.Timers.Timer.Start%2A>が呼び出されますと<xref:System.Timers.Timer.AutoReset%2A>は`true`、<xref:System.Timers.Timer>を発生させます、<xref:System.Timers.Timer.Elapsed>イベント最初の時間間隔が経過して、指定した間隔でイベントを発生させるが続行されます。  
  
 設定して、タイミングを開始することもできます。<xref:System.Timers.Timer.Enabled%2A>に`true`します。  
  
> [!NOTE]
>  場合<xref:System.Timers.Timer.AutoReset%2A>は`false`、<xref:System.Timers.Timer.Start%2A>カウントをもう一度開始するには、メソッドを呼び出す必要があります。  
  
 呼び出し、<xref:System.Timers.Timer.Start%2A>メソッド、タイマーが有効になっているときに影響を与えません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="T:System.Timers.Timer" /> の作成時に設定された間隔が <see cref="F:System.Int32.MaxValue" /> + 1 以上か、0 未満に設定されています。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Timers.Timer.Enabled" /> を <see langword="false" /> に設定して、<see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定して、タイミングを停止することもできます。<xref:System.Timers.Timer.Enabled%2A>に`false`します。  
  
> [!NOTE]
>  シグナルを発生させる、<xref:System.Timers.Timer.Elapsed>の実行のイベントが常にキューに、<xref:System.Threading.ThreadPool>スレッド、イベント処理メソッドが 1 つのスレッドを同時実行のための時間をへの呼び出し、<xref:System.Timers.Timer.Stop%2A>メソッドは、別のスレッドで実行します。 これで発生する可能性があります、<xref:System.Timers.Timer.Elapsed>イベントが発生した後、<xref:System.Timers.Timer.Stop%2A>メソッドが呼び出されます。 次のセクションのコード例では、この競合状態を回避する 1 つの方法を示します。  
  
   
  
## Examples  
 次の例では、インスタンス化、`System.Timers.Timer`を発生させるオブジェクト、<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>イベント (2,000 ミリ秒単位)、2 秒間隔が、イベントのイベント ハンドラーを設定し、タイマーを開始します。 イベント ハンドラーの値を表示する、<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティが発生するたびにします。 ユーザーは、Enter キーを押すと、アプリケーションが呼び出す、<xref:System.Timers.Timer.Stop%2A>メソッドは、アプリケーションを終了する前にします。  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 次のコード例を呼び出すスレッドを防ぐために 1 つの方法を示しています、<xref:System.Timers.Timer.Stop%2A>メソッドまで、現在の実行を続行できなく<xref:System.Timers.Timer.Elapsed>イベント終了すると、2 つの操作を防止するためにも<xref:System.Timers.Timer.Elapsed>を同じイベント ハンドラーの実行からのイベント時間 (再入とも呼ばれます)。  
  
 例では、100 のテストの実行を実行します。 テストを実行するたびに、タイマーが 150 ミリ秒単位の間隔で起動します。 イベント ハンドラーを使用して、 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 50 から 200 ミリ秒単位までの長さがランダムに変化するタスクをシミュレートするメソッド。 テスト メソッドでは、2 つ目を待機し、タイマーを停止し、コントロール スレッドも起動されます。 コントロール スレッド タイマーを停止するときに、イベントが処理されている場合、コントロール スレッドは、イベントが続行する前に完了するまで待つ必要があります。  
  
 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>再入を回避して、コントロール スレッドが実行中のイベントが終了するまで続行するを防ぐために、メソッドのオーバー ロードを使用します。 イベント ハンドラーを使用して、<xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29>変数を 1、その値が 0 では現在場合にのみ、コントロールを設定するメソッド。 これは、分割不可能な操作です。 戻り値が 0 の場合は、コントロール変数が 1 に設定されているし、イベント ハンドラーを実行します。 戻り値が 0 以外の場合は、イベントは単に再入を回避するために破棄されます。 (すべてのイベントを実行するために必要な場合、<xref:System.Threading.Monitor>クラスは、イベントを同期する方法の向上になります)。イベント ハンドラーの終了時に、設定コントロール変数戻るを 0 にします。 例が実行される、再入、ため破棄された後に発生したイベントの合計数を記録、<xref:System.Timers.Timer.Stop%2A>メソッドが呼び出されました。  
  
 コントロールのスレッドを使用して、 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> -1 (マイナス 1 つ) を変数にその値が 0 では現在場合にのみ、コントロールを設定するメソッド。 分割不可能な操作は、0 以外を返します、イベントが実行中です。 コントロールのスレッドは待機し、もう一度試みます。 例では、コントロールのスレッドを終了するイベントを待つ必要がある回数を記録します。  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Timers.Timer.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0">
          <AttributeName>System.Timers.TimersDescription("TimerSynchronizingObject")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを取得または設定します。</summary>
        <value>指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを表す <see cref="T:System.ComponentModel.ISynchronizeInvoke" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに<xref:System.Timers.Timer.SynchronizingObject%2A>は`null`、処理するメソッドを<xref:System.Timers.Timer.Elapsed>イベントは、システム スレッド プールのスレッドで呼び出されます。 システム スレッド プールの詳細については、次を参照してください。<xref:System.Threading.ThreadPool>します。  
  
 ときに、<xref:System.Timers.Timer.Elapsed>可能性がありますか、例外の結果が機能しないシステム スレッド プールを介したコンポーネントにアクセスする、ボタンなど、ビジュアルの Windows フォーム コンポーネントによってイベントが処理されます。 この効果を設定して回避<xref:System.Timers.Timer.SynchronizingObject%2A>これにより、Windows フォームのコンポーネントを処理するメソッドを<xref:System.Timers.Timer.Elapsed>コンポーネントが作成されている同じスレッドで呼び出されるイベントをします。  
  
> [!NOTE]
>  場合でも、<xref:System.Timers.Timer.SynchronizingObject%2A>プロパティは`null`、<xref:System.Timers.Timer.Elapsed>後にイベントを発生させる、<xref:System.Timers.Timer.Dispose%2A>または<xref:System.Timers.Timer.Stop%2A>メソッドが呼び出された後または、<xref:System.Timers.Timer.Enabled%2A>プロパティに設定されている`false`のため、シグナルを発生させる<xref:System.Timers.Timer.Elapsed>イベントは常にスレッド プールのスレッドで実行をキューに配置します。 この競合状態がのイベント ハンドラーを示すフラグを設定するには解決するのには 1 つの方法、<xref:System.Timers.Timer.Elapsed>後続のイベントを無視するイベントです。  
  
 場合、<xref:System.Timers.Timer>は Visual Studio 内で、Windows フォーム デザイナーで使用<xref:System.Timers.Timer.SynchronizingObject%2A>を含むコントロールを自動的に設定されますが、<xref:System.Timers.Timer>します。 配置する場合など、<xref:System.Timers.Timer>のデザイナーで`Form1`(から継承される<xref:System.Windows.Forms.Form>)、<xref:System.Timers.Timer.SynchronizingObject%2A>プロパティの<xref:System.Timers.Timer>のインスタンスに設定されている`Form1`します。  
  
   
  
## Examples  
 次の例では、非常に単純なテキスト ファイルのエディターとして機能する Windows フォーム アプリです。 テキスト ボックス内のテキストが保存されていないときに、アプリをユーザーに確認 1 分間隔でそのユーザーがテキスト ボックスの内容を保存するかどうか。  これを行う、 <xref:System.Timers.Timer.Interval%2A> 1 分間 (60,000 ミリ秒) に設定されて、<xref:System.Timers.Timer.SynchronizingObject%2A>プロパティに設定されて、<xref:System.Windows.Forms.Form>オブジェクト。  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 例では、次のコントロールをフォームに追加することが必要です。  
  
-   A<xref:System.Windows.Forms.TextBox>という名前のコントロール`TextBox1`(既定の名前)。  
  
-   A<xref:System.Windows.Forms.Button>という名前のコントロール`Button1`(既定の名前)。  
  
-   A<xref:System.Windows.Forms.SaveFileDialog>という名前のコントロール`SaveSaveFileDialog1`(既定の名前)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>