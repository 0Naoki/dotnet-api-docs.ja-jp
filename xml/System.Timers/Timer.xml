<Type Name="Timer" FullName="System.Timers.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f2483b13115f709c891ae64fffbeed30c28faf0e" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56405398" /></Metadata><TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7d8bb-101">一定の間隔の経過後にイベントを生成します。オプションとして、反復イベントを生成することもできます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-101">Generates an event after a set interval, with an option to generate recurring events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d8bb-102"><xref:System.Timers.Timer>コンポーネントは、サーバー ベースのタイマーを発生させる、<xref:System.Timers.Timer.Elapsed>ミリ秒単位の数値の後にアプリケーション内のイベント、<xref:System.Timers.Timer.Interval%2A>プロパティが経過しました。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-102">The <xref:System.Timers.Timer> component is a server-based timer that raises an <xref:System.Timers.Timer.Elapsed> event in your application after the number of milliseconds in the <xref:System.Timers.Timer.Interval%2A> property has elapsed.</span></span> <span data-ttu-id="7d8bb-103">構成することができます、<xref:System.Timers.Timer>を使用して 1 回だけまたは繰り返しイベントを発生させるオブジェクト、<xref:System.Timers.Timer.AutoReset%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-103">You can configure the <xref:System.Timers.Timer> object to raise the event just once or repeatedly using the <xref:System.Timers.Timer.AutoReset%2A> property.</span></span> <span data-ttu-id="7d8bb-104">通常、<xref:System.Timers.Timer>に必要な限り、スコープに収まるように、クラス レベルのオブジェクトが宣言されています。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-104">Typically, a <xref:System.Timers.Timer> object is declared at the class level so that it stays in scope as long as it is needed.</span></span> <span data-ttu-id="7d8bb-105">処理することができますし、その<xref:System.Timers.Timer.Elapsed>通常の処理を提供するイベントです。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-105">You can then handle its <xref:System.Timers.Timer.Elapsed> event to provide regular processing.</span></span> <span data-ttu-id="7d8bb-106">たとえば、保持する必要がある重要なサーバー 24 時間、日、週 7 日間を実行します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-106">For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</span></span> <span data-ttu-id="7d8bb-107">使用するサービスを作成、<xref:System.Timers.Timer>オブジェクトを定期的にサーバーを確認し、システムが稼働していることを確認します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-107">You could create a service that uses a <xref:System.Timers.Timer> object to periodically check the server and ensure that the system is up and running.</span></span> <span data-ttu-id="7d8bb-108">システムが応答していない場合、サービスは、サーバーを再起動したり、管理者に通知する試みますでした。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-108">If the system is not responding, the service could attempt to restart the server or notify an administrator.</span></span>  
  
> [!IMPORTANT]
> <span data-ttu-id="7d8bb-109"><xref:System.Timers.Timer>クラスは、すべての .NET 実装と .NET Standard 1.6 より下位のバージョンなどのバージョンを使用することはありません。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-109">The <xref:System.Timers.Timer> class is not available for all .NET implementations and versions, such as .NET Standard 1.6 and lower versions.</span></span>
> <span data-ttu-id="7d8bb-110">このような場合は、使用することができます、<xref:System.Threading.Timer?displayProperty=nameWithType>クラスの代わりにします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-110">In these cases, you can use the <xref:System.Threading.Timer?displayProperty=nameWithType> class instead.</span></span>
  
 <span data-ttu-id="7d8bb-111">この型は <xref:System.IDisposable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-111">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="7d8bb-112">型の使用が完了したら、直接的または間接的に型を破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-112">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="7d8bb-113">直接的に型を破棄するには、`try` / `catch` ブロック内で <xref:System.IDisposable.Dispose%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-113">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="7d8bb-114">間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-114">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="7d8bb-115">詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-115">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="7d8bb-116">サーバー ベース<xref:System.Timers.Timer?displayProperty=nameWithType>クラスがマルチ スレッド環境でのワーカー スレッドで使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-116">The server-based <xref:System.Timers.Timer?displayProperty=nameWithType> class is designed for use with worker threads in a multithreaded environment.</span></span> <span data-ttu-id="7d8bb-117">サーバーのタイマーは、発生したを処理するスレッド間で移動できます<xref:System.Timers.Timer.Elapsed>イベント、Windows の時刻にイベントを発生させるタイマーよりも正確になります。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-117">Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.</span></span>  
  
 <span data-ttu-id="7d8bb-118"><xref:System.Timers.Timer?displayProperty=nameWithType>コンポーネントが発生、<xref:System.Timers.Timer.Elapsed>の値 (ミリ秒単位) に基づいて、イベント、<xref:System.Timers.Timer.Interval%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-118">The <xref:System.Timers.Timer?displayProperty=nameWithType> component raises the <xref:System.Timers.Timer.Elapsed> event, based on the value (in milliseconds) of the <xref:System.Timers.Timer.Interval%2A> property.</span></span> <span data-ttu-id="7d8bb-119">必要な処理を実行するには、このイベントを処理することができます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-119">You can handle this event to perform the processing you need.</span></span> <span data-ttu-id="7d8bb-120">たとえば、継続的にデータベースへの販売注文を投稿するオンライン販売アプリケーションがあるとします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-120">For example, suppose that you have an online sales application that continuously posts sales orders to a database.</span></span> <span data-ttu-id="7d8bb-121">出荷の指示をコンパイルするサービスは、個別に各注文を処理するのではなく、注文のバッチで動作します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-121">The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.</span></span> <span data-ttu-id="7d8bb-122">使用できます、<xref:System.Timers.Timer>を 30 分ごとに処理するバッチを開始します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-122">You could use a <xref:System.Timers.Timer> to start the batch processing every 30 minutes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7d8bb-123">System.Timers.Timer クラスには、システム クロックと同じ解像度があります。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-123">The System.Timers.Timer class has the same resolution as the system clock.</span></span> <span data-ttu-id="7d8bb-124">つまり、<xref:System.Timers.Timer.Elapsed>場合、システム時計の解像度によって定義された間隔でイベントが起動、<xref:System.Timers.Timer.Interval%2A>プロパティは、システム時計の解像度より小さい。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-124">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="7d8bb-125">詳細については、<xref:System.Timers.Timer.Interval%2A> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-125">For more information, see the <xref:System.Timers.Timer.Interval%2A> property.</span></span>  
  
 <span data-ttu-id="7d8bb-126">ときに<xref:System.Timers.Timer.AutoReset%2A>に設定されている`false`、<xref:System.Timers.Timer?displayProperty=nameWithType>オブジェクト、<xref:System.Timers.Timer.Elapsed>イベント 1 回だけで、最初より後<xref:System.Timers.Timer.Interval%2A>が経過しました。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-126">When <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, a <xref:System.Timers.Timer?displayProperty=nameWithType> object raises the <xref:System.Timers.Timer.Elapsed> event only once, after the first <xref:System.Timers.Timer.Interval%2A> has elapsed.</span></span> <span data-ttu-id="7d8bb-127">発生を保持する、<xref:System.Timers.Timer.Elapsed>によって定義された間隔で定期的にイベント、<xref:System.Timers.Timer.Interval%2A>設定<xref:System.Timers.Timer.AutoReset%2A>に`true`、これは、既定値。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-127">To keep raising the <xref:System.Timers.Timer.Elapsed> event regularly at the interval defined by the <xref:System.Timers.Timer.Interval%2A>, set <xref:System.Timers.Timer.AutoReset%2A> to `true`, which is the default value.</span></span>  
  
 <span data-ttu-id="7d8bb-128"><xref:System.Timers.Timer>コンポーネントをキャッチし、イベント ハンドラーによってスローされる例外すべてを抑制します、<xref:System.Timers.Timer.Elapsed>イベント。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-128">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="7d8bb-129">この動作は、.NET Framework の将来のリリースで変更されます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-129">This behavior is subject to change in future releases of the .NET Framework.</span></span> <span data-ttu-id="7d8bb-130">ただし、非同期的に実行とそのイベント ハンドラーの場合は true ではないこと、`await`演算子 (c#) または`Await`演算子 (Visual Basic) でします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-130">Note, however, that this is not true of event handlers that execute asynchronously and include the `await` operator (in C#)  or the `Await` operator (in Visual Basic).</span></span> <span data-ttu-id="7d8bb-131">これらのイベント ハンドラーでスローされた例外は、次の例に示すように、呼び出し元のスレッドに反映されます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-131">Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.</span></span> <span data-ttu-id="7d8bb-132">非同期メソッドでスローされた例外の詳細については、次を参照してください。[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-132">For more information on exceptions thrown in asynchronous methods, see   [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 <span data-ttu-id="7d8bb-133">場合、<xref:System.Timers.Timer.SynchronizingObject%2A>プロパティは`null`、<xref:System.Timers.Timer.Elapsed>イベントの発生を<xref:System.Threading.ThreadPool>スレッド。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-133">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`, the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="7d8bb-134">処理中の場合、<xref:System.Timers.Timer.Elapsed>よりも長いイベント継続<xref:System.Timers.Timer.Interval%2A>、別のイベントを再度発生させる可能性があります<xref:System.Threading.ThreadPool>スレッド。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-134">If processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="7d8bb-135">このような状況では、イベント ハンドラーが再入可能な必要があります。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-135">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d8bb-136">イベント処理メソッドが 1 つのスレッドを別のスレッドを呼び出すのと同時実行、<xref:System.Timers.Timer.Stop%2A>メソッドまたはセット、<xref:System.Timers.Timer.Enabled%2A>プロパティを`false`します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-136">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="7d8bb-137">これで発生する可能性があります、<xref:System.Timers.Timer.Elapsed>タイマーが停止した後に発生します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-137">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="7d8bb-138">コードの使用例、<xref:System.Timers.Timer.Stop%2A>メソッドは、この競合状態を回避するために 1 つのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-138">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="7d8bb-139">場合でも<xref:System.Timers.Timer.SynchronizingObject%2A>ない`null`、<xref:System.Timers.Timer.Elapsed>後にイベントを発生させる、<xref:System.Timers.Timer.Dispose%2A>または<xref:System.Timers.Timer.Stop%2A>メソッドが呼び出された後または、<xref:System.Timers.Timer.Enabled%2A>プロパティ設定されて`false`のため、させる、シグナル<xref:System.Timers.Timer.Elapsed>イベントは常にスレッド プールのスレッドで実行をキューに配置します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-139">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="7d8bb-140">この競合状態がのイベント ハンドラーを示すフラグを設定するには解決するのには 1 つのメソッド、<xref:System.Timers.Timer.Elapsed>後続のイベントを無視するイベントです。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-140">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="7d8bb-141">使用する場合、<xref:System.Timers.Timer?displayProperty=nameWithType>クラス、フォームやそのユーザー インターフェイス要素に、タイマーをかけることがなく、コントロールなどのユーザー インターフェイス要素に割り当てるフォームまたはコントロールを含む、<xref:System.Timers.Timer>を<xref:System.Timers.Timer.SynchronizingObject%2A>プロパティ、イベントが実行されるようユーザー インターフェイス スレッドにマーシャ リングします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-141">If you use the <xref:System.Timers.Timer?displayProperty=nameWithType> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <xref:System.Timers.Timer> to the <xref:System.Timers.Timer.SynchronizingObject%2A> property, so that the event is marshaled to the user interface thread.</span></span>  
  
 <span data-ttu-id="7d8bb-142">インスタンスの既定のプロパティ値の一覧については<xref:System.Timers.Timer>を参照してください、<xref:System.Timers.Timer.%23ctor%2A>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-142">For a list of default property values for an instance of <xref:System.Timers.Timer>, see the <xref:System.Timers.Timer.%23ctor%2A> constructor.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="7d8bb-143">.NET がという名前の 4 つのクラスが含まれることに注意してください`Timer`、それぞれ異なる機能を備えたの。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-143">Be aware that .NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>   
> - <span data-ttu-id="7d8bb-144"><xref:System.Timers.Timer?displayProperty=nameWithType> (このトピック): 一定の間隔でイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-144"><xref:System.Timers.Timer?displayProperty=nameWithType> (this topic): fires an event at regular intervals.</span></span> <span data-ttu-id="7d8bb-145">サーバー ベースとして使用またはマルチ スレッド環境でサービス コンポーネントのクラスが対象としていますユーザー インターフェイスがないと、実行時に表示されていません。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-145">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="7d8bb-146"><xref:System.Threading.Timer?displayProperty=nameWithType>: 定期的な間隔でスレッド プールのスレッドで 1 つのコールバック メソッドを実行します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-146"><xref:System.Threading.Timer?displayProperty=nameWithType>: executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="7d8bb-147">タイマーがインスタンス化され、変更できないときに、コールバック メソッドが定義されます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-147">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="7d8bb-148">ように、<xref:System.Timers.Timer?displayProperty=nameWithType>クラスでは、このクラスは、マルチ スレッド環境でサーバー ベースまたはサービス コンポーネントとして使用するためです。 ユーザー インターフェイスを持たないは実行時に表示されません。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-148">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="7d8bb-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET framework のみ): Windows フォーム コンポーネントを一定の間隔でイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only): a Windows Forms component that fires an event at regular intervals.</span></span> <span data-ttu-id="7d8bb-150">このコンポーネントにはユーザー インターフェイスがなく、シングルスレッド環境で使用するように設計されています。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-150">The component has no user interface and is designed for use in a single-threaded environment.</span></span>  
> - <span data-ttu-id="7d8bb-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET framework のみ): 一定の間隔で非同期または同期の web ページのポストバックを実行する ASP.NET コンポーネント。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only): an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>  

## Examples  
 <span data-ttu-id="7d8bb-152">次の例では、インスタンス化、`System.Timers.Timer`を発生させるオブジェクト、<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>イベント (2,000 ミリ秒単位)、2 秒間隔が、イベントのイベント ハンドラーを設定し、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-152">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="7d8bb-153">イベント ハンドラーの値を表示する、<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティが発生するたびにします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-153">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="7d8bb-154">すべてのパブリック<see langword="static" />この型のメンバーはスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-154">Any public <see langword="static" /> members of this type are thread safe.</span></span> <span data-ttu-id="7d8bb-155">インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-155">Any instance members are not guaranteed to be thread safe.</span></span></threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7d8bb-156"><see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-156">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d8bb-157"><see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、すべてのプロパティを初期値に設定します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-157">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets all the properties to their initial values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d8bb-158">次の表のインスタンスの初期プロパティ値<xref:System.Timers.Timer>します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-158">The following table shows initial property values for an instance of <xref:System.Timers.Timer>.</span></span>  
  
|<span data-ttu-id="7d8bb-159">プロパティ</span><span class="sxs-lookup"><span data-stu-id="7d8bb-159">Property</span></span>|<span data-ttu-id="7d8bb-160">初期値</span><span class="sxs-lookup"><span data-stu-id="7d8bb-160">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|<span data-ttu-id="7d8bb-161">100 ミリ秒</span><span class="sxs-lookup"><span data-stu-id="7d8bb-161">100 milliseconds</span></span>|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|<span data-ttu-id="7d8bb-162">null 参照 (Visual Basic の場合は `Nothing`)。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-162">A null reference (`Nothing` in Visual Basic).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7d8bb-163">次の例では、インスタンス化、<xref:System.Timers.Timer>を発生させるオブジェクト、 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2 秒 (2000 ミリ秒) ごとのイベントがイベントのイベント ハンドラーを設定し、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-163">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="7d8bb-164">イベント ハンドラーの値を表示する、<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティが発生するたびにします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-164">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberSignature Language="F#" Value="new System.Timers.Timer : double -&gt; System.Timers.Timer" Usage="new System.Timers.Timer interval" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval"><span data-ttu-id="7d8bb-165">ミリ秒単位でのイベントの発生間隔。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-165">The time, in milliseconds, between events.</span></span> <span data-ttu-id="7d8bb-166">この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-166">The value must be greater than zero and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="7d8bb-167"><see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、<see cref="P:System.Timers.Timer.Interval" /> プロパティを指定したミリ秒数に設定します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-167">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets the <see cref="P:System.Timers.Timer.Interval" /> property to the specified number of milliseconds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d8bb-168">このコンス トラクターの設定、<xref:System.Timers.Timer.Interval%2A>タイマーの新しいインスタンスのプロパティ、タイマーを有効にしません。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-168">This constructor sets the <xref:System.Timers.Timer.Interval%2A> property of the new timer instance, but does not enable the timer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d8bb-169">次の例では、インスタンス化、<xref:System.Timers.Timer>を発生させるオブジェクト、 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2 秒 (2000 ミリ秒) ごとのイベントがイベントのイベント ハンドラーを設定し、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-169">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="7d8bb-170">イベント ハンドラーの値を表示する、<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティが発生するたびにします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-170">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7d8bb-171"><paramref name="interval" /> パラメーターの値は 0 以下か、または <see cref="F:System.Int32.MaxValue" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-171">The value of the <paramref name="interval" /> parameter is less than or equal to zero, or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoReset : bool with get, set" Usage="System.Timers.Timer.AutoReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8">
          <AttributeName>System.Timers.TimersDescription("TimerAutoReset")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d8bb-172"><see cref="T:System.Timers.Timer" /> が <see cref="E:System.Timers.Timer.Elapsed" /> イベントを一度のみ発生させる (<see langword="false" />) か、または繰り返し発生させる (<see langword="true" />) かを示すブール値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-172">Gets or sets a Boolean indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once (<see langword="false" />) or repeatedly (<see langword="true" />).</span></span></summary>
        <value><span data-ttu-id="7d8bb-173">指定した間隔が経過するたびに <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。最初の間隔が経過した後に 1 回だけ <see langword="false" /> イベントを発生させる場合は <see cref="E:System.Timers.Timer.Elapsed" />。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-173"><see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event each time the interval elapses; <see langword="false" /> if it should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once, after the first time the interval elapses.</span></span> <span data-ttu-id="7d8bb-174">既定値は、<see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-174">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d8bb-175">場合、<xref:System.Timers.Timer>をまだ有効にすると、<xref:System.Timers.Timer.Start%2A>メソッドが呼び出されると、間隔をリセットします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-175">If the <xref:System.Timers.Timer> is already enabled when the <xref:System.Timers.Timer.Start%2A> method is called, the interval is reset.</span></span> <span data-ttu-id="7d8bb-176">場合<xref:System.Timers.Timer.AutoReset%2A>は`false`、<xref:System.Timers.Timer.Start%2A>カウントをもう一度開始するには、メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-176">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="7d8bb-177">間隔をリセットするときに影響を与える、<xref:System.Timers.Timer.Elapsed>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-177">Resetting the interval affects when the <xref:System.Timers.Timer.Elapsed> event is raised.</span></span> <span data-ttu-id="7d8bb-178">たとえば、間隔 5 秒に設定し、設定すると、<xref:System.Timers.Timer.Enabled%2A>プロパティを`true`、カウントの開始時に<xref:System.Timers.Timer.Enabled%2A>設定されています。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-178">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="7d8bb-179">10 秒が、カウントがある場合、3 秒間に間隔をリセットする場合、<xref:System.Timers.Timer.Elapsed>イベントは 13 秒後に初めて、<xref:System.Timers.Timer.Enabled%2A>プロパティに設定されました`true`。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-179">If you reset the interval to 10 seconds when the count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after the <xref:System.Timers.Timer.Enabled%2A> property was set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d8bb-180">次の例では、作成、<xref:System.Timers.Timer>が<xref:System.Timers.Timer.Elapsed>1.5 秒後にイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-180">The following example creates a <xref:System.Timers.Timer> whose <xref:System.Timers.Timer.Elapsed> event fires after 1.5 seconds.</span></span> <span data-ttu-id="7d8bb-181">そのイベント ハンドラーは、"Hello World!"を表示します</span><span class="sxs-lookup"><span data-stu-id="7d8bb-181">Its event handler then displays "Hello World!"</span></span> <span data-ttu-id="7d8bb-182">コンソール。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-182">on the console.</span></span>  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="timer.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d8bb-183">フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-183">Begins the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d8bb-184">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用されるコンポーネントの初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-184">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="7d8bb-185"><xref:System.Timers.Timer.EndInit%2A>メソッドは、初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-185">The <xref:System.Timers.Timer.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="7d8bb-186">使用して、<xref:System.Timers.Timer.BeginInit%2A>と<xref:System.Timers.Timer.EndInit%2A>メソッドにより、コントロールは完全に初期化される前に使用されているからです。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-186">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="timer.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d8bb-187"><see cref="T:System.Timers.Timer" /> で使用したリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-187">Releases the resources used by the <see cref="T:System.Timers.Timer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d8bb-188"><xref:System.Timers.Timer.Close%2A>メソッドを呼び出します、`Dispose`メソッド。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-188">The <xref:System.Timers.Timer.Close%2A> method in turn calls the `Dispose` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="7d8bb-189">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-189"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="7d8bb-190">現在の <see cref="T:System.Timers.Timer" /> によって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-190">Releases all resources used by the current <see cref="T:System.Timers.Timer" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberSignature Language="F#" Value="member this.Elapsed : System.Timers.ElapsedEventHandler " Usage="member this.Elapsed : System.Timers.ElapsedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8">
          <AttributeName>System.Timers.TimersDescription("TimerIntervalElapsed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d8bb-191">間隔が経過すると発生します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-191">Occurs when the interval elapses.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d8bb-192"><xref:System.Timers.Timer.Elapsed>イベントは、<xref:System.Timers.Timer.Enabled%2A>プロパティは`true`によって定義された時間間隔 (ミリ秒単位)、<xref:System.Timers.Timer.Interval%2A>プロパティが経過するとします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-192">The <xref:System.Timers.Timer.Elapsed> event is raised if the <xref:System.Timers.Timer.Enabled%2A> property is `true` and the time interval (in milliseconds) defined by the <xref:System.Timers.Timer.Interval%2A> property elapses.</span></span> <span data-ttu-id="7d8bb-193">場合、<xref:System.Timers.Timer.AutoReset%2A>プロパティは`true`、によって定義された間隔でイベントが繰り返し発生した、<xref:System.Timers.Timer.Interval%2A>プロパティ; イベントが発生した場合は、最初に 1 回だけ、<xref:System.Timers.Timer.Interval%2A>が経過するまでの値します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-193">If the <xref:System.Timers.Timer.AutoReset%2A> property is `true`, the event is raised repeatedly at an interval defined by the <xref:System.Timers.Timer.Interval%2A> property; otherwise, the event is raised only once, the first time the <xref:System.Timers.Timer.Interval%2A> value elapses.</span></span>  
  
 <span data-ttu-id="7d8bb-194">場合<xref:System.Timers.Timer.Interval%2A>後に設定されて、<xref:System.Timers.Timer>が開始されると、カウントがリセットされます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-194">If <xref:System.Timers.Timer.Interval%2A> is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="7d8bb-195">たとえば、間隔 5 秒に設定し、設定すると<xref:System.Timers.Timer.Enabled%2A>に`true`、カウントの開始時に<xref:System.Timers.Timer.Enabled%2A>設定されています。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-195">For example, if you set the interval to 5 seconds and then set <xref:System.Timers.Timer.Enabled%2A> to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="7d8bb-196">10 秒のカウントがある場合、3 秒間に間隔をリセットする場合、<xref:System.Timers.Timer.Elapsed>イベントは 13 秒後に初めて<xref:System.Timers.Timer.Enabled%2A>に設定された`true`。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-196">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="7d8bb-197">場合、<xref:System.Timers.Timer.SynchronizingObject%2A>プロパティは`null`、<xref:System.Timers.Timer.Elapsed>イベントの発生を<xref:System.Threading.ThreadPool>スレッド。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-197">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`,the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="7d8bb-198">場合の処理、<xref:System.Timers.Timer.Elapsed>よりも長いイベント継続<xref:System.Timers.Timer.Interval%2A>、別のイベントを再度発生させる可能性があります<xref:System.Threading.ThreadPool>スレッド。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-198">If the processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="7d8bb-199">このような状況では、イベント ハンドラーが再入可能な必要があります。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-199">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d8bb-200">イベント処理メソッドが 1 つのスレッドを別のスレッドを呼び出すのと同時実行、<xref:System.Timers.Timer.Stop%2A>メソッドまたはセット、<xref:System.Timers.Timer.Enabled%2A>プロパティを`false`します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-200">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="7d8bb-201">これで発生する可能性があります、<xref:System.Timers.Timer.Elapsed>タイマーが停止した後に発生します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-201">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="7d8bb-202">コードの使用例、<xref:System.Timers.Timer.Stop%2A>メソッドは、この競合状態を回避するために 1 つのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-202">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="7d8bb-203">場合でも<xref:System.Timers.Timer.SynchronizingObject%2A>ない`null`、<xref:System.Timers.Timer.Elapsed>後にイベントを発生させる、<xref:System.Timers.Timer.Dispose%2A>または<xref:System.Timers.Timer.Stop%2A>メソッドが呼び出された後または、<xref:System.Timers.Timer.Enabled%2A>プロパティ設定されて`false`のため、させる、シグナル<xref:System.Timers.Timer.Elapsed>イベントは常にスレッド プールのスレッドで実行をキューに配置します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-203">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="7d8bb-204">この競合状態がのイベント ハンドラーを示すフラグを設定するには解決するのには 1 つのメソッド、<xref:System.Timers.Timer.Elapsed>後続のイベントを無視するイベントです。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-204">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="7d8bb-205"><xref:System.Timers.Timer>コンポーネントをキャッチし、イベント ハンドラーによってスローされる例外すべてを抑制します、<xref:System.Timers.Timer.Elapsed>イベント。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-205">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="7d8bb-206">この動作は、.NET Framework の将来のリリースで変更されます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-206">This behavior is subject to change in future releases of the .NET Framework.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d8bb-207">次の例では、インスタンス化、<xref:System.Timers.Timer>を発生させるオブジェクト、 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2 秒 (2000 ミリ秒) ごとのイベントがイベントのイベント ハンドラーを設定し、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-207">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="7d8bb-208">イベント ハンドラーの値を表示する、<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティが発生するたびにします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-208">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Timers.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8">
          <AttributeName>System.Timers.TimersDescription("TimerEnabled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d8bb-209"><see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる必要があるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-209">Gets or sets a value indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span></span></summary>
        <value><span data-ttu-id="7d8bb-210"><see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-210"><see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7d8bb-211">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-211">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d8bb-212">設定<xref:System.Timers.Timer.Enabled%2A>に`true`は呼び出すことと同じ<xref:System.Timers.Timer.Start%2A>、設定中に<xref:System.Timers.Timer.Enabled%2A>に`false`は呼び出すことと同じ<xref:System.Timers.Timer.Stop%2A>します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-212">Setting <xref:System.Timers.Timer.Enabled%2A> to `true` is the same as calling <xref:System.Timers.Timer.Start%2A>, while setting <xref:System.Timers.Timer.Enabled%2A> to `false` is the same as calling <xref:System.Timers.Timer.Stop%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d8bb-213">シグナルを発生させる、<xref:System.Timers.Timer.Elapsed>の実行のイベントが常にキューに、<xref:System.Threading.ThreadPool>スレッド。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-213">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="7d8bb-214">これで発生する可能性があります、<xref:System.Timers.Timer.Elapsed>イベントが発生した後、<xref:System.Timers.Timer.Enabled%2A>プロパティに設定されて`false`します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-214">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Enabled%2A> property is set to `false`.</span></span> <span data-ttu-id="7d8bb-215">コード例を<xref:System.Timers.Timer.Stop%2A>メソッドは、この競合状態を回避する 1 つのメソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-215">The code example for the <xref:System.Timers.Timer.Stop%2A> method shows one way to work around this race condition.</span></span>  
  
 <span data-ttu-id="7d8bb-216">場合<xref:System.Timers.Timer.Enabled%2A>に設定されている`true`と<xref:System.Timers.Timer.AutoReset%2A>に設定されている`false`、<xref:System.Timers.Timer>を発生させます、<xref:System.Timers.Timer.Elapsed>が経過すると、最初の間隔に 1 回だけです。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-216">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span>  
  
 <span data-ttu-id="7d8bb-217">後に、間隔が設定されている場合、<xref:System.Timers.Timer>が開始されると、カウントがリセットされます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-217">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="7d8bb-218">たとえば、間隔 5 秒に設定し、設定すると、<xref:System.Timers.Timer.Enabled%2A>プロパティを`true`、カウントの開始時に<xref:System.Timers.Timer.Enabled%2A>設定されています。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-218">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="7d8bb-219">10 秒のカウントがある場合、3 秒間に間隔をリセットする場合、<xref:System.Timers.Timer.Elapsed>イベントは 13 秒後に初めて<xref:System.Timers.Timer.Enabled%2A>に設定された`true`。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-219">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d8bb-220">ビジュアル デザイナー、Microsoft Visual studio でなどの設定、<xref:System.Timers.Timer.Enabled%2A>プロパティを`true`新しい挿入するときに<xref:System.Timers.Timer>します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-220">Some visual designers, such as those in Microsoft Visual Studio, set the <xref:System.Timers.Timer.Enabled%2A> property to `true` when inserting a new <xref:System.Timers.Timer>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d8bb-221">次の例では、インスタンス化、<xref:System.Timers.Timer>を発生させるオブジェクト、 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2 秒 (2000 ミリ秒) ごとのイベントがイベントのイベント ハンドラーを設定し、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-221">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="7d8bb-222">イベント ハンドラーの値を表示する、<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティが発生するたびにします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-222">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7d8bb-223">タイマーが破棄されたため、このプロパティは設定できません。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-223">This property cannot be set because the timer has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7d8bb-224"><see cref="P:System.Timers.Timer.Interval" /> プロパティは、タイマーが有効になる前に <see cref="F:System.Int32.MaxValue" /> より大きい値に設定されました。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-224">The <see cref="P:System.Timers.Timer.Interval" /> property was set to a value greater than <see cref="F:System.Int32.MaxValue" /> before the timer was enabled.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="timer.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d8bb-225">フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-225">Ends the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d8bb-226">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用されるコンポーネントの初期化を終了します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-226">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="7d8bb-227"><xref:System.Timers.Timer.BeginInit%2A>メソッドは、初期化を開始します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-227">The <xref:System.Timers.Timer.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="7d8bb-228">使用して、<xref:System.Timers.Timer.BeginInit%2A>と<xref:System.Timers.Timer.EndInit%2A>メソッドにより、コントロールは完全に初期化される前に使用されているからです。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-228">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Timers.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8">
          <AttributeName>System.Timers.TimersDescription("TimerInterval")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d8bb-229"><see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-229">Gets or sets the interval, expressed in milliseconds, at which to raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span></span></summary>
        <value><span data-ttu-id="7d8bb-230">ミリ秒単位での <see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-230">The time, in milliseconds, between <see cref="E:System.Timers.Timer.Elapsed" /> events.</span></span> <span data-ttu-id="7d8bb-231">この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-231">The value must be greater than zero, and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span> <span data-ttu-id="7d8bb-232">既定値は 100 ミリ秒です。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-232">The default is 100 milliseconds.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d8bb-233">使用する、<xref:System.Timers.Timer.Interval%2A>を確認する頻度は、プロパティ、<xref:System.Timers.Timer.Elapsed>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-233">You use the <xref:System.Timers.Timer.Interval%2A> property to determine the frequency at which the <xref:System.Timers.Timer.Elapsed> event is fired.</span></span> <span data-ttu-id="7d8bb-234"><xref:System.Timers.Timer>クラスは、システム クロックに依存、システム クロックと同じ解像度があります。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-234">Because the <xref:System.Timers.Timer> class depends on the system clock, it has the same resolution as the system clock.</span></span> <span data-ttu-id="7d8bb-235">つまり、<xref:System.Timers.Timer.Elapsed>場合、システム時計の解像度によって定義された間隔でイベントが起動、<xref:System.Timers.Timer.Interval%2A>プロパティは、システム時計の解像度より小さい。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-235">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="7d8bb-236">次の例のセット、 <xref:System.Timers.Timer.Interval%2A> 5 ミリ秒プロパティ。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-236">The following example sets the <xref:System.Timers.Timer.Interval%2A> property to 5 milliseconds.</span></span> <span data-ttu-id="7d8bb-237">実行されると、[!INCLUDE[win7](~/includes/win7-md.md)]システム 5 ミリ秒間隔よりも約 15 ミリ秒ごと、そのシステム クロックが解像度は約 15 ミリ秒、イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-237">When run on a [!INCLUDE[win7](~/includes/win7-md.md)] system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 <span data-ttu-id="7d8bb-238">次のコードを使用すると、現在のシステムのシステム時計の解像度を判断します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-238">You can use the following code to determine the resolution of the system clock on the current system:</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 <span data-ttu-id="7d8bb-239">かどうか、アプリが必要以上の解像度によって提供されるよりも、<xref:System.Timers.Timer>クラスまたはシステム クロック、高解像度のマルチ メディア タイマーを使用して、参照してください。[メソッド: 高分解能タイマを使用する](https://msdn.microsoft.com/library/aa964692.aspx)します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-239">If your app requires greater resolution than that offered by the <xref:System.Timers.Timer> class or the system clock, use the high-resolution multimedia timers; see [How to: Use the High-Resolution Timer](https://msdn.microsoft.com/library/aa964692.aspx).</span></span>  
  
 <span data-ttu-id="7d8bb-240">後に、間隔が設定されている場合、<xref:System.Timers.Timer>が開始されると、カウントがリセットされます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-240">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="7d8bb-241">たとえば、間隔 5 秒に設定し、設定すると、<xref:System.Timers.Timer.Enabled%2A>プロパティを`true`、カウントの開始時に<xref:System.Timers.Timer.Enabled%2A>設定されています。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-241">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="7d8bb-242">10 秒のカウントがある場合、3 秒間に間隔をリセットする場合、<xref:System.Timers.Timer.Elapsed>イベントは 13 秒後に初めて<xref:System.Timers.Timer.Enabled%2A>に設定された`true`。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-242">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="7d8bb-243">場合<xref:System.Timers.Timer.Enabled%2A>に設定されている`true`と<xref:System.Timers.Timer.AutoReset%2A>に設定されている`false`、<xref:System.Timers.Timer>を発生させます、<xref:System.Timers.Timer.Elapsed>が経過すると、最初の間隔に 1 回だけです。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-243">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="7d8bb-244"><xref:System.Timers.Timer.Enabled%2A> 設定されている、`false`します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-244"><xref:System.Timers.Timer.Enabled%2A> is then set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d8bb-245">場合<xref:System.Timers.Timer.Enabled%2A>と<xref:System.Timers.Timer.AutoReset%2A>に設定されて`false`、およびタイマーが以前有効になって、設定、<xref:System.Timers.Timer.Interval%2A>プロパティ原因、<xref:System.Timers.Timer.Elapsed>イベントが 1 回発生する場合と、 <xref:System.Timers.Timer.Enabled%2A> に設定されたプロパティ`true`.</span><span class="sxs-lookup"><span data-stu-id="7d8bb-245">If <xref:System.Timers.Timer.Enabled%2A> and <xref:System.Timers.Timer.AutoReset%2A> are both set to `false`, and the timer has previously been enabled, setting the <xref:System.Timers.Timer.Interval%2A> property causes the <xref:System.Timers.Timer.Elapsed> event to be raised once, as if the <xref:System.Timers.Timer.Enabled%2A> property had been set to `true`.</span></span> <span data-ttu-id="7d8bb-246">間隔を設定すると、イベントを発生させることがなく、一時的に設定できます、<xref:System.Timers.Timer.Enabled%2A>プロパティを`true`設定、<xref:System.Timers.Timer.Interval%2A>プロパティ、目的の時間間隔をすぐに設定し、<xref:System.Timers.Timer.Enabled%2A>プロパティ`false`。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-246">To set the interval without raising the event, you can temporarily set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, set the <xref:System.Timers.Timer.Interval%2A> property to the desired time interval, and then immediately set the <xref:System.Timers.Timer.Enabled%2A> property back to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d8bb-247">次の例では、インスタンス化、<xref:System.Timers.Timer>を発生させるオブジェクト、 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 2 秒 (2000 ミリ秒) ごとのイベントがイベントのイベント ハンドラーを設定し、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-247">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="7d8bb-248">イベント ハンドラーの値を表示する、<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティが発生するたびにします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-248">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7d8bb-249">間隔が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-249">The interval is less than or equal to zero.</span></span>  
  
<span data-ttu-id="7d8bb-250">または</span><span class="sxs-lookup"><span data-stu-id="7d8bb-250">-or-</span></span> 
<span data-ttu-id="7d8bb-251">間隔が <see cref="F:System.Int32.MaxValue" /> よりも大きく、タイマーが現在有効になっています。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-251">The interval is greater than <see cref="F:System.Int32.MaxValue" />, and the timer is currently enabled.</span></span> <span data-ttu-id="7d8bb-252">(タイマーが現在有効になっていない場合は、有効になるまで例外はスローされません。)</span><span class="sxs-lookup"><span data-stu-id="7d8bb-252">(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</span></span></exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Timers.Timer.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d8bb-253">デザイン モードで <see cref="T:System.Timers.Timer" /> をコンテナーにバインドするサイトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-253">Gets or sets the site that binds the <see cref="T:System.Timers.Timer" /> to its container in design mode.</span></span></summary>
        <value><span data-ttu-id="7d8bb-254"><see cref="T:System.Timers.Timer" /> オブジェクトをコンテナーにバインドするサイトを表す <see cref="T:System.ComponentModel.ISite" /> インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-254">An <see cref="T:System.ComponentModel.ISite" /> interface representing the site that binds the <see cref="T:System.Timers.Timer" /> object to its container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d8bb-255">サイト バインドを<xref:System.ComponentModel.Component>を<xref:System.ComponentModel.Container>と、それらの間の通信を有効にするだけでなく、コンテナーは、そのコンポーネントを管理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-255">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as providing a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d8bb-256"><see cref="P:System.Timers.Timer.Enabled" /> を <see langword="true" /> に設定して、<see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生を開始します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-256">Starts raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d8bb-257">場合<xref:System.Timers.Timer.Start%2A>が呼び出されますと<xref:System.Timers.Timer.AutoReset%2A>に設定されている`false`、<xref:System.Timers.Timer>を発生させます、<xref:System.Timers.Timer.Elapsed>が経過すると、最初の間隔に 1 回だけです。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-257">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="7d8bb-258">場合<xref:System.Timers.Timer.Start%2A>が呼び出されますと<xref:System.Timers.Timer.AutoReset%2A>は`true`、<xref:System.Timers.Timer>を発生させます、<xref:System.Timers.Timer.Elapsed>イベント最初の時間間隔が経過して、指定した間隔でイベントを発生させるが続行されます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-258">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is `true`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event the first time the interval elapses and continues to raise the event on the specified interval.</span></span>  
  
 <span data-ttu-id="7d8bb-259">設定して、タイミングを開始することもできます。<xref:System.Timers.Timer.Enabled%2A>に`true`します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-259">You can also start timing by setting <xref:System.Timers.Timer.Enabled%2A> to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d8bb-260">場合<xref:System.Timers.Timer.AutoReset%2A>は`false`、<xref:System.Timers.Timer.Start%2A>カウントをもう一度開始するには、メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-260">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="7d8bb-261">呼び出し、<xref:System.Timers.Timer.Start%2A>メソッド、タイマーが有効になっているときに影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-261">A call to the <xref:System.Timers.Timer.Start%2A> method when the timer is enabled has no effect.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7d8bb-262"><see cref="T:System.Timers.Timer" /> の作成時に設定された間隔が <see cref="F:System.Int32.MaxValue" /> + 1 以上か、0 未満に設定されています。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-262">The <see cref="T:System.Timers.Timer" /> is created with an interval equal to or greater than <see cref="F:System.Int32.MaxValue" /> + 1, or set to an interval less than zero.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d8bb-263"><see cref="P:System.Timers.Timer.Enabled" /> を <see langword="false" /> に設定して、<see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生を停止します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-263">Stops raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="false" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d8bb-264">設定して、タイミングを停止することもできます。<xref:System.Timers.Timer.Enabled%2A>に`false`します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-264">You can also stop timing by setting <xref:System.Timers.Timer.Enabled%2A> to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d8bb-265">シグナルを発生させる、<xref:System.Timers.Timer.Elapsed>の実行のイベントが常にキューに、<xref:System.Threading.ThreadPool>スレッド、イベント処理メソッドが 1 つのスレッドを同時実行のための時間をへの呼び出し、<xref:System.Timers.Timer.Stop%2A>メソッドは、別のスレッドで実行します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-265">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A> method runs on another thread.</span></span> <span data-ttu-id="7d8bb-266">これで発生する可能性があります、<xref:System.Timers.Timer.Elapsed>イベントが発生した後、<xref:System.Timers.Timer.Stop%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-266">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called.</span></span> <span data-ttu-id="7d8bb-267">次のセクションのコード例では、この競合状態を回避する 1 つのメソッドを示します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-267">The code example in the next section shows one way to work around this race condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d8bb-268">次の例では、インスタンス化、`System.Timers.Timer`を発生させるオブジェクト、<xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType>イベント (2,000 ミリ秒単位)、2 秒間隔が、イベントのイベント ハンドラーを設定し、タイマーを開始します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-268">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="7d8bb-269">イベント ハンドラーの値を表示する、<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType>プロパティが発生するたびにします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-269">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span> <span data-ttu-id="7d8bb-270">ユーザーは、Enter キーを押すと、アプリケーションが呼び出す、<xref:System.Timers.Timer.Stop%2A>メソッドは、アプリケーションを終了する前にします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-270">When the user presses the Enter key, the application calls the  <xref:System.Timers.Timer.Stop%2A> method before terminating the application.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 <span data-ttu-id="7d8bb-271">次のコード例を呼び出すスレッドを防ぐために 1 つのメソッドを示しています、<xref:System.Timers.Timer.Stop%2A>メソッドまで、現在の実行を続行できなく<xref:System.Timers.Timer.Elapsed>イベント終了すると、2 つの操作を防止するためにも<xref:System.Timers.Timer.Elapsed>を同じイベント ハンドラーの実行からのイベント時間 (再入とも呼ばれます)。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-271">The following code example shows one way to prevent the thread that calls the <xref:System.Timers.Timer.Stop%2A> method from continuing until a currently executing <xref:System.Timers.Timer.Elapsed> event ends, and also to prevent two <xref:System.Timers.Timer.Elapsed> events from executing the event handler at the same time (often referred to as reentrancy).</span></span>  
  
 <span data-ttu-id="7d8bb-272">例では、100 のテストの実行を実行します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-272">The example executes 100 test runs.</span></span> <span data-ttu-id="7d8bb-273">テストを実行するたびに、タイマーが 150 ミリ秒単位の間隔で起動します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-273">Each time the test is run, the timer is started with an interval of 150 milliseconds.</span></span> <span data-ttu-id="7d8bb-274">イベント ハンドラーを使用して、 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 50 から 200 ミリ秒単位までの長さがランダムに変化するタスクをシミュレートするメソッド。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-274">The event handler uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to simulate a task that randomly varies in length from 50 to 200 milliseconds.</span></span> <span data-ttu-id="7d8bb-275">テスト メソッドでは、2 つ目を待機し、タイマーを停止し、コントロール スレッドも起動されます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-275">The test method also starts a control thread that waits for a second and then stops the timer.</span></span> <span data-ttu-id="7d8bb-276">コントロール スレッド タイマーを停止するときに、イベントが処理されている場合、コントロール スレッドは、イベントが続行する前に完了するまで待つ必要があります。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-276">If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.</span></span>  
  
 <span data-ttu-id="7d8bb-277"><xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>再入を回避して、コントロール スレッドが実行中のイベントが終了するまで続行するを防ぐために、メソッドのオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-277">The <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends.</span></span> <span data-ttu-id="7d8bb-278">イベント ハンドラーを使用して、<xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29>変数を 1、その値が 0 では現在場合にのみ、コントロールを設定するメソッド。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-278">The event handler uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set a control variable to 1, but only if the value is currently zero.</span></span> <span data-ttu-id="7d8bb-279">これは、分割不可能な操作です。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-279">This is an atomic operation.</span></span> <span data-ttu-id="7d8bb-280">戻り値が 0 の場合は、コントロール変数が 1 に設定されているし、イベント ハンドラーを実行します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-280">If the return value is zero, the control variable has been set to 1 and the event handler proceeds.</span></span> <span data-ttu-id="7d8bb-281">戻り値が 0 以外の場合は、イベントは単に再入を回避するために破棄されます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-281">If the return value is non-zero, the event is simply discarded to avoid reentrancy.</span></span> <span data-ttu-id="7d8bb-282">(すべてのイベントを実行するために必要な場合、<xref:System.Threading.Monitor>クラスは、イベントを同期するメソッドの向上になります)。イベント ハンドラーの終了時に、設定コントロール変数戻るを 0 にします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-282">(If it were necessary to execute every event, the <xref:System.Threading.Monitor> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero.</span></span> <span data-ttu-id="7d8bb-283">例が実行される、再入、ため破棄された後に発生したイベントの合計数を記録、<xref:System.Timers.Timer.Stop%2A>メソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-283">The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the <xref:System.Timers.Timer.Stop%2A> method was called.</span></span>  
  
 <span data-ttu-id="7d8bb-284">コントロールのスレッドを使用して、 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> -1 (マイナス 1 つ) を変数にその値が 0 では現在場合にのみ、コントロールを設定するメソッド。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-284">The control thread uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set the control variable to -1 (minus one), but only if the value is currently zero.</span></span> <span data-ttu-id="7d8bb-285">分割不可能な操作は、0 以外を返します、イベントが実行中です。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-285">If the atomic operation returns non-zero, an event is currently executing.</span></span> <span data-ttu-id="7d8bb-286">コントロールのスレッドは待機し、もう一度試みます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-286">The control thread waits and tries again.</span></span> <span data-ttu-id="7d8bb-287">例では、コントロールのスレッドを終了するイベントを待つ必要がある回数を記録します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-287">The example records the number of times the control thread had to wait for an event to finish.</span></span>  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Timers.Timer.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8">
          <AttributeName>System.Timers.TimersDescription("TimerSynchronizingObject")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d8bb-288">指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-288">Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</span></span></summary>
        <value><span data-ttu-id="7d8bb-289">指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを表す <see cref="T:System.ComponentModel.ISynchronizeInvoke" />。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-289">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.</span></span> <span data-ttu-id="7d8bb-290">既定値は、<see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-290">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d8bb-291">ときに<xref:System.Timers.Timer.SynchronizingObject%2A>は`null`、処理するメソッドを<xref:System.Timers.Timer.Elapsed>イベントは、システム スレッド プールのスレッドで呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-291">When <xref:System.Timers.Timer.SynchronizingObject%2A> is `null`, the method that handles the <xref:System.Timers.Timer.Elapsed> event is called on a thread from the system-thread pool.</span></span> <span data-ttu-id="7d8bb-292">システム スレッド プールの詳細については、次を参照してください。<xref:System.Threading.ThreadPool>します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-292">For more information on system-thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="7d8bb-293">ときに、<xref:System.Timers.Timer.Elapsed>可能性がありますか、例外の結果が機能しないシステム スレッド プールを介したコンポーネントにアクセスする、ボタンなど、ビジュアルの Windows フォーム コンポーネントによってイベントが処理されます。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-293">When the <xref:System.Timers.Timer.Elapsed> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.</span></span> <span data-ttu-id="7d8bb-294">この効果を設定して回避<xref:System.Timers.Timer.SynchronizingObject%2A>これにより、Windows フォームのコンポーネントを処理するメソッドを<xref:System.Timers.Timer.Elapsed>コンポーネントが作成されている同じスレッドで呼び出されるイベントをします。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-294">Avoid this effect by setting <xref:System.Timers.Timer.SynchronizingObject%2A> to a Windows Forms component, which causes the method that handles the <xref:System.Timers.Timer.Elapsed> event to be called on the same thread that the component was created on.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d8bb-295">場合でも、<xref:System.Timers.Timer.SynchronizingObject%2A>プロパティは`null`、<xref:System.Timers.Timer.Elapsed>後にイベントを発生させる、<xref:System.Timers.Timer.Dispose%2A>または<xref:System.Timers.Timer.Stop%2A>メソッドが呼び出された後または、<xref:System.Timers.Timer.Enabled%2A>プロパティに設定されている`false`のため、シグナルを発生させる<xref:System.Timers.Timer.Elapsed>イベントは常にスレッド プールのスレッドで実行をキューに配置します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-295">Even if the <xref:System.Timers.Timer.SynchronizingObject%2A> property is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="7d8bb-296">この競合状態がのイベント ハンドラーを示すフラグを設定するには解決するのには 1 つのメソッド、<xref:System.Timers.Timer.Elapsed>後続のイベントを無視するイベントです。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-296">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="7d8bb-297">場合、<xref:System.Timers.Timer>は Visual Studio 内で、Windows フォーム デザイナーで使用<xref:System.Timers.Timer.SynchronizingObject%2A>を含むコントロールを自動的に設定されますが、<xref:System.Timers.Timer>します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-297">If the <xref:System.Timers.Timer> is used inside Visual Studio in a Windows Forms designer, <xref:System.Timers.Timer.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Timers.Timer>.</span></span> <span data-ttu-id="7d8bb-298">配置する場合など、<xref:System.Timers.Timer>のデザイナーで`Form1`(から継承される<xref:System.Windows.Forms.Form>)、<xref:System.Timers.Timer.SynchronizingObject%2A>プロパティの<xref:System.Timers.Timer>のインスタンスに設定されている`Form1`します。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-298">For example, if you place a <xref:System.Timers.Timer> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>), the <xref:System.Timers.Timer.SynchronizingObject%2A> property of <xref:System.Timers.Timer> is set to the instance of `Form1`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d8bb-299">次の例では、非常に単純なテキスト ファイルのエディターとして機能する Windows フォーム アプリです。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-299">The following example is a Windows Forms app that serves as a very simple text file editor.</span></span> <span data-ttu-id="7d8bb-300">テキスト ボックス内のテキストが保存されていないときに、アプリをユーザーに確認 1 分間隔でそのユーザーがテキスト ボックスの内容を保存するかどうか。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-300">When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.</span></span>  <span data-ttu-id="7d8bb-301">これを行う、 <xref:System.Timers.Timer.Interval%2A> 1 分間 (60,000 ミリ秒) に設定されて、<xref:System.Timers.Timer.SynchronizingObject%2A>プロパティに設定されて、<xref:System.Windows.Forms.Form>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-301">To do this, the <xref:System.Timers.Timer.Interval%2A> property is set to one minute (60,000 milliseconds), and the <xref:System.Timers.Timer.SynchronizingObject%2A> property is set to the <xref:System.Windows.Forms.Form> object.</span></span>  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 <span data-ttu-id="7d8bb-302">例では、次のコントロールをフォームに追加することが必要です。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-302">The example requires that you add the following controls to the form:</span></span>  
  
-   <span data-ttu-id="7d8bb-303">A<xref:System.Windows.Forms.TextBox>という名前のコントロール`TextBox1`(既定の名前)。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-303">A <xref:System.Windows.Forms.TextBox> control named `TextBox1` (its default name).</span></span>  
  
-   <span data-ttu-id="7d8bb-304">A<xref:System.Windows.Forms.Button>という名前のコントロール`Button1`(既定の名前)。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-304">A <xref:System.Windows.Forms.Button> control named `Button1` (its default name).</span></span>  
  
-   <span data-ttu-id="7d8bb-305">A<xref:System.Windows.Forms.SaveFileDialog>という名前のコントロール`SaveSaveFileDialog1`(既定の名前)。</span><span class="sxs-lookup"><span data-stu-id="7d8bb-305">A <xref:System.Windows.Forms.SaveFileDialog> control named `SaveSaveFileDialog1` (its default name) .</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>