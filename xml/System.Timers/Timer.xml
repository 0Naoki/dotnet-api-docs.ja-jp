<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Timer.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5618b69c9a4d91151391fe5e2c79054e0441f4aec.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">618b69c9a4d91151391fe5e2c79054e0441f4aec</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Timers.Timer">
          <source>Generates an event after a set interval, with an option to generate recurring events.</source>
          <target state="translated">一定の間隔の経過後にイベントを生成します。オプションとして、反復イベントを生成することもできます。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> component is a server-based timer that raises an <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event in your application after the number of milliseconds in the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property has elapsed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>コンポーネントは、サーバー ベースのタイマーを発生させる、<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>のミリ秒数の後に、アプリケーション内のイベント、<ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>プロパティが経過しました。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You can configure the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object to raise the event just once or repeatedly using the <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> property.</source>
          <target state="translated">構成することができます、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>を使用して 1 回だけまたは繰り返しイベントを発生させるオブジェクト、<ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Typically, a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object is declared at the class level so that it stays in scope as long as it is needed.</source>
          <target state="translated">通常、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>が必要な限り、スコープ内に保持されるように、クラス レベルのオブジェクトが宣言されています。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You can then handle its <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to provide regular processing.</source>
          <target state="translated">処理することができますし、その<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>通常の処理を提供するイベントです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</source>
          <target state="translated">たとえば、する必要がある重要なサーバーがある場合 24 時間、日、週 7 日間を実行します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You could create a service that uses a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object to periodically check the server and ensure that the system is up and running.</source>
          <target state="translated">使用するサービスを作成、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>オブジェクトを定期的にサーバーを確認し、システムが稼働していることを確認してください。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If the system is not responding, the service could attempt to restart the server or notify an administrator.</source>
          <target state="translated">システムが応答していない場合、サービスでしたしようと、サーバーを再起動するか、管理者に通知します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> class is not available for all .NET implementations and versions, such as .NET Standard 1.6 and lower versions.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>クラスはすべての .NET の実装と .NET 標準 1.6 および下位のバージョンなどのバージョンで使用可能ではありません。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>In these cases, you can use the <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> class instead.</source>
          <target state="translated">このような場合は、使用することができます、<ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph>クラスの代わりにします。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">この型は、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">型を使用してが完了したらを直接的または間接的にその破棄する必要があります。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">型の直接 dispose を呼び出す、<ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph>メソッドで、 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph>ブロックします。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">直接ことのない破棄する場合など、言語コンストラクトを使用して<ph id="ph1">`using`</ph>(C# の場合) または<ph id="ph2">`Using`</ph>(Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">詳細についてを参照してください"を使用して、オブジェクトを実装する IDisposable"、<ph id="ph1">&lt;xref:System.IDisposable&gt;</ph>インターフェイスに関するトピック。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The server-based <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class is designed for use with worker threads in a multithreaded environment.</source>
          <target state="translated">サーバー ベース<ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>クラスがマルチ スレッド環境でのワーカー スレッドで使用するために設計されています。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Server timers can move among threads to handle the raised <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event, resulting in more accuracy than Windows timers in raising the event on time.</source>
          <target state="translated">サーバーのタイマーは、発生したを処理するスレッド間で移動できます<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>時間でイベントの発生時にウィンドウ タイマーは結果として得られるイベント。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> component raises the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event, based on the value (in milliseconds) of the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>コンポーネントを生成、 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> (ミリ秒) の値に基づく、イベント、<ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You can handle this event to perform the processing you need.</source>
          <target state="translated">必要がある処理を実行するには、このイベントを処理することができます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For example, suppose that you have an online sales application that continuously posts sales orders to a database.</source>
          <target state="translated">たとえば、継続的にデータベースへの販売注文を投稿するオンライン販売アプリケーションがあるとします。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.</source>
          <target state="translated">出荷の指示をコンパイルするサービスは、各注文を個別に処理するのではなく、注文のバッチで動作します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You could use a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> to start the batch processing every 30 minutes.</source>
          <target state="translated">使用する可能性があります、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>バッチ 30 分ごとの処理を開始します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The System.Timers.Timer class has the same resolution as the system clock.</source>
          <target state="translated">System.Timers.Timer クラスには、システム時計と同じ解像度があります。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This means that the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event will fire at an interval defined by the resolution of the system clock if the <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property is less than the resolution of the system clock.</source>
          <target state="translated">つまり、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>場合、システム クロックの解像度によって定義された間隔でイベントは起動、<ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>プロパティは、システム時計の解像度より小さい。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property.</source>
          <target state="translated">詳細については、<ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> プロパティを参照してください。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>When <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph2">`false`</ph>, a <ph id="ph3">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> object raises the <ph id="ph4">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, after the first <ph id="ph5">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> has elapsed.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>に設定されている<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>オブジェクト、<ph id="ph4">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>イベントは 1 回のみ、最初より後<ph id="ph5">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>が経過しました。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>To keep raising the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event regularly at the interval defined by the <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, set <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> to <ph id="ph4">`true`</ph>, which is the default value.</source>
          <target state="translated">させると保持する、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>によって定義された間隔で定期的にイベント、<ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>設定、<ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>に<ph id="ph4">`true`</ph>、これは、既定値です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> component catches and suppresses all exceptions thrown by event handlers for the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>コンポーネントをキャッチし、において、イベント ハンドラーによってスローされる例外すべてを非表示、<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This behavior is subject to change in future releases of the .NET Framework.</source>
          <target state="translated">この動作は、.NET Framework の将来のリリースで変更されます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Note, however, that this is not true of event handlers that execute asynchronously and include the <ph id="ph1">`await`</ph> operator (in C#)  or the <ph id="ph2">`Await`</ph> operator (in Visual Basic).</source>
          <target state="translated">ただし、非同期的に実行してが含まれているイベント ハンドラーの場合は true ではないこと、<ph id="ph1">`await`</ph>演算子 (c#) または<ph id="ph2">`Await`</ph>演算子 (Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.</source>
          <target state="translated">これらのイベント ハンドラーでスローされた例外は、次の例に示すように、呼び出し元のスレッドに反映されます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For more information on exceptions thrown in asynchronous methods, see   <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">非同期メソッドでスローされた例外の詳細については、次を参照してください。<bpt id="p1">[</bpt>例外処理<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised on a <ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>プロパティは<ph id="ph2">`null`</ph>、<ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>にイベントが発生、<ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph>スレッドです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If processing of the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event lasts longer than <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, the event might be raised again on another <ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">処理の場合、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>よりも長いイベント存続<ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>、別のイベントを再度発生させる可能性があります<ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph>スレッドです。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>In this situation, the event handler should be reentrant.</source>
          <target state="translated">このような状況で、イベント ハンドラーは再入可能にする必要があります。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The event-handling method might run on one thread at the same time that another thread calls the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method or sets the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">イベント処理メソッドが 1 つのスレッド別のスレッドが同時に実行される、<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>メソッドまたはセット、<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>プロパティを<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the timer is stopped.</source>
          <target state="translated">これは、場合、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>タイマーを停止した後に発生するイベントです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The example code for the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method shows one way to avoid this race condition.</source>
          <target state="translated">コードの使用例、<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>メソッドは、この競合状態を回避する方法を示しています。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Even if <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is not <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events can occur after the <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method has been called or after the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property has been set to <ph id="ph7">`false`</ph>, because the signal to raise the <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a thread pool thread.</source>
          <target state="translated">場合でも<ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>は<ph id="ph2">`null`</ph>、<ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>後にイベントが発生する可能性が、<ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph>または<ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>メソッドが呼び出されたか、後、<ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>プロパティに設定されて<ph id="ph7">`false`</ph>ため、シグナルを発生させる、<ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>スレッド プールのスレッド上で実行するイベントが常にキューに置かれました。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to ignore subsequent events.</source>
          <target state="translated">イベント ハンドラーを示すフラグを設定するは、この競合状態を解決するのには 1 つの方法、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>を後続のイベントを無視するイベントです。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If you use the <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph> to the <ph id="ph3">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property, so that the event is marshaled to the user interface thread.</source>
          <target state="translated">使用する場合、<ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>フォームやコントロールが含まれているフォームやそのユーザー インターフェイス要素に、タイマーをかけることがなく、コントロールなどのユーザー インターフェイス要素を持つクラスが割り当てる、<ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph>を<ph id="ph3">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>プロパティ、イベントは、ユーザー インターフェイス スレッドにマーシャ リングできるようにします。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For a list of default property values for an instance of <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>, see the <ph id="ph2">&lt;xref:System.Timers.Timer.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">インスタンスの既定のプロパティ値の一覧については<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>を参照してください、<ph id="ph2">&lt;xref:System.Timers.Timer.%23ctor%2A&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Be aware that .NET includes four classes named <ph id="ph1">`Timer`</ph>, each of which offers different functionality:</source>
          <target state="translated">.NET がという 4 つのクラスが含まれることに注意してください<ph id="ph1">`Timer`</ph>、それぞれの異なる機能を提供します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> (this topic): fires an event at regular intervals.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> (このトピック): 一定の間隔でイベントを発生させます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</source>
          <target state="translated">クラスは、サーバー ベースとして使用するか、マルチ スレッド環境でのサービス コンポーネントユーザー インターフェイスを持たないし、実行時に表示されていません。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph>: executes a single callback method on a thread pool thread at regular intervals.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph>: 一定の間隔でスレッド プールのスレッドで単一のコールバック メソッドを実行します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The callback method is defined when the timer is instantiated and cannot be changed.</source>
          <target state="translated">コールバック メソッドは、タイマーがインスタンス化され、変更できないときに定義されます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Like the <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</source>
          <target state="translated">同様に、<ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph>クラス、マルチ スレッド環境でのサーバー ベースまたはサービスのコンポーネントとして使用するこのクラスが目的としています。 これは、ユーザー インターフェイスを持たないは実行時に表示されません。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Timer?displayProperty=nameWithType&gt;</ph> (.NET Framework only): a Windows Forms component that fires an event at regular intervals.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Timer?displayProperty=nameWithType&gt;</ph> (.NET framework の場合のみ): イベントを発生させる、一定の間隔で Windows フォームのコンポーネントです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The component has no user interface and is designed for use in a single-threaded environment.</source>
          <target state="translated">コンポーネントは、ユーザー インターフェイスを持たないされ、シングル スレッド環境での使用に適しています。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Web.UI.Timer?displayProperty=nameWithType&gt;</ph> (.NET Framework only): an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.Timer?displayProperty=nameWithType&gt;</ph> (.NET framework の場合のみ): 定期的な間隔で非同期または同期の web ページのポストバックを実行するための ASP.NET コンポーネント。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The following example instantiates a <ph id="ph1">`System.Timers.Timer`</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</source>
          <target state="translated">次の例のインスタンスを作成、<ph id="ph1">`System.Timers.Timer`</ph>を発生させるオブジェクト、<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph>イベント (2,000 ミリ秒単位)、2 秒ごと、イベントのイベント ハンドラーを設定し、タイマーを開始します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">イベント ハンドラーの値を表示する、<ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph>プロパティが発生するたびにします。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Any public <ph id="ph1">&lt;see langword="static" /&gt;</ph> members of this type are thread safe.</source>
          <target state="translated">すべてのパブリック<ph id="ph1">&lt;see langword="static" /&gt;</ph>この型のメンバーは、スレッド セーフであります。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="T:System.Timers.Timer">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> class, and sets all the properties to their initial values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> クラスの新しいインスタンスを初期化し、すべてのプロパティを初期値に設定します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>The following table shows initial property values for an instance of <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>.</source>
          <target state="translated">次の表は、のインスタンスの初期プロパティ値を示しています。<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>Property</source>
          <target state="translated">プロパティ</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>Initial value</source>
          <target state="translated">初期値</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>100 milliseconds</source>
          <target state="translated">100 ミリ秒</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">null 参照 (Visual Basic の場合は <ph id="ph1">`Nothing`</ph>)。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">次の例のインスタンスを作成、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>を発生させるオブジェクト、<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph>イベントすべて 2 秒 (2000 ミリ秒) が、イベントのイベント ハンドラーを設定し、タイマーを開始します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">イベント ハンドラーの値を表示する、<ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph>プロパティが発生するたびにします。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The time, in milliseconds, between events.</source>
          <target state="translated">ミリ秒単位でのイベントの発生間隔。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The value must be greater than zero and less than or equal to <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">この値はゼロより大きく、<ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 以下である必要があります。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> class, and sets the <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> property to the specified number of milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> クラスの新しいインスタンスを初期化し、<ph id="ph2">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> プロパティを指定したミリ秒数に設定します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>This constructor sets the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property of the new timer instance, but does not enable the timer.</source>
          <target state="translated">このコンス トラクターを設定、<ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>タイマーの新しいインスタンスのプロパティが、タイマーを有効にしません。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">次の例のインスタンスを作成、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>を発生させるオブジェクト、<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph>イベントすべて 2 秒 (2000 ミリ秒) が、イベントのイベント ハンドラーを設定し、タイマーを開始します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">イベント ハンドラーの値を表示する、<ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph>プロパティが発生するたびにします。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The value of the <ph id="ph1">&lt;paramref name="interval" /&gt;</ph> parameter is less than or equal to zero, or greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="interval" /&gt;</ph> パラメーターの値は 0 以下か、または <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> を超えています。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.AutoReset">
          <source>Gets or sets a Boolean indicating whether the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event only once (<ph id="ph3">&lt;see langword="false" /&gt;</ph>) or repeatedly (<ph id="ph4">&lt;see langword="true" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> が <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> イベントを一度のみ発生させる (<ph id="ph3">&lt;see langword="false" /&gt;</ph>) か、または繰り返し発生させる (<ph id="ph4">&lt;see langword="true" /&gt;</ph>) かを示すブール値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event each time the interval elapses; <ph id="ph4">&lt;see langword="false" /&gt;</ph> if it should raise the <ph id="ph5">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event only once, after the first time the interval elapses.</source>
          <target state="translated">指定した間隔が経過するたびに <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> で <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> イベントを発生させる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。最初の間隔が経過した後に 1 回だけ <ph id="ph4">&lt;see langword="false" /&gt;</ph> イベントを発生させる場合は <ph id="ph5">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="true" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> is already enabled when the <ph id="ph2">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method is called, the interval is reset.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>は既に有効になっている場合、<ph id="ph2">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>メソッドが呼び出されると、間隔をリセットします。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method must be called in order to start the count again.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>は<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>カウントをもう一度開始するためにメソッドを呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>Resetting the interval affects when the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised.</source>
          <target state="translated">間隔のリセットに影響を与える場合に、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>For example, if you set the interval to 5 seconds and then set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">たとえば、5 秒間に間隔を設定し、設定すると、<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>プロパティを<ph id="ph2">`true`</ph>、カウントの開始時に<ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>設定されています。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>If you reset the interval to 10 seconds when the count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">カウントが 3 秒の場合、10 秒間隔をリセットする場合、 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 13 秒後に初めてイベントは、<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>プロパティに設定されました<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> whose <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event fires after 1.5 seconds.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>が<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>1.5 秒後にイベントが発生します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>Its event handler then displays "Hello World!"</source>
          <target state="translated">対応するイベント ハンドラーは、"Hello World!"しが表示されます。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>on the console.</source>
          <target state="translated">コンソールです。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.BeginInit">
          <source>Begins the run-time initialization of a <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> that is used on a form or by another component.</source>
          <target state="translated">フォームまたは別のコンポーネントで使用する <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> の実行時の初期化を開始します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.BeginInit">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to start the initialization of a component that is used on a form or by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントに使用されるコンポーネントの初期化を開始します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.BeginInit">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> method ends the initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph>メソッドが初期化を終了します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.BeginInit">
          <source>Using the <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph>メソッド使用されないように、コントロールが完全に初期化される前にします。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Close">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> で使用したリソースを解放します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Close">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.Close%2A&gt;</ph> method in turn calls the <ph id="ph2">`Dispose`</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.Close%2A&gt;</ph>メソッドを呼び出して、<ph id="ph2">`Dispose`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">マネージ リソースとアンマネージ リソースの両方を解放する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。アンマネージ リソースだけを解放する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Dispose(System.Boolean)">
          <source>Releases all resources used by the current <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> によって使用されているすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="E:System.Timers.Timer.Elapsed">
          <source>Occurs when the interval elapses.</source>
          <target state="translated">間隔が経過すると発生します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised if the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property is <ph id="ph3">`true`</ph> and the time interval (in milliseconds) defined by the <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property elapses.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>イベントは、<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>プロパティは<ph id="ph3">`true`</ph>と、時間間隔 (ミリ秒単位) によって定義された、<ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>プロパティが経過するとします。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the event is raised repeatedly at an interval defined by the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property; otherwise, the event is raised only once, the first time the <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> value elapses.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>プロパティは<ph id="ph2">`true`</ph>、によって定義された間隔でイベントが繰り返し発生する、<ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>プロパティです。 それ以外の場合、このイベントは最初に 1 回だけ、<ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>が経過するまでの値。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> is set after the <ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph> has started, the count is reset.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>後に設定されている、<ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph>が開始されると、カウントがリセットされます。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>For example, if you set the interval to 5 seconds and then set <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">たとえば、5 秒間に間隔を設定し、設定すると<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>に<ph id="ph2">`true`</ph>、カウントの開始時に<ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>設定されています。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">カウントが 3 秒の場合、10 秒間隔をリセットする場合、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>を初めて 13 秒後にイベントを発生<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>に設定された<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is <ph id="ph2">`null`</ph>,the <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised on a <ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>プロパティは<ph id="ph2">`null`</ph>、<ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>にイベントが発生、<ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph>スレッドです。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If the processing of the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event lasts longer than <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, the event might be raised again on another <ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">場合の処理、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>よりも長いイベント存続<ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>、別のイベントを再度発生させる可能性があります<ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph>スレッドです。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>In this situation, the event handler should be reentrant.</source>
          <target state="translated">このような状況で、イベント ハンドラーは再入可能にする必要があります。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The event-handling method might run on one thread at the same time that another thread calls the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method or sets the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">イベント処理メソッドが 1 つのスレッド別のスレッドが同時に実行される、<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>メソッドまたはセット、<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>プロパティを<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the timer is stopped.</source>
          <target state="translated">これは、場合、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>タイマーを停止した後に発生するイベントです。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The example code for the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method shows one way to avoid this race condition.</source>
          <target state="translated">コードの使用例、<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>メソッドは、この競合状態を回避する方法を示しています。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>Even if <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is not <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events can occur after the <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method has been called or after the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property has been set to <ph id="ph7">`false`</ph>, because the signal to raise the <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a thread pool thread.</source>
          <target state="translated">場合でも<ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>は<ph id="ph2">`null`</ph>、<ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>後にイベントが発生する可能性が、<ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph>または<ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>メソッドが呼び出されたか、後、<ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>プロパティに設定されて<ph id="ph7">`false`</ph>ため、シグナルを発生させる、<ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>スレッド プールのスレッド上で実行するイベントが常にキューに置かれました。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to ignore subsequent events.</source>
          <target state="translated">イベント ハンドラーを示すフラグを設定するは、この競合状態を解決するのには 1 つの方法、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>を後続のイベントを無視するイベントです。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> component catches and suppresses all exceptions thrown by event handlers for the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>コンポーネントをキャッチし、において、イベント ハンドラーによってスローされる例外すべてを非表示、<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>This behavior is subject to change in future releases of the .NET Framework.</source>
          <target state="translated">この動作は、.NET Framework の将来のリリースで変更されます。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">次の例のインスタンスを作成、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>を発生させるオブジェクト、<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph>イベントすべて 2 秒 (2000 ミリ秒) が、イベントのイベント ハンドラーを設定し、タイマーを開始します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">イベント ハンドラーの値を表示する、<ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph>プロパティが発生するたびにします。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Enabled">
          <source>Gets or sets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> で <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> イベントを発生させる必要があるかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> で <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> イベントを発生させる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>Setting <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`true`</ph> is the same as calling <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>, while setting <ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph5">`false`</ph> is the same as calling <ph id="ph6">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>に<ph id="ph2">`true`</ph>は呼び出すことと同じ<ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>、設定中に<ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>に<ph id="ph5">`false`</ph>は呼び出すことと同じ<ph id="ph6">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The signal to raise the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">シグナルを発生させる、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>イベントは、常に実行するためキューに置かれた、<ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph>スレッドです。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property is set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">これがあります、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>後に発生するイベント、<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>プロパティに設定されている<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The code example for the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method shows one way to work around this race condition.</source>
          <target state="translated">コード例、<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>メソッドは、この競合状態を回避する方法を示しています。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set to <ph id="ph2">`true`</ph> and <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph4">`false`</ph>, the <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, the first time the interval elapses.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>に設定されている<ph id="ph2">`true`</ph>と<ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>に設定されている<ph id="ph4">`false`</ph>、<ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph>を発生させます、<ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>最初の時間間隔に 1 回だけが経過しました。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>If the interval is set after the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> has started, the count is reset.</source>
          <target state="translated">後に、間隔が設定されている場合、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>が開始されると、カウントがリセットされます。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>For example, if you set the interval to 5 seconds and then set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">たとえば、5 秒間に間隔を設定し、設定すると、<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>プロパティを<ph id="ph2">`true`</ph>、カウントの開始時に<ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>設定されています。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">カウントが 3 秒の場合、10 秒間隔をリセットする場合、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>を初めて 13 秒後にイベントを発生<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>に設定された<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>Some visual designers, such as those in Microsoft Visual Studio, set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph> when inserting a new <ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>.</source>
          <target state="translated">Microsoft Visual Studio などのいくつかのビジュアル デザイナーの設定、<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>プロパティを<ph id="ph2">`true`</ph>新しいを挿入するときに<ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer.</source>
          <target state="translated">次の例のインスタンスを作成、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>を発生させるオブジェクト、<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph>イベントすべて 2 秒 (2000 ミリ秒) が、イベントのイベント ハンドラーを設定し、タイマーを開始します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">イベント ハンドラーの値を表示する、<ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph>プロパティが発生するたびにします。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Enabled">
          <source>This property cannot be set because the timer has been disposed.</source>
          <target state="translated">タイマーが破棄されたため、このプロパティは設定できません。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Enabled">
          <source>The <ph id="ph1">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> property was set to a value greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> before the timer was enabled.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> プロパティは、タイマーが有効になる前に <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> より大きい値に設定されました。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.EndInit">
          <source>Ends the run-time initialization of a <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> that is used on a form or by another component.</source>
          <target state="translated">フォームまたは別のコンポーネントで使用する <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> の実行時の初期化を終了します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.EndInit">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to end the initialization of a component that is used on a form or by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph>デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントに使用されるコンポーネントの初期化を終了します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.EndInit">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> method starts the initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph>メソッドは、初期化を開始します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.EndInit">
          <source>Using the <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph>メソッド使用されないように、コントロールが完全に初期化される前にします。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>Gets or sets the interval, expressed in milliseconds, at which to raise the <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> イベントの発生間隔を取得または設定します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The time, in milliseconds, between <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> events.</source>
          <target state="translated">ミリ秒単位での <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> イベントの発生間隔。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The value must be greater than zero, and less than or equal to <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">この値はゼロより大きく、<ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 以下である必要があります。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The default is 100 milliseconds.</source>
          <target state="translated">既定値は 100 ミリ秒です。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>You use the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property to determine the frequency at which the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is fired.</source>
          <target state="translated">使用する、<ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>する頻度を決定するプロパティ、<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>Because the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> class depends on the system clock, it has the same resolution as the system clock.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>クラスは、システム クロックに依存して、システム時計と同じ解像度があります。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>This means that the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event will fire at an interval defined by the resolution of the system clock if the <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property is less than the resolution of the system clock.</source>
          <target state="translated">つまり、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>場合、システム クロックの解像度によって定義された間隔でイベントは起動、<ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>プロパティは、システム時計の解像度より小さい。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The following example sets the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property to 5 milliseconds.</source>
          <target state="translated">次の例のセット、<ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>プロパティ 5 ミリ秒単位までです。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>When run on a <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.</source>
          <target state="translated">実行すると、 <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> 5 ミリ秒間隔ではなく、約 15 ミリ秒ごとのシステム クロックが、イベントの起動、約 15 ミリ秒単位の解像度を持つシステムです。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>You can use the following code to determine the resolution of the system clock on the current system:</source>
          <target state="translated">次のコードを使用すると、現在のシステムのシステム時計の解像度を決定します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If your app requires greater resolution than that offered by the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> class or the system clock, use the high-resolution multimedia timers; see <bpt id="p1">[</bpt>How to: Use the High-Resolution Timer<ept id="p1">](http://msdn.microsoft.com/library/aa964692.aspx)</ept>.</source>
          <target state="translated">によって提供されるものより高い解像度が、アプリに必要なかどうか、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>クラスまたは参照; 高解像度のマルチ メディア タイマーを使用して、システム クロック<bpt id="p1">[</bpt>する方法: 高分解能タイマーを使用して<ept id="p1">](http://msdn.microsoft.com/library/aa964692.aspx)</ept>です。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If the interval is set after the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> has started, the count is reset.</source>
          <target state="translated">後に、間隔が設定されている場合、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>が開始されると、カウントがリセットされます。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>For example, if you set the interval to 5 seconds and then set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">たとえば、5 秒間に間隔を設定し、設定すると、<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>プロパティを<ph id="ph2">`true`</ph>、カウントの開始時に<ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>設定されています。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">カウントが 3 秒の場合、10 秒間隔をリセットする場合、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>を初めて 13 秒後にイベントを発生<ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>に設定された<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set to <ph id="ph2">`true`</ph> and <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph4">`false`</ph>, the <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, the first time the interval elapses.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>に設定されている<ph id="ph2">`true`</ph>と<ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>に設定されている<ph id="ph4">`false`</ph>、<ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph>を発生させます、<ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>最初の時間間隔に 1 回だけが経過しました。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source><ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is then set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 設定されているし、<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> are both set to <ph id="ph3">`false`</ph>, and the timer has previously been enabled, setting the <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property causes the <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to be raised once, as if the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property had been set to <ph id="ph7">`true`</ph>.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>に設定されて<ph id="ph3">`false`</ph>と、タイマーが以前有効になって、設定、<ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>プロパティ原因、<ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>イベントが 1 回発生するよう、<ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>に設定されたプロパティ<ph id="ph7">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>To set the interval without raising the event, you can temporarily set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, set the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property to the desired time interval, and then immediately set the <ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property back to <ph id="ph5">`false`</ph>.</source>
          <target state="translated">間隔を設定する、イベントを発生させることがなく、一時的に設定できます、<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>プロパティを<ph id="ph2">`true`</ph>、設定、<ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>プロパティを希望する時間間隔にし、すぐに設定、<ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>プロパティ<ph id="ph5">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">次の例のインスタンスを作成、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>を発生させるオブジェクト、<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph>イベントすべて 2 秒 (2000 ミリ秒) が、イベントのイベント ハンドラーを設定し、タイマーを開始します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">イベント ハンドラーの値を表示する、<ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph>プロパティが発生するたびにします。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>The interval is less than or equal to zero.</source>
          <target state="translated">間隔が 0 以下です。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>The interval is greater than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>, and the timer is currently enabled.</source>
          <target state="translated">間隔が <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> よりも大きく、タイマーが現在有効になっています。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</source>
          <target state="translated">(タイマーが現在有効になっていない場合は、有効になるまで例外はスローされません。)</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Site">
          <source>Gets or sets the site that binds the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> to its container in design mode.</source>
          <target state="translated">デザイン モードで <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> をコンテナーにバインドするサイトを取得または設定します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Site">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> interface representing the site that binds the <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> object to its container.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> オブジェクトをコンテナーにバインドするサイトを表す <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> インターフェイス。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Site">
          <source>Sites bind a <ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph> to a <ph id="ph2">&lt;xref:System.ComponentModel.Container&gt;</ph> and enable communication between them, as well as providing a way for the container to manage its components.</source>
          <target state="translated">サイトのバインド、<ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph>を<ph id="ph2">&lt;xref:System.ComponentModel.Container&gt;</ph>とそれらの間で通信を有効にするだけでなく、コンテナーがコンポーネントを管理するための方法を提供します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Start">
          <source>Starts raising the <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event by setting <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph> to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph> を <ph id="ph3">&lt;see langword="true" /&gt;</ph> に設定して、<ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> イベントの発生を開始します。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> is called and <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph3">`false`</ph>, the <ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, the first time the interval elapses.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>が呼び出されたと<ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>に設定されている<ph id="ph3">`false`</ph>、<ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph>を発生させます、<ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>最初の時間間隔に 1 回だけが経過しました。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> is called and <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is <ph id="ph3">`true`</ph>, the <ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event the first time the interval elapses and continues to raise the event on the specified interval.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>が呼び出されたと<ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>は<ph id="ph3">`true`</ph>、<ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph>を発生させます、<ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>イベント最初の時間間隔が経過して、指定した間隔でイベントが発生し続けます。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>You can also start timing by setting <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">設定して、タイミングを開始することもできます。<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>に<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method must be called in order to start the count again.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph>は<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>カウントをもう一度開始するためにメソッドを呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>A call to the <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method when the timer is enabled has no effect.</source>
          <target state="translated">呼び出し、<ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>メソッド、タイマーが有効になっているときに影響を与えません。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Start">
          <source>The <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> is created with an interval equal to or greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> + 1, or set to an interval less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> の作成時に設定された間隔が <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> + 1 以上か、0 未満に設定されています。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Stop">
          <source>Stops raising the <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event by setting <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph> to <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph> を <ph id="ph3">&lt;see langword="false" /&gt;</ph> に設定して、<ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> イベントの発生を停止します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>You can also stop timing by setting <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">設定して、タイミングを停止することもできます。<ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>に<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The signal to raise the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread, so the event-handling method might run on one thread at the same time that a call to the <ph id="ph3">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method runs on another thread.</source>
          <target state="translated">シグナルを発生させる、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>イベントは、常に実行するためキューに置かれた、<ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph>スレッド、ため、同時に 1 つのスレッドが実行されるイベント処理メソッドにへの呼び出し、<ph id="ph3">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>メソッドの別のスレッドで実行します。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the <ph id="ph2">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method is called.</source>
          <target state="translated">これは、結果、な<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>後に発生するイベント、<ph id="ph2">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The code example in the next section shows one way to work around this race condition.</source>
          <target state="translated">次のセクションのコード例では、この競合状態を回避する 1 つの方法を示します。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The following example instantiates a <ph id="ph1">`System.Timers.Timer`</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</source>
          <target state="translated">次の例のインスタンスを作成、<ph id="ph1">`System.Timers.Timer`</ph>を発生させるオブジェクト、<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph>イベント (2,000 ミリ秒単位)、2 秒ごと、イベントのイベント ハンドラーを設定し、タイマーを開始します。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">イベント ハンドラーの値を表示する、<ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph>プロパティが発生するたびにします。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>When the user presses the Enter key, the application calls the  <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method before terminating the application.</source>
          <target state="translated">ユーザーは、Enter キーを押すと、アプリケーションを呼び出す、<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>アプリケーションを終了する前にメソッドです。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The following code example shows one way to prevent the thread that calls the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method from continuing until a currently executing <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event ends, and also to prevent two <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events from executing the event handler at the same time (often referred to as reentrancy).</source>
          <target state="translated">次のコード例を呼び出すスレッドを防ぐために 1 つの方法を示しています、<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>まで現在の実行を続行できなくメソッド<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>イベントの終了時刻、および 2 つを防ぐためにも<ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>が同じイベント ハンドラーの実行からのイベント時間 (再入とも呼ばれます)。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The example executes 100 test runs.</source>
          <target state="translated">この例では、100 のテストの実行を実行します。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>Each time the test is run, the timer is started with an interval of 150 milliseconds.</source>
          <target state="translated">テストを実行するたびに、タイマーが 150 のミリ秒単位の間隔で開始されます。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The event handler uses the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method to simulate a task that randomly varies in length from 50 to 200 milliseconds.</source>
          <target state="translated">イベント ハンドラーを使用して、 <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> 50 から 200 ミリ秒単位までの長さがランダムに変化するタスクをシミュレートするメソッド。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The test method also starts a control thread that waits for a second and then stops the timer.</source>
          <target state="translated">テスト メソッドでは、コントロールをスレッドを 1 秒待機し、タイマーを停止しますも起動されます。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.</source>
          <target state="translated">コントロール スレッド タイマーを停止するときに、イベントが処理されている場合、コントロールのスレッドは続行する前に、イベントが終了するまで待つ必要があります。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph>メソッドのオーバー ロードを使用して再入を回避し、コントロールのスレッドが実行中のイベントが終了するまでの操作を続行するを防ぐためです。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The event handler uses the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method to set a control variable to 1, but only if the value is currently zero.</source>
          <target state="translated">イベント ハンドラーを使用して、<ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph>を 1 に変数が、値が 0 では現在場合にのみ、コントロールを設定します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>This is an atomic operation.</source>
          <target state="translated">これは、分割不可能な操作です。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If the return value is zero, the control variable has been set to 1 and the event handler proceeds.</source>
          <target state="translated">戻り値が 0 の場合は、コントロール変数が 1 に設定されているし、イベント ハンドラーが行われます。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If the return value is non-zero, the event is simply discarded to avoid reentrancy.</source>
          <target state="translated">戻り値が 0 以外の場合は、イベントは単に再入を破棄します。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>(If it were necessary to execute every event, the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero.</source>
          <target state="translated">(すべてのイベントを実行する必要がある場合、<ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph>クラスは、イベントを同期する優れた方法になります)。イベント ハンドラーの終了時、設定コントロール変数戻るを 0 にします。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method was called.</source>
          <target state="translated">例を実行、再入のため破棄された後に発生したイベントの合計数を記録する、<ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>メソッドが呼び出されました。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The control thread uses the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method to set the control variable to -1 (minus one), but only if the value is currently zero.</source>
          <target state="translated">コントロールのスレッドを使用して、 <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> (マイナス 1)、-1 に変数が、値が 0 では現在場合にのみ、コントロールを設定します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If the atomic operation returns non-zero, an event is currently executing.</source>
          <target state="translated">分割不可能な操作では、0 以外を返します、イベントが実行中です。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The control thread waits and tries again.</source>
          <target state="translated">コントロールのスレッドは待機し、もう一度試みます。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The example records the number of times the control thread had to wait for an event to finish.</source>
          <target state="translated">この例は、コントロールのスレッドが終了するイベントの待機しなければならなかった回数を記録します。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</source>
          <target state="translated">指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを取得または設定します。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.</source>
          <target state="translated">指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを表す <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>When <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the method that handles the <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is called on a thread from the system-thread pool.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>は<ph id="ph2">`null`</ph>、処理するメソッド、<ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>イベントは、システムのスレッド プールのスレッドで呼び出されます。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>For more information on system-thread pools, see <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>.</source>
          <target state="translated">システム スレッド プールの詳細については、次を参照してください。<ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>When the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>可能性がありますか、例外の結果が動作しないシステム スレッド プールを介したコンポーネントにアクセスする、ボタンなどの visual Windows フォームのコンポーネントでイベントが処理されます。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>Avoid this effect by setting <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> to a Windows Forms component, which causes the method that handles the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to be called on the same thread that the component was created on.</source>
          <target state="translated">この特殊効果を設定して回避<ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>を処理するメソッドを停止する Windows フォームのコンポーネントを<ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>コンポーネントが作成された同じスレッドで呼び出されるイベント。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>Even if the <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events can occur after the <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method has been called or after the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property has been set to <ph id="ph7">`false`</ph>, because the signal to raise the <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a thread pool thread.</source>
          <target state="translated">場合でも、<ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>プロパティは使用されません<ph id="ph2">`null`</ph>、<ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>後にイベントが発生する可能性が、<ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph>または<ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>メソッドが呼び出されたか、後、<ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph>プロパティに設定されて<ph id="ph7">`false`</ph>ため、シグナルを発生させる、<ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>イベントが常にスレッド プールのスレッドで実行をキューに登録します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to ignore subsequent events.</source>
          <target state="translated">イベント ハンドラーを示すフラグを設定するは、この競合状態を解決するのには 1 つの方法、<ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph>を後続のイベントを無視するイベントです。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> is used inside Visual Studio in a Windows Forms designer, <ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is automatically set to the control that contains the <ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>が Visual Studio 内で、Windows フォーム デザイナーで使用<ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>を含むコントロールに自動的に設定されている、<ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>For example, if you place a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> on a designer for <ph id="ph2">`Form1`</ph> (which inherits from <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>), the <ph id="ph4">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property of <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> is set to the instance of <ph id="ph6">`Form1`</ph>.</source>
          <target state="translated">配置する場合など、<ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>をデザイナーで<ph id="ph2">`Form1`</ph>(から継承される<ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>) では、<ph id="ph4">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>プロパティの<ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph>のインスタンスに設定されている<ph id="ph6">`Form1`</ph>です。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The following example is a Windows Forms app that serves as a very simple text file editor.</source>
          <target state="translated">次の例は、非常に単純なテキスト ファイル エディターとして機能する Windows フォーム アプリケーションです。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.</source>
          <target state="translated">テキスト ボックス内のテキストが保存されていないときに、アプリをユーザーに確認 1 分間隔でそのユーザーがテキスト ボックスの内容を保存するかどうか。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>To do this, the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property is set to one minute (60,000 milliseconds), and the <ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is set to the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> object.</source>
          <target state="translated">これを行う、<ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>プロパティが 1 分 (60,000 ミリ秒) に設定と<ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph>プロパティに設定されている、<ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The example requires that you add the following controls to the form:</source>
          <target state="translated">例では、次のコントロールをフォームに追加する必要があります。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control named <ph id="ph2">`TextBox1`</ph> (its default name).</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>という名前のコントロール<ph id="ph2">`TextBox1`</ph>(既定の名前)。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control named <ph id="ph2">`Button1`</ph> (its default name).</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph>という名前のコントロール<ph id="ph2">`Button1`</ph>(既定の名前)。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.SaveFileDialog&gt;</ph> control named <ph id="ph2">`SaveSaveFileDialog1`</ph> (its default name) .</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Forms.SaveFileDialog&gt;</ph>という名前のコントロール<ph id="ph2">`SaveSaveFileDialog1`</ph>(既定の名前)。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>