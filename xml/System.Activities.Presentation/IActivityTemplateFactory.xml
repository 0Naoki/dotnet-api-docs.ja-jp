<Type Name="IActivityTemplateFactory" FullName="System.Activities.Presentation.IActivityTemplateFactory">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f5f6fa1408bdb0031c721f4c652253773ae2a34e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30355226" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IActivityTemplateFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IActivityTemplateFactory" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.IActivityTemplateFactory" />
  <TypeSignature Language="VB.NET" Value="Public Interface IActivityTemplateFactory" />
  <TypeSignature Language="C++ CLI" Value="public interface class IActivityTemplateFactory" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>"プレースホルダー" の <see cref="T:System.Activities.Activity" /> オブジェクトをカプセル化するテンプレートを作成するために、クラスが実装するファクトリ メソッドを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カスタム アクティビティ テンプレートに <xref:System.Activities.Presentation.IActivityTemplateFactory> を実装する必要があります。 カスタム複合アクティビティなどのアクティビティの構成のカスタマイズには、カスタム アクティビティ テンプレートが使用されるため、手動で各アクティビティを個別に作成し、そのすべてのプロパティおよびその他の設定を構成する必要はありません。  
  
   
  
## Examples  
  
```  
  
public sealed class MyDelayActivity : IActivityTemplateFactory  
  
{  
     public Activity Create(DependencyObject target)  
     {  
         return new System.Activities.Statements.Delay  
         {  
             DisplayName = "DelayActivityTemplate",  
             Duration = new TimeSpan(0,0,10)  
  
         };  
     }  
 }  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public System.Activities.Activity Create (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Activities.Activity Create(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.IActivityTemplateFactory.Create(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Function Create (target As DependencyObject) As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Activities::Activity ^ Create(System::Windows::DependencyObject ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Activities.Presentation.IActivityTemplateFactory" /> のこのインスタンスで使用される依存オブジェクト。</param>
        <summary>指定した対象オブジェクトの定義済みのデザイン パターンを表す <see cref="T:System.Activities.Activity" /> クラスのインスタンスを作成します。</summary>
        <returns>ワークフロー <see cref="T:System.Activities.Activity" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これを使用すると、カスタム アクティビティ テンプレートで使用されるアクティビティ インスタンスを作成および構成できます。  
  
   
  
## Examples  
 10 秒間継続する遅延アクティビティを構成するテンプレートを作成します。  
  
```  
  
public sealed class MyDelayActivity : IActivityTemplateFactory  
  
{  
     public Activity Create(DependencyObject target)  
     {  
         return new System.Activities.Statements.Delay  
         {  
             DisplayName = "DelayActivityTemplate",  
             Duration = new TimeSpan(0,0,10)  
  
         };  
     }  
 }  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>