<Type Name="StronglyTypedResourceBuilder" FullName="System.Resources.Tools.StronglyTypedResourceBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7be7f3118763d30ffd080582491bdf7c07503c21" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30479856" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class StronglyTypedResourceBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit StronglyTypedResourceBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.Tools.StronglyTypedResourceBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class StronglyTypedResourceBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class StronglyTypedResourceBuilder abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>厳密に型指定されたリソースをサポートします。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、リソースは、アプリケーション内のコンテンツからコードを分離します。 これらのリソースの作成とでは、ローカライズ可能なアプリケーションの開発も容易にします。 .NET Framework のリソースは通常を使用して消費、<xref:System.Resources.ResourceManager>クラスは、実行時にカルチャ固有のリソースへのアクセスを提供するメソッドが含まれています。 作成して、リソースを消費に関する詳細については、次を参照してください。[デスクトップ アプリでのリソース](http://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890)です。  
  
 厳密に型指定されたリソースのサポートは読み取り専用の静的セットが含まれているクラスを作成してリソースへのアクセスをカプセル化するコンパイル時の機能 (`get`) プロパティです。 これにより、呼び出し元ではなくリソースを消費する別の方法、<xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType>と<xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType>メソッドです。  
  
 厳密に型指定されたリソースのサポートの基本的な機能がによって提供される、<xref:System.Resources.Tools.StronglyTypedResourceBuilder>クラス (だけでなく`/str`コマンド ライン オプションに、 [Resgen.exe (リソース ファイル ジェネレーター)](~/docs/framework/tools/resgen-exe-resource-file-generator.md))。 出力、<xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A>メソッドは、入力パラメーターで参照されているリソースと一致する厳密に型指定のプロパティを含むクラスです。 このクラスは、処理されたファイルで使用可能なリソースへの読み取り専用のアクセスを提供します。  
  
   
  
## Examples  
 次の例には、という名前のクラスが生成されます`DemoResources`(この例のソース コード) に応じて c# または Visual Basic で記述されました。 このクラスは、`DemoApp`名前空間とは、ロゴのビットマップと、アプリケーションの名前を返すプロパティがあります。 呼び出しの例、`CreateResourceFile`必要 .resw ファイルを作成する方法、Logo.bmp をという名前のビットマップ ファイルに、例の現在のディレクトリにある必要があります。 コード例では、次のリソース ファイルは、示す demo.resx という名前を使用します。  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/example1.cs#1)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/example1.vb#1)]  
  
 アプリケーション コードからクラスを使用には、次のように。  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/demoresources.cs#2)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/demoresources.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>入力パラメーターで指定されているリソースと一致する、厳密に型指定されたプロパティが含まれるクラス ファイルを生成します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">各ディクショナリ エントリのキーと値のペアが、リソースの名前とリソースの値である <see cref="T:System.Collections.IDictionary" /> コレクション。</param>
        <param name="baseName">生成するクラスの名前。</param>
        <param name="generatedCodeNamespace">生成するクラスの名前空間。</param>
        <param name="codeProvider">クラスが生成される言語を提供する <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> クラス。</param>
        <param name="internalClass">
          内部クラスを生成する場合は <see langword="true" />。パブリック クラスを生成する場合は <see langword="false" />。</param>
        <param name="unmatchable">プロパティを生成できない各リソース名が含まれる配列。 通常、プロパティが生成できないのは、リソース名が有効な識別子ではないためです。</param>
        <summary>指定されたコレクションで参照されたリソースと一致する、厳密に型指定されたプロパティが含まれるクラス ファイルを生成します。</summary>
        <returns>
          <see cref="T:System.CodeDom.CodeCompileUnit" /> コンテナー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A>に含まれているリソースにアクセスする厳密に型指定された、読み取り専用のラッパーを提供するクラスを生成する方法を`resourceList`パラメーター。  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder>クラスは、文字「$」で始まるすべてのリソース名を無視または">>"です。 リソース名"Culture"と"ResourceManager"は、無効な識別子です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceList" />、<paramref name="basename" />、または <paramref name="codeProvider" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">リソース ノード名が、<paramref name="resourceList" /> 内のそのキー一致しません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">入力として使用される .resx ファイルの名前。</param>
        <param name="baseName">生成するクラスの名前。</param>
        <param name="generatedCodeNamespace">生成するクラスの名前空間。</param>
        <param name="codeProvider">クラスが生成される言語を提供する <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> クラス。</param>
        <param name="internalClass">
          内部クラスを生成する場合は <see langword="true" />。パブリック クラスを生成する場合は <see langword="false" />。</param>
        <param name="unmatchable">プロパティを生成できない各リソース名が含まれる <see cref="T:System.String" /> 配列。 通常、プロパティが生成できないのは、リソース名が有効な識別子ではないためです。</param>
        <summary>指定された .resx ファイルのリソースに一致する厳密に型指定されたプロパティを格納するクラス ファイルを生成します。</summary>
        <returns>
          <see cref="T:System.CodeDom.CodeCompileUnit" /> コンテナー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A>に含まれているリソースへの厳密に型指定された、読み取り専用のアクセスを提供するクラスを生成する方法を`resxFile`パラメーター。  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder>クラスは、文字「$」で始まるすべてのリソース名を無視または">>"です。 リソース名"Culture"と"ResourceManager"は、無効な識別子です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basename" /> または <paramref name="codeProvider" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">各ディクショナリ エントリのキーと値のペアが、リソースの名前とリソースの値である <see cref="T:System.Collections.IDictionary" /> コレクション。</param>
        <param name="baseName">生成するクラスの名前。</param>
        <param name="generatedCodeNamespace">生成するクラスの名前空間。</param>
        <param name="resourcesNamespace">生成するリソースの名前空間。</param>
        <param name="codeProvider">生成されるクラスの言語を提供する <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> オブジェクト。</param>
        <param name="internalClass">
          内部クラスを生成する場合は <see langword="true" />。パブリック クラスを生成する場合は <see langword="false" />。</param>
        <param name="unmatchable">プロパティを生成できない各リソース名が含まれる <see cref="T:System.String" /> 配列。 通常、プロパティが生成できないのは、リソース名が有効な識別子ではないためです。</param>
        <summary>指定されたコレクションで参照されたリソースと一致する、厳密に型指定されたプロパティが含まれるクラス ファイルを生成します。</summary>
        <returns>
          <see cref="T:System.CodeDom.CodeCompileUnit" /> コンテナー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロードでは、使用することができます、`resourcesNamespace`パラメーターを生成されたリソースの名前空間を指定します。 この場合、生成されたコードは次のとおりです。  
  
```  
System.Resources.ResourceManager rm = new System.Resources.ResourceManager("<resourceNamespace>.<baseName>",typeof(baseName).Assembly);  
```  
  
 ほとんどの場合は、アプリケーション コードからこのメソッドを呼び出す必要はありません。  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder>クラスは、文字「$」で始まるすべてのリソース名を無視または">>"です。 リソース名"Culture"と"ResourceManager"は、無効な識別子です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceList" />、<paramref name="basename" />、または <paramref name="codeProvider" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">リソース ノード名が、<paramref name="resourceList" /> 内のそのキー一致しません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">入力として使用される .resx ファイルの名前。</param>
        <param name="baseName">生成するクラスの名前。</param>
        <param name="generatedCodeNamespace">生成するクラスの名前空間。</param>
        <param name="resourcesNamespace">生成するリソースの名前空間。</param>
        <param name="codeProvider">クラスが生成される言語を提供する <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> クラス。</param>
        <param name="internalClass">
          内部クラスを生成する場合は <see langword="true" />。パブリック クラスを生成する場合は <see langword="false" />。</param>
        <param name="unmatchable">プロパティを生成できない各リソース名が含まれる <see cref="T:System.String" /> 配列。 通常、プロパティが生成できないのは、リソース名が有効な識別子ではないためです。</param>
        <summary>指定された .resx ファイルのリソースに一致する厳密に型指定されたプロパティを格納するクラス ファイルを生成します。</summary>
        <returns>
          <see cref="T:System.CodeDom.CodeCompileUnit" /> コンテナー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A>に含まれているリソースへの厳密に型指定された、読み取り専用のアクセスを提供するクラスを生成する方法を`resxFile`パラメーター。  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder>クラスは、文字「$」で始まるすべてのリソース名を無視または">>"です。 リソース名"Culture"と"ResourceManager"は、無効な識別子です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basename" /> または <paramref name="codeProvider" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyResourceName">
      <MemberSignature Language="C#" Value="public static string VerifyResourceName (string key, System.CodeDom.Compiler.CodeDomProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyResourceName(string key, class System.CodeDom.Compiler.CodeDomProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName(System.String,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyResourceName (key As String, provider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VerifyResourceName(System::String ^ key, System::CodeDom::Compiler::CodeDomProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="provider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="key">検証対象となる文字列。必要に応じて、有効なリソース名に変換します。</param>
        <param name="provider">使用する対象言語を指定する <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> オブジェクト。</param>
        <summary>指定された入力文字列とコード プロバイダーに基づいて、有効なリソース文字列を生成します。</summary>
        <returns>
          <paramref name="key" /> パラメーターから派生した有効なリソース名。 無効なトークンはアンダースコア (_) 文字で置き換えられます。または、<paramref name="provider" /> パラメーターで指定された言語では無効な文字が残っている場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、`key`文字の有効な文字列をパラメーターには、その文字列が返されます。 場合、`key`パラメーターが無効な文字列か、無効な文字を含む文字列、<xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A>メソッドに基づく有効な文字列を生成しようとしました。、`key`と`provider`パラメーター。 文字列が返されること、有効な文字列を生成することができる場合それ以外の場合、`null`が返されます。  
  
 場合、`key`パラメーターが空の文字列 ("")、1 つのアンダー スコア文字 (_) で構成される文字列が返されます。 場合、`key`パラメーターが空の文字列ではない、<xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A>メソッドで指定した言語に基づいて無効なトークンのセットを文字列内の各文字を比較し、`provider`パラメーター。 文字列に無効な文字はアンダー スコア文字に置き換えられます。 置き換えられますアンダー スコア文字は次のとおりです。  
  
 '' (領域)、U +0 00A0 (改行なしスペース) ' です '。(ピリオド) '、' (コンマ)、';'(セミコロン) '&#124;'、' ~'、' @'、'#'、'%'、' ^'、'&'、' *'、'+'、'-'、'/'、'\\'、'\<'、' > ','?'、' ['、']'、'(',')'、' {'、'}'、'"' (引用符)、' '(アポストロフィ)、':'、および '!'。  
  
> [!NOTE]
>  厳密に型指定されたリソースは、言語のキーワードの使用を許可しない (など`if`、`for`など) としてリソース キー名。 ただし、<xref:System.CodeDom>デザイン パターンは、アンダー スコア文字でキーワードを付けることで言語のキーワードの使用を許可します。 <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A>メソッドの呼び出し、<xref:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier%2A>この設計を適用するメソッド。 。 たとえば、リソース名を使用する場合が言語のキーワードと同じように`for`、として名前が表示されます`_for`で生成される厳密に型指定されたリソース クラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> または <paramref name="provider" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>