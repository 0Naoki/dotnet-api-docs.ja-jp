<Type Name="DataTemplateSelector" FullName="System.Windows.Controls.DataTemplateSelector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a71f7b445e32e2d2b8a6ae24fd628258009ae370" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69216211" /></Metadata><TypeSignature Language="C#" Value="public class DataTemplateSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplateSelector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.DataTemplateSelector" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplateSelector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplateSelector" />
  <TypeSignature Language="F#" Value="type DataTemplateSelector = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>データ オブジェクトとデータ バインド要素に基づいて <see cref="T:System.Windows.DataTemplate" /> を選択する方法を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、同じ種類の<xref:System.Windows.Controls.DataTemplateSelector>オブジェクト<xref:System.Windows.DataTemplate>に対して複数のが存在し、各データオブジェクトのプロパティに基づいて適用<xref:System.Windows.DataTemplate>するを選択する独自のロジックを指定する場合は、を作成します。 異なる型のオブジェクトがある場合は、 <xref:System.Windows.DataTemplate.DataType%2A> <xref:System.Windows.DataTemplate>でプロパティを設定できます。 その場合は、 <xref:System.Windows.Controls.DataTemplateSelector>を作成する必要はありません。 さらに、同じ種類のオブジェクトがあり、プロパティが異なる場合<xref:System.Windows.DataTrigger>は、またはデータコンバーターの使用を検討することもできます。 詳しくは「 [データ テンプレートの概要](~/docs/framework/wpf/data/data-templating-overview.md)」をご覧ください。  
  
 テンプレートセレクターを作成するには、から<xref:System.Windows.Controls.DataTemplateSelector>継承するクラスを作成し、 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>メソッドをオーバーライドします。 クラスが定義されたら、クラスのインスタンスを要素のテンプレートセレクタープロパティに割り当てることができます。  
  
   
  
## Examples  
 この例では、バインディングソースはオブジェクトの`Task`リストです。 `Task`オブジェクトのプロパティの1つが`Priority`です。 `myTaskTemplate`とと`importantTaskTemplate`いう2つのデータテンプレートが定義されています。  
  
 データオブジェクトの`Priority`値に基づい<xref:System.Windows.DataTemplate>て使用するロジックを指定するには、の<xref:System.Windows.Controls.DataTemplateSelector> <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>サブクラスを作成し、メソッドをオーバーライドします。 次の例では、 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>メソッドは、 `Priority`プロパティの値に基づいて適切なテンプレートを返すロジックを提供します。 返されるテンプレートは、エンベロープ<xref:System.Windows.Window>要素のリソースにあります。  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 その後、リソースとして `TaskListDataTemplateSelector` を宣言できます。  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 テンプレートセレクターリソースを使用するには<xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> <xref:System.Windows.Controls.ListBox>、のプロパティに割り当てます。 は<xref:System.Windows.Controls.ListBox> 、基<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>になるコレクション`TaskListDataTemplateSelector`内の各項目について、のメソッドを呼び出します。 呼び出しでは、項目パラメーターとしてデータ オブジェクトを渡します。 その<xref:System.Windows.DataTemplate>後、メソッドによって返されたが、そのデータオブジェクトに適用されます。  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 完全なサンプルについては、「[Introduction to Data Templating Sample](https://go.microsoft.com/fwlink/?LinkID=160009)」(データ テンプレート サンプルの概要) をご覧ください。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplateSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplateSelector();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Controls.DataTemplateSelector" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DataTemplate SelectTemplate(object item, class System.Windows.DependencyObject container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SelectTemplate (item As Object, container As DependencyObject) As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DataTemplate ^ SelectTemplate(System::Object ^ item, System::Windows::DependencyObject ^ container);" />
      <MemberSignature Language="F#" Value="abstract member SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate&#xA;override this.SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate" Usage="dataTemplateSelector.SelectTemplate (item, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="container" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="item">テンプレートを選択する対象となるデータ オブジェクト。</param>
        <param name="container">データ バインドされたオブジェクト。</param>
        <summary>派生クラスでオーバーライドされた場合、カスタム ロジックに基づいた <see cref="T:System.Windows.DataTemplate" /> を返します。</summary>
        <returns><see cref="T:System.Windows.DataTemplate" /> または <see langword="null" /> を返します。 既定値は <see langword="null" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、同じ種類のオブジェクトに対して複数のデータテンプレートが定義されている場合は、テンプレートセレクターを使用します。 たとえば、バインドソースが生徒のオブジェクトのリストを一覧表示していて、パートタイムの学生に特定のテンプレートを適用する場合などです。 これを行うには、から<xref:System.Windows.Controls.DataTemplateSelector>継承するクラスを作成し、 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>メソッドをオーバーライドします。 クラスが定義されたら、クラスのインスタンスを要素のテンプレートセレクタープロパティに割り当てることができます。  
  
   
  
## Examples  
 この例では、バインディングソースはオブジェクトの`Task`リストです。 `Task`オブジェクトのプロパティの1つが`Priority`です。 `myTaskTemplate`とと`importantTaskTemplate`いう2つのデータテンプレートが定義されています。  
  
 データオブジェクトの`Priority`値に基づい<xref:System.Windows.DataTemplate>て使用するロジックを指定するには、の<xref:System.Windows.Controls.DataTemplateSelector> <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>サブクラスを作成し、メソッドをオーバーライドします。 次の例では、 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>メソッドは、 `Priority`プロパティの値に基づいて適切なテンプレートを返すロジックを提供します。 返されるテンプレートは、エンベロープ<xref:System.Windows.Window>要素のリソースにあります。  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 その後、リソースとして `TaskListDataTemplateSelector` を宣言できます。  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 テンプレートセレクターリソースを使用するには<xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> <xref:System.Windows.Controls.ListBox>、のプロパティに割り当てます。 は<xref:System.Windows.Controls.ListBox> 、基<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>になるコレクション`TaskListDataTemplateSelector`内の各項目について、のメソッドを呼び出します。 呼び出しでは、項目パラメーターとしてデータ オブジェクトを渡します。 その<xref:System.Windows.DataTemplate>後、メソッドによって返されたが、そのデータオブジェクトに適用されます。  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 完全なサンプルについては、「[Introduction to Data Templating Sample](https://go.microsoft.com/fwlink/?LinkID=160009)」(データ テンプレート サンプルの概要) をご覧ください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
