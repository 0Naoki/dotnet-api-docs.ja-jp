<Type Name="ControlTemplate" FullName="System.Windows.Controls.ControlTemplate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="295eb3e206af0ec828c568e6d86ec8ea6a118d4b" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70537493" /></Metadata><TypeSignature Language="C#" Value="public class ControlTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ControlTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlTemplate&#xA;Inherits FrameworkTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlTemplate : System::Windows::FrameworkTemplate" />
  <TypeSignature Language="F#" Value="type ControlTemplate = class&#xA;    inherit FrameworkTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>コントロールの複数のインスタンスで共有できる、<see cref="T:System.Windows.Controls.Control" /> のビジュアル構造と動作特性を指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 で<xref:System.Windows.Controls.ControlTemplate>は、コントロールの視覚的な構造を指定できます。 コントロールの作成者は、既定<xref:System.Windows.Controls.ControlTemplate>値を定義できます。また<xref:System.Windows.Controls.ControlTemplate> 、アプリケーションの作成者は、をオーバーライドして、コントロールのビジュアル構造を再構築できます。  
  
 コントロールテンプレートは、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]スタイルとテンプレートモデルによって提供される多くの機能の1つです。 スタイルとテンプレートモデルを使用すると、多くの場合、独自のコントロールを作成する必要がないという優れた柔軟性が得られます。 コントロールの視覚化を変更したり、 <xref:System.Windows.Controls.ControlTemplate>既存のコントロールのを置き換えたりするアプリケーションの作成者は、「[スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)」のトピックで例と詳細な説明を参照してください。  
  
 独自のコントロールを作成する場合は、コントロール作成の概要に関する[トピック](~/docs/framework/wpf/controls/control-authoring-overview.md)の「カスタムコントロールを作成する」を参照してください。  
  
 は、スタイルを含む外部ユーザーやオブジェクトには見えない、実装の詳細の自己完結型の単位として使用することを目的としています。 <xref:System.Windows.Controls.ControlTemplate> コントロールテンプレートの内容を操作する唯一の方法は、同じコントロールテンプレート内からです。  
  
<a name="xamlObjectElementUsage_VisualTree"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```xaml
<ControlTemplate>  
  <VisualTreeRootNode>
    VisualTreeNodeContents  
  </VisualTreeRootNode>  
</ControlTemplate>  
```  
  
<a name="xamlValues_VisualTree"></a>   
## <a name="xaml-values"></a>XAML 値  
 *ControlTemplate*  
 または派生<xref:System.Windows.Controls.ControlTemplate>クラスの Object 要素。  
  
 *VisualTreeRootNode*  
 (また[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]は派生クラス) の直接の子としての単一の要素。 <xref:System.Windows.Controls.ControlTemplate> テンプレートには単一のルートノードが必要です。 便利なテンプレートを生成するために、 *VisualTreeRootNode*として選択された要素は、独自のコンテンツモデルをサポートする必要があります。多くの場合、複数の子要素をサポートするモデルです。  
  
 *VisualTreeNodeContents*  
 目的のテンプレートを完成させる1つ以上の要素。 *VisualTreeRootNode*として選択された要素が単一の子をサポートする場合、 *VisualTreeNodeContents*として宣言できる要素は1つだけです。 また、選択した*VisualTreeRootNode*でテキストコンテンツプロパティがサポートされている場合は、テキストコンテンツを提供することもできます (珍しいことはありません)。  
  
   
  
## Examples  
 のを<xref:System.Windows.Controls.Button> <xref:System.Windows.Style> 設定 <xref:System.Windows.Controls.Button> するの例を次に示します。 <xref:System.Windows.Controls.ControlTemplate>  
  
 [!code-xaml[StylingIntroSample_snippet#ButtonCT](~/samples/snippets/csharp/VS_Snippets_Wpf/StylingIntroSample_snippet/CSharp/Window1.xaml#buttonct)]     
  
 このが適用されると<xref:System.Windows.Controls.Button> 、は<xref:System.Windows.Shapes.Ellipse>として表示されます。  
  
 ![Button ControlTemplate サンプル](~/add/media/stylingintro-buttoncontroltemplate.png "Button ControlTemplate サンプル")  
  
 上の例の<xref:System.Windows.Controls.Control.Template%2A>ように、 <xref:System.Windows.Controls.Control>のプロパティを<xref:System.Windows.Controls.ControlTemplate>新しいに設定すると、テンプレート全体が置換されます。 フォーカスが<xref:System.Windows.Controls.Button>あるとき、または押されたときの外観は、置換するボタンの既定の外観の一部になります。 したがって、次の例に示すように、必要に応じて、ボタンが押されたときにどのように表示されるかを定義に追加することができます。  
  
 [!code-xaml[ControlTemplateExamples#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/button.xaml#1)]  
  
 この例では、ここに記載されていないリソースを参照しています。 完全なサンプルについては、[Styling with ControlTemplates Sample](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating)を参照してください。 このサンプルでは、多くのコントロールのコントロールテンプレートの例を示し、コントロールテンプレートの作成を開始するための最適な方法です。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Style" />
    <altmember cref="T:System.Windows.DataTemplate" />
    <altmember cref="T:System.Windows.Controls.ContentPresenter" />
    <altmember cref="T:System.Windows.Controls.ItemsPresenter" />
    <altmember cref="T:System.Windows.TemplateBindingExtension" />
    <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">スタイルとテンプレートのサンプルの概要</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Controls.ControlTemplate" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Controls.ControlTemplate" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate(Type ^ targetType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Controls.ControlTemplate : Type -&gt; System.Windows.Controls.ControlTemplate" Usage="new System.Windows.Controls.ControlTemplate targetType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType">このテンプレートの対象の型。</param>
        <summary>指定された対象の型を使用して <see cref="T:System.Windows.Controls.ControlTemplate" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : Type with get, set" Usage="System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Controls.ControlTemplate" /> が対象としている型を取得または設定します。</summary>
        <value>既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Resources セクションに、プロパティ<xref:System.Windows.Controls.ControlTemplate>が<xref:System.Windows.Controls.ControlTemplate.TargetType%2A>型に設定されたスタンドアロンのがある場合<xref:System.Windows.Controls.ControlTemplate> 、はその型に自動的には適用されません。 代わりに、を指定`x:Key`し、テンプレートを明示的に適用する必要があります。  
  
 また、テンプレート定義<xref:System.Windows.Controls.ControlTemplate.TargetType%2A> にが <xref:System.Windows.Controls.ControlTemplate> 含まれている場合は、に対してプロパティが必須であることにも注意してください。 <xref:System.Windows.Controls.ContentPresenter>  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object  TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## <a name="xaml-values"></a>XAML 値  
 *typeName*  
 クラスの型名。 クラスの<xref:System.Type>名前を参照するには、[マークアップ拡張機能と WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)を使用します。  
  
   
  
## Examples  
 このプロパティの使用例を次に示します。  
  
 [!code-xaml[ControlTemplateExamples#Label](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/label.xaml#label)]  
  
 上の例では、次のリソースを使用しています。  
  
  
  
 完全なサンプルについては、[Styling with ControlTemplates Sample](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating)を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">テンプレートの定義に <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> が含まれている場合、<see cref="T:System.Windows.Controls.ContentPresenter" /> プロパティは <see langword="null" /> にすることができません。</exception>
        <exception cref="T:System.ArgumentException">指定された型が無効です。 <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> の <see cref="T:System.Windows.Controls.ControlTemplate" /> は、<see cref="T:System.Windows.Controls.Control" />、<see cref="T:System.Windows.Controls.Page" />、または <see cref="T:System.Windows.Navigation.PageFunctionBase" /> であるか、これらからの継承である必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プロパティの変更を適用する、または指定した条件に基づいてアクションを実行する <see cref="T:System.Windows.TriggerBase" /> オブジェクトのコレクションを取得します。</summary>
        <value><see cref="T:System.Windows.TriggerBase" /> オブジェクトのコレクション。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>XAML 値  
 *oneOrMoreTriggers*  
 1つ以上の<xref:System.Windows.Trigger>オブジェクト (通常は)。 <xref:System.Windows.TriggerBase>  
  
   
  
## Examples  
 このプロパティの使用例を次に示します。  
  
 [!code-xaml[ControlTemplateExamples#ToolTip](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/tooltip.xaml#tooltip)]  
  
 上の例では、次のリソースを使用します。  
  
  
  
  
 完全なサンプルについては、[Styling with ControlTemplates Sample](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating)を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">スタイルとテンプレートのサンプルの概要</related>
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateTemplatedParent (templatedParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ValidateTemplatedParent(System::Windows::FrameworkElement ^ templatedParent);" />
      <MemberSignature Language="F#" Value="override this.ValidateTemplatedParent : System.Windows.FrameworkElement -&gt; unit" Usage="controlTemplate.ValidateTemplatedParent templatedParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">このテンプレートが適用される要素。</param>
        <summary>規則のセットに対してテンプレートが適用される親をチェックします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッドは、次の規則を使用します。  
  
 1. を`templatedParent` 型 <xref:System.Windows.FrameworkContentElement> にすることはできません。  
  
 2. をではない<xref:System.Windows.FrameworkElement> <xref:System.Windows.Controls.Control>型にすることはできません。 `templatedParent`  
  
 3. に、に関連<xref:System.Windows.Controls.Control>付けら<xref:System.Windows.Controls.ControlTemplate>れていないを指定することはできません。 `templatedParent`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="templatedParent" /> は <see langword="null" /> にできません。</exception>
        <exception cref="T:System.ArgumentException"><see cref="T:System.Windows.Controls.ControlTemplate" /> に対して <see cref="T:System.Windows.Controls.Control" /> を使用する前には、<see cref="P:System.Windows.Controls.Control.Template" /> プロパティを設定することによって、<see cref="T:System.Windows.Controls.ControlTemplate" /> を <see cref="T:System.Windows.Controls.Control" /> に関連付けておく必要があります。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
