<Type Name="ControlTemplate" FullName="System.Windows.Controls.ControlTemplate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b0a09392577cd14c9dbe30122594f13572c16d7f" />
    <Meta Name="ms.sourcegitcommit" Value="6f3d3181d9ca22a1ab46a7f61f3ee152f2b844ea" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/27/2018" />
    <Meta Name="ms.locfileid" Value="50174884" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ControlTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ControlTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlTemplate&#xA;Inherits FrameworkTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlTemplate : System::Windows::FrameworkTemplate" />
  <TypeSignature Language="F#" Value="type ControlTemplate = class&#xA;    inherit FrameworkTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>コントロールの複数のインスタンスで共有できる、<see cref="T:System.Windows.Controls.Control" /> のビジュアル構造と動作特性を指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ControlTemplate>コントロールの視覚的な構造を指定することができます。 コントロールの作成者は、既定値を定義できます<xref:System.Windows.Controls.ControlTemplate>アプリケーション作成者が上書きできると、<xref:System.Windows.Controls.ControlTemplate>コントロールの視覚的な構造を再構築します。  
  
 コントロール テンプレートによって提供される多くの機能は、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]スタイルおよびテンプレート モデル。 スタイルとテンプレートのモデルから、ある多くの場合必要はありません、独自のコントロールを作成するのような優れた柔軟性を提供します。 コントロールの視覚エフェクトを変更したり、置き換えたりする必要があるアプリケーション作成者の場合は、<xref:System.Windows.Controls.ControlTemplate>の既存のコントロールを参照してください、[スタイルとテンプレート](~/docs/framework/wpf/controls/styling-and-templating.md)例と詳しい説明については、トピック。  
  
 独自のコントロールを作成する場合に「カスタム コントロールを作成する」を参照してください、[コントロールの作成の概要](~/docs/framework/wpf/controls/control-authoring-overview.md)します。  
  
 A<xref:System.Windows.Controls.ControlTemplate>を自己完結型のユーザーとスタイルを含む、オブジェクトの外部から参照できる実装の詳細。 同じコントロール テンプレート内では、コントロール テンプレートの内容を操作する唯一の方法です。  
  
<a name="xamlObjectElementUsage_VisualTree"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```  
<ControlTemplate>  
  <VisualTreeRootNode > VisualTreeNodeContents  
  </VisualTreeRootNode >  
</ControlTemplate>  
```  
  
<a name="xamlValues_VisualTree"></a>   
## <a name="xaml-values"></a>XAML 値  
 *ControlTemplate*  
 オブジェクト要素<xref:System.Windows.Controls.ControlTemplate>または派生クラス。  
  
 *VisualTreeRootNode*  
 1 つ[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]要素の直下の子として、 <xref:System.Windows.Controls.ControlTemplate> (または派生クラス)。 テンプレートには、単一のルート ノードが必要です。 便利なテンプレートとして選択した要素を生成するために*VisualTreeRootNode*が多くの場合、複数の子要素をサポートするモデルで、独自のコンテンツ モデルをサポートするために必要です。  
  
 *VisualTreeNodeContents*  
 対象のテンプレートを 1 つまたは複数の要素。 場合として選択された*VisualTreeRootNode*のみサポートしている 1 つの子、ことがありますのみとして 1 つの要素を宣言する*VisualTreeNodeContents*します。 可能です (ただし、一般的でない) 場合は、テキスト コンテンツを提供する、選択した*VisualTreeRootNode*テキスト コンテンツのプロパティをサポートします。  
  
   
  
## Examples  
 次に示す、 <xref:System.Windows.Controls.Button> <xref:System.Windows.Style>設定、<xref:System.Windows.Controls.ControlTemplate>の<xref:System.Windows.Controls.Button>:  
  
 [!code-xaml[StylingIntroSample_snippet#ButtonCT](~/samples/snippets/csharp/VS_Snippets_Wpf/StylingIntroSample_snippet/CSharp/Window1.xaml#buttonct)]     
  
 これが適用されると、ときに、<xref:System.Windows.Controls.Button>として表示されます、 <xref:System.Windows.Shapes.Ellipse>:  
  
 ![ボタン ControlTemplate のサンプル](~/add/media/stylingintro-buttoncontroltemplate.png "ボタン ControlTemplate のサンプル")  
  
 設定すると、<xref:System.Windows.Controls.Control.Template%2A>のプロパティを<xref:System.Windows.Controls.Control>を新しい<xref:System.Windows.Controls.ControlTemplate>テンプレート全体を置換する上記の例に示すようにします。 どのような<xref:System.Windows.Controls.Button>にフォーカスが移動または置換するボタンの既定の外観の一部は、押されたときのようになります。 そのため、必要に応じて、どのようなボタンが押されたときのようになります、定義というように、次の例のようににたい場合があります。  
  
 [!code-xaml[ControlTemplateExamples#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/button.xaml#1)]  
  
 この例では、ここに表示されていないリソースを参照することに注意してください。 完全なサンプルについては、[Styling with ControlTemplates Sample](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating)を参照してください。 サンプルでは多くのコントロールのコントロール テンプレートの例を示します、コントロール テンプレートの作成を開始するための最善の方法です。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Style" />
    <altmember cref="T:System.Windows.DataTemplate" />
    <altmember cref="T:System.Windows.Controls.ContentPresenter" />
    <altmember cref="T:System.Windows.Controls.ItemsPresenter" />
    <altmember cref="T:System.Windows.TemplateBindingExtension" />
    <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
    <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkID=160010">Introduction to Styling and Templating Sample</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.ControlTemplate" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.ControlTemplate" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate(Type ^ targetType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Controls.ControlTemplate : Type -&gt; System.Windows.Controls.ControlTemplate" Usage="new System.Windows.Controls.ControlTemplate targetType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType">このテンプレートの対象の型。</param>
        <summary>指定された対象の型を使用して <see cref="T:System.Windows.Controls.ControlTemplate" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : Type with get, set" Usage="System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Controls.ControlTemplate" /> が対象としている型を取得または設定します。</summary>
        <value>既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スタンドアロンがあれば<xref:System.Windows.Controls.ControlTemplate>リソース セクションで、<xref:System.Windows.Controls.ControlTemplate.TargetType%2A>プロパティの型に設定、<xref:System.Windows.Controls.ControlTemplate>は適用されないその型に自動的にします。 代わりに、指定する必要があります、`x:Key`テンプレートを明示的に適用します。  
  
 また、<xref:System.Windows.Controls.ControlTemplate.TargetType%2A>プロパティが必要、<xref:System.Windows.Controls.ControlTemplate>テンプレートの定義が含まれている場合、 <xref:System.Windows.Controls.ContentPresenter>。  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object  TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## <a name="xaml-values"></a>XAML 値  
 *typeName*  
 クラスの型名。 参照する、<xref:System.Type>使用して、クラスの名前、[マークアップ拡張機能と WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)します。  
  
   
  
## Examples  
 次の例では、このプロパティの使用を示しています。  
  
 [!code-xaml[ControlTemplateExamples#Label](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/label.xaml#label)]  
  
 上記の例では、次のリソースを使用します。  
  
  
  
 完全なサンプルについては、[Styling with ControlTemplates Sample](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating)を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">テンプレートの定義に <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> が含まれている場合、<see cref="T:System.Windows.Controls.ContentPresenter" /> プロパティは <see langword="null" /> にすることができません。</exception>
        <exception cref="T:System.ArgumentException">指定された型が無効です。 <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> の <see cref="T:System.Windows.Controls.ControlTemplate" /> は、<see cref="T:System.Windows.Controls.Control" />、<see cref="T:System.Windows.Controls.Page" />、または <see cref="T:System.Windows.Navigation.PageFunctionBase" /> であるか、これらからの継承である必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プロパティの変更を適用する、または指定した条件に基づいてアクションを実行する <see cref="T:System.Windows.TriggerBase" /> オブジェクトのコレクションを取得します。</summary>
        <value>
          <see cref="T:System.Windows.TriggerBase" /> オブジェクトのコレクション。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>XAML 値  
 *oneOrMoreTriggers*  
 1 つまたは複数<xref:System.Windows.TriggerBase>オブジェクト (これらは通常、 <xref:System.Windows.Trigger>)。  
  
   
  
## Examples  
 次の例では、このプロパティの使用を示しています。  
  
 [!code-xaml[ControlTemplateExamples#ToolTip](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/tooltip.xaml#tooltip)]  
  
 上記の例では、次のリソースを使用します。  
  
  
  
  
 完全なサンプルについては、[Styling with ControlTemplates Sample](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating)を参照してください。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkID=160010">Introduction to Styling and Templating Sample</related>
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateTemplatedParent (templatedParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ValidateTemplatedParent(System::Windows::FrameworkElement ^ templatedParent);" />
      <MemberSignature Language="F#" Value="override this.ValidateTemplatedParent : System.Windows.FrameworkElement -&gt; unit" Usage="controlTemplate.ValidateTemplatedParent templatedParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">このテンプレートが適用される要素。</param>
        <summary>規則のセットに対してテンプレートが適用される親をチェックします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッドは、次の規則を使用します。  
  
 1. `templatedParent`型<xref:System.Windows.FrameworkContentElement>します。  
  
 2. `templatedParent`型<xref:System.Windows.FrameworkElement>でない、<xref:System.Windows.Controls.Control>します。  
  
 3. `templatedParent`することはできません、<xref:System.Windows.Controls.Control>が関連付けられていない、<xref:System.Windows.Controls.ControlTemplate>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="templatedParent" /> は <see langword="null" /> にすることはできません。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="T:System.Windows.Controls.ControlTemplate" /> に対して <see cref="T:System.Windows.Controls.Control" /> を使用する前には、<see cref="P:System.Windows.Controls.Control.Template" /> プロパティを設定することによって、<see cref="T:System.Windows.Controls.ControlTemplate" /> を <see cref="T:System.Windows.Controls.Control" /> に関連付けておく必要があります。</exception>
      </Docs>
    </Member>
  </Members>
</Type>