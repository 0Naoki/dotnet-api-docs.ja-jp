<Type Name="Label" FullName="System.Windows.Controls.Label">
  <Metadata><Meta Name="ms.openlocfilehash" Value="404d387e6f18874b34985ba1963c198340389db4" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52615283" /></Metadata><TypeSignature Language="C#" Value="public class Label : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Label extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Label" />
  <TypeSignature Language="VB.NET" Value="Public Class Label&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Label : System::Windows::Controls::ContentControl" />
  <TypeSignature Language="F#" Value="type Label = class&#xA;    inherit ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Label)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>コントロールのテキスト ラベルを表し、アクセス キーのサポートを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスは、アクセス キー (ニーモニックとも呼ばれます) の機能およびビジュアルの両方のサポートを提供します。 などのコントロールへの簡単なキーボード アクセスを有効にするでよく使用される、<xref:System.Windows.Controls.TextBox>します。 割り当てる、<xref:System.Windows.Controls.Label>を<xref:System.Windows.Controls.Control>に設定して、<xref:System.Windows.Controls.Label.Target%2A>プロパティをコントロールをユーザーのアクセス キーを押したときに、フォーカスを取得する必要があります。 ターゲット設定が原因も[!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)]ラベルのテキストを対象となるコントロールの名前として使用します。 詳細については、次を参照してください。[アクセシビリティ](~/docs/framework/ui-automation/index.md)します。  
  
 アクセス キーを設定するには、アクセス キーにする必要がある文字の前にアンダー スコアを追加します。 最初の 1 つだけが、アクセス キーに変換されます、コンテンツに複数のアンダー スコア文字がある場合は、その他のアンダー スコアは、通常のテキストとして表示されます。 アクセス キーに変換するアンダー スコアが最初のアンダー スコアではない場合は、変換する前にあるすべてのアンダー スコアの 2 つの連続するアンダー スコアを使用します。 たとえば、次のコードは、アクセス キーが含まれていて、_hello**W**指定。  
  
```  
<Label>__Hello_World</Label>   
```  
  
 H の前にアンダー スコアは、double 型の値であるため、アクセス キーとして W キーを登録します。  
  
 ラベルがフォーカスを設定して、タブ ストップがありません。 詳細については、次を参照してください。[フォーカスの概要](~/docs/framework/wpf/advanced/focus-overview.md)します。  
  
 A<xref:System.Windows.Controls.Label>は、 <xref:System.Windows.Controls.ContentControl>、つまり、ある任意の型 (文字列、イメージ、パネルなど) の 1 つのオブジェクトを含めることができます。 詳細については、<xref:System.Windows.Controls.ContentControl> クラスを参照してください。  
  
## <a name="customizing-the-label-control"></a>ラベル コントロールをカスタマイズします。  
 複数に同じプロパティの設定を適用する<xref:System.Windows.Controls.Label>コントロールを使用して、<xref:System.Windows.FrameworkElement.Style%2A>プロパティ。 既定値を変更する<xref:System.Windows.Controls.ControlTemplate>固有の外観を制御します。 作成の詳細については、<xref:System.Windows.Controls.ControlTemplate>を参照してください[ControlTemplate の作成による既存のコントロールの外観のカスタマイズ](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)します。  パーツとに固有の状態を表示する、<xref:System.Windows.Controls.Label>を参照してください[ラベルのスタイルとテンプレート](~/docs/framework/wpf/controls/label-styles-and-templates.md)します。  
  
 コントロールの既定のスタイルでは、このコントロールの依存関係プロパティを設定する可能性があります。  プロパティが既定のスタイルによって設定されている場合は、アプリケーションでコントロールが表示されたら、既定値から、プロパティが変更可能性があります。 デスクトップ テーマでは、アプリケーションが実行されている場合は、使用、既定のスタイルが決定されます。  詳細については、次を参照してください。[既定の WPF テーマ](https://go.microsoft.com/fwlink/?LinkID=158252)します。  
  
> [!NOTE]
>  ビジュアルのプロパティの設定はのみ、効果がそのプロパティが両方に存在する場合は<xref:System.Windows.Controls.Label>コントロールの既定のテンプレートとを使用して設定をします。 "を変更するビジュアル構造体のコントロールのセクションではビジュアルのプロパティの一覧を検索できます[ControlTemplate の作成による既存のコントロールの外観のカスタマイズ](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)します。  
  
   
  
## Examples  
 次の例を作成する方法を示しています、<xref:System.Windows.Controls.Label>バインディングを使用してターゲットを設定します。  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 次の例を作成する方法を示しています、<xref:System.Windows.Controls.Label>をアクセス キーし、テキストの折り返しをサポートしています。  
  
 [!code-xaml[LabelSnippet#4](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#4)]   
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms752101(v=vs.90)">方法: ラベルのターゲットのプロパティを設定</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Label();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Controls.Label" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="label.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] インフラストラクチャの一部として、このコントロールに適切な <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> を実装します。</summary>
        <returns>型固有の <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 実装。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public System.Windows.UIElement Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.UIElement Target" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Label.Target" />
      <MemberSignature Language="VB.NET" Value="Public Property Target As UIElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::UIElement ^ Target { System::Windows::UIElement ^ get(); void set(System::Windows::UIElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Target : System.Windows.UIElement with get, set" Usage="System.Windows.Controls.Label.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.NameReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがラベルのアクセス キーを押すと、フォーカスを受け取る要素を取得または設定します。</summary>
        <value>ユーザーがアクセス キーを押すとフォーカスを受け取る <see cref="T:System.Windows.UIElement" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定することによりアクセス キーをサポートしていない要素にキーボード ショートカットを行うことができます、<xref:System.Windows.Controls.Label>アクセス キーと、このプロパティを設定します。 アクセス キーとして機能する文字の直前にアンダー スコアを配置することで、ラベルに、アクセス キーを割り当てます。 アクセス キーを指定できます、<xref:System.Windows.Controls.ContentControl.Content%2A>プロパティを設定または<xref:System.Windows.Controls.ContentControl.Content%2A>を<xref:System.Windows.Controls.AccessText>オブジェクト。  
  
 このプロパティを使用して定義することはできません、<xref:System.Windows.UIElement>します。 たとえば、次のコンパイルは機能しません。`<object.Target><UIElement../></object.Target>`します。 このプロパティは、アプリケーションで既に定義されている要素への参照を提供します。  
  
<a name="dependencyPropertyInfo_Target"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子フィールドです。|<xref:System.Windows.Controls.Label.TargetProperty>|  
|メタデータのプロパティを設定するには `true`|なし|  
  
<a name="xamlAttributeUsage_Target"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<Label Target=" nameOfExistingElement"/>  
  
```  
  
<a name="xamlPropertyElementUsage_Target"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
<a name="xamlValues_Target"></a>   
## <a name="xaml-values"></a>XAML 値  
 `nameOfExistingElement`  
 名前<xref:System.Windows.UIElement>アクセス キーが押されたときにフォーカスを受け取る。  
  
   
  
## Examples  
 <xref:System.Windows.Controls.Label.Target%2A> の <xref:System.Windows.Controls.Label> プロパティを設定する方法を次の例に示します。  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms752101(v=vs.90)">方法: ラベルのターゲットのプロパティを設定</related>
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Label.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Label.TargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Controls.Label.Target" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>