<Type Name="AlternationConverter" FullName="System.Windows.Controls.AlternationConverter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8058bf9a0c6acafa49784b28cae631a34023ef84" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36367955" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AlternationConverter : System.Windows.Data.IValueConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AlternationConverter extends System.Object implements class System.Windows.Data.IValueConverter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.AlternationConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class AlternationConverter&#xA;Implements IValueConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class AlternationConverter : System::Windows::Data::IValueConverter" />
  <TypeSignature Language="F#" Value="type AlternationConverter = class&#xA;    interface IValueConverter" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Data.IValueConverter</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Values")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>整数をオブジェクトのリストへのインデックスとして適用することにより、整数とオブジェクトの間で変換を行います。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用することができます、<xref:System.Windows.Controls.AlternationConverter>プロパティの値を交互にバインドします。 項目を検索する場合など、<xref:System.Windows.Controls.ListBox>青と明るい青色の背景を交互には、以下を実行できます。  
  
-   作成、<xref:System.Windows.Controls.AlternationConverter>同じように青の追加と<xref:System.Windows.Media.SolidColorBrush>明るい青<xref:System.Windows.Media.SolidColorBrush>にその<xref:System.Windows.Controls.AlternationConverter.Values%2A>プロパティです。  
  
-   <xref:System.Windows.Style>の<xref:System.Windows.Controls.ListBoxItem>、バインド、<xref:System.Windows.Controls.Control.Background%2A>プロパティを<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>を作成するコンバーターを割り当てると、<xref:System.Windows.Data.Binding.Converter%2A?displayProperty=nameWithType>プロパティです。  
  
   
  
## Examples  
 次の例を作成、 <xref:System.Windows.Controls.ListBox> 2 つを使用して<xref:System.Windows.Controls.AlternationConverter>代替オブジェクト、<xref:System.Windows.Controls.Control.Background%2A>と<xref:System.Windows.Controls.Control.FontStyle%2A>項目の。  
  
 [!code-xaml[AlternationIndexSnippets#4](~/samples/snippets/csharp/VS_Snippets_Wpf/AlternationIndexSnippets/CS/Window1.xaml#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AlternationConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.AlternationConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AlternationConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.AlternationConverter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public object Convert (object o, Type targetType, object parameter, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Convert(object o, class System.Type targetType, object parameter, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.AlternationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Convert (o As Object, targetType As Type, parameter As Object, culture As CultureInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Convert(System::Object ^ o, Type ^ targetType, System::Object ^ parameter, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member Convert : obj * Type * obj * System.Globalization.CultureInfo -&gt; obj&#xA;override this.Convert : obj * Type * obj * System.Globalization.CultureInfo -&gt; obj" Usage="alternationConverter.Convert (o, targetType, parameter, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="o">
          <see cref="P:System.Windows.Controls.AlternationConverter.Values" /> プロパティのオブジェクトの検索に使用する整数。</param>
        <param name="targetType">バインディング ターゲット プロパティの型。</param>
        <param name="parameter">使用するコンバーター パラメーター。</param>
        <param name="culture">コンバーターで使用するカルチャ。</param>
        <summary>整数を <see cref="P:System.Windows.Controls.AlternationConverter.Values" /> リスト内のオブジェクトに変換します。</summary>
        <returns>
          <paramref name="o" /> を <see cref="P:System.Windows.Controls.AlternationConverter.Values" /> の項目数で除算した剰余の位置にあるオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertBack">
      <MemberSignature Language="C#" Value="public object ConvertBack (object o, Type targetType, object parameter, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertBack(object o, class System.Type targetType, object parameter, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.AlternationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertBack (o As Object, targetType As Type, parameter As Object, culture As CultureInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ConvertBack(System::Object ^ o, Type ^ targetType, System::Object ^ parameter, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member ConvertBack : obj * Type * obj * System.Globalization.CultureInfo -&gt; obj&#xA;override this.ConvertBack : obj * Type * obj * System.Globalization.CultureInfo -&gt; obj" Usage="alternationConverter.ConvertBack (o, targetType, parameter, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="o">
          <see cref="P:System.Windows.Controls.AlternationConverter.Values" /> プロパティ内で検索するオブジェクト。</param>
        <param name="targetType">バインディング ターゲット プロパティの型。</param>
        <param name="parameter">使用するコンバーター パラメーター。</param>
        <param name="culture">コンバーターで使用するカルチャ。</param>
        <summary>
          <see cref="P:System.Windows.Controls.AlternationConverter.Values" /> リスト内のオブジェクトを整数に変換します。</summary>
        <returns>
          <paramref name="o" /> が <see cref="P:System.Windows.Controls.AlternationConverter.Values" /> にある場合はそのインデックス、または o が <see cref="P:System.Windows.Controls.AlternationConverter.Values" /> に存在しない場合は -1。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.IList Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList Values" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.AlternationConverter.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ Values { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.IList" Usage="System.Windows.Controls.AlternationConverter.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>整数が <see cref="T:System.Windows.Controls.AlternationConverter" /> メソッドに渡されたときに <see cref="M:System.Windows.Controls.AlternationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" /> が返すオブジェクトのリストを取得します。</summary>
        <value>整数が <see cref="T:System.Windows.Controls.AlternationConverter" /> メソッドに渡されたときに <see cref="M:System.Windows.Controls.AlternationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" /> が返すオブジェクトのリスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用すると、<xref:System.Windows.Controls.AlternationConverter>プロパティの値を交互にバインドする、<xref:System.Windows.Controls.AlternationConverter.Values%2A>プロパティがプロパティに割り当てられているオブジェクトを格納します。  項目を検索する場合など、<xref:System.Windows.Controls.ListBox>青いを追加するには、青と明るい青色の背景を交互<xref:System.Windows.Media.SolidColorBrush>明るい青<xref:System.Windows.Media.SolidColorBrush>に<xref:System.Windows.Controls.AlternationConverter.Values%2A>です。  
  
   
  
## Examples  
 次の例を作成、 <xref:System.Windows.Controls.ListBox> 2 つを使用して<xref:System.Windows.Controls.AlternationConverter>代替オブジェクト、<xref:System.Windows.Controls.Control.Background%2A>と<xref:System.Windows.Controls.Control.FontStyle%2A>項目の。  
  
 [!code-xaml[AlternationIndexSnippets#4](~/samples/snippets/csharp/VS_Snippets_Wpf/AlternationIndexSnippets/CS/Window1.xaml#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>