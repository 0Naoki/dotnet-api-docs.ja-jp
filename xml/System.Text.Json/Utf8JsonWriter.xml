<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="95e447237490499a44da675658b3cfce4371e997" /><Meta Name="ms.sourcegitcommit" Value="08fc3691deb7adaf0dfd751b9d9d0b23a3d3a7b8" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/09/2019" /><Meta Name="ms.locfileid" Value="68901541" /></Metadata><TypeSignature Language="C#" Value="public sealed class Utf8JsonWriter : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Utf8JsonWriter extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Utf8JsonWriter&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8JsonWriter sealed : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = class&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-3.0">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="a1ecd-101">UTF-8 でエンコードされた JSON テキストの前方参照、非キャッシュの書き込みのために、高パフォーマンスの API を提供します。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-102">`Utf8JsonWriter`キャッシュなしでテキストをシーケンシャルに書き込みます。また、コメントの書き込みを除き、既定では[JSON RFC](https://tools.ietf.org/html/rfc8259)に準拠します。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="a1ecd-103">検証が有効になっているときに無効な JSON を書き込もう<xref:System.InvalidOperationException>とするメソッドは、コンテキスト固有のエラーメッセージを使用してをスローします。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>

<span data-ttu-id="a1ecd-104">出力をインデントおよび空白で書式設定したり、検証をスキップしたりできるようにするに<xref:System.Text.Json.JsonWriterOptions>は、のインスタンスを作成し、それをライターに渡します。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-104">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterOptions> and pass it in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="a1ecd-105">JSON テキストの書き込み先。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-105">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="a1ecd-106"><see cref="T:System.Text.Json.Utf8JsonWriter" /> のカスタマイズされた動作を定義します。既定では、最小化された JSON (余分な空白なし) を書き込み、書き込まれる JSON が構造上有効であることを JSON RFC に従って検証します。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-106">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> By default, it writes minimized JSON (with no extra whitespace) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="a1ecd-107">指定された <see langword="System.Buffers.IBufferWriter&lt;System.Byte&gt;" /> を使用して、新しい <see cref="T:System.Text.Json.Utf8JsonWriter" /> インスタンスを構築します。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-107">Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> instance with a specified <see langword="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-108"><paramref name="bufferWriter" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-108"><paramref name="bufferWriter" />  is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.IO.Stream utf8Json, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (utf8Json As Stream, Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.IO.Stream * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (utf8Json, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="a1ecd-109">JSON テキストの書き込み先。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-109">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="a1ecd-110"><see cref="T:System.Text.Json.Utf8JsonWriter" /> のカスタマイズされた動作を定義します。既定では、最小化された JSON (余分な空白なし) を書き込み、書き込まれる JSON が構造上有効であることを JSON RFC に従って検証します。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-110">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> By default, it writes minimized JSON (with no extra whitespace) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="a1ecd-111">指定された <paramref name="utf8Json" /> を使用して、新しい <see cref="T:System.Text.Json.Utf8JsonWriter" /> インスタンスを構築します。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-111">Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> instance with a specified <paramref name="utf8Json" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-112"><paramref name="utf8Json" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-112"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1ecd-113">現在のインスタンスによってこれまで出力にコミットされた合計バイト数を取得します。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-113">Gets the total number of bytes committed to the output by the current instance so far.</span></span></summary>
        <value><span data-ttu-id="a1ecd-114">これまでにによって<see cref="T:System.Text.Json.Utf8JsonWriter" />出力にコミットされたバイトの合計数。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-114">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-115">の<xref:System.Buffers.IBufferWriter%601>場合、このプロパティは ibufferwriter がどの程度進んでいるかを示します。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-115">In the case of an <xref:System.Buffers.IBufferWriter%601>, this property indicates how much the IBufferWriter has advanced.</span></span>

<span data-ttu-id="a1ecd-116">の<xref:System.IO.Stream>場合、このプロパティはストリームに書き込まれたデータの量を示します。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-116">In the case of a <xref:System.IO.Stream>, this property indicates how much data has been written to the stream.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesPending">
      <MemberSignature Language="C#" Value="public int BytesPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesPending" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesPending As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesPending { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesPending : int" Usage="System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1ecd-117">これまでに <see cref="T:System.Text.Json.Utf8JsonWriter" /> によって書き込まれたバイト数のうち、まだ出力にフラッシュされてコミットされていないバイト数を取得します。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-117">Gets the number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far that have not yet been flushed to the output and committed.</span></span></summary>
        <value><span data-ttu-id="a1ecd-118">が<see cref="T:System.Text.Json.Utf8JsonWriter" />これまでに書き込まれたバイト数。出力にフラッシュされず、コミットされていません。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-118">The number of bytes written so far by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> that have not yet been flushed to the output and committed.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1ecd-119">現在のトークンの深度を取得します。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-119">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="a1ecd-120">現在のトークンの深さ。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-120">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-121">プロパティ`CurrentDepth`は、これまでに記述された JSON テキスト内の入れ子になったオブジェクトまたは配列の再帰的な深さを追跡します。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-121">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="utf8JsonWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1ecd-122">まだフラッシュされていない残りの JSON テキストがあればそれをコミットし、現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-122">Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-123">Ibufferwriter の場合、これまでに記述され<xref:System.Buffers.IBufferWriter`1>た内容に基づいて、基になるを進めます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-123">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="a1ecd-124">ストリームの場合、これによってデータがストリームに書き込まれ、フラッシュされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-124">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="a1ecd-125">破棄<xref:System.Text.Json.Utf8JsonWriter>後にインスタンスを再利用することはできません。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-125">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="utf8JsonWriter.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1ecd-126">まだフラッシュされていない残りの JSON テキストがあればそれを非同期的にコミットし、現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-126">Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <returns><span data-ttu-id="a1ecd-127">非同期の破棄操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-127">A task representing the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-128">Ibufferwriter の場合、これまでに記述され<xref:System.Buffers.IBufferWriter`1>た内容に基づいて、基になるを進めます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-128">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>
          
<span data-ttu-id="a1ecd-129">ストリームの場合、これによってデータがストリームに書き込まれ、フラッシュされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-129">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="a1ecd-130">破棄<xref:System.Text.Json.Utf8JsonWriter>後にインスタンスを再利用することはできません。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-130">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="utf8JsonWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1ecd-131">これまでに書き込まれた JSON テキストをコミットします。これにより出力先で表示できるようになります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-131">Commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-132">Ibufferwriter の場合、これまでに記述され<xref:System.Buffers.IBufferWriter`1>た内容に基づいて、基になるを進めます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-132">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="a1ecd-133">の<xref:System.IO.Stream>場合、これによりデータがストリームに書き込まれ、フラッシュされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-133">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a1ecd-134">このインスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-134">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="utf8JsonWriter.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="a1ecd-135">キャンセル要求を監視するためのトークン。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-135">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="a1ecd-136">既定値は <see cref="T:System.Threading.CancellationToken.None" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-136">The default value is <see cref="T:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="a1ecd-137">これまでに書き込まれた JSON テキストを非同期的にコミットします。これにより出力先で表示できるようになります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-137">Asynchronously commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <returns><span data-ttu-id="a1ecd-138">非同期のフラッシュ操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-138">A task representing the asynchronous flush operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-139">Ibufferwriter の場合、これまでに記述され<xref:System.Buffers.IBufferWriter`1>た内容に基づいて、基になるを進めます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-139">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="a1ecd-140">の<xref:System.IO.Stream>場合は、キャンセル要求を監視しながら、データをストリームに書き込み、非同期的にフラッシュします。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-140">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it asynchronously, while monitoring cancellation requests.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a1ecd-141">このインスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-141">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonWriterOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonWriterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonWriterOptions Options { System::Text::Json::JsonWriterOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonWriterOptions" Usage="System.Text.Json.Utf8JsonWriter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1ecd-142">このインスタンスを使用して JSON を書き込む際のカスタム動作を取得します。これによって、書き込み中に出力をフォーマットするかどうか、および JSON の構造検証をスキップするかどうかが示されます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-142">Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing and whether to skip structural JSON validation.</span></span></summary>
        <value><span data-ttu-id="a1ecd-143">このインスタンスの書式設定および検証の動作を定義するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-143">An object that defines the behavior of this instance for formatting and validation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="utf8JsonWriter.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1ecd-144">このインスタンスの内部状態をリセットして、それを再利用できるようにします。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-144">Resets the internal state of this instance so that it can be reused.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-145">は<xref:System.Text.Json.Utf8JsonWriter> 、元のライターオプションと元の出力 (または<xref:System.IO.Stream>のいずれ<xref:System.Buffers.IBufferWriter`1>か) を変換先として使用し続けます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-145">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options and the original output (either <xref:System.Buffers.IBufferWriter`1> or <xref:System.IO.Stream>) as the destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a1ecd-146">このインスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-146">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (bufferWriter As IBufferWriter(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ bufferWriter);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.Buffers.IBufferWriter&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.Reset bufferWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="a1ecd-147">JSON テキストの書き込み先。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-147">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="a1ecd-148">このインスタンスの内部状態をリセットして、<see cref="T:System.Buffers.IBufferWriter`1" /> の新しいインスタンスで再利用できるようにします。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-148">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-149">は引き続き元のライターオプションを使用しますが、現在`bufferWriter`は新しい変換先としてに書き込まれます。<xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="a1ecd-149">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `bufferWriter` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-150"><paramref name="bufferWriter" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-150"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a1ecd-151">このインスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-151">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.IO.Stream utf8Json);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.IO.Stream utf8Json) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (utf8Json As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::IO::Stream ^ utf8Json);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.IO.Stream -&gt; unit" Usage="utf8JsonWriter.Reset utf8Json" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="a1ecd-152">JSON テキストの書き込み先。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-152">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="a1ecd-153">このインスタンスの内部状態をリセットして、<see cref="T:System.IO.Stream" /> の新しいインスタンスで再利用できるようにします。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-153">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-154">は引き続き元のライターオプションを使用しますが、現在`utf8Json`は新しい変換先としてに書き込まれます。<xref:System.Text.Json.Utf8JsonWriter></span><span class="sxs-lookup"><span data-stu-id="a1ecd-154">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now write to `utf8Json` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-155"><paramref name="utf8Json" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-155"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="a1ecd-156">このインスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-156">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (utf8PropertyName As ReadOnlySpan(Of Byte), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (utf8PropertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-157">書き込むプロパティの UTF-8 でエンコードされた名前。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-157">The UTF-8 encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="a1ecd-158">名前/値ペアの一部として、base 64 でエンコードされた JSON 文字列として書き込まれるバイナリ データ。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-158">The binary data to be written as a base 64 encoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-159">JSON オブジェクトの名前/値ペアの一部として、プロパティ名と生バイト値 (base 64 でエンコードされた JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-159">Writes the property name and raw bytes value (as a base 64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-160">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-160">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-161">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-161">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-162">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-162">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As ReadOnlySpan(Of Char), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-163">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-163">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="a1ecd-164">名前/値ペアの一部として、base 64 でエンコードされた JSON 文字列として書き込まれるバイナリ データ。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-164">The binary data to be written as a base 64 encoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-165">JSON オブジェクトの名前/値ペアの一部として、プロパティ名と生バイト値 (base 64 でエンコードされた JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-165">Writes the property name and raw bytes value (as a base 64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-166">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-166">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-167">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-167">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-168">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-168">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (string propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As String, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-169">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-169">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="a1ecd-170">名前/値ペアの一部として、base 64 でエンコードされた JSON 文字列として書き込まれるバイナリ データ。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-170">The binary data to be written as a base 64 encoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-171">JSON オブジェクトの名前/値ペアの一部として、プロパティ名と生バイト値 (Base64 でエンコードされた JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-171">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-172">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-172">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-173">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-173">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-174">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-174">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-175"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-175">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As JsonEncodedText, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-176">書き込むプロパティの JSON でエンコードされた名前。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-176">The JSON-encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="a1ecd-177">名前/値ペアの一部として、base 64 でエンコードされた JSON 文字列として書き込まれるバイナリ データ。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-177">The binary data to be written as a base 64 encoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-178">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と生バイト値 (base 64 でエンコードされた JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-178">Writes the pre-encoded property name and raw bytes value (as a base 64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-179">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-179">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-180">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-180">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64StringValue">
      <MemberSignature Language="C#" Value="public void WriteBase64StringValue (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64StringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64StringValue (bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64StringValue(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64StringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64StringValue bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="a1ecd-181">JSON 配列の base 64 でエンコードされた JSON 文字列要素として書き込まれるバイナリ データ。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-181">The binary data to be written as a base 64 encoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-182">JSON 配列の要素として、base 64 でエンコードされた JSON 文字列として生バイト値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-182">Writes the raw bytes value as base 64 encoded JSON string as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-183">書き込みの前にバイトがエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-183">The bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-184">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-184">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-185">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-185">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-186">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-186">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-187">名前/値ペアの一部として、JSON リテラル <b>true</b> または <b>false</b> として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-187">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-188">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Boolean" /> 値 (JSON リテラルの <b>true</b> または <b>false</b> として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-188">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-189">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-189">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-190">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-190">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-191">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-191">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-192">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-192">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-193">名前/値ペアの一部として、JSON リテラル <b>true</b> または <b>false</b> として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-193">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-194">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Boolean" /> 値 (JSON リテラルの <b>true</b> または <b>false</b> として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-194">Writes a property name specified as a read-only character span and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-195">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-195">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-196">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-196">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-197">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-197">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::String ^ propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-198">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-198">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-199">名前/値ペアの一部として、JSON リテラル <b>true</b> または <b>false</b> として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-199">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-200">文字列として指定されたプロパティ名と、<see cref="T:System.Boolean" /> 値 (JSON リテラルの <b>true</b> または <b>false</b> として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-200">Writes a property name specified as a string and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-201">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-201">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-202">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-202">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-203">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-203">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-204"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-204">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (System.Text.Json.JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.Text.Json.JsonEncodedText propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As JsonEncodedText, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::Text::Json::JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : System.Text.Json.JsonEncodedText * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-205">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-205">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-206">名前/値ペアの一部として、JSON リテラル <b>true</b> または <b>false</b> として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-206">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-207">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Boolean" /> 値 (JSON リテラル <b>true</b> または <b>false</b>) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-207">Writes the pre-encoded property name and <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-208">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-208">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-209">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-209">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-210">JSON 配列の一部として、JSON リテラル <b>true</b> または <b>false</b> として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-210">The value to be written as a JSON literal <b>true</b> or <b>false</b> as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-211">JSON 配列の要素として、<see cref="T:System.Boolean" /> 値 (JSON リテラル <b>true</b> または <b>false</b> として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-211">Writes a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-212">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-212">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="a1ecd-213">/*..*/ 内に JSON コメントとして書き込まれる、UTF-8 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-213">The UTF-8 encoded value to be written as a JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="a1ecd-214">UTF-8 テキスト値を JSON コメントとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-214">Writes a UTF-8 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-215">コメント値は、書き込みの前にエスケープされません。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-215">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-216">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-216">The specified value is too large.</span></span>
        
<span data-ttu-id="a1ecd-217">- または -</span><span class="sxs-lookup"><span data-stu-id="a1ecd-217">-or-</span></span>

<span data-ttu-id="a1ecd-218"><paramref name="utf8Value" /> にコメント区切り記号 (つまり \*/) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-218"><paramref name="utf8Value" /> contains a comment delimiter (that is, \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-219">/*..*/ 内に UTF-8 でトランスコードされた JSON コメントとして書き込まれる、UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-219">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="a1ecd-220">UTF-16 テキスト値を JSON コメントとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-220">Writes a UTF-16 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-221">コメント値は、書き込みの前にエスケープされません。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-221">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-222">指定した値は、過大な OR です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-222">The specified value is too large OR.</span></span>
        
<span data-ttu-id="a1ecd-223">- または -</span><span class="sxs-lookup"><span data-stu-id="a1ecd-223">-or-</span></span>

<span data-ttu-id="a1ecd-224"><paramref name="value" /> にコメント区切り記号 (つまり \*/) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-224"><paramref name="value" /> contains a comment delimiter (that is, \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-225">/*..*/ 内に UTF-8 でトランスコードされた JSON コメントとして書き込まれる、UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-225">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="a1ecd-226">文字列テキスト値を JSON コメントとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-226">Writes a string text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-227">コメント値は、書き込みの前にエスケープされません。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-227">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-228">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-228">The specified value is too large.</span></span>
        
<span data-ttu-id="a1ecd-229">- または -</span><span class="sxs-lookup"><span data-stu-id="a1ecd-229">-or-</span></span>

<span data-ttu-id="a1ecd-230"><paramref name="value" /> にコメント区切り記号 (つまり \*/) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-230"><paramref name="value" /> contains a comment delimiter (that is, \*/).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-231"><paramref name="value" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-231">The <paramref name="value" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1ecd-232">JSON 配列の終了を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-232">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-233">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-233">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1ecd-234">JSON オブジェクトの終了を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-234">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-235">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-235">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-236">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-236">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="a1ecd-237">バイト型の読み取り専用スパンとして指定されたプロパティ名と、JSON リテラルの <b>null</b> を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-237">Writes a property name specified as a read-only span of bytes and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-238">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-238">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-239">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-239">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-240">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-240">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-241">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-241">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="a1ecd-242">読み取り専用の文字範囲として指定されたプロパティ名と、JSON リテラルの <b>null</b> を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-242">Writes a property name specified as a read-only character span and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-243">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-243">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-244">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-244">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-245">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-245">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-246">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-246">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="a1ecd-247">文字列として指定されたプロパティ名と、JSON リテラルの <b>null</b> を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-247">Writes a property name specified as a string and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-248">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-248">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-249">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-249">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-250">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-250">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-251"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-251">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-252">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-252">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="a1ecd-253">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と JSON リテラル <b>null</b> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-253">Writes the pre-encoded property name and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-254">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-254">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-255">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-255">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1ecd-256">JSON 配列の要素として、JSON リテラル <b>null</b> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-256">Writes the JSON literal <b>null</b> as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-257">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-257">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-258">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-258">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-259">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-259">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-260">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-260">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[ 

## Remarks

<span data-ttu-id="a1ecd-261">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。<xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="a1ecd-261">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="a1ecd-262">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-262">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-263">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-263">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-264">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-264">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-265">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-265">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-266">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-266">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-267">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Double" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-267">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-268">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。<xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="a1ecd-268">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="a1ecd-269">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-269">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-270">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-270">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-271">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-271">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-272">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-272">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-273">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-273">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-274">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Int32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-274">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-275">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="a1ecd-275">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-276">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-276">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-277">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-277">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-278">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-278">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-279">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-279">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-280">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-280">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-281">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Int64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-281">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-282">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="a1ecd-282">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-283">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-283">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-284">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-284">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-285">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-285">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-286">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-286">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-287">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-287">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-288">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Single" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-288">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-289">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。<xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="a1ecd-289">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="a1ecd-290">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-290">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-291">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-291">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-292">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-292">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-293">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-293">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-294">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-294">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-295">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-295">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-296">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="a1ecd-296">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-297">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-297">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-298">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-298">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-299">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-299">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-300">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-300">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-301">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-301">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-302">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-302">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-303">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="a1ecd-303">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-304">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-304">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-305">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-305">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-306">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-306">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-307">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-307">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-308">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-308">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-309">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-309">Writes a property name specified as a read-only character span and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-310">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。<xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="a1ecd-310">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="a1ecd-311">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-311">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-312">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-312">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-313">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-313">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-314">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-314">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-315">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-315">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-316">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Double" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-316">Writes a property name specified as a read-only character span and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-317">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。<xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="a1ecd-317">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="a1ecd-318">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-318">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-319">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-319">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-320">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-320">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-321">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-321">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-322">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-322">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-323">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Int32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-323">Writes a property name specified as a read-only character span and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-324">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="a1ecd-324">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-325">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-325">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-326">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-326">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-327">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-327">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-328">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-328">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-329">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-329">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-330">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Int64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-330">Writes a property name specified as a read-only character span and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-331">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="a1ecd-331">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-332">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-332">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-333">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-333">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-334">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-334">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-335">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-335">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-336">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-336">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-337">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Single" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-337">Writes a property name specified as a read-only character span and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-338">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。<xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="a1ecd-338">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="a1ecd-339">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-339">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-340">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-340">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-341">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-341">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-342">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-342">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-343">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-343">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-344">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-344">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-345">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="a1ecd-345">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-346">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-346">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-347">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-347">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-348">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-348">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-349">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-349">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-350">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-350">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-351">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-351">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-352">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="a1ecd-352">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-353">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-353">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-354">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-354">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-355">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-355">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-356">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-356">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-357">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-357">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-358">文字列として指定されたプロパティ名と、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-358">Writes a property name specified as a string and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-359">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。<xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="a1ecd-359">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="a1ecd-360">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-360">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-361">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-361">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-362">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-362">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-363"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-363">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-364">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-364">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-365">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-365">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-366">文字列として指定されたプロパティ名と、<see cref="T:System.Double" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-366">Writes a property name specified as a string and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-367">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。<xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="a1ecd-367">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="a1ecd-368">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-368">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-369">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-369">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-370">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-370">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-371"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-371">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-372">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-372">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-373">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-373">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-374">文字列として指定されたプロパティ名と、<see cref="T:System.Int32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-374">Writes a property name specified as a string and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-375">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="a1ecd-375">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-376">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-376">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-377">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-377">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-378">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-378">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-379"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-379">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-380">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-380">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-381">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-381">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-382">文字列として指定されたプロパティ名と、<see cref="T:System.Int64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-382">Writes a property name specified as a string and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-383">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="a1ecd-383">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-384">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-384">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-385">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-385">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-386">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-386">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-387"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-387">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-388">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-388">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-389">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-389">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-390">文字列として指定されたプロパティ名と、<see cref="T:System.Single" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-390">Writes a property name specified as a string and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-391">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。<xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="a1ecd-391">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="a1ecd-392">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-392">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-393">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-393">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-394">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-394">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-395"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-395">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-396">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-396">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-397">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-397">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-398">文字列として指定されたプロパティ名と、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-398">Writes a property name specified as a string and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-399">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="a1ecd-399">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-400">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-400">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-401">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-401">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-402">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-402">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-403"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-403">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-404">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-404">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-405">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-405">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-406">文字列として指定されたプロパティ名と、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-406">Writes a property name specified as a string and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-407">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="a1ecd-407">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-408">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-408">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-409">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-409">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-410">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-410">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-411"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-411">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-412">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-412">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-413">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-413">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-414">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Decimal" /> 値 (JSON 番号) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-414">Writes the pre-encoded property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-415">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。<xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="a1ecd-415">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="a1ecd-416">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-416">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-417">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-417">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-418">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-418">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-419">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-419">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-420">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Double" /> 値 (JSON 番号) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-420">Writes the pre-encoded property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-421">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。<xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="a1ecd-421">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="a1ecd-422">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-422">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-423">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-423">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-424">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-424">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-425">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-425">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-426">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Int32" /> 値 (JSON 番号) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-426">Writes the pre-encoded property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-427">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="a1ecd-427">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-428">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-428">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-429">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-429">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-430">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-430">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-431">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-431">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-432">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Int64" /> 値 (JSON 番号) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-432">Writes the pre-encoded property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-433">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="a1ecd-433">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (this is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-434">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-434">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-435">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-435">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-436">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-436">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-437">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-437">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-438">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Single" /> 値 (JSON 番号) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-438">Writes the pre-encoded property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-439">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。<xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="a1ecd-439">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="a1ecd-440">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-440">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-441">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-441">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-442">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-442">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-443">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-443">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-444">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.UInt32" /> 値 (JSON 番号) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-444">Writes the pre-encoded property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-445">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="a1ecd-445">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-446">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-446">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-447">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-447">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-448">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-448">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-449">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-449">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-450">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.UInt64" /> 値 (JSON 番号) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-450">Writes the pre-encoded property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-451">既定値<xref:System.Buffers.StandardFormat> ("G")を使用してを書き込みます。たとえば、32767です。<xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="a1ecd-451">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="a1ecd-452">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-452">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-453">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-453">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-454">JSON 配列の一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-454">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-455">JSON 配列の要素として、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-455">Writes a <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-456">このメソッドは、 <xref:System.Decimal>既定<xref:System.Buffers.StandardFormat>値 ("G") を使用して値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-456">This method writes the <xref:System.Decimal> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-457">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-457">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-458">JSON 配列の一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-458">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-459">JSON 配列の要素として、<see cref="T:System.Double" /> 値 (JSON 数値として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-459">Writes a <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-460">このメソッドは、 <xref:System.Double>既定<xref:System.Buffers.StandardFormat>値 ("G") を使用して値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-460">This method writes the <xref:System.Double> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-461">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-461">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-462">JSON 配列の一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-462">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-463">JSON 配列の要素として、<see cref="T:System.Int32" /> 値 (JSON 数値として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-463">Writes an <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-464">このメソッドは、 <xref:System.Int32>既定<xref:System.Buffers.StandardFormat>値 ("G") を使用して値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-464">This method writes the <xref:System.Int32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="a1ecd-465">たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-465">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-466">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-466">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-467">JSON 配列の一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-467">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-468">JSON 配列の要素として、<see cref="T:System.Int64" /> 値 (JSON 数値として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-468">Writes an <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-469">このメソッドは、 <xref:System.Int64>既定<xref:System.Buffers.StandardFormat>値 ("G") を使用して値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-469">This method writes the <xref:System.Int64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="a1ecd-470">たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-470">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-471">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-471">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-472">JSON 配列の一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-472">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-473">JSON 配列の要素として、<see cref="T:System.Single" /> 値 (JSON 数値として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-473">Writes a <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-474">このメソッドは、 <xref:System.Single>既定<xref:System.Buffers.StandardFormat>値 ("G") を使用して値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-474">This method writes the <xref:System.Single> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-475">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-475">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-476">JSON 配列の一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-476">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-477">JSON 配列の要素として、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-477">Writes a <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-478">このメソッドは、 <xref:System.UInt32>既定<xref:System.Buffers.StandardFormat>値 ("G") を使用して値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-478">This method writes the <xref:System.UInt32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="a1ecd-479">たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-479">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-480">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-480">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-481">JSON 配列の一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-481">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-482">JSON 配列の要素として、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-482">Writes a <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-483">このメソッドは、 <xref:System.UInt64>既定<xref:System.Buffers.StandardFormat>値 ("G") を使用して値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-483">This method writes the <xref:System.UInt64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="a1ecd-484">たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-484">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-485">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-485">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-486">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-486">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="a1ecd-487">JSON オブジェクトの名前/値ペアの最初の部分として、UTF-8 プロパティ名 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-487">Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-488">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-488">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-489">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-489">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-490">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-490">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-491">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-491">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="a1ecd-492">JSON オブジェクトの名前/値ペアの最初の部分として、プロパティ名 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-492">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-493">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-493">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-494">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-494">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-495">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-495">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : string -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-496">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-496">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="a1ecd-497">JSON オブジェクトの名前/値ペアの最初の部分として、プロパティ名 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-497">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-498">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-498">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-499">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-499">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-500">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-500">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-501">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-501">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="a1ecd-502">JSON オブジェクトの名前/値ペアの最初の部分として、事前にエンコードされたプロパティ名 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-502">Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-503">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-503">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-504">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-504">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1ecd-505">JSON 配列の先頭を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-505">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-506">JSON の深度が、最大深度 1000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-506">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="a1ecd-507">- または -</span><span class="sxs-lookup"><span data-stu-id="a1ecd-507">-or-</span></span>

<span data-ttu-id="a1ecd-508">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-508">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-509">書き込み対象の JSON 配列の UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-509">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <summary><span data-ttu-id="a1ecd-510">バイト型の読み取り専用スパンとして指定されたプロパティ名を含む JSON 配列の先頭をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-510">Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-511">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-511">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-512">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-512">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-513">JSON の深度が、最大深度 1000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-513">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="a1ecd-514">または</span><span class="sxs-lookup"><span data-stu-id="a1ecd-514">-or-</span></span>
       
<span data-ttu-id="a1ecd-515">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-515">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-516">UTF-8 としてトランスコードおよび書き込み対象の JSON 配列の UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-516">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="a1ecd-517">読み取り専用の文字範囲として指定されたプロパティ名を含む JSON 配列の先頭をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-517">Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-518">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-518">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-519">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-519">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-520">JSON の深度が、最大深度 1000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-520">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="a1ecd-521">または</span><span class="sxs-lookup"><span data-stu-id="a1ecd-521">-or-</span></span>
       
<span data-ttu-id="a1ecd-522">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-522">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-523">UTF-8 としてトランスコードおよび書き込み対象の JSON 配列の UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-523">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="a1ecd-524">文字列として指定されたプロパティ名を含む JSON 配列の先頭をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-524">Writes the beginning of a JSON array with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-525">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-525">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-526">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-526">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-527">JSON の深度が、最大深度 1000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-527">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="a1ecd-528">- または -</span><span class="sxs-lookup"><span data-stu-id="a1ecd-528">-or-</span></span>
       
<span data-ttu-id="a1ecd-529">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-529">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-530"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-530">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-531">UTF-8 としてトランスコードおよび書き込み対象の JSON 配列の JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-531">The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="a1ecd-532">JSON 配列の先頭を、事前にエンコードされたプロパティ名をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-532">Writes the beginning of a JSON array with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-533">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-533">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-534">JSON の深度が、最大深度 1000 を超えています。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-534">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>
    
<span data-ttu-id="a1ecd-535">または</span><span class="sxs-lookup"><span data-stu-id="a1ecd-535">- or -</span></span>

<span data-ttu-id="a1ecd-536">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-536">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1ecd-537">JSON オブジェクトの先頭を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-537">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-538">JSON の深度が、最大深度 1000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-538">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="a1ecd-539">- または -</span><span class="sxs-lookup"><span data-stu-id="a1ecd-539">-or-</span></span>

<span data-ttu-id="a1ecd-540">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-540">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-541">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-541">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="a1ecd-542">バイト型の読み取り専用スパンとして指定されたプロパティ名を含む JSON オブジェクトの先頭をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-542">Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-543">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-543">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-544">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-544">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-545">JSON の深度が、最大深度 1000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-545">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="a1ecd-546">または</span><span class="sxs-lookup"><span data-stu-id="a1ecd-546">-or-</span></span>
       
<span data-ttu-id="a1ecd-547">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-547">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-548">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-548">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="a1ecd-549">読み取り専用の文字範囲として指定されたプロパティ名を含む JSON オブジェクトの先頭をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-549">Writes the beginning of a JSON object with a property name specififed as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-550">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-550">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-551">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-551">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-552">JSON の深度が、最大深度 1000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-552">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="a1ecd-553">- または -</span><span class="sxs-lookup"><span data-stu-id="a1ecd-553">-or-</span></span>
       
<span data-ttu-id="a1ecd-554">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-554">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-555">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-555">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="a1ecd-556">文字列として指定されたプロパティ名を含む JSON オブジェクトの先頭をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-556">Writes the beginning of a JSON object with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-557">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-557">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-558">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-558">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-559">JSON の深度が、最大深度 1000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-559">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="a1ecd-560">または</span><span class="sxs-lookup"><span data-stu-id="a1ecd-560">-or-</span></span>
       
<span data-ttu-id="a1ecd-561">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-561">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-562"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-562">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-563">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-563">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="a1ecd-564">JSON オブジェクトの先頭を、事前にエンコードされたプロパティ名をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-564">Writes the beginning of a JSON object with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-565">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-565">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-566">JSON の深度が、最大深度 1000 を超えています。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-566">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>
          
<span data-ttu-id="a1ecd-567">または</span><span class="sxs-lookup"><span data-stu-id="a1ecd-567">- or -</span></span>

<span data-ttu-id="a1ecd-568">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-568">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-569">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-569">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-570">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-570">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-571">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と <see cref="T:System.DateTime" /> 値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-571">Writes a UTF-8 property name and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-572">ラウンドトライ可能 (' O ') <xref:System.Buffers.StandardFormat>を使用してを書き込みます。<xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="a1ecd-572">Writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>.</span></span> <span data-ttu-id="a1ecd-573">たとえば、2017-06-12T05:30: 45.7680000 のようになります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-573">For example, 2017-06-12T05:30:45.7680000.</span></span> <span data-ttu-id="a1ecd-574">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-574">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-575">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-575">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-576">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-576">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-577">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-577">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-578">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-578">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-579">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と <see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-579">Writes a UTF-8 property name and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-580">ラウンドトライ<xref:System.Buffers.StandardFormat>を使用してを書き込みます (' O ')。たとえば、2017-06-12t05:30: 45.7680000:00 のようになります。 <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="a1ecd-580">Writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000-07:00.</span></span> <span data-ttu-id="a1ecd-581">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-581">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-582">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-582">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-583">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-583">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-584">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-584">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-585">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-585">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-586">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と <see cref="T:System.Guid" /> 値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-586">Writes a UTF-8 property name and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-587">既定値<xref:System.Guid> <xref:System.Buffers.StandardFormat> ("d") を使用して、nnnnnnnn-nnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn の形式でを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-587">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="a1ecd-588">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-588">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-589">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-589">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-590">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-590">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-591">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-591">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="a1ecd-592">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-592">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-593">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と UTF-8 テキスト値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-593">Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-594">プロパティの名前と値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-594">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-595">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-595">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-596">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-596">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-597">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-597">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-598">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-598">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-599">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と UTF-16 テキスト値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-599">Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-600">プロパティの名前と値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-600">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-601">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-601">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-602">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-602">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-603">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-603">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-604">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-604">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-605">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と文字列テキスト値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-605">Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-606">プロパティの名前と値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-606">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-607">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-607">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-608">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-608">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="a1ecd-609">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-609">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-610">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-610">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-611">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-611">Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-612">値は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-612">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="a1ecd-613">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-613">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-614">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-614">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-615">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-615">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-616">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-616">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-617">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-617">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-618">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.DateTime" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-618">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-619">ラウンドトライ<xref:System.Buffers.StandardFormat>を使用してを書き込みます (' O ')。たとえば、2017-06-12t05:30: 45.7680000 のようにします。 <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="a1ecd-619">Writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000.</span></span> <span data-ttu-id="a1ecd-620">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-620">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-621">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-621">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-622">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-622">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-623">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-623">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-624">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-624">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-625">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-625">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-626">ラウンドトライ<xref:System.Buffers.StandardFormat>を使用してを書き込みます (' O ')。たとえば、2017-06-12t05:30: 45.7680000:00 のようになります。 <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="a1ecd-626">Writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000-07:00.</span></span> <span data-ttu-id="a1ecd-627">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-627">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-628">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-628">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-629">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-629">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-630">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-630">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-631">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-631">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-632">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Guid" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-632">Writes a property name specified as a read-only character span and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-633">既定値<xref:System.Guid> <xref:System.Buffers.StandardFormat> ("d") を使用して、nnnnnnnn-nnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn の形式でを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-633">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="a1ecd-634">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-634">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-635">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-635">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-636">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-636">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-637">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-637">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="a1ecd-638">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-638">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-639">JSON オブジェクトの名前/値ペアの一部として、UTF-16 プロパティ名と UTF-8 テキスト値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-639">Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-640">プロパティの名前と値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-640">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-641">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-641">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-642">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-642">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-643">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-643">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-644">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-644">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-645">JSON オブジェクトの名前/値ペアの一部として、UTF-16 プロパティ名と UTF-16 テキスト値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-645">Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-646">プロパティの名前と値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-646">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-647">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-647">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-648">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-648">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-649">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-649">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-650">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-650">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-651">JSON オブジェクトの名前/値ペアの一部として、UTF-16 プロパティ名と文字列テキスト値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-651">Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-652">プロパティの名前と値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-652">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-653">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-653">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-654">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-654">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-655">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-655">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-656">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-656">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-657">JSON オブジェクトの名前/値ペアの一部として、プロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-657">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-658">値は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-658">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="a1ecd-659">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-659">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-660">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-660">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-661">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-661">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-662">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-662">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-663">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-663">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-664">文字列として指定されたプロパティ名と、<see cref="T:System.DateTime" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-664">Writes a property name specified as a string and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-665">ラウンドトライ<xref:System.Buffers.StandardFormat>を使用してを書き込みます (' O ')。たとえば、2017-06-12t05:30: 45.7680000 のようにします。 <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="a1ecd-665">Writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000.</span></span> <span data-ttu-id="a1ecd-666">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-666">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-667">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-667">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-668">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-668">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-669"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-669">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-670">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-670">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-671">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-671">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-672">文字列として指定されたプロパティ名と、<see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-672">Writes a property name specified as a string and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-673">ラウンドトライ<xref:System.Buffers.StandardFormat>を使用してを書き込みます (' O ')。たとえば、2017-06-12t05:30: 45.7680000:00 のようになります。 <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="a1ecd-673">Writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000-07:00.</span></span> <span data-ttu-id="a1ecd-674">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-674">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-675">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-675">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-676">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-676">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-677"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-677">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-678">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-678">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-679">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-679">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-680">文字列として指定されたプロパティ名と、<see cref="T:System.Guid" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-680">Writes a property name specified as a string and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-681">既定値<xref:System.Guid> <xref:System.Buffers.StandardFormat> ("d") を使用して、nnnnnnnn-nnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn の形式でを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-681">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="a1ecd-682">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-682">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-683">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-683">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-684">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-684">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-685"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-685">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-686">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-686">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="a1ecd-687">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-687">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-688">文字列として指定されたプロパティ名と、UTF-8 テキスト値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-688">Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-689">プロパティの名前と値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-689">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-690">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-690">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-691">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-691">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-692"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-692">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-693">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-693">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-694">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-694">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-695">文字列として指定されたプロパティ名と、UTF-16 テキスト値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-695">Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-696">プロパティの名前と値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-696">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-697">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-697">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-698">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-698">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-699"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-699">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-700">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-700">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-701">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-701">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-702">文字列として指定されたプロパティ名と、文字列テキスト値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-702">Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-703">プロパティの名前と値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-703">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-704">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-704">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-705">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-705">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-706"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-706">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-707">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-707">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-708">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-708">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-709">JSON オブジェクトの名前/値ペアの一部として、プロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-709">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-710">値は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-710">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="a1ecd-711">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-711">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-712">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-712">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-713">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-713">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a1ecd-714"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-714">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-715">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-715">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-716">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-716">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-717">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.DateTime" /> 値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-717">Writes the pre-encoded property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-718">ラウンドトライ<xref:System.Buffers.StandardFormat>を使用してを書き込みます (' O ')。たとえば、2017-06-12t05:30: 45.7680000 のようにします。 <xref:System.DateTime></span><span class="sxs-lookup"><span data-stu-id="a1ecd-718">Writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="a1ecd-719">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-719">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-720">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-720">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-721">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-721">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-722">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-722">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-723">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-723">Writes the pre-encoded property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-724">ラウンドトライ<xref:System.Buffers.StandardFormat>を使用してを書き込みます (' O ')。たとえば、2017-06-12t05:30: 45.7680000:00 のようになります。 <xref:System.DateTimeOffset></span><span class="sxs-lookup"><span data-stu-id="a1ecd-724">Writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>; for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="a1ecd-725">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-725">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-726">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-726">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-727">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-727">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-728">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-728">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-729">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Guid" /> 値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-729">Writes the pre-encoded property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-730">既定値<xref:System.Guid> <xref:System.Buffers.StandardFormat> ("d") を使用して、nnnnnnnn-nnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn の形式でを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-730">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

<span data-ttu-id="a1ecd-731">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-731">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-732">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-732">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-733">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-733">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="a1ecd-734">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-734">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-735">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と UTF-8 テキスト値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-735">Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-736">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-736">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="a1ecd-737">値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-737">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-738">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-738">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-739">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-739">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-740">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-740">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-741">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-741">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-742">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名とテキスト値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-742">Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-743">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-743">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="a1ecd-744">値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-744">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-745">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-745">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-746">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-746">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-747">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-747">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-748">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-748">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-749">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と文字列テキスト値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-749">Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-750">プロパティ名は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-750">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="a1ecd-751">値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-751">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-752">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-752">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-753">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-753">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a1ecd-754">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-754">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="a1ecd-755">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-755">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="a1ecd-756">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-756">Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-757">プロパティの名前と値は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-757">The property name and value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-758">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-758">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-759">JSON 配列の一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-759">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-760">JSON 配列の要素として、<see cref="T:System.DateTime" /> 値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-760">Writes a <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-761">このメソッドは、 <xref:System.DateTime>ラウンドトライ可能 (' O ') <xref:System.Buffers.StandardFormat>を使用してを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-761">This method writes the <xref:System.DateTime> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>.</span></span> <span data-ttu-id="a1ecd-762">たとえば、2017-06-12T05:30: 45.7680000 のようになります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-762">For example, 2017-06-12T05:30:45.7680000.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-763">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-763">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-764">JSON 配列の一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-764">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-765">JSON 配列の要素として、<see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-765">Writes a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-766">このメソッドは、 <xref:System.DateTimeOffset>ラウンドトライ可能 (' O ') <xref:System.Buffers.StandardFormat>を使用してを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-766">This method writes the <xref:System.DateTimeOffset> using the round-trippable ('O') <xref:System.Buffers.StandardFormat>.</span></span> <span data-ttu-id="a1ecd-767">たとえば、2017-06-12T05:30: 45.7680000-07:00 のようになります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-767">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-768">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-768">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-769">JSON 配列の一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-769">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-770">JSON 配列の要素として、<see cref="T:System.Guid" /> 値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-770">Writes a <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-771">このメソッドは、 <xref:System.Guid>次の形式で<xref:System.Buffers.StandardFormat>既定値 ("d") を使用して値を書き込みます: nnnnnnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-771">This method writes the <xref:System.Guid> value using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-772">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-772">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="a1ecd-773">JSON 配列の JSON 文字列要素として書き込まれる UTF-8 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-773">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-774">JSON 配列の要素として、UTF-8 テキスト値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-774">Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-775">値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-775">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-776">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-776">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-777">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-777">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-778">JSON 配列の UTF-8 でトランスコードされた JSON 文字列要素として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-778">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-779">JSON 配列の要素として、UTF-16 テキスト値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-779">Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-780">値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-780">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-781">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-781">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-782">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-782">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-783">JSON 配列の UTF-8 でトランスコードされた JSON 文字列要素として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-783">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-784">JSON 配列の要素として、文字列テキスト値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-784">Writes a string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-785">値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-785">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a1ecd-786">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-786">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-787">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-787">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1ecd-788">JSON 配列の UTF-8 でトランスコードされた JSON 文字列要素として書き込まれる JSON でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-788">The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="a1ecd-789">JSON 配列の要素として、事前にエンコードされたテキスト値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-789">Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a1ecd-790">値は、の<xref:System.Text.Json.JsonEncodedText>インスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-790">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a1ecd-791">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="a1ecd-791">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
