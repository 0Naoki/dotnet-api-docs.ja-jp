<Type Name="JsonWriterOptions" FullName="System.Text.Json.JsonWriterOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cdf62fb82c2065e506a1cdde9519dcfdd4051504" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65006692" /></Metadata><TypeSignature Language="C#" Value="public struct JsonWriterOptions" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonWriterOptions extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonWriterOptions" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonWriterOptions" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonWriterOptions" />
  <TypeSignature Language="F#" Value="type JsonWriterOptions = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Text.Json.Utf8JsonWriter" /> を使用して JSON を書き込む際のカスタム動作をユーザーが定義することができます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

既定では、JSON はインデントや余分な空白は一切書き込まれます。 また、<xref:System.Text.Json.Utf8JsonWriter>ユーザーが構造的に無効な JSON を記述する場合に例外をスローします。

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Indented">
      <MemberSignature Language="C#" Value="public bool Indented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.Indented" />
      <MemberSignature Language="VB.NET" Value="Public Property Indented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indented : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.Indented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Text.Json.Utf8JsonWriter" /> が JSON 出力を書式設定する必要があるかどうかを示す値を、取得または設定します。この書式設定には、入れ子になった JSON トークンのインデント、新規行の追加、プロパティ名と値の間への空白の挿入などが含まれます。</summary>
        <value><see langword="true" /> 出力は JSON の書式設定<see langword="false" />に余分な空白なしに書き込めません。 既定値は <see langword="false" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipValidation">
      <MemberSignature Language="C#" Value="public bool SkipValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipValidation" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipValidation : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Text.Json.Utf8JsonWriter" /> が構造検証をスキップし、無効な JSON の書き込みをユーザーに許可する必要があるかどうかを示す値を、取得または設定します。</summary>
        <value><see langword="true" /> 構造の検証をスキップし、無効な JSON は; を許可するには<see langword="false" />をスローする、<see cref="T:System.InvalidOperationException" />に無効な JSON を書き込むしようとするとします。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

正しく書き込まれている JSON が既知の場合の検証をスキップしています (このプロパティを設定して`true`) パフォーマンスを向上させる可能性があります。
ライターがスローされます、無効な JSON の例 (ときに`SkipValidation`に設定されている`false`) は、プロパティ名のない JSON オブジェクト内の値を記述する場合。 

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>