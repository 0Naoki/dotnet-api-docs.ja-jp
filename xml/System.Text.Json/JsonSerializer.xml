<Type Name="JsonSerializer" FullName="System.Text.Json.JsonSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="55efe259c3954694d75aef7b8fdde8fe9e9d2cf0" /><Meta Name="ms.sourcegitcommit" Value="8544f14c8194a55eb22d46721b0bbe46f345c063" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/21/2019" /><Meta Name="ms.locfileid" Value="69669159" /></Metadata><TypeSignature Language="C#" Value="public static class JsonSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializer abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="166ee-101">オブジェクトまたは値型を JSON にシリアル化したり、JSON をオブジェクトまたは値型に逆シリアル化したりする機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="166ee-101">Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt; utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (utf8Json As ReadOnlySpan(Of Byte), returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="166ee-102">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="166ee-102">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="166ee-103">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="166ee-103">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-104">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-104">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="166ee-105">単一の JSON 値を表す UTF-8 エンコード テキストを、指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="166ee-105">Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="166ee-106">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="166ee-106">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="166ee-107"><paramref name="returnType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="166ee-107"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="166ee-108">JSON が無効であるか、<paramref name="returnType" /> と JSON の間に互換性がないか、または Stream にデータが残っています。</span><span class="sxs-lookup"><span data-stu-id="166ee-108">The JSON is invalid, <paramref name="returnType" /> is not compatible with the JSON, or when there is remaining data in the Stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(string json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (json As String, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="json"><span data-ttu-id="166ee-109">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="166ee-109">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="166ee-110">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="166ee-110">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-111">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-111">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="166ee-112">単一の JSON 値を表すテキストを、指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="166ee-112">Parses the text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="166ee-113">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="166ee-113">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="166ee-114">実装で<xref:System.String>は utf-8 をネイティブで使用するため、を使用することは、utf-8 メソッドを使用するほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="166ee-114">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="166ee-115"><paramref name="json" /> または <paramref name="returnType" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="166ee-115"><paramref name="json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="166ee-116">JSON が無効であるか、<paramref name="returnType" /> と JSON の間に互換性がないか、または Stream にデータが残っています。</span><span class="sxs-lookup"><span data-stu-id="166ee-116">The JSON is invalid, the <paramref name="returnType" /> is not compatible with the JSON, or when there is remaining data in the Stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (ByRef reader As Utf8JsonReader, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize :  * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="166ee-117">読み取りを行うリーダー。</span><span class="sxs-lookup"><span data-stu-id="166ee-117">The reader to read.</span></span></param>
        <param name="returnType"><span data-ttu-id="166ee-118">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="166ee-118">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-119">読み取り中にシリアライザーの動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-119">Options to control the serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="166ee-120">提供されたリーダーから 1 つの JSON 値 (オブジェクトまたは配列を含む) を読み取り、それを指定された型のインスタンスに変換します。</span><span class="sxs-lookup"><span data-stu-id="166ee-120">Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.</span></span></summary>
        <returns><span data-ttu-id="166ee-121">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="166ee-121">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="166ee-122">`reader` <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType>のプロパティがまたは<xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>の場合、リーダーは、値の先頭を決定するために、の1回の呼び出しによって高度なものになります。 <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> <xref:System.Text.Json.Utf8JsonReader.TokenType></span><span class="sxs-lookup"><span data-stu-id="166ee-122">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>

<span data-ttu-id="166ee-123">このメソッドの完了時に`reader` 、は JSON 値の最終トークンに配置されます。</span><span class="sxs-lookup"><span data-stu-id="166ee-123">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span>  <span data-ttu-id="166ee-124">例外がスローされた場合、リーダーは、メソッドが呼び出されたときの状態にリセットされます。</span><span class="sxs-lookup"><span data-stu-id="166ee-124">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>

<span data-ttu-id="166ee-125">このメソッドは、リーダーが処理したデータのコピーを作成します。したがって、このメソッドの戻り値を超えてデータの整合性を維持するための呼び出し元の要件はありません。</span><span class="sxs-lookup"><span data-stu-id="166ee-125">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>

<span data-ttu-id="166ee-126">の<xref:System.Text.Json.JsonReaderOptions>インスタンス<xref:System.Text.Json.Utf8JsonReader>を作成するために使用されるは、 <xref:System.Text.Json.JsonSerializerOptions>競合するときにより優先されます。</span><span class="sxs-lookup"><span data-stu-id="166ee-126">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="166ee-127">そのため、、、 <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType>およびは読み取り中に使用されます。 <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType> <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="166ee-127">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="166ee-128"><paramref name="returnType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="166ee-128"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="166ee-129">JSON が無効であるか、<paramref name="returnType" /> と JSON の間に互換性がないか、またはリーダーから値を読み取ることができません。</span><span class="sxs-lookup"><span data-stu-id="166ee-129">The JSON is invalid, <paramref name="returnType" /> is not compatible with the JSON, or a value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="166ee-130"><paramref name="reader" /> で、サポートされていないオプションが使用されています。</span><span class="sxs-lookup"><span data-stu-id="166ee-130"><paramref name="reader" /> is using unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt; utf8Json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (utf8Json As ReadOnlySpan(Of Byte), Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="166ee-131">UTF-8 でエンコードされたテキストの対象の型。</span><span class="sxs-lookup"><span data-stu-id="166ee-131">The target type of the UTF-8 encoded text.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="166ee-132">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="166ee-132">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-133">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-133">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="166ee-134">単一の JSON 値を表す UTF-8 エンコード テキストを、ジェネリック型パラメーターで指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="166ee-134">Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="166ee-135">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="166ee-135">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="166ee-136">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="166ee-136">The JSON is invalid.</span></span>
          
<span data-ttu-id="166ee-137">- または -</span><span class="sxs-lookup"><span data-stu-id="166ee-137">-or-</span></span>

<span data-ttu-id="166ee-138"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="166ee-138"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="166ee-139">- または -</span><span class="sxs-lookup"><span data-stu-id="166ee-139">-or-</span></span>

<span data-ttu-id="166ee-140">ストリームにデータが残っています。</span><span class="sxs-lookup"><span data-stu-id="166ee-140">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(string json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (json As String, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="166ee-141">JSON 値の対象の型。</span><span class="sxs-lookup"><span data-stu-id="166ee-141">The target type of the JSON value.</span></span></typeparam>
        <param name="json"><span data-ttu-id="166ee-142">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="166ee-142">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-143">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-143">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="166ee-144">単一の JSON 値を表すテキストを、ジェネリック型パラメーターで指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="166ee-144">Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="166ee-145">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="166ee-145">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="166ee-146">実装で<xref:System.String>は utf-8 をネイティブで使用するため、を使用することは、utf-8 メソッドを使用するほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="166ee-146">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="166ee-147"><paramref name="json" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="166ee-147"><paramref name="json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="166ee-148">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="166ee-148">The JSON is invalid.</span></span>
          
<span data-ttu-id="166ee-149">- または -</span><span class="sxs-lookup"><span data-stu-id="166ee-149">-or-</span></span>

<span data-ttu-id="166ee-150"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="166ee-150"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="166ee-151">- または -</span><span class="sxs-lookup"><span data-stu-id="166ee-151">-or-</span></span>

<span data-ttu-id="166ee-152">ストリームにデータが残っています。</span><span class="sxs-lookup"><span data-stu-id="166ee-152">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (ByRef reader As Utf8JsonReader, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize :  * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="166ee-153">JSON 値の対象の型。</span><span class="sxs-lookup"><span data-stu-id="166ee-153">The target type of the JSON value.</span></span></typeparam>
        <param name="reader"><span data-ttu-id="166ee-154">読み取りを行うリーダー。</span><span class="sxs-lookup"><span data-stu-id="166ee-154">The reader to read.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-155">読み取り中にシリアライザーの動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-155">Options to control serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="166ee-156">提供されたリーダーから、ジェネリック型パラメーターで指定された型のインスタンスに、1 つの JSON 値 (オブジェクトまたは配列を含む) を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="166ee-156">Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="166ee-157">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="166ee-157">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="166ee-158">`reader` <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType>のプロパティがまたは<xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>の場合、リーダーは、値の先頭を決定するために、の1回の呼び出しによって高度なものになります。 <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> <xref:System.Text.Json.Utf8JsonReader.TokenType></span><span class="sxs-lookup"><span data-stu-id="166ee-158">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>
               
<span data-ttu-id="166ee-159">このメソッドの完了時に`reader` 、は JSON 値の最終トークンに配置されます。</span><span class="sxs-lookup"><span data-stu-id="166ee-159">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span> <span data-ttu-id="166ee-160">例外がスローされた場合、リーダーは、メソッドが呼び出されたときの状態にリセットされます。</span><span class="sxs-lookup"><span data-stu-id="166ee-160">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>
               
<span data-ttu-id="166ee-161">このメソッドは、リーダーが処理したデータのコピーを作成します。したがって、このメソッドの戻り値を超えてデータの整合性を維持するための呼び出し元の要件はありません。</span><span class="sxs-lookup"><span data-stu-id="166ee-161">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>
               
<span data-ttu-id="166ee-162">の<xref:System.Text.Json.JsonReaderOptions>インスタンス<xref:System.Text.Json.Utf8JsonReader>を作成するために使用されるは、 <xref:System.Text.Json.JsonSerializerOptions>競合するときにより優先されます。</span><span class="sxs-lookup"><span data-stu-id="166ee-162">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="166ee-163">そのため、、、 <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType>およびは読み取り中に使用されます。 <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType> <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="166ee-163">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="166ee-164">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="166ee-164">The JSON is invalid.</span></span>
          
<span data-ttu-id="166ee-165">または</span><span class="sxs-lookup"><span data-stu-id="166ee-165">-or-</span></span>

<span data-ttu-id="166ee-166"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="166ee-166"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="166ee-167">または</span><span class="sxs-lookup"><span data-stu-id="166ee-167">-or-</span></span>

<span data-ttu-id="166ee-168">ストリームにデータが残っています。</span><span class="sxs-lookup"><span data-stu-id="166ee-168">There is remaining data in the stream.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="166ee-169"><paramref name="reader" /> で、サポートされていないオプションが使用されています。</span><span class="sxs-lookup"><span data-stu-id="166ee-169"><paramref name="reader" /> uses unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt; DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; DeserializeAsync(class System.IO.Stream utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, returnType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="166ee-170">解析対象の JSON データ。</span><span class="sxs-lookup"><span data-stu-id="166ee-170">The JSON data to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="166ee-171">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="166ee-171">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-172">読み取り中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-172">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="166ee-173">読み取り操作を取り消すために使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="166ee-173">A cancellation token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="166ee-174">単一の JSON 値を表す UTF-8 エンコード テキストを、指定された型のインスタンスに、非同期に読み取ります。</span><span class="sxs-lookup"><span data-stu-id="166ee-174">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span> <span data-ttu-id="166ee-175">ストリームは最後まで読み取られます。</span><span class="sxs-lookup"><span data-stu-id="166ee-175">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="166ee-176">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="166ee-176">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="166ee-177"><paramref name="utf8Json" /> または <paramref name="returnType" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="166ee-177"><paramref name="utf8Json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="166ee-178">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="166ee-178">The JSON is invalid.</span></span>
          
<span data-ttu-id="166ee-179">- または -</span><span class="sxs-lookup"><span data-stu-id="166ee-179">-or-</span></span>

<span data-ttu-id="166ee-180"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="166ee-180"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="166ee-181">- または -</span><span class="sxs-lookup"><span data-stu-id="166ee-181">-or-</span></span>

<span data-ttu-id="166ee-182">ストリームにデータが残っています。</span><span class="sxs-lookup"><span data-stu-id="166ee-182">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt; DeserializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TValue&gt; DeserializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Value&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="166ee-183">JSON 値の対象の型。</span><span class="sxs-lookup"><span data-stu-id="166ee-183">The target type of the JSON value.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="166ee-184">解析対象の JSON データ。</span><span class="sxs-lookup"><span data-stu-id="166ee-184">The JSON data to parse.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-185">読み取り中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-185">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="166ee-186">読み取り操作を取り消すために使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="166ee-186">A token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="166ee-187">単一の JSON 値を表す UTF-8 エンコード テキストを、ジェネリック型パラメーターで指定された型のインスタンスに、非同期に読み取ります。</span><span class="sxs-lookup"><span data-stu-id="166ee-187">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter.</span></span> <span data-ttu-id="166ee-188">ストリームは最後まで読み取られます。</span><span class="sxs-lookup"><span data-stu-id="166ee-188">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="166ee-189">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="166ee-189">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="166ee-190">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="166ee-190">The JSON is invalid.</span></span>
          
<span data-ttu-id="166ee-191">または</span><span class="sxs-lookup"><span data-stu-id="166ee-191">-or-</span></span>

<span data-ttu-id="166ee-192"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="166ee-192"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="166ee-193">または</span><span class="sxs-lookup"><span data-stu-id="166ee-193">-or-</span></span>

<span data-ttu-id="166ee-194">ストリームにデータが残っています。</span><span class="sxs-lookup"><span data-stu-id="166ee-194">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static string Serialize (object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize(object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="166ee-195">変換する値。</span><span class="sxs-lookup"><span data-stu-id="166ee-195">The value to convert.</span></span></param>
        <param name="type"><span data-ttu-id="166ee-196">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="166ee-196">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-197">変換動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-197">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="166ee-198">指定された型の値を <see cref="T:System.String" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="166ee-198">Converts the value of a specified type into a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="166ee-199">値の文字列表現。</span><span class="sxs-lookup"><span data-stu-id="166ee-199">The string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="166ee-200">の実装<xref:System.String>では、内部的に utf-8 が使用されるため、を使用することは、utf-8 エンコードを使用する場合ほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="166ee-200">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="166ee-201"><xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> および <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)> も参照してください。</span><span class="sxs-lookup"><span data-stu-id="166ee-201">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize(class System.Text.Json.Utf8JsonWriter writer, object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize (writer As Utf8JsonWriter, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * obj * Type * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="166ee-202">JSON ライター。</span><span class="sxs-lookup"><span data-stu-id="166ee-202">The JSON writer.</span></span></param>
        <param name="value"><span data-ttu-id="166ee-203">変換して書き込む値。</span><span class="sxs-lookup"><span data-stu-id="166ee-203">The value to convert and write.</span></span></param>
        <param name="type"><span data-ttu-id="166ee-204">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="166ee-204">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-205">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-205">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="166ee-206">指定された型の 1 つの JSON 値 (オブジェクトまたは配列を含む) を、提供されたライターに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="166ee-206">Writes one JSON value (including objects or arrays) of a specified type to the provided writer.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : 'Value * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="166ee-207">シリアル化する値の型。</span><span class="sxs-lookup"><span data-stu-id="166ee-207">The type of the value to serialize.</span></span></typeparam>
        <param name="value"><span data-ttu-id="166ee-208">変換する値。</span><span class="sxs-lookup"><span data-stu-id="166ee-208">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-209">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-209">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="166ee-210">ジェネリック型パラメーターによって指定された型の値を、<see cref="T:System.String" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="166ee-210">Converts the value of a type specified by a generic type parameter into a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="166ee-211">値の文字列表現。</span><span class="sxs-lookup"><span data-stu-id="166ee-211">A string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="166ee-212">の実装<xref:System.String>では、内部的に utf-8 が使用されるため、を使用することは、utf-8 エンコードを使用する場合ほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="166ee-212">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="166ee-213"><xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> および <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)> も参照してください。</span><span class="sxs-lookup"><span data-stu-id="166ee-213">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize&lt;TValue&gt;(class System.Text.Json.Utf8JsonWriter writer, !!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize(Of TValue) (writer As Utf8JsonWriter, value As TValue, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * 'Value * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="166ee-214">シリアル化する値の型。</span><span class="sxs-lookup"><span data-stu-id="166ee-214">The type of the value to serialize.</span></span></typeparam>
        <param name="writer"><span data-ttu-id="166ee-215">JSON ライター。</span><span class="sxs-lookup"><span data-stu-id="166ee-215">A JSON writer.</span></span></param>
        <param name="value"><span data-ttu-id="166ee-216">変換して書き込む値。</span><span class="sxs-lookup"><span data-stu-id="166ee-216">The value to convert and write.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-217">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-217">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="166ee-218">ジェネリック型パラメーターによって指定された型の 1 つの JSON 値 (オブジェクトまたは配列を含む) を、提供されたライターに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="166ee-218">Writes one JSON value (including objects or arrays) of a type specified by a generic type parameter to the provided writer.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object value, Type type, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync(class System.IO.Stream utf8Json, object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * obj * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, type, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="166ee-219">書き込み先の UTF-8 ストリーム。</span><span class="sxs-lookup"><span data-stu-id="166ee-219">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="166ee-220">変換する値。</span><span class="sxs-lookup"><span data-stu-id="166ee-220">The value to convert.</span></span></param>
        <param name="type"><span data-ttu-id="166ee-221">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="166ee-221">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-222">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-222">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="166ee-223">書き込み操作を取り消すために使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="166ee-223">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="166ee-224">指定された型の値を UTF-8 でエンコードされた JSON テキストに非同期に変換し、指定されたストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="166ee-224">Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.</span></span></summary>
        <returns><span data-ttu-id="166ee-225">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="166ee-225">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, !!TValue value, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * 'Value * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="166ee-226">シリアル化する値の型。</span><span class="sxs-lookup"><span data-stu-id="166ee-226">The type of the value to serialize.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="166ee-227">書き込み先の UTF-8 ストリーム。</span><span class="sxs-lookup"><span data-stu-id="166ee-227">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="166ee-228">変換する値。</span><span class="sxs-lookup"><span data-stu-id="166ee-228">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-229">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-229">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="166ee-230">書き込み操作を取り消すために使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="166ee-230">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="166ee-231">ジェネリック型パラメーターによって指定された型の値を UTF-8 でエンコードされた JSON テキストに非同期に変換し、ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="166ee-231">Asynchronously converts a value of a type specified by a generic type parametaer to UTF-8 encoded JSON text and writes it to a stream.</span></span></summary>
        <returns><span data-ttu-id="166ee-232">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="166ee-232">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object value, Type type, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes(object value, class System.Type type, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, type, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="166ee-233">変換する値。</span><span class="sxs-lookup"><span data-stu-id="166ee-233">The value to convert.</span></span></param>
        <param name="type"><span data-ttu-id="166ee-234">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="166ee-234">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-235">変換動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-235">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="166ee-236">指定された型の値を、UTF-8 でエンコードされたバイト配列に変換します。</span><span class="sxs-lookup"><span data-stu-id="166ee-236">Converts a value of the specified type into a UTF8-encoded byte array.</span></span></summary>
        <returns><span data-ttu-id="166ee-237">値の UTF-8 表現。</span><span class="sxs-lookup"><span data-stu-id="166ee-237">A UTF-8 representation of the value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : 'Value * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="166ee-238">値の型。</span><span class="sxs-lookup"><span data-stu-id="166ee-238">The type of the value.</span></span></typeparam>
        <param name="value"><span data-ttu-id="166ee-239">変換する値。</span><span class="sxs-lookup"><span data-stu-id="166ee-239">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="166ee-240">変換動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="166ee-240">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="166ee-241">ジェネリック型パラメーターによって指定された型の値を、UTF-8 でエンコードされたバイト配列に変換します。</span><span class="sxs-lookup"><span data-stu-id="166ee-241">Converts the value of a type specifed by a generic type parameter into a UTF8-encoded byte array.</span></span></summary>
        <returns><span data-ttu-id="166ee-242">値の UTF-8 表現。</span><span class="sxs-lookup"><span data-stu-id="166ee-242">A UTF-8 representation of the value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
