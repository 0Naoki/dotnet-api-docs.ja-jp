<Type Name="JsonReaderState" FullName="System.Text.Json.JsonReaderState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="134658575824ec7ab34ef310d545b4b8914b9306" /><Meta Name="ms.sourcegitcommit" Value="ef1f0c8985003a14413f66c3de381b8f3b6e4436" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/30/2019" /><Meta Name="ms.locfileid" Value="66380640" /></Metadata><TypeSignature Language="C#" Value="public struct JsonReaderState" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonReaderState extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonReaderState" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonReaderState" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonReaderState" />
  <TypeSignature Language="F#" Value="type JsonReaderState = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>関連するすべての状態情報を保持および保存する不透明な型を定義します。これは、不完全なデータを処理した後で読み取りを続行する場合に、<see cref="T:System.Text.Json.Utf8JsonReader" /> に指定する必要があります。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

`JsonReaderState` 不完全なデータを読み取るときに、再入をサポートしより多くのデータが使用可能、読み取りを続行する必要があります。 異なり、<xref:System.Text.Json.Utf8JsonReader>構造体、ref 構造体は、この型は、非同期/待機の境界を越えて存続できますおよびの新しいインスタンスを続行する前より多くのデータを非同期的に読み取りをサポートする必須ではそのため、<xref:System.Text.Json.Utf8JsonReader>します。

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonReaderState (System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.JsonReaderState : System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonReaderState" Usage="new System.Text.Json.JsonReaderState options" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="options">JSON RFC とは異なる <see cref="T:System.Text.Json.Utf8JsonReader" /> のカスタマイズされた動作を定義します (たとえば、コメントの処理方法、読み取り時に許容される最大深度など)。 既定で、<see cref="T:System.Text.Json.Utf8JsonReader" /> は JSON RFC に厳密に従い (JSON 内のコメントは無効です)、最大 64 の深度まで読み取ります。</param>
        <summary>新しい <see cref="T:System.Text.Json.JsonReaderState" /> インスタンスを作成します。</summary>
        <remarks>
          <format><![CDATA[
          
この状態のインスタンスに渡す必要があります、 <xref:System.Text.Json.Utf8JsonReader> JSON データを持つコンス トラクター。 異なり、 <xref:System.Text.Json.Utf8JsonReader>、状態は ref 構造体では、非同期/待機の境界を越えて存続でき、この型がより多くのデータの新しいインスタンスを続行する前に非同期的に読み取りをサポートするために必要なため、<xref:System.Text.Json.Utf8JsonReader>します。
            
            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">最大深度が、正でない値 (&lt; 0) に設定されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="BytesConsumed">
      <MemberSignature Language="C#" Value="public long BytesConsumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesConsumed" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.BytesConsumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesConsumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesConsumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesConsumed : int64" Usage="System.Text.Json.JsonReaderState.BytesConsumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>UTF-8 でエンコードされた指定の入力テキストのために、これまで <see cref="T:System.Text.Json.Utf8JsonReader" /> によって使用された合計バイト数を取得します。</summary>
        <value>によって使用されたバイトの合計数、<see cref="T:System.Text.Json.Utf8JsonReader" />これまでにします。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonReaderOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderOptions Options { System::Text::Json::JsonReaderOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonReaderOptions" Usage="System.Text.Json.JsonReaderState.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>JSON 仕様への厳格な準拠 (これが既定の動作) から逸脱する場合がある <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体を使用して JSON データを読み取る際に使用するカスタム動作を取得します。</summary>
        <value>JSON データを読み取るときに使用するカスタム動作。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonReaderState.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Text.Json.JsonReaderState.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>UTF-8 でエンコードされた入力 ReadOnlySequence&lt;byte&gt; が指定されている場合は、その中の現在の <see cref="T:System.SequencePosition" /> を取得します。 <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体が ReadOnlySpan&lt;byte&gt; で構築されている場合は、既定の <see cref="T:System.SequencePosition" /> が常に返されます。</summary>
        <value>現在<see cref="T:System.SequencePosition" />内、指定された utf-8 でエンコードされた入力 ReadOnlySequence&lt;バイト&gt;します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>