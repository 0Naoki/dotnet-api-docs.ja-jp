<Type Name="WebService" FullName="System.Web.Services.WebService">
  <TypeSignature Language="C#" Value="public class WebService : System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebService extends System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.WebService" />
  <TypeSignature Language="VB.NET" Value="Public Class WebService&#xA;Inherits MarshalByValueComponent" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebService : System::ComponentModel::MarshalByValueComponent" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="765d9-101">共通 ASP.NET オブジェクト (アプリケーションやセッション状態など) への直接アクセスを提供する、XML Web サービス用のオプションの基本クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="765d9-101">Defines the optional base class for XML Web services, which provides direct access to common ASP.NET objects, such as application and session state.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="765d9-102">派生することがなく XML Web サービスを作成する一般的な ASP.NET オブジェクトへのアクセスを必要としない場合もできます<xref:System.Web.Services.WebService>です。</span><span class="sxs-lookup"><span data-stu-id="765d9-102">If you don't need access to the common ASP.NET objects, you can still create an XML Web service without deriving from <xref:System.Web.Services.WebService>.</span></span> <span data-ttu-id="765d9-103">ASP.NET の他のオブジェクトを介してアクセスできます<xref:System.Web.Services.WebService.Context%2A>です。</span><span class="sxs-lookup"><span data-stu-id="765d9-103">Additional ASP.NET objects can be accessed through <xref:System.Web.Services.WebService.Context%2A>.</span></span>  
  
 <span data-ttu-id="765d9-104">XML Web サービス メソッドを<xref:System.Web.Services.Protocols.SoapRpcMethodAttribute.OneWay%2A>いずれかのプロパティ<xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>または<xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>'éý'`true`へのアクセスはありません、<xref:System.Web.HttpContext>です。</span><span class="sxs-lookup"><span data-stu-id="765d9-104">XML Web service methods that have the <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute.OneWay%2A> property of either <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> or <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> set to `true`, do not have access to their <xref:System.Web.HttpContext>.</span></span> <span data-ttu-id="765d9-105">アクセスのプロパティのいずれかのような場合、<xref:System.Web.Services.WebService>クラスからその XML Web サービス メソッド内で返す`null`です。</span><span class="sxs-lookup"><span data-stu-id="765d9-105">As such, accessing any of the properties of the <xref:System.Web.Services.WebService> class, from within that XML Web service method, return `null`.</span></span>  
  
 <span data-ttu-id="765d9-106">どちらかである .NET Framework version 1.0 XML Web サービス メソッドを使用している場合、<xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>または<xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>でそれらに適用された属性、<xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A>にセットのプロパティ`true`へのアクセスはありません、<xref:System.Web.HttpContext>静的<xref:System.Web.HttpContext.Current%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="765d9-106">If you are using the .NET Framework version 1.0 XML Web service methods that have either the <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> or <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> attribute applied to them with the <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A> property of set to `true`, do not have access to their <xref:System.Web.HttpContext> using the static <xref:System.Web.HttpContext.Current%2A> property.</span></span> <span data-ttu-id="765d9-107">アクセスする、<xref:System.Web.HttpContext>から XML Web サービス メソッドを実装するクラスを派生させる<xref:System.Web.Services.WebService>にアクセスし、<xref:System.Web.Services.WebService.Context%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="765d9-107">To access the <xref:System.Web.HttpContext>, derive the class implementing the XML Web service method from <xref:System.Web.Services.WebService> and access the <xref:System.Web.Services.WebService.Context%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="765d9-108">次の例から派生する、XML Web サービスを作成する<xref:System.Web.Services.WebService>を使用するため、<xref:System.Web.Services.WebService.Context%2A>サーバーで要求の時刻を取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="765d9-108">The example below creates an XML Web service, deriving from <xref:System.Web.Services.WebService>, in order to use the <xref:System.Web.Services.WebService.Context%2A> property to obtain the time of the request on the server.</span></span>  
  
  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.WebService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="765d9-109"><see cref="T:System.Web.Services.WebService" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="765d9-109">Initializes a new instance of the <see cref="T:System.Web.Services.WebService" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public System.Web.HttpApplicationState Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpApplicationState Application" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As HttpApplicationState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpApplicationState ^ Application { System::Web::HttpApplicationState ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Description("The ASP.NET application object for the current request.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpApplicationState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="765d9-110">現在の HTTP 要求に対するアプリケーション オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="765d9-110">Gets the application object for the current HTTP request.</span></span></summary>
        <value><span data-ttu-id="765d9-111"><see cref="T:System.Web.HttpApplicationState" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="765d9-111">An <see cref="T:System.Web.HttpApplicationState" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="765d9-112">XML Web サービスには、アプリケーションの状態とセッション状態の両方を使用できます。</span><span class="sxs-lookup"><span data-stu-id="765d9-112">XML Web services can use both application state and session state.</span></span> <span data-ttu-id="765d9-113">すべてのセッションでセッション状態がメソッドの入っているかどうかに関係なく、XML Web サービスにアクセスするアプリケーションの状態が維持されます (を使用して、<xref:System.Web.Services.WebMethodAttribute.EnableSession%2A>のプロパティ、 <xref:System.Web.Services.WebMethodAttribute>)。</span><span class="sxs-lookup"><span data-stu-id="765d9-113">Application state is maintained across all sessions accessing an XML Web service regardless of whether session state is turned off for a method(by using the <xref:System.Web.Services.WebMethodAttribute.EnableSession%2A> property of the <xref:System.Web.Services.WebMethodAttribute>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="765d9-114">次の例では、ブラウザーは、XML Web サービス メソッドを呼び出すたびに、カウントをインクリメントするヒット カウンターを示します。</span><span class="sxs-lookup"><span data-stu-id="765d9-114">The example below demonstrates a hit counter, incrementing the count every time a browser calls the XML Web service method.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpApplicationState" />
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As HttpContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpContext ^ Context { System::Web::HttpContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="765d9-115">現在の要求に対する ASP.NET <see cref="T:System.Web.HttpContext" /> を取得します。これには、HTTP サーバーが Web 要求を処理するために使用するすべての HTTP 固有のコンテキストがカプセル化されています。</span><span class="sxs-lookup"><span data-stu-id="765d9-115">Gets the ASP.NET <see cref="T:System.Web.HttpContext" /> for the current request, which encapsulates all HTTP-specific context used by the HTTP server to process Web requests.</span></span></summary>
        <value><span data-ttu-id="765d9-116">現在の要求に対する ASP.NET <see cref="T:System.Web.HttpContext" />。</span><span class="sxs-lookup"><span data-stu-id="765d9-116">The ASP.NET <see cref="T:System.Web.HttpContext" /> for the current request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="765d9-117">どちらかである XML Web サービス メソッド、<xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>または<xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>でそれらに適用された属性、<xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A>にセットのプロパティ`true`へのアクセスはありません、<xref:System.Web.HttpContext>静的<xref:System.Web.HttpContext.Current%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="765d9-117">XML Web service methods that have either the <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> or <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> attribute applied to them with the <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A> property of set to `true`, do not have access to their <xref:System.Web.HttpContext> using the static <xref:System.Web.HttpContext.Current%2A> property.</span></span> <span data-ttu-id="765d9-118">アクセスする、<xref:System.Web.HttpContext>から XML Web サービス メソッドを実装するクラスを派生させる<xref:System.Web.Services.WebService>にアクセスし、<xref:System.Web.Services.WebService.Context%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="765d9-118">To access the <xref:System.Web.HttpContext>, derive the class implementing the XML Web service method from <xref:System.Web.Services.WebService> and access the <xref:System.Web.Services.WebService.Context%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="765d9-119">使用して次の例、<xref:System.Web.Services.WebService.Context%2A>サーバーで要求の時刻を取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="765d9-119">The Example below uses the <xref:System.Web.Services.WebService.Context%2A> property to obtain the time of the request on the server.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="765d9-120"><paramref name="Context" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="765d9-120"><paramref name="Context" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Web.HttpServerUtility Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpServerUtility Server" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As HttpServerUtility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpServerUtility ^ Server { System::Web::HttpServerUtility ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpServerUtility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="765d9-121">現在の要求に対する <see cref="T:System.Web.HttpServerUtility" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="765d9-121">Gets the <see cref="T:System.Web.HttpServerUtility" /> for the current request.</span></span></summary>
        <value><span data-ttu-id="765d9-122"><see cref="T:System.Web.HttpServerUtility" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="765d9-122">An <see cref="T:System.Web.HttpServerUtility" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="765d9-123"><xref:System.Web.HttpServerUtility>クラスも含めて、Web 要求の処理に使用できるいくつかのメソッドを提供<xref:System.Web.HttpServerUtility.CreateObject%2A>の COM オブジェクトをインスタンス化する)。</span><span class="sxs-lookup"><span data-stu-id="765d9-123">The <xref:System.Web.HttpServerUtility> class provides several methods that can be used in the processing of Web requests, including <xref:System.Web.HttpServerUtility.CreateObject%2A> (for instantiating COM objects).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="765d9-124">次の例は、Web サーバーを使用して、コンピューター名を返します、<xref:System.Web.Services.WebService.Server%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="765d9-124">The example below returns the computer name of the Web server using the <xref:System.Web.Services.WebService.Server%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpServerUtility" />
        <altmember cref="M:System.Web.HttpServerUtility.CreateObject(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public System.Web.SessionState.HttpSessionState Session { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.SessionState.HttpSessionState Session" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.Session" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Session As HttpSessionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::SessionState::HttpSessionState ^ Session { System::Web::SessionState::HttpSessionState ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.HttpSessionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="765d9-125">現在の要求に対する <see cref="T:System.Web.SessionState.HttpSessionState" /> インスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="765d9-125">Gets the <see cref="T:System.Web.SessionState.HttpSessionState" /> instance for the current request.</span></span></summary>
        <value><span data-ttu-id="765d9-126">現在のセッションに対する ASP.NET セッション状態オブジェクトを表す <see cref="T:System.Web.SessionState.HttpSessionState" />。</span><span class="sxs-lookup"><span data-stu-id="765d9-126">An <see cref="T:System.Web.SessionState.HttpSessionState" /> representing the ASP.NET session state object for the current session.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="765d9-127">回数を判断する特定のセッションにセッション状態を使用して次の例には、XML Web サービス メソッドがアクセスする`SessionHitCounter`です。</span><span class="sxs-lookup"><span data-stu-id="765d9-127">The example below uses session state to determine how many times a particular session accesses the XML Web service method `SessionHitCounter`.</span></span> <span data-ttu-id="765d9-128">この例では、<xref:System.Web.Services.WebMethodAttribute.EnableSession%2A>のプロパティ、<xref:System.Web.Services.WebMethodAttribute>に設定されている`true`セッション状態にアクセスするためにします。</span><span class="sxs-lookup"><span data-stu-id="765d9-128">In this example, the <xref:System.Web.Services.WebMethodAttribute.EnableSession%2A> property of the <xref:System.Web.Services.WebMethodAttribute> is set to `true` in order to gain access to session state.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.SessionState.HttpSessionState" />
      </Docs>
    </Member>
    <Member MemberName="SoapVersion">
      <MemberSignature Language="C#" Value="public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Services.Protocols.SoapProtocolVersion SoapVersion" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.SoapVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SoapVersion As SoapProtocolVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Services::Protocols::SoapProtocolVersion SoapVersion { System::Web::Services::Protocols::SoapProtocolVersion get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.SoapProtocolVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="765d9-129">XML Web サービスに対して SOAP 要求を行うために使用する SOAP プロトコルのバージョンを取得します。</span><span class="sxs-lookup"><span data-stu-id="765d9-129">Gets the version of the SOAP protocol used to make the SOAP request to the XML Web service.</span></span></summary>
        <value><span data-ttu-id="765d9-130"><see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="765d9-130">One of the <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" /> values.</span></span> <span data-ttu-id="765d9-131">既定値は、<see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Default" /> です。</span><span class="sxs-lookup"><span data-stu-id="765d9-131">The default is <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Default" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="765d9-132">値を HTTP GET または HTTP POST をなど、XML Web サービスと通信する SOAP プロトコルを使用しなかった場合、<xref:System.Web.Services.WebService.SoapVersion%2A>プロパティは<xref:System.Web.Services.Protocols.SoapProtocolVersion.Default>します。</span><span class="sxs-lookup"><span data-stu-id="765d9-132">If the SOAP protocol was not used to communicate with the XML Web service, such as HTTP-GET or HTTP-POST, the value of the <xref:System.Web.Services.WebService.SoapVersion%2A> property is <xref:System.Web.Services.Protocols.SoapProtocolVersion.Default>.</span></span>  
  
 <span data-ttu-id="765d9-133">派生していない XML Web サービスの<xref:System.Web.Services.WebService>クラス、XML Web サービスでアクセスすることもの"WebServiceSoapVersion"エントリを使用する SOAP 要求に使用される SOAP プロトコルのバージョン、<xref:System.Web.HttpContext.Items%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="765d9-133">For XML Web services that do not derive from the <xref:System.Web.Services.WebService> class, the version of the SOAP protocol used to make the SOAP request to the XML Web service can be also be accessed using the "WebServiceSoapVersion" entry of the <xref:System.Web.HttpContext.Items%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="765d9-134">型のエントリがある<xref:System.Web.Services.Protocols.SoapProtocolVersion>です。</span><span class="sxs-lookup"><span data-stu-id="765d9-134">That entry is of type <xref:System.Web.Services.Protocols.SoapProtocolVersion>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
        <altmember cref="P:System.Web.HttpContext.Items" />
      </Docs>
    </Member>
    <Member MemberName="User">
      <MemberSignature Language="C#" Value="public System.Security.Principal.IPrincipal User { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal User" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.User" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property User As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::IPrincipal ^ User { System::Security::Principal::IPrincipal ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="765d9-135">ASP.NET サーバーの <see cref="P:System.Web.HttpContext.User" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="765d9-135">Gets the ASP.NET server <see cref="P:System.Web.HttpContext.User" /> object.</span></span> <span data-ttu-id="765d9-136">要求を実行する権限がユーザーに与えられているかどうかを認証するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="765d9-136">Can be used to authenticate whether a user is authorized to execute the request.</span></span></summary>
        <value><span data-ttu-id="765d9-137">ASP.NET サーバーの <see cref="T:System.Security.Principal.IPrincipal" /> オブジェクトを表す <see cref="P:System.Web.HttpContext.User" />。</span><span class="sxs-lookup"><span data-stu-id="765d9-137">A <see cref="T:System.Security.Principal.IPrincipal" /> representing the ASP.NET server <see cref="P:System.Web.HttpContext.User" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="765d9-138">インターネット インフォメーション サービス (IIS) と .NET Framework の両方の順序での認証用に構成する必要があります、<xref:System.Web.Services.WebService.User%2A>プロパティを意味します。</span><span class="sxs-lookup"><span data-stu-id="765d9-138">Both Internet Information Services (IIS) and the .NET Framework need to be configured for authentication in order for the <xref:System.Web.Services.WebService.User%2A> property to be meaningful.</span></span> <span data-ttu-id="765d9-139">認証は、ユーザーからの資格情報を受け入れて、それらの資格情報をいくつかの証明機関を検証するプロセスです。</span><span class="sxs-lookup"><span data-stu-id="765d9-139">Authentication is the process of accepting credentials from a user and validating those credentials against some authority.</span></span> <span data-ttu-id="765d9-140">資格情報が有効な場合は、認証済み id を持ちます。</span><span class="sxs-lookup"><span data-stu-id="765d9-140">If the credentials are valid, you have an authenticated identity.</span></span> <span data-ttu-id="765d9-141">.NET Framework での認証を構成するには、web.config ファイルにエントリを配置します。</span><span class="sxs-lookup"><span data-stu-id="765d9-141">Authentication in the .NET Framework is configured by placing entries in the web.config file.</span></span>  
  
 <span data-ttu-id="765d9-142">次の例では、エントリを Windows 認証を有効にする web.config ファイルに配置します。</span><span class="sxs-lookup"><span data-stu-id="765d9-142">The following example demonstrates the entries you place in the web.config file to enable Windows authentication.</span></span>  
  
```  
<security>  
 <authentication mode="Windows"> <!-- Mode Options are Windows, Cookie, Passport and None or Empty String -->  
 </authentication>  
 </security>  
```  
  
 <span data-ttu-id="765d9-143">XML Web サービスのセキュリティを設定する方法の詳細についてを参照してください。 [ &#91; \<topic://cpconSecuringASPNETWebServices >&#93;](http://msdn.microsoft.com/library/354b2ab1-2782-4542-b32a-dc560178b90c)です。</span><span class="sxs-lookup"><span data-stu-id="765d9-143">For more information on setting up security for an XML Web service see [&#91;\<topic://cpconSecuringASPNETWebServices>&#93;](http://msdn.microsoft.com/library/354b2ab1-2782-4542-b32a-dc560178b90c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="765d9-144">次の例では、認証されたユーザー名を検索し、その名前を返します。</span><span class="sxs-lookup"><span data-stu-id="765d9-144">The example below looks up the authenticated user name and returns that name.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Principal.IPrincipal" />
      </Docs>
    </Member>
  </Members>
</Type>