<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IDebugVsaScriptCodeItem.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59cadb871fc370eb4669678a05ac449e2e9ec0c89.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9cadb871fc370eb4669678a05ac449e2e9ec0c89</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.JScript.IDebugVsaScriptCodeItem">
          <source>Defines methods that evaluate expressions and parse strings.</source>
          <target state="translated">式の評価および文字列の解析を行うメソッドを定義します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:Microsoft.JScript.IDebugVsaScriptCodeItem">
          <source>This interface is typically implemented by an object that represents a code block, and it is typically called by a debugger.</source>
          <target state="translated">このインターフェイスは、通常、コード ブロックを表すオブジェクトによって実装され、デバッガーによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:Microsoft.JScript.IDebugVsaScriptCodeItem">
          <source>This interface provides extra functionality that is needed by an IActiveScript host.</source>
          <target state="translated">このインターフェイスは、IActiveScript ホストで必要な追加の機能を提供します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate">
          <source>When implemented in a class, evaluates the block, expression, or statement represented by the code item and returns the value.</source>
          <target state="translated">クラスで実装される場合には、コード項目で表現されるブロック、式、またはステートメントを評価し、値を返します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate">
          <source>It is typically called by a debugger that needs to evaluate an expression (in a Watch window, for example).</source>
          <target state="translated">一般にこれは、ウォッチ ウィンドウ内などで、式の評価が必要になるデバッガーによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate">
          <source>For expressions, the value is the result of the expression.</source>
          <target state="translated">式の場合、この値はその式の戻り値になります。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate">
          <source>For blocks and statements, the resulting expression is the last expression calculated by the block or statement.</source>
          <target state="translated">ブロックとステートメントの場合、結果の式はそのブロックまたはステートメントで計算された最終的な式になります。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate">
          <source>Returns a value that represents the evaluation of the statement, expression, or block.</source>
          <target state="translated">ステートメント、式、またはブロックの評価結果を表す値を返します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate">
          <source>Note that the <ph id="ph1">&lt;xref:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate%2A&gt;</ph> method is functionally identical to the <ph id="ph2">&lt;xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A&gt;</ph> method.</source>
          <target state="translated">なお、<ph id="ph1">&lt;xref:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate%2A&gt;</ph>メソッドは機能と同じ、<ph id="ph2">&lt;xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate">
          <source>Only the marshaling attributes differ.</source>
          <target state="translated">マーシャ リング属性のみが異なります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate">
          <source>This version of the interface allows an unmanaged debugger to obtain the return value as an <ph id="ph1">`IUnknown`</ph> pointer rather than a <ph id="ph2">`VARIANT`</ph>.</source>
          <target state="translated">このバージョンのインターフェイスを使用すると、として戻り値を取得するアンマネージのデバッガー、<ph id="ph1">`IUnknown`</ph>ポインターではなく、<ph id="ph2">`VARIANT`</ph>です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
          <source>A well-formed named breakpoint string giving a function, optional argument list, and optional IL offset.</source>
          <target state="translated">関数、省略可能な引数リスト、および省略可能な IL オフセットを指定する、整形式の名前付きブレークポイント文字列。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
          <source>Out parameter returning the name of the function parsed out of the input string, or the empty string if the input string is not well formed.</source>
          <target state="translated">入力文字列を解析した結果の関数の名前を返すか、または入力文字列が整形式でない場合に空の文字列を返す出力パラメーター。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
          <source>Out parameter returning the number of arguments in the optional argument list.</source>
          <target state="translated">省略可能な引数リスト内の引数の数を返す出力パラメーター。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
          <source>Returns zero if there is no arguments list or if the string is not well formed.</source>
          <target state="translated">引数リストがないかまたは文字列が整形式でない場合は 0 を返します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
          <source>Out parameter returning a space-separated list of the names of the types of all the arguments in the arguments list, or an empty string if the arguments list was missing or the input string was not well formed.</source>
          <target state="translated">引数リスト内にあるすべての引数の型名をスペースで区切ったリストとして返す出力パラメーター。引数リストが見つからないか入力文字列が整形式でない場合は空の文字列を返します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
          <source>Out parameter returning a string containing the return type of the function named in the input, or the empty string if the return type was missing or the input string was not well formed.</source>
          <target state="translated">入力で指定された関数の戻り値の型が含まれた文字列を返す出力パラメーター。戻り値の型が見つからないか入力文字列が整形式でない場合は空の文字列を返します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
          <source>Unsigned long integer giving the IL offset from the input string, or zero if there was no IL offset or the string was not well formed.</source>
          <target state="translated">入力文字列から IL オフセットを指定する符号なしの長整数。IL オフセットがないか文字列が整形式でない場合は 0 を指定します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
          <source>When implemented in a class, parses strings and returns the parsed-out information.</source>
          <target state="translated">クラスで実装される場合、文字列を解析し、解析された出力情報を返します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
          <source>This method is typically called by a debugger that needs to parse information about a breakpoint that is represented as a <ph id="ph1">&lt;see langword="string" /&gt;</ph>.</source>
          <target state="translated">一般にこのメソッドは、<ph id="ph1">&lt;see langword="string" /&gt;</ph> として表現されるブレークポイントについての情報を解析する必要があるデバッガーによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
          <source>The debugger might have a breakpoint typed in by the user in the form <bpt id="p1">*</bpt>functionname-arguments-ILoffset<ept id="p1">*</ept>.</source>
          <target state="translated">デバッガーには、ユーザーが <bpt id="p1">*</bpt>functionname-arguments-ILoffset<ept id="p1">*</ept> の形式で入力したブレークポイントが設定されている場合があります。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
          <source>A named breakpoint string can have a complex format, for example, <bpt id="p1">&lt;c&gt;</bpt>F.B(C.D[], int, arg : double ) : C.Abc + 123.<ept id="p1">&lt;/c&gt;</ept></source>
          <target state="translated">名前付きブレークポイント文字には、<bpt id="p1">&lt;c&gt;</bpt>F.B(C.D[], int, arg : double ) : C.Abc + 123<ept id="p1">&lt;/c&gt;</ept> のような複雑な形式を与えることができます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
          <source>The parameter list is optional, as is the IL offset.</source>
          <target state="translated">パラメーター一覧は、IL オフセットと同様に、オプションです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the named breakpoint is successfully parsed, <ph id="ph2">&lt;see langword="false" /&gt;</ph> otherwise.</source>
          <target state="translated">名前付きブレークポイントが正常に解析される場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph> を返します。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>