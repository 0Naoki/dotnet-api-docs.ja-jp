<Type Name="XText" FullName="System.Xml.Linq.XText">
  <TypeSignature Language="C#" Value="public class XText : System.Xml.Linq.XNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XText extends System.Xml.Linq.XNode" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XText" />
  <TypeSignature Language="VB.NET" Value="Public Class XText&#xA;Inherits XNode" />
  <TypeSignature Language="C++ CLI" Value="public ref class XText : System::Xml::Linq::XNode" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="edfff-101">テキスト ノードを表します。</span><span class="sxs-lookup"><span data-stu-id="edfff-101">Represents a text node.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edfff-102">XML 要素には、テキスト コンテンツを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="edfff-102">XML elements can contain text content.</span></span> <span data-ttu-id="edfff-103">コンテンツが (要素のみが含まれているテキストの内容) 単純な場合があり、コンテンツを混合することもあります (要素の内容には、テキストとその他の要素の両方が含まれています)。</span><span class="sxs-lookup"><span data-stu-id="edfff-103">Sometimes the content is simple (the element only contains text content), and sometimes the content is mixed (the contents of the element contains both text and other elements).</span></span> <span data-ttu-id="edfff-104">どちらの場合は、テキストの各チャンクとして表されます、<xref:System.Xml.Linq.XText>ノード。</span><span class="sxs-lookup"><span data-stu-id="edfff-104">In either case, each chunk of text is represented as an <xref:System.Xml.Linq.XText> node.</span></span>  
  
 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]<span data-ttu-id="edfff-105"> 開発者が任意に使用するコードを記述する必要が多くの場合、[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]ツリーを作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="edfff-105"> developers will often have to write code to work with arbitrary [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] trees that they did not create.</span></span> <span data-ttu-id="edfff-106">使用するコードを記述するかどうかは[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]を作成する制御は持たないツリー、する必要がありますの特定の動作を認識<xref:System.Xml.Linq.XText>ノード。</span><span class="sxs-lookup"><span data-stu-id="edfff-106">If you are writing code that has to work with [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] trees that you have no control over creating, you should be aware of certain behaviors of <xref:System.Xml.Linq.XText> nodes.</span></span>  
  
 <span data-ttu-id="edfff-107">ノード レベルで XML ツリーの内容を処理するときにする必要がある準備ができている複数の<xref:System.Xml.Linq.XText>互いに隣接するノードです。</span><span class="sxs-lookup"><span data-stu-id="edfff-107">When processing the contents of an XML tree at the node level, you should be prepared for multiple <xref:System.Xml.Linq.XText> nodes to be adjacent to each other.</span></span> <span data-ttu-id="edfff-108">さらに、する必要があります用に準備できません<xref:System.Xml.Linq.XText>テキストがないノード。</span><span class="sxs-lookup"><span data-stu-id="edfff-108">Further, you should be prepared for <xref:System.Xml.Linq.XText> nodes that contain no text.</span></span> <span data-ttu-id="edfff-109">使用可能であれば[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]テキスト ノードのコンテンツを削除する方法です。</span><span class="sxs-lookup"><span data-stu-id="edfff-109">It is possible through [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] methods to remove the content of a text node.</span></span> <span data-ttu-id="edfff-110">ただし、[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]ノードは自動的に削除されません。</span><span class="sxs-lookup"><span data-stu-id="edfff-110">However, [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] does not automatically delete the node.</span></span> <span data-ttu-id="edfff-111">ノード id があり、ための注釈を必要があります[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]により、長さ 0 でのノードのツリーです。</span><span class="sxs-lookup"><span data-stu-id="edfff-111">The node has identity, and might have annotations, so [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] allows for zero-length nodes in the tree.</span></span>  
  
 <span data-ttu-id="edfff-112">詳細については、次を参照してください。[ノードでのプログラミング](http://msdn.microsoft.com/library/18680d1c-6e7c-4645-8d53-27b5a96f2d3f)です。</span><span class="sxs-lookup"><span data-stu-id="edfff-112">For more information, see [Programming with Nodes](http://msdn.microsoft.com/library/18680d1c-6e7c-4645-8d53-27b5a96f2d3f).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="edfff-113"><see cref="T:System.Xml.Linq.XText" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="edfff-113">Initializes a new instance of the <see cref="T:System.Xml.Linq.XText" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XText (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XText.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XText(System::String ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="edfff-114"><see cref="T:System.String" /> ノードの値を格納する <see cref="T:System.Xml.Linq.XText" />。</span><span class="sxs-lookup"><span data-stu-id="edfff-114">The <see cref="T:System.String" /> that contains the value of the <see cref="T:System.Xml.Linq.XText" /> node.</span></span></param>
        <summary><span data-ttu-id="edfff-115"><see cref="T:System.Xml.Linq.XText" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="edfff-115">Initializes a new instance of the <see cref="T:System.Xml.Linq.XText" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edfff-116">通常を作成しないテキスト ノードを使用して、<xref:System.Xml.Linq.XText>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="edfff-116">You typically do not create text nodes by using the <xref:System.Xml.Linq.XText> constructors.</span></span> <span data-ttu-id="edfff-117">構築するときにテキストの内容をやり取りするとき、 <xref:System.Xml.Linq.XElement>、テキスト ノードが自動的に作成します。</span><span class="sxs-lookup"><span data-stu-id="edfff-117">When you pass text content when constructing an <xref:System.Xml.Linq.XElement>, text nodes are automatically created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edfff-118">次の例では、テキスト ノードが含まれる要素を作成します。</span><span class="sxs-lookup"><span data-stu-id="edfff-118">The following example creates an element that contains a text node.</span></span>  
  
```csharp  
XElement root = new XElement("Root", "Some text");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root>Some text</Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="edfff-119">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="edfff-119">This example produces the following output:</span></span>  
  
```xml  
<Root>Some text</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XText (System.Xml.Linq.XText other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XText other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XText.#ctor(System.Xml.Linq.XText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XText(System::Xml::Linq::XText ^ other);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XText" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="edfff-120">コピー元の <see cref="T:System.Xml.Linq.XText" /> ノード。</span><span class="sxs-lookup"><span data-stu-id="edfff-120">The <see cref="T:System.Xml.Linq.XText" /> node to copy from.</span></span></param>
        <summary><span data-ttu-id="edfff-121"><see cref="T:System.Xml.Linq.XText" /> クラスの新しいインスタンスを、別の <see cref="T:System.Xml.Linq.XText" /> オブジェクトから初期化します。</span><span class="sxs-lookup"><span data-stu-id="edfff-121">Initializes a new instance of the <see cref="T:System.Xml.Linq.XText" /> class from another <see cref="T:System.Xml.Linq.XText" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edfff-122">このコンス トラクターは、XML ツリーの詳細コピーを作成する、主に内部的に使用します。</span><span class="sxs-lookup"><span data-stu-id="edfff-122">This constructor is primarily used internally to make a deep copy of an XML tree.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XText.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="edfff-123">このノードのノード型を取得します。</span><span class="sxs-lookup"><span data-stu-id="edfff-123">Gets the node type for this node.</span></span></summary>
        <value><span data-ttu-id="edfff-124">ノード型。</span><span class="sxs-lookup"><span data-stu-id="edfff-124">The node type.</span></span> <span data-ttu-id="edfff-125"><see cref="T:System.Xml.Linq.XText" /> オブジェクトでは、この値は <see cref="F:System.Xml.XmlNodeType.Text" /> です。</span><span class="sxs-lookup"><span data-stu-id="edfff-125">For <see cref="T:System.Xml.Linq.XText" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Text" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edfff-126">すべてのクラスから派生したため<xref:System.Xml.Linq.XObject>を含む、<xref:System.Xml.Linq.XObject.NodeType%2A>プロパティの具体的なサブクラスのコレクションで動作するコードを記述することができます<xref:System.Xml.Linq.XObject>です。</span><span class="sxs-lookup"><span data-stu-id="edfff-126">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="edfff-127">コードは、コレクション内の各ノードのノード型をテストできます。</span><span class="sxs-lookup"><span data-stu-id="edfff-127">Your code can then test for the node type of each node in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edfff-128">次の例では、さまざまな種類のノードを格納する XML ツリーを作成します。</span><span class="sxs-lookup"><span data-stu-id="edfff-128">The following example creates an XML tree that contains a number of types of nodes.</span></span> <span data-ttu-id="edfff-129">ツリーで、各ノードのノード型の出力を反復処理します。</span><span class="sxs-lookup"><span data-stu-id="edfff-129">It then iterates through the tree, outputting the node type of each node.</span></span>  
  
 <span data-ttu-id="edfff-130">なお`Child2`が含まれています、<xref:System.Xml.Linq.XText>ノード、文字列の内容から暗黙的に変換します。</span><span class="sxs-lookup"><span data-stu-id="edfff-130">Note that `Child2` contains an <xref:System.Xml.Linq.XText> node, implicitly converted from the string content.</span></span>  
  
```csharp  
// Note that XNode uses XmlNodeType, which is in the System.Xml namespace.  
XDocument xmlTree = new XDocument(  
    new XComment("a comment"),  
    new XProcessingInstruction("xml-stylesheet", "type=\"text/xsl\" href=\"hello.xsl\""),  
    new XElement("Root",  
        new XAttribute("Att", "attContent"),  
        new XElement("Child1",  
            new XCData("CDATA content")  
        ),  
        new XElement("Child2", "Text content")  
    )  
);  
  
foreach (XNode node in xmlTree.DescendantNodes())  
{  
    Console.WriteLine(node.NodeType);  
    if (node.NodeType == XmlNodeType.Element)  
    {  
        foreach (XAttribute att in ((XElement)node).Attributes())  
            Console.WriteLine(att.NodeType);  
    }  
}  
```  
  
```vb  
' Note that XNode uses XmlNodeType, which is in the System.Xml namespace.  
Dim xmlTree As XDocument = _  
    <?xml version='1.0'?>  
    <!-- a comment -->  
    <?xml-stylesheet type='text/xsl' href='hello.xsl'?>  
    <Root Att="attContent">  
        <Child1>  
            <![CDATA[CDATA content]]]><![CDATA[]>  
        </Child1>  
        <Child2>Text content</Child2>  
    </Root>  
  
For Each node As XNode In xmlTree.DescendantNodes  
    Console.WriteLine(node.NodeType.ToString())  
    If node.NodeType = XmlNodeType.Element Then  
        For Each att In DirectCast(node, XElement).Attributes  
            Console.WriteLine(att.NodeType.ToString())  
        Next  
    End If  
Next  
```  
  
 <span data-ttu-id="edfff-131">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="edfff-131">This example produces the following output:</span></span>  
  
```  
Comment  
ProcessingInstruction  
Element  
Attribute  
Element  
CDATA  
Element  
Text  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XText.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="edfff-132">このノードの値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="edfff-132">Gets or sets the value of this node.</span></span></summary>
        <value><span data-ttu-id="edfff-133">このノードの値を格納している <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="edfff-133">A <see cref="T:System.String" /> that contains the value of this node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edfff-134">このプロパティは生成の設定、<xref:System.Xml.Linq.XObject.Changed>と<xref:System.Xml.Linq.XObject.Changing>イベント。</span><span class="sxs-lookup"><span data-stu-id="edfff-134">Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="edfff-135">次の例では、取得して、このプロパティの設定を示します。</span><span class="sxs-lookup"><span data-stu-id="edfff-135">The following example shows getting and setting this property.</span></span>  
  
```csharp  
XElement root = new XElement("Root", "Some text");  
XText txtNode = root.Nodes().OfType<XText>().First();  
Console.WriteLine(txtNode.Value);  
txtNode.Value = "New text";  
Console.WriteLine(txtNode.Value);  
  
root.Value = "Newer text";  
txtNode = root.Nodes().OfType<XText>().First();  
Console.WriteLine(txtNode.Value);  
```  
  
```vb  
Dim root As XElement = <Root>Some text</Root>  
Dim txtNode As XText = root.Nodes().OfType(Of XText).First()  
Console.WriteLine(txtNode.Value)  
txtNode.Value = "New text"  
Console.WriteLine(txtNode.Value)  
  
root.Value = "Newer text"  
txtNode = root.Nodes().OfType(Of XText).First()  
Console.WriteLine(txtNode.Value)  
```  
  
 <span data-ttu-id="edfff-136">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="edfff-136">This example produces the following output:</span></span>  
  
```  
Some text  
New text  
Newer text  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XText.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="edfff-137">このメソッドの書き込み対象の <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="edfff-137">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span></span></param>
        <summary><span data-ttu-id="edfff-138">このノードを <see cref="T:System.Xml.XmlWriter" /> に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="edfff-138">Writes this node to an <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="edfff-139">このメソッドが XML ツリーを作成する方法によって内部的に使用、主に、<xref:System.Xml.XmlWriter>です。</span><span class="sxs-lookup"><span data-stu-id="edfff-139">This method is primarily used internally by the methods that write an XML tree to an <xref:System.Xml.XmlWriter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XText.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>