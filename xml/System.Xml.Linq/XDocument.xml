<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XDocument.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d79ed174f5e5f1d678e11f3ea4857185ee811f59.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d79ed174f5e5f1d678e11f3ea4857185ee811f59</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XDocument">
          <source>Represents an XML document.</source>
          <target state="translated">XML ドキュメントを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XDocument">
          <source>For the components and usage of an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> object, see <bpt id="p1">&lt;see href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467"&gt;</bpt>XDocument Class Overview<ept id="p1">&lt;/see&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> オブジェクトのコンポーネントと使用方法については、「<bpt id="p1">&lt;see href="http://msdn.microsoft.com/library/90f78331-1be8-42fb-93e7-bd1325826467"&gt;</bpt>XDocument クラスの概要<ept id="p1">&lt;/see&gt;</ept>」をご覧ください。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>For details about the valid content of an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">有効なコンテンツの詳細について、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>を参照してください<bpt id="p1">[</bpt>有効なコンテンツの XElement オブジェクトと XDocument オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>The following example creates a document, and then adds a comment and an element to it.</source>
          <target state="translated">次の例では、ドキュメントを作成し、それにコメントおよび要素を追加します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>It then composes another document using the results of a query.</source>
          <target state="translated">クエリの結果を使用して別のドキュメントを作成します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XDocument">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>Overloaded constructors enable you to create a new empty <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>; to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> with some specified initial content; and to create an <ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> as a copy of another <ph id="ph4">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> object.</source>
          <target state="translated">オーバー ロードされたコンス トラクターでは、新しい空を作成できます。 <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>; を作成、 <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> ; いくつかの指定した初期コンテンツを持つし、作成、<ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>別のコピーとして<ph id="ph4">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>There are not many scenarios that require you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> の作成が必要となるシナリオは多くありません。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>Instead, you can usually create your XML trees with an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> root node.</source>
          <target state="translated">通常、その代わりに <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> ルート ノードを使用して XML ツリーを作成できます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> as your root node.</source>
          <target state="translated">ドキュメントを作成する要件 (処理命令とコメントを最上位に作成する必要がある、ドキュメント型をサポートする必要がある、など) が特にない限り、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> をルート ノードとして使用する方が便利です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>For details about the valid content of an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">有効なコンテンツの詳細について、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>を参照してください<bpt id="p1">[</bpt>有効なコンテンツの XElement オブジェクトと XDocument オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>The following example creates a document, and then adds a comment and an element to it.</source>
          <target state="translated">次の例では、ドキュメントを作成し、それにコメントおよび要素を追加します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>It then composes another document using the results of a query.</source>
          <target state="translated">クエリの結果を使用して別のドキュメントを作成します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor">
          <source>There are not many scenarios that require you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> の作成が必要となるシナリオは多くありません。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor">
          <source>Instead, you can usually create your XML trees with an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> root node.</source>
          <target state="translated">通常、その代わりに <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> ルート ノードを使用して XML ツリーを作成できます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor">
          <source>Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> as your root node.</source>
          <target state="translated">ドキュメントを作成する要件 (処理命令とコメントを最上位に作成する必要がある、ドキュメント型をサポートする必要がある、など) が特にない限り、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> をルート ノードとして使用する方が便利です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor">
          <source>For details about the valid content of an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">有効なコンテンツの詳細について、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>を参照してください<bpt id="p1">[</bpt>有効なコンテンツの XElement オブジェクトと XDocument オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor">
          <source>The following example creates a new document, and then adds a comment and an element to it.</source>
          <target state="translated">次の例では、新しい文書を作成し、それにコメントおよび要素を追加します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>A parameter list of content objects to add to this document.</source>
          <target state="translated">このドキュメントに追加するコンテンツ オブジェクトのパラメーター リスト。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> class with the specified content.</source>
          <target state="translated">指定した内容で、<ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>There are not many scenarios that require you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> の作成が必要となるシナリオは多くありません。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>Instead, you can usually create your XML trees with an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> root node.</source>
          <target state="translated">通常、その代わりに <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> ルート ノードを使用して XML ツリーを作成できます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> as your root node.</source>
          <target state="translated">ドキュメントを作成する要件 (処理命令とコメントを最上位に作成する必要がある、ドキュメント型をサポートする必要がある、など) が特にない限り、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> をルート ノードとして使用する方が便利です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>For details about the valid content of an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">有効なコンテンツの詳細について、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>を参照してください<bpt id="p1">[</bpt>有効なコンテンツの XElement オブジェクトと XDocument オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>The following example creates a document, and then adds a comment and an element to it.</source>
          <target state="translated">次の例では、ドキュメントを作成し、それにコメントおよび要素を追加します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>It then composes another document using the results of a query.</source>
          <target state="translated">クエリの結果を使用して別のドキュメントを作成します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> object that will be copied.</source>
          <target state="translated">コピーされる <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> class from an existing <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> object.</source>
          <target state="translated">既存の <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> オブジェクトから <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)">
          <source>You use this constructor to make a deep copy of an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated">ディープ コピーを作成するこのコンス トラクターを使用する、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)">
          <source>This constructor traverses all nodes and attributes in the document specified in the <ph id="ph1">`other`</ph> parameter, and creates copies of all nodes as it assembles the newly initialized <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated">このコンス トラクターは、すべてのノードおよび属性で指定されたドキュメントを通過する時間、<ph id="ph1">`other`</ph>パラメーターが作成、新しく初期化されたすべてのノードのコピーを作成および<ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDeclaration" /&gt;</ph> for the document.</source>
          <target state="translated">ドキュメントの <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDeclaration" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>The content of the document.</source>
          <target state="translated">ドキュメントの内容。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> class with the specified <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDeclaration" /&gt;</ph> and content.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDeclaration" /&gt;</ph> および内容を使用して、<ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>There are not many scenarios that require you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> の作成が必要となるシナリオは多くありません。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>Instead, you can usually create your XML trees with an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> root node.</source>
          <target state="translated">通常、その代わりに <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> ルート ノードを使用して XML ツリーを作成できます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>Unless you have a specific requirement to create a document (for example, because you have to create processing instructions and comments at the top level, or you have to support document types), it is often more convenient to use <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> as your root node.</source>
          <target state="translated">ドキュメントを作成する要件 (処理命令とコメントを最上位に作成する必要がある、ドキュメント型をサポートする必要がある、など) が特にない限り、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> をルート ノードとして使用する方が便利です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>For details about the valid content of an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">有効なコンテンツの詳細について、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>を参照してください<bpt id="p1">[</bpt>有効なコンテンツの XElement オブジェクトと XDocument オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>The following example uses this constructor to create a document.</source>
          <target state="translated">次の例では、このコンス トラクターを使用して、ドキュメントを作成します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>Gets or sets the XML declaration for this document.</source>
          <target state="translated">このドキュメントの XML 宣言を取得または設定します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDeclaration" /&gt;</ph> that contains the XML declaration for this document.</source>
          <target state="translated">このドキュメントの XML 宣言を格納する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDeclaration" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>Sometimes you have to create an XML declaration for a document.</source>
          <target state="translated">ドキュメントの XML 宣言を作成する必要場合があります。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>If you want to indicate that a document is standalone, you must use this property.</source>
          <target state="translated">ドキュメントがスタンドアロンであることを示す場合は、このプロパティを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>If you want to encode your document with an encoding other than utf-8, you can specify an encoding through the <ph id="ph1">&lt;xref:System.Xml.Linq.XDeclaration&gt;</ph>.</source>
          <target state="translated">経由のエンコーディングを指定するにはエンコーディング utf-8 以外を使用したドキュメントをエンコードする場合、<ph id="ph1">&lt;xref:System.Xml.Linq.XDeclaration&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>Another approach for encoding a document is to specify the encoding on an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> that you pass to LINQ to XML for writing.</source>
          <target state="translated">ドキュメントをエンコードするためのもう 1 つの方法がのエンコードを指定するには、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>書き込みのため、LINQ to XML に渡します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>The following example uses this property to retrieve the XML declaration of a document.</source>
          <target state="translated">次の例では、ドキュメントの XML 宣言を取得するのにこのプロパティを使用します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Declaration">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>Gets the Document Type Definition (DTD) for this document.</source>
          <target state="translated">このドキュメントのドキュメント型定義 (DTD: Document Type Definition) の名前を取得します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocumentType" /&gt;</ph> that contains the DTD for this document.</source>
          <target state="translated">このドキュメントの DTD を格納する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocumentType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> provides limited support for DTDs.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> Dtd の制限付きサポートを提供します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>You can populate an XML tree with an XML document that contains a DTD.</source>
          <target state="translated">DTD を含む XML ドキュメントを使用して XML ツリーを設定することができます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>The XML tree will then contain a <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.DocumentType%2A&gt;</ph> node.</source>
          <target state="translated">XML ツリーが含まれます、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.DocumentType%2A&gt;</ph>ノード。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>When you serialize or save the tree, the DTD will also be serialized.</source>
          <target state="translated">シリアル化またはツリーを保存するときに、DTD もシリアル化されます。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source><ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> will expand any entities in the DTD.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> DTD 内のすべてのエンティティが展開されます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>When you serialize or save the XML tree, the entity references are not saved; instead, the nodes are saved with the entity references replaced by the text of the entity.</source>
          <target state="translated">シリアル化または XML ツリーを保存するときに、エンティティ参照は保存されません。代わりに、ノードは、エンティティのテキストに置き換え、エンティティ参照と共に保存されます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>If the DTD contains default attributes, the attributes are created in the XML tree as ordinary attributes.</source>
          <target state="translated">DTD に既定の属性が含まれている場合、属性は、通常の属性として、XML ツリーに作成されます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>By default, <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> does not validate a document based on its DTD.</source>
          <target state="translated">既定では、 <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> DTD に基づいてドキュメントを検証しません。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>To validate a document based on a DTD, create an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> that will validate based on a DTD, and then create an XML tree from the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">Dtd を基準に基づくドキュメントを検証するには、作成、<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>を検証する、DTD に基づいておりから XML ツリーを作成、<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>The following example creates a document that contains an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocumentType&gt;</ph>.</source>
          <target state="translated">次の例を含むドキュメントを作成、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocumentType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>Visual Basic does not support document types within XML literals.</source>
          <target state="translated">Visual Basic は、XML リテラル内のドキュメントの種類をサポートしていません。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>However, it is possible to create a document that contains a document type by first creating the document using XML literals, and then creating and adding an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocumentType&gt;</ph> node in the appropriate place in the XML tree.</source>
          <target state="translated">ただし、まずを作成して XML リテラルを使用してドキュメントと作成し、追加ドキュメントの種類を含むドキュメントを作成することは、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocumentType&gt;</ph>適切な場所に、XML ツリー内のノードです。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.DocumentType">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XDocument">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a file specified by a URI, from an <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>, or from an <ph id="ph3">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated">URI で指定されたファイル、<ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>、または <ph id="ph3">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> から、新しい <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> を作成します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>Using one of the overloads of this method, you can load an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a file, a <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>, or an <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">このメソッドのオーバー ロードのいずれかを使用して、読み込むことができます、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>ファイルから、 <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>、または<ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>To create an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a string that contains XML, use <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph>.</source>
          <target state="translated">作成する、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>から XML を表す文字列を使用して<ph id="ph2">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>The stream that contains the XML data.</source>
          <target state="translated">XML データを格納しているストリーム。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> instance by using the specified stream.</source>
          <target state="translated">指定されたストリームを使用して新しい <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> インスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> object that reads the data that is contained in the stream.</source>
          <target state="translated">ストリームに格納されているデータを読み取る <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>If you want to control load options, use the <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph> overload that takes <ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph> as a parameter.</source>
          <target state="translated">読み込みオプションを制御する場合は、使用、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph>を受け取るオーバー ロード<ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>The loading functionality of LINQ to XML is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">LINQ to XML の読み込み機能が基盤<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>If you have to modify <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>, follow these steps:</source>
          <target state="translated">変更しなければならない場合<ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>、これらの手順に従います。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>Create an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> by calling one of the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> overloads that take <ph id="ph3">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> as a parameter.</source>
          <target state="translated">作成、<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>のいずれかを呼び出すことによって、<ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph>を受け取るオーバー ロード<ph id="ph3">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
          <source>Pass the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to one of the <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph> overloads of <ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> that takes <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph> as a parameter.</source>
          <target state="translated">渡す、<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>のいずれかに、<ph id="ph2">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph>のオーバー ロードが<ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>を受け取る<ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> that contains the content for the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> から新しい <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> を作成します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> that contains the contents of the specified <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
          <source>The following example creates a document from a <ph id="ph1">&lt;xref:System.IO.StringReader&gt;</ph>.</source>
          <target state="translated">次の例からドキュメントを作成、<ph id="ph1">&lt;xref:System.IO.StringReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>A URI string that references the file to load into a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>.</source>
          <target state="translated">新しい <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> に読み込むファイルを参照している URI 文字列。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a file.</source>
          <target state="translated">ファイルから新しい <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> を作成します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> that contains the contents of the specified file.</source>
          <target state="translated">指定したファイルの内容を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>This method uses an underlying <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to read the XML into an XML tree.</source>
          <target state="translated">このメソッドは、基になる<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>XML ツリーに XML を読み取ります。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a string that contains XML.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph>を作成する、 <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> XML を表す文字列から。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>The following example shows how to load an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a file.</source>
          <target state="translated">次の例を読み込む方法を示しています、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>ファイルからです。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>This example uses the following XML document:</source>
          <target state="translated">この例では、次の XML ドキュメントを使用します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source><bpt id="p1">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>サンプル XML ファイル: 一般的な購買発注書 (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept></target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> that contains the content for the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> から新しい<ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> を作成します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> that contains the contents of the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>One possible use for this method is to create a copy of a DOM document in a LINQ to XML tree.</source>
          <target state="translated">このメソッドの用途の 1 つでは、linq to XML ツリーに DOM ドキュメントのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>To do this, you create an <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> from a DOM document, and then use the <ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> to create an <ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated">これを行うには、作成する、 <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> DOM ドキュメントおよびしを使用してから、<ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph>を作成する、<ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>The following example creates a DOM document, creates an <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> from the DOM document, creates an <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> using the <ph id="ph3">&lt;xref:System.Xml.XmlNodeReader&gt;</ph>.</source>
          <target state="translated">次の例は、DOM ドキュメントを作成、作成、 <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> DOM ドキュメントの作成、<ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>を使用して、<ph id="ph3">&lt;xref:System.Xml.XmlNodeReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>The stream containing the XML data.</source>
          <target state="translated">XML データが含まれるストリーム。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> that specifies whether to load base URI and line information.</source>
          <target state="translated">ベース URI と行情報を読み込むかどうかを指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</source>
          <target state="translated">指定されたストリームを使用して新しい <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> インスタンスを作成し、必要に応じて、空白の維持、ベース URI の設定、および行情報の保持を行います。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> object that reads the data that is contained in the stream.</source>
          <target state="translated">ストリームに格納されているデータを読み取る <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>The loading functionality of LINQ to XML is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">LINQ to XML の読み込み機能が基盤<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>If you have to modify <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>, follow these steps:</source>
          <target state="translated">変更しなければならない場合<ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>、これらの手順に従います。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>Create an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> by calling one of the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> overloads that takes <ph id="ph3">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> as a parameter.</source>
          <target state="translated">作成、<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>のいずれかを呼び出すことによって、<ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph>を取るオーバー ロード<ph id="ph3">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>Pass the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to one of the <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph> overloads of <ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> that takes <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph> as a parameter.</source>
          <target state="translated">渡す、<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>のいずれかに、<ph id="ph2">&lt;xref:System.Xml.Linq.XDocument.Load%2A&gt;</ph>のオーバー ロードが<ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>を受け取る<ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> that contains the content for the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.</source>
          <target state="translated">空白に対する動作、およびベース URI と行情報を読み込むかどうかを指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>, optionally preserving white space, setting the base URI, and retaining line information.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> から新しい <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> を作成し、必要に応じて、空白の維持、ベース URI の設定、および行情報の保持を行います。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> that contains the XML that was read from the specified <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> から読み込まれた XML を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to read all white space in the source XML.</source>
          <target state="translated">ソース XML がインデントを設定できない場合は、設定、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>にフラグが設定<ph id="ph2">`options`</ph>により、ソース XML 内のすべての空白文字を読み取るリーダー。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Nodes of type <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> are created for both significant and insignificant white space.</source>
          <target state="translated">型のノード<ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph>両方は、有意の空白スペースを作成します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, not setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to ignore all of the insignificant white space in the source XML.</source>
          <target state="translated">設定しない場合は、ソース XML では、インデント、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>にフラグが設定<ph id="ph2">`options`</ph>ソース XML で意味のない空白をすべて無視するリーダーをによりします。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>The XML tree is created without any text nodes for insignificant white space.</source>
          <target state="translated">意味のない空白のテキスト ノードなしは、XML ツリーが作成されます。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is not indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> has no effect.</source>
          <target state="translated">XML ソースがインデントを設定できない場合は、設定、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>フラグ<ph id="ph2">`options`</ph>も何も起こりません。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</source>
          <target state="translated">有意の空白は維持され、全体にわたる複数の空白テキスト ノードの作成を引き起こす可能性のある意味のない空白はありません。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> from a string that contains XML.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph>を作成する、 <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> XML を表す文字列から。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Setting <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> is not valid when loading from a <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>からの読み込みのときは無効な<ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>There is a performance penalty if you set the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flag.</source>
          <target state="translated">設定した場合は、パフォーマンスの低下、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>The line information is accurate immediately after loading the XML document.</source>
          <target state="translated">行の情報は、XML ドキュメントの読み込み後すぐに正確です。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>If you modify the XML tree after loading the document, the line information may become meaningless.</source>
          <target state="translated">ドキュメントの読み込み後、XML ツリーを変更する場合は、行の情報が無意味になる可能性があります。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>The following example creates a document from a <ph id="ph1">&lt;xref:System.IO.StringReader&gt;</ph>.</source>
          <target state="translated">次の例からドキュメントを作成、<ph id="ph1">&lt;xref:System.IO.StringReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>A URI string that references the file to load into a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>.</source>
          <target state="translated">新しい <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> に読み込むファイルを参照している URI 文字列。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.</source>
          <target state="translated">空白に対する動作、およびベース URI と行情報を読み込むかどうかを指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a file, optionally preserving white space, setting the base URI, and retaining line information.</source>
          <target state="translated">ファイルから新しい <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> を作成し、必要に応じて、空白の維持、ベース URI の設定、および行情報の保持を行います。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> that contains the contents of the specified file.</source>
          <target state="translated">指定したファイルの内容を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to read all white space in the source XML.</source>
          <target state="translated">ソース XML がインデントを設定できない場合は、設定、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>にフラグが設定<ph id="ph2">`options`</ph>により、ソース XML 内のすべての空白文字を読み取るリーダー。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>Nodes of type <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> are created for both significant and insignificant white space.</source>
          <target state="translated">型のノード<ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph>両方は、有意の空白スペースを作成します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, not setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to ignore all of the insignificant white space in the source XML.</source>
          <target state="translated">設定しない場合は、ソース XML では、インデント、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>にフラグが設定<ph id="ph2">`options`</ph>ソース XML で意味のない空白をすべて無視するリーダーをによりします。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>The XML tree is created without any text nodes for insignificant white space.</source>
          <target state="translated">意味のない空白のテキスト ノードなしは、XML ツリーが作成されます。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is not indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> has no effect.</source>
          <target state="translated">XML ソースがインデントを設定できない場合は、設定、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>フラグ<ph id="ph2">`options`</ph>も何も起こりません。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</source>
          <target state="translated">有意の空白は維持され、全体にわたる複数の空白テキスト ノードの作成を引き起こす可能性のある意味のない空白はありません。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a string that contains XML.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph>を作成する、 <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> XML を表す文字列から。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>There is a performance penalty if you set the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flags.</source>
          <target state="translated">設定した場合は、パフォーマンスの低下、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>と<ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>The base URI and the line information are accurate immediately after loading the XML document.</source>
          <target state="translated">ベース URI と行の情報は XML ドキュメントの読み込み後すぐに正確です。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>If you modify the XML tree after loading the document, the base URI and line information may become meaningless.</source>
          <target state="translated">ドキュメントの読み込み後、XML ツリーを変更する場合は、ベース URI および行の情報が無意味になる可能性があります。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>The following example shows how to load an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a file.</source>
          <target state="translated">次の例を読み込む方法を示しています、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>ファイルからです。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>This example uses the following XML document:</source>
          <target state="translated">この例では、次の XML ドキュメントを使用します。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source><bpt id="p1">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>サンプル XML ファイル: 一般的な購買発注書 (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept></target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> that will be read for the content of the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> の内容として読み込む <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> that specifies whether to load base URI and line information.</source>
          <target state="translated">ベース URI と行情報を読み込むかどうかを指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>Loads an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>, optionally setting the base URI, and retaining line information.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> から <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> を読み込み、必要に応じて、ベース URI の設定および行情報の保持を行います。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> that contains the XML that was read from the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> から読み込まれた XML を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>By creating an <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> from a DOM document, and then using the <ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> to create an <ph id="ph3">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</source>
          <target state="translated">作成することで、 <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> DOM ドキュメントとしを使用してから、<ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph>を作成する、 <ph id="ph3">&lt;xref:System.Xml.Linq.XElement&gt;</ph>、このメソッドは、linq to XML ツリーに DOM ドキュメントのコピーを作成するために使用できます。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> from a string that contains XML.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph>を作成する、 <ph id="ph2">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> XML を表す文字列から。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>Setting <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> is not valid when loading from a <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>からの読み込みのときは無効な<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> will be configured to either read whitespace or not.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>かどうか読み取りの空白に構成されます。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces.</source>
          <target state="translated">LINQ to XML ツリーに表示されます、空白ノードをリーダー サーフェスします。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>This will be the behavior regardless of whether <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> is set or not.</source>
          <target state="translated">これはかどうかに関係なく動作になります<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>設定されているか。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> may have a valid base URI or not.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>か、有効な基本 URI があります。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>If you set <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>, the base URI will be set in the XML tree from the base URI that is reported by the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">設定した場合<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>、ベース URI は、によって報告されるベース URI から XML ツリーに設定されます、<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> may have a valid line information or not.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>か、有効なライン情報があります。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>If you set <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>, the line information will be set in the XML tree from the line information that is reported by the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">設定した場合<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>、行の情報は、によって報告される行の情報から、XML ツリーに設定されます、<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>There is a performance penalty if you set the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flag.</source>
          <target state="translated">設定した場合は、パフォーマンスの低下、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The line information is accurate immediately after loading the XML document.</source>
          <target state="translated">行の情報は、XML ドキュメントの読み込み後すぐに正確です。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>If you modify the XML tree after loading the document, the line information may become meaningless.</source>
          <target state="translated">ドキュメントの読み込み後、XML ツリーを変更する場合は、行の情報が無意味になる可能性があります。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The following example loads the line information that it loads from the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">次の例から読み込む行情報を読み込みます、<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>It then prints the line information.</source>
          <target state="translated">行の情報が印刷されます。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XDocument.NodeType">
          <source>Gets the node type for this node.</source>
          <target state="translated">このノードのノード型を取得します。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.NodeType">
          <source>The node type.</source>
          <target state="translated">ノード型。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.NodeType">
          <source>For <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> objects, this value is <ph id="ph2">&lt;see cref="F:System.Xml.XmlNodeType.Document" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> オブジェクトでは、この値は <ph id="ph2">&lt;see cref="F:System.Xml.XmlNodeType.Document" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.NodeType">
          <source>Because all classes that derive from <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> contain a <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph> property, you can write code that operates on collections of objects where the type of each is a subclass of <ph id="ph3">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.</source>
          <target state="translated">すべてのクラスから派生したため<ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>を含む、<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph>プロパティのサブクラスをそれぞれの型がここでは、オブジェクトのコレクションで動作するコードを記述することができます<ph id="ph3">&lt;xref:System.Xml.Linq.XObject&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.NodeType">
          <source>Your code can then test for the node type of each object in the collection.</source>
          <target state="translated">コードは、コレクション内の各オブジェクトのノード型をテストできます。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.NodeType">
          <source>The following example shows the use of this property.</source>
          <target state="translated">次の例では、このプロパティの使用を示します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.NodeType">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XDocument">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a string, optionally preserving white space, setting the base URI, and retaining line information.</source>
          <target state="translated">文字列から新しい <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> を作成し、必要に応じて、空白の維持、ベース URI の設定、および行情報の保持を行います。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>This method parses a string and creates an XML tree.</source>
          <target state="translated">このメソッドは、文字列を解析し、XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>The following example creates a string that contains XML.</source>
          <target state="translated">次の例では、XML を表す文字列を作成します。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>It then parses the string into an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated">文字列を解析し、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XDocument">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>A string that contains XML.</source>
          <target state="translated">XML を格納している文字列。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a string.</source>
          <target state="translated">文字列から新しい <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> を作成します。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> populated from the string that contains XML.</source>
          <target state="translated">XML を格納した文字列から設定された <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>This method does not preserve white space.</source>
          <target state="translated">このメソッドでは、空白文字は保持されません。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>If you want to preserve white space in the XML tree, use the overload of <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph> that takes <ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph> as a parameter.</source>
          <target state="translated">XML ツリー内の空白を保持する場合は、オーバー ロードを使用して<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Parse%2A&gt;</ph>を受け取る<ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>The following example creates a string that contains XML.</source>
          <target state="translated">次の例では、XML を表す文字列を作成します。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>It then parses the string into an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated">文字列を解析し、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>A string that contains XML.</source>
          <target state="translated">XML を格納している文字列。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.</source>
          <target state="translated">空白に対する動作、およびベース URI と行情報を読み込むかどうかを指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> from a string, optionally preserving white space, setting the base URI, and retaining line information.</source>
          <target state="translated">文字列から新しい <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> を作成し、必要に応じて、空白の維持、ベース URI の設定、および行情報の保持を行います。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> populated from the string that contains XML.</source>
          <target state="translated">XML を格納した文字列から設定された <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to read all white space in the source XML.</source>
          <target state="translated">ソース XML がインデントを設定できない場合は、設定、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>にフラグが設定<ph id="ph2">`options`</ph>により、ソース XML 内のすべての空白文字を読み取るリーダー。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>Nodes of type <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> are created for both significant and insignificant white space.</source>
          <target state="translated">型のノード<ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph>両方は、有意の空白スペースを作成します。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, not setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to ignore all of the insignificant white space in the source XML.</source>
          <target state="translated">設定しない場合は、ソース XML では、インデント、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>にフラグが設定<ph id="ph2">`options`</ph>ソース XML で意味のない空白をすべて無視するリーダーをによりします。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>The XML tree is created without any text nodes for insignificant white space.</source>
          <target state="translated">意味のない空白のテキスト ノードなしは、XML ツリーが作成されます。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is not indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> has no effect.</source>
          <target state="translated">XML ソースがインデントを設定できない場合は、設定、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>フラグ<ph id="ph2">`options`</ph>も何も起こりません。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</source>
          <target state="translated">有意の空白は維持され、全体にわたる複数の空白テキスト ノードの作成を引き起こす可能性のある意味のない空白はありません。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>Setting <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> is not valid when parsing from a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>がから解析の際に無効な<ph id="ph2">&lt;xref:System.String&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>There is a performance penalty if you set the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flag.</source>
          <target state="translated">設定した場合は、パフォーマンスの低下、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>The line information is accurate immediately after loading the XML document.</source>
          <target state="translated">行の情報は、XML ドキュメントの読み込み後すぐに正確です。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>If you modify the XML tree after loading the document, the line information may become meaningless.</source>
          <target state="translated">ドキュメントの読み込み後、XML ツリーを変更する場合は、行の情報が無意味になる可能性があります。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>The following example parses a string into an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>.</source>
          <target state="translated">次の例に文字列を解析して、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XDocument.Root">
          <source>Gets the root element of the XML Tree for this document.</source>
          <target state="translated">このドキュメントの XML ツリーのルート要素を取得します。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Root">
          <source>The root <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> of the XML tree.</source>
          <target state="translated">XML ツリーのルート <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Root">
          <source>This property is useful when you want to compose <ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> queries in the same context as when composing them for a tree rooted in <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">このプロパティは、作成するときに便利です<ph id="ph1">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph>ときをルートと、ツリーを構成することと同じコンテキスト内のクエリ<ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Root">
          <source>See <bpt id="p1">[</bpt>Querying an XDocument vs. Querying an XElement<ept id="p1">](http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a)</ept> for more details.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>XDocument vs のクエリを実行します。XElement のクエリ<ept id="p1">](http://msdn.microsoft.com/library/d266f58d-f2f3-4668-b661-e716e658d13a)</ept>詳細についてはします。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Root">
          <source>The following example uses this property to get the root element of a document.</source>
          <target state="translated">次の例では、ドキュメントのルート要素を取得するのにこのプロパティを使用します。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XDocument.Root">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XDocument">
          <source>Serializes this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to a file, a <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>, or an <ph id="ph3">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> をシリアル化してファイル、<ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>、または <ph id="ph3">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> に書き込みます。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>The stream to output this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> の出力先のストリーム。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>Outputs this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> を指定した <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> に出力します。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">シリアル化された XML はインデントされます。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">すべての余分な空白は削除され、され、XML は適切なインデントにできるように、追加の空白文字が追加されます。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>The behavior of this method is that insignificant white space will not be preserved.</source>
          <target state="translated">このメソッドの動作は、その意味のない空白は保持されません。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>If you want to control white space, use the overload of <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> that takes <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">空白を制御する場合は、オーバー ロードを使用して<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph>を受け取る<ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> option to save unindented XML.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph>インデントされていない XML を保存するオプションです。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>This will cause the writer to write all white spaces exactly as represented in the XML tree.</source>
          <target state="translated">これにより、XML ツリーで表されるとおりにすべての空白文字を書き込むライター。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph>重複する名前空間宣言を削除する場合はオプションです。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> will be written to.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> の書き込み先の <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>Serialize this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> をシリアル化して <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> に書き込みます。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">シリアル化された XML はインデントされます。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">すべての余分な空白は削除され、され、XML は適切なインデントにできるように、追加の空白文字が追加されます。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>The behavior of this method is that insignificant white space will not be preserved.</source>
          <target state="translated">このメソッドの動作は、その意味のない空白は保持されません。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>If you want to control white space, use the overload of <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> that takes <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">空白を制御する場合は、オーバー ロードを使用して<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph>を受け取る<ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, saves the document to a <ph id="ph2">&lt;xref:System.IO.StringWriter&gt;</ph>, and then prints the string to the console.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>にドキュメントを保存、 <ph id="ph2">&lt;xref:System.IO.StringWriter&gt;</ph>、し、コンソールに文字列を出力します。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>A string that contains the name of the file.</source>
          <target state="translated">ファイルの名前を格納する文字列。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>Serialize this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to a file, overwriting an existing file, if it exists.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> をシリアル化してファイルに書き込み、既存のファイルを上書きします (存在する場合)。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">シリアル化された XML はインデントされます。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">すべての余分な空白は削除され、され、XML は適切なインデントにできるように、追加の空白文字が追加されます。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>The behavior of this method is that insignificant white space will not be preserved.</source>
          <target state="translated">このメソッドの動作は、その意味のない空白は保持されません。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>If you want to control white space, use the overload of <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> that takes <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">空白を制御する場合は、オーバー ロードを使用して<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph>を受け取る<ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>, saves the document to a file, and then prints the file to the console.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>をファイルにドキュメントを保存、および、ファイルをコンソールに出力します。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> will be written to.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> の書き込み先の <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)">
          <source>Serialize this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> をシリアル化して <ph id="ph2">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> に書き込みます。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)">
          <source>The following example shows how to save an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> to an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> を <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> に保存する方法を次の例に示します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>The stream to output this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> の出力先のストリーム。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> that specifies formatting behavior.</source>
          <target state="translated">書式設定の動作を指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>Outputs this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, optionally specifying formatting behavior.</source>
          <target state="translated">オプションで書式設定動作を指定して、指定した <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> にこの <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> を出力します。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>By default the <ph id="ph1">`options`</ph> are set to <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions.None&gt;</ph>.</source>
          <target state="translated">既定では、<ph id="ph1">`options`</ph>に設定されている<ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions.None&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">このオプションは無関係で意味のない空白はすべて削除し、XML が適切なインデントされないように、適切な意味のない空白を追加します。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">インデントされていない XML を保存する場合は、指定、<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph>を示すフラグ<ph id="ph2">`options`</ph>です。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white spaces exactly as represented in the XML tree.</source>
          <target state="translated">これにより、XML ツリーで表されるとおりにすべての空白文字を書き込むライター。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph>重複する名前空間宣言を削除する場合はオプションです。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to output the XML to.</source>
          <target state="translated">XML を出力する <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> that specifies formatting behavior.</source>
          <target state="translated">書式設定の動作を指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>Serialize this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>, optionally disabling formatting.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> をシリアル化して <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> に書き込み、必要に応じて、書式設定を無効にします。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">インデントされていない XML を保存する場合は、指定、<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph>を示すフラグ<ph id="ph2">`options`</ph>です。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white space exactly as represented in the XML tree.</source>
          <target state="translated">これにより、XML ツリーで表されるとおりにすべての空白文字を書き込むライター。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>If you want to save indented XML, do not specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">インデントされた XML を保存する場合を指定しない、<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph>を示すフラグ<ph id="ph2">`options`</ph>です。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">これは、余分なで意味のない空白はすべてを削除し、XML が適切なインデントされないように、適切な意味のない空白を追加します。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This is the default behavior, and the behavior of the overloads of the <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> methods that do not take <ph id="ph2">`options`</ph> as a parameter.</source>
          <target state="translated">これは、既定の動作とのオーバー ロードの動作、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph>を受け取らないメソッド<ph id="ph2">`options`</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The following example shows two uses of this method.</source>
          <target state="translated">次の例では、このメソッドの 2 つの使用を示します。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The first use serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> with formatting.</source>
          <target state="translated">最初の使用をシリアル化、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>書式を設定しています。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The second preserves white space.</source>
          <target state="translated">2 つ目は、空白を保存します。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.</source>
          <target state="translated">ドキュメントがあるないためホワイト スペースが構築されては、インデントは設定されません、XML を出力する空白を維持します。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>A string that contains the name of the file.</source>
          <target state="translated">ファイルの名前を格納する文字列。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> that specifies formatting behavior.</source>
          <target state="translated">書式設定の動作を指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>Serialize this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to a file, optionally disabling formatting.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> をシリアル化してファイルに書き込み、必要に応じて、書式設定を無効にします。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">インデントされていない XML を保存する場合は、指定、<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph>を示すフラグ<ph id="ph2">`options`</ph>です。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white space exactly as represented in the XML tree.</source>
          <target state="translated">これにより、XML ツリーで表されるとおりにすべての空白文字を書き込むライター。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>If you want to save indented XML, do not specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">インデントされた XML を保存する場合を指定しない、<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph>を示すフラグ<ph id="ph2">`options`</ph>です。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">これは、余分なで意味のない空白はすべてを削除し、XML が適切なインデントされないように、適切な意味のない空白を追加します。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This is the default behavior, and the behavior of the overloads of the <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph> methods that do not take <ph id="ph2">`options`</ph> as a parameter.</source>
          <target state="translated">これは、既定の動作とのオーバー ロードの動作、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument.Save%2A&gt;</ph>を受け取らないメソッド<ph id="ph2">`options`</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The following example shows two uses of this method.</source>
          <target state="translated">次の例では、このメソッドの 2 つの使用を示します。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The first use preserves white space.</source>
          <target state="translated">初めて使用するには、空白が維持されます。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The second one serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> with indenting.</source>
          <target state="translated">2 つ目のシリアル化、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>インデントとします。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> into which this method will write.</source>
          <target state="translated">このメソッドの書き込み対象の <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
          <source>Write this document to an <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">このドキュメントを <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> に書き込みます。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
          <source>The following example shows how to write an <ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> to an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated">次の例を記述する方法を示しています、<ph id="ph1">&lt;xref:System.Xml.Linq.XDocument&gt;</ph>を<ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
          <source>Note that the example did not write an XML declaration.</source>
          <target state="translated">例が XML 宣言を作成していないことに注意してください。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>