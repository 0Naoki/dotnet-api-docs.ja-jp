<Type Name="XContainer" FullName="System.Xml.Linq.XContainer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0e559b2f8be1bb0bc2658d79bd1a038918017782" /><Meta Name="ms.sourcegitcommit" Value="9802d4c6745a8ae514b26f144fb3969265b224ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/22/2018" /><Meta Name="ms.locfileid" Value="53749933" /></Metadata><TypeSignature Language="C#" Value="public abstract class XContainer : System.Xml.Linq.XNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XContainer extends System.Xml.Linq.XNode" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XContainer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XContainer&#xA;Inherits XNode" />
  <TypeSignature Language="C++ CLI" Value="public ref class XContainer abstract : System::Xml::Linq::XNode" />
  <TypeSignature Language="F#" Value="type XContainer = class&#xA;    inherit XNode" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="871bc-101">他のノードを格納できるノードを表します。</span><span class="sxs-lookup"><span data-stu-id="871bc-101">Represents a node that can contain other nodes.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-102">このクラスは、次または前の兄弟ノードの検索やノードの直接の子の列挙などの機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="871bc-102">This class provides functionality such as finding the next or previous sibling node, or enumerating the direct children of a node.</span></span>  
  
 <span data-ttu-id="871bc-103">2 つのクラスから派生した<xref:System.Xml.Linq.XContainer>は<xref:System.Xml.Linq.XDocument>と<xref:System.Xml.Linq.XElement>します。</span><span class="sxs-lookup"><span data-stu-id="871bc-103">The two classes that derive from <xref:System.Xml.Linq.XContainer> are <xref:System.Xml.Linq.XDocument> and <xref:System.Xml.Linq.XElement>.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-104">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-104">LINQ to XML</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/b8e4d9a9-a87b-4010-871a-67fd95b50e2b"><span data-ttu-id="871bc-105">方法: 特定の深さで要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="871bc-105">How to: Retrieve Elements at a Particular Depth</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="871bc-106">指定した内容をこの <see cref="T:System.Xml.Linq.XContainer" /> に子として追加します。</span><span class="sxs-lookup"><span data-stu-id="871bc-106">Adds the specified content as children to this <see cref="T:System.Xml.Linq.XContainer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-107">このメソッドは、既存のコンテンツの後に、新しいコンテンツを追加、<xref:System.Xml.Linq.XContainer>します。</span><span class="sxs-lookup"><span data-stu-id="871bc-107">This method adds the new content after the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="871bc-108">詳細については、この関数に渡すことができる有効なコンテンツは、次を参照してください。[有効なコンテンツの XElement オブジェクトと XDocument オブジェクト](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)します。</span><span class="sxs-lookup"><span data-stu-id="871bc-108">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="871bc-109">このメソッドが発生、<xref:System.Xml.Linq.XObject.Changed>と<xref:System.Xml.Linq.XObject.Changing>イベント。</span><span class="sxs-lookup"><span data-stu-id="871bc-109">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-110">次の例では、2 つの XML ツリーを作成し、このメソッドを使用して、それらのいずれかに、クエリの結果を追加します。</span><span class="sxs-lookup"><span data-stu-id="871bc-110">The following example creates two XML trees, and then uses this method to add the results of a query to one of them.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("NewElement", "Content")  
);  
xmlTree.Add(  
    from el in srcTree.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _  
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
Dim xmlTree As XElement = _   
        <Root>  
            <NewElement>Content</NewElement>  
        </Root>  
xmlTree.Add( _  
    From el In srcTree.Elements _  
    Where CInt(el) >= 3 _  
    Select el)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="871bc-111">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-111">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <NewElement>Content</NewElement>  
  <Element3>3</Element3>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.AddFirst" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-112">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-112">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Object ^ content);" />
      <MemberSignature Language="F#" Value="member this.Add : obj -&gt; unit" Usage="xContainer.Add content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="871bc-113">追加する単純な内容またはコンテンツ オブジェクトのコレクションを格納しているコンテンツ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="871bc-113">A content object containing simple content or a collection of content objects to be added.</span></span></param>
        <summary><span data-ttu-id="871bc-114">指定した内容をこの <see cref="T:System.Xml.Linq.XContainer" /> の子として追加します。</span><span class="sxs-lookup"><span data-stu-id="871bc-114">Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-115">このメソッドは、既存のコンテンツの後に、新しいコンテンツを追加、<xref:System.Xml.Linq.XContainer>します。</span><span class="sxs-lookup"><span data-stu-id="871bc-115">This method adds the new content after the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="871bc-116">詳細については、この関数に渡すことができる有効なコンテンツは、次を参照してください。[有効なコンテンツの XElement オブジェクトと XDocument オブジェクト](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)します。</span><span class="sxs-lookup"><span data-stu-id="871bc-116">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="871bc-117">このメソッドが発生、<xref:System.Xml.Linq.XObject.Changed>と<xref:System.Xml.Linq.XObject.Changing>イベント。</span><span class="sxs-lookup"><span data-stu-id="871bc-117">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-118">次の例は、2 つの XML ツリーを作成し、このメソッドを使用して、追加、<xref:System.Xml.Linq.XElement>うち 1 つのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="871bc-118">The following example creates two XML trees, and then uses this method to add an <xref:System.Xml.Linq.XElement> object to one of them.</span></span> <span data-ttu-id="871bc-119">結果も追加、 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] XML ツリーをクエリします。</span><span class="sxs-lookup"><span data-stu-id="871bc-119">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.Add(new XElement("NewChild", "new content"));  
xmlTree.Add(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree.  
xmlTree.Add(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.Add(New XElement("NewChild", "new content"))  
xmlTree.Add( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree.  
xmlTree.Add(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
  
```  
  
 <span data-ttu-id="871bc-120">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-120">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
  <NewChild>new content</NewChild>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.AddFirst" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-121">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-121">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Add(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="member this.Add : obj[] -&gt; unit" Usage="xContainer.Add content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="871bc-122">コンテンツ オブジェクトのパラメーター リスト。</span><span class="sxs-lookup"><span data-stu-id="871bc-122">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="871bc-123">指定した内容をこの <see cref="T:System.Xml.Linq.XContainer" /> の子として追加します。</span><span class="sxs-lookup"><span data-stu-id="871bc-123">Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-124">このメソッドは、既存のコンテンツの後に、新しいコンテンツを追加、<xref:System.Xml.Linq.XContainer>します。</span><span class="sxs-lookup"><span data-stu-id="871bc-124">This method adds the new content after the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="871bc-125">詳細については、この関数に渡すことができる有効なコンテンツは、次を参照してください。[有効なコンテンツの XElement オブジェクトと XDocument オブジェクト](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)します。</span><span class="sxs-lookup"><span data-stu-id="871bc-125">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="871bc-126">このメソッドが発生、<xref:System.Xml.Linq.XObject.Changed>と<xref:System.Xml.Linq.XObject.Changing>イベント。</span><span class="sxs-lookup"><span data-stu-id="871bc-126">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-127">次の例では、2 つの XML ツリーを作成し、このメソッドを使用して追加する、<xref:System.Xml.Linq.XElement>うち 1 つのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="871bc-127">The following example creates two XML trees, uses this method to add an <xref:System.Xml.Linq.XElement> object to one of them.</span></span> <span data-ttu-id="871bc-128">結果も追加、 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] XML ツリーをクエリします。</span><span class="sxs-lookup"><span data-stu-id="871bc-128">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.Add(new XElement("NewChild", "new content"));  
xmlTree.Add(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree  
xmlTree.Add(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.Add(New XElement("NewChild", "new content"))  
xmlTree.Add( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree  
xmlTree.Add(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="871bc-129">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-129">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
  <NewChild>new content</NewChild>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.AddFirst" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-130">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-130">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddFirst">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="871bc-131">指定した内容をこのドキュメントまたは要素の最初の子として追加します。</span><span class="sxs-lookup"><span data-stu-id="871bc-131">Adds the specified content as the first children of this document or element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-132">このメソッドは、既存のコンテンツの前に、新しいコンテンツを追加、<xref:System.Xml.Linq.XContainer>します。</span><span class="sxs-lookup"><span data-stu-id="871bc-132">This method adds the new content before the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="871bc-133">詳細については、この関数に渡すことができる有効なコンテンツは、次を参照してください。[有効なコンテンツの XElement オブジェクトと XDocument オブジェクト](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)します。</span><span class="sxs-lookup"><span data-stu-id="871bc-133">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="871bc-134">このメソッドが発生、<xref:System.Xml.Linq.XObject.Changed>と<xref:System.Xml.Linq.XObject.Changing>イベント。</span><span class="sxs-lookup"><span data-stu-id="871bc-134">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-135">次の例では、2 つの XML ツリーを作成し、このメソッドを使用して、それらのいずれかに、クエリの結果を追加します。</span><span class="sxs-lookup"><span data-stu-id="871bc-135">The following example creates two XML trees, and then uses this method to add the results of a query to one of them.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("NewElement", "Content")  
);  
xmlTree.AddFirst(  
    from el in srcTree.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
Dim xmlTree As XElement = <Root>  
                              <NewElement>Content</NewElement>  
                          </Root>  
xmlTree.AddFirst( _  
    From el In srcTree.Elements _  
    Where CInt(el) >= 3 _  
    Select el)  
Console.WriteLine(xmlTree)  
  
```  
  
 <span data-ttu-id="871bc-136">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-136">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element3>3</Element3>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <NewElement>Content</NewElement>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-137">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-137">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddFirst">
      <MemberSignature Language="C#" Value="public void AddFirst (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddFirst(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.AddFirst(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddFirst (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddFirst(System::Object ^ content);" />
      <MemberSignature Language="F#" Value="member this.AddFirst : obj -&gt; unit" Usage="xContainer.AddFirst content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="871bc-138">追加する単純な内容またはコンテンツ オブジェクトのコレクションを格納しているコンテンツ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="871bc-138">A content object containing simple content or a collection of content objects to be added.</span></span></param>
        <summary><span data-ttu-id="871bc-139">指定した内容をこのドキュメントまたは要素の最初の子として追加します。</span><span class="sxs-lookup"><span data-stu-id="871bc-139">Adds the specified content as the first children of this document or element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-140">このメソッドは、既存のコンテンツの前に、新しいコンテンツを追加、<xref:System.Xml.Linq.XContainer>します。</span><span class="sxs-lookup"><span data-stu-id="871bc-140">This method adds the new content before the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="871bc-141">詳細については、この関数に渡すことができる有効なコンテンツは、次を参照してください。[有効なコンテンツの XElement オブジェクトと XDocument オブジェクト](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)します。</span><span class="sxs-lookup"><span data-stu-id="871bc-141">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="871bc-142">このメソッドが発生、<xref:System.Xml.Linq.XObject.Changed>と<xref:System.Xml.Linq.XObject.Changing>イベント。</span><span class="sxs-lookup"><span data-stu-id="871bc-142">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-143">次の例では、2 つの XML ツリーを作成し、このメソッドを使用して追加する、<xref:System.Xml.Linq.XElement>それらのいずれかに最初の要素としてのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="871bc-143">The following example creates two XML trees, uses this method to add an <xref:System.Xml.Linq.XElement> object as the first element to one of them.</span></span> <span data-ttu-id="871bc-144">結果も追加、 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] XML ツリーをクエリします。</span><span class="sxs-lookup"><span data-stu-id="871bc-144">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.AddFirst(new XElement("NewChild", "new content"));  
xmlTree.AddFirst(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree  
xmlTree.AddFirst(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.AddFirst(New XElement("NewChild", "new content"))  
xmlTree.AddFirst( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree  
xmlTree.AddFirst(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="871bc-145">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-145">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <NewChild>new content</NewChild>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-146">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-146">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AddFirst">
      <MemberSignature Language="C#" Value="public void AddFirst (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddFirst(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.AddFirst(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddFirst (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddFirst(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="member this.AddFirst : obj[] -&gt; unit" Usage="xContainer.AddFirst content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="871bc-147">コンテンツ オブジェクトのパラメーター リスト。</span><span class="sxs-lookup"><span data-stu-id="871bc-147">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="871bc-148">指定した内容をこのドキュメントまたは要素の最初の子として追加します。</span><span class="sxs-lookup"><span data-stu-id="871bc-148">Adds the specified content as the first children of this document or element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-149">このメソッドは、既存のコンテンツの前に、新しいコンテンツを追加、<xref:System.Xml.Linq.XContainer>します。</span><span class="sxs-lookup"><span data-stu-id="871bc-149">This method adds the new content before the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="871bc-150">詳細については、この関数に渡すことができる有効なコンテンツは、次を参照してください。[有効なコンテンツの XElement オブジェクトと XDocument オブジェクト](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)します。</span><span class="sxs-lookup"><span data-stu-id="871bc-150">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="871bc-151">このメソッドが発生、<xref:System.Xml.Linq.XObject.Changed>と<xref:System.Xml.Linq.XObject.Changing>イベント。</span><span class="sxs-lookup"><span data-stu-id="871bc-151">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-152">次の例は、2 つの XML ツリーを作成し、このメソッドを使用して追加する、<xref:System.Xml.Linq.XElement>それらのいずれかに最初の要素としてのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="871bc-152">The following example creates two XML trees, and uses this method to add an <xref:System.Xml.Linq.XElement> object as the first element to one of them.</span></span> <span data-ttu-id="871bc-153">結果も追加、 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] XML ツリーをクエリします。</span><span class="sxs-lookup"><span data-stu-id="871bc-153">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.AddFirst(new XElement("NewChild", "new content"));  
xmlTree.AddFirst(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree.  
xmlTree.AddFirst(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.AddFirst(New XElement("NewChild", "new content"))  
xmlTree.AddFirst( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree.  
xmlTree.AddFirst(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="871bc-154">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-154">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <NewChild>new content</NewChild>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="871bc-155">親は <see langword="null" /> になります。</span><span class="sxs-lookup"><span data-stu-id="871bc-155">The parent is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-156">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-156">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreateWriter">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriter CreateWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriter CreateWriter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.CreateWriter" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWriter () As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlWriter ^ CreateWriter();" />
      <MemberSignature Language="F#" Value="member this.CreateWriter : unit -&gt; System.Xml.XmlWriter" Usage="xContainer.CreateWriter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="871bc-157"><see cref="T:System.Xml.XmlWriter" /> にノードを追加するために使用できる <see cref="T:System.Xml.Linq.XContainer" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="871bc-157">Creates an <see cref="T:System.Xml.XmlWriter" /> that can be used to add nodes to the <see cref="T:System.Xml.Linq.XContainer" />.</span></span></summary>
        <returns><span data-ttu-id="871bc-158">それに内容を書き込む準備ができている <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="871bc-158">An <see cref="T:System.Xml.XmlWriter" /> that is ready to have content written to it.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-159">をシリアル化中には、名前空間プレフィックスは、XML ツリー内の名前空間の属性から推論されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-159">While serializing, namespace prefixes are inferred from the namespace attributes in the XML tree.</span></span>  
  
 <span data-ttu-id="871bc-160">詳細については、次を参照してください。 [XML 名前空間の使用](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)します。</span><span class="sxs-lookup"><span data-stu-id="871bc-160">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-161">このメソッドを使用すると、XSLT 変換を実行します。</span><span class="sxs-lookup"><span data-stu-id="871bc-161">You can use this method to perform an XSLT transformation.</span></span> <span data-ttu-id="871bc-162">XML ツリーを作成、作成することができます、 <xref:System.Xml.XmlReader> 、XML ツリーから、新しいドキュメントを作成し、作成、<xref:System.Xml.XmlWriter>に新しいドキュメントに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="871bc-162">You can create an XML tree, create an <xref:System.Xml.XmlReader> from the XML tree, create a new document, and create a <xref:System.Xml.XmlWriter> that will write into the new document.</span></span> <span data-ttu-id="871bc-163">渡す、XSLT 変換を呼び出すことができますし、<xref:System.Xml.XmlReader>と<xref:System.Xml.XmlWriter>に変換します。</span><span class="sxs-lookup"><span data-stu-id="871bc-163">Then, you can invoke the XSLT transformation, passing the <xref:System.Xml.XmlReader> and <xref:System.Xml.XmlWriter> to the transform.</span></span> <span data-ttu-id="871bc-164">変換が正常に完了すると、新しい XML ツリーに変換結果が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-164">After the transformation successfully completes, the new XML tree is populated with the results of the transformation.</span></span>  
  
```csharp  
string xslMarkup = @"<?xml version='1.0'?>  
<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  
    <xsl:template match='/Parent'>  
        <Root>  
            <C1><xsl:value-of select='Child1'/></C1>  
            <C2><xsl:value-of select='Child2'/></C2>  
        </Root>  
    </xsl:template>  
</xsl:stylesheet>";  
  
XDocument xmlTree = new XDocument(  
    new XElement("Parent",  
        new XElement("Child1", "Child1 data"),  
        new XElement("Child2", "Child2 data")  
    )  
);  
  
XDocument newTree = new XDocument();  
using (XmlWriter writer = newTree.CreateWriter()) {  
    // Load the style sheet.  
    XslCompiledTransform xslt = new XslCompiledTransform();  
    xslt.Load(XmlReader.Create(new StringReader(xslMarkup)));  
  
    // Execute the transform and output the results to a writer.  
    xslt.Transform(xmlTree.CreateReader(), writer);  
}  
  
Console.WriteLine(newTree);  
```  
  
```vb  
Dim xslMarkup As XDocument = _   
    <?xml version='1.0'?>  
    <xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  
        <xsl:template match='/Parent'>  
            <Root>  
                <C1><xsl:value-of select='Child1'/></C1>  
                <C2><xsl:value-of select='Child2'/></C2>  
            </Root>  
        </xsl:template>  
    </xsl:stylesheet>  
  
Dim xmlTree As XElement = _   
    <Parent>  
        <Child1>Child1 data</Child1>  
        <Child2>Child2 data</Child2>  
    </Parent>  
  
Dim newTree As XDocument = New XDocument()  
  
Using writer As XmlWriter = newTree.CreateWriter()  
    ' Load the style sheet.  
    Dim xslt As XslCompiledTransform = _  
        New XslCompiledTransform()  
    xslt.Load(xslMarkup.CreateReader())  
  
    ' Execute the transform and output the results to a writer.  
    xslt.Transform(xmlTree.CreateReader(), writer)  
End Using  
  
Console.WriteLine(newTree)  
```  
  
 <span data-ttu-id="871bc-165">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-165">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <C1>Child1 data</C1>  
  <C2>Child2 data</C2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-166">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-166">LINQ to XML</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/f01bdf96-c5a9-4859-b220-125ee531e71f"><span data-ttu-id="871bc-167">XML ツリーのシリアル化</span><span class="sxs-lookup"><span data-stu-id="871bc-167">Serializing XML Trees</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DescendantNodes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; DescendantNodes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.DescendantNodes" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantNodes () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ DescendantNodes();" />
      <MemberSignature Language="F#" Value="member this.DescendantNodes : unit -&gt; seq&lt;System.Xml.Linq.XNode&gt;" Usage="xContainer.DescendantNodes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="871bc-168">このドキュメントまたは要素の子孫ノードのコレクションをドキュメント順に返します。</span><span class="sxs-lookup"><span data-stu-id="871bc-168">Returns a collection of the descendant nodes for this document or element, in document order.</span></span></summary>
        <returns><span data-ttu-id="871bc-169"><see cref="T:System.Collections.Generic.IEnumerable`1" /> の子孫ノードをドキュメント順に格納している <see cref="T:System.Xml.Linq.XNode" /> の <see cref="T:System.Xml.Linq.XContainer" />。</span><span class="sxs-lookup"><span data-stu-id="871bc-169">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the descendant nodes of the <see cref="T:System.Xml.Linq.XContainer" />, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-170">内のノードに属性が考慮されません[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]ので、このメソッドによって返されるコレクションの一部はできません。</span><span class="sxs-lookup"><span data-stu-id="871bc-170">Note that attributes are not considered to be nodes in [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], so they will not be part of the collection that is returned by this method.</span></span>  
  
 <span data-ttu-id="871bc-171">このメソッドは遅延実行を使用します。</span><span class="sxs-lookup"><span data-stu-id="871bc-171">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-172">次の例は、XML ツリーを作成しを反復処理し、<xref:System.Xml.Linq.XContainer.DescendantNodes%2A>軸。</span><span class="sxs-lookup"><span data-stu-id="871bc-172">The following example creates an XML tree, and then iterates through the <xref:System.Xml.Linq.XContainer.DescendantNodes%2A> axis.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    // Attributes are not nodes, so will not be returned by DescendantNodes.  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XNode> dnas =  
    from node in xmlTree.DescendantNodes()  
    select node;  
foreach (XNode node in dnas)  
{  
    if (node is XElement)  
        Console.WriteLine((node as XElement).Name);  
    else  
        Console.WriteLine(node);  
}  
```  
  
```vb  
' Attributes are not nodes, so will not be returned by DescendantNodes.  
Dim xmlTree As XElement = _   
    <Root Att1="AttributeContent">  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim dnas = From node In xmlTree.DescendantNodes _  
           Select node  
  
For Each node In dnas  
    If TypeOf node Is XElement Then  
        Console.WriteLine(DirectCast(node, XElement).Name)  
    Else  
        Console.WriteLine(node)  
    End If  
Next  
```  
  
 <span data-ttu-id="871bc-173">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-173">This example produces the following output:</span></span>  
  
```  
Child  
GrandChild  
element content  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-174">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-174">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Descendants">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="871bc-175">このドキュメントまたは要素の子孫要素のコレクションをドキュメント順に返します。</span><span class="sxs-lookup"><span data-stu-id="871bc-175">Returns a collection of the descendant elements for this document or element, in document order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-176">このメソッドは遅延実行を使用します。</span><span class="sxs-lookup"><span data-stu-id="871bc-176">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-177">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-177">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Descendants">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Descendants() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Descendants" />
      <MemberSignature Language="VB.NET" Value="Public Function Descendants () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Descendants();" />
      <MemberSignature Language="F#" Value="member this.Descendants : unit -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xContainer.Descendants " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="871bc-178">このドキュメントまたは要素の子孫要素のコレクションをドキュメント順に返します。</span><span class="sxs-lookup"><span data-stu-id="871bc-178">Returns a collection of the descendant elements for this document or element, in document order.</span></span></summary>
        <returns><span data-ttu-id="871bc-179"><see cref="T:System.Collections.Generic.IEnumerable`1" /> の子孫要素を格納している <see cref="T:System.Xml.Linq.XElement" /> の <see cref="T:System.Xml.Linq.XContainer" />。</span><span class="sxs-lookup"><span data-stu-id="871bc-179">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-180">このメソッドが返さないこと自体に、その結果に注意してください。<xref:System.Collections.Generic.IEnumerable%601>します。</span><span class="sxs-lookup"><span data-stu-id="871bc-180">Note that this method will not return itself in the resulting <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="871bc-181">参照してください<xref:System.Xml.Linq.XElement.DescendantsAndSelf%2A>現在を含める必要がある場合<xref:System.Xml.Linq.XElement>結果にします。</span><span class="sxs-lookup"><span data-stu-id="871bc-181">See <xref:System.Xml.Linq.XElement.DescendantsAndSelf%2A> if you need to include the current <xref:System.Xml.Linq.XElement> in the results.</span></span>  
  
 <span data-ttu-id="871bc-182">このメソッドは遅延実行を使用します。</span><span class="sxs-lookup"><span data-stu-id="871bc-182">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-183">次の例では、XML ツリーを作成し、この軸メソッドを使用して、子を取得します。</span><span class="sxs-lookup"><span data-stu-id="871bc-183">The following example creates an XML tree, and then uses this axis method to retrieve the descendants.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> de =  
    from el in xmlTree.Descendants()  
    select el;  
foreach (XElement el in de)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
' Attributes are not nodes, so will not be returned by DescendantNodes.  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
Dim de = From el In xmlTree.Descendants _  
         Select el  
  
For Each el In de  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="871bc-184">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-184">This example produces the following output:</span></span>  
  
```  
Child  
GrandChild  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-185">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-185">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Descendants">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Descendants(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Descendants (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Descendants(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="member this.Descendants : System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xContainer.Descendants name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="871bc-186">照合する <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="871bc-186">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="871bc-187">このドキュメントまたは要素の子孫要素のフィルター処理されたコレクションをドキュメント順に返します。</span><span class="sxs-lookup"><span data-stu-id="871bc-187">Returns a filtered collection of the descendant elements for this document or element, in document order.</span></span> <span data-ttu-id="871bc-188">一致する <see cref="T:System.Xml.Linq.XName" /> を持つ要素のみがコレクションに含められます。</span><span class="sxs-lookup"><span data-stu-id="871bc-188">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="871bc-189">指定した <see cref="T:System.Collections.Generic.IEnumerable`1" /> に一致する <see cref="T:System.Xml.Linq.XElement" /> の子孫要素を格納している <see cref="T:System.Xml.Linq.XContainer" /> の <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="871bc-189">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" /> that match the specified <see cref="T:System.Xml.Linq.XName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-190">このメソッドは遅延実行を使用します。</span><span class="sxs-lookup"><span data-stu-id="871bc-190">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-191">次の例では、すべての子孫の要素を出力します。</span><span class="sxs-lookup"><span data-stu-id="871bc-191">The following example prints all descendants of an element.</span></span>  
  
```csharp  
// Attributes are not nodes, so will not be returned by DescendantNodes.  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> de =  
    from el in xmlTree.Descendants("Child")  
    select el;  
foreach (XElement el in de)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
' Attributes are not nodes, so will not be returned by the descendants axis.  
Dim xmlTree As XElement = _   
    <Root Att1="AttributeContent">  
         <Child>Some text  
             <GrandChild>element content</GrandChild>  
         </Child>  
     </Root>  
  
Dim de = From el In xmlTree...<Child> _  
         Select el  
  
For Each el In de  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="871bc-192">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-192">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 <span data-ttu-id="871bc-193">同じ例を次に示しますが、ここで XML が名前空間です。</span><span class="sxs-lookup"><span data-stu-id="871bc-193">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="871bc-194">詳細については、次を参照してください。 [XML 名前空間の使用](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)します。</span><span class="sxs-lookup"><span data-stu-id="871bc-194">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
// Attributes are not nodes, so will not be returned by DescendantNodes.  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(aw + "Att1", "AttributeContent"),  
    new XElement(aw + "Child",  
        new XText("Some text"),  
        new XElement(aw + "GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> de =  
    from el in xmlTree.Descendants(aw + "Child")  
    select el;  
foreach (XElement el in de)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Imports <xmlns:aw = "http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        ' Attributes are not nodes, so will not be returned by the descendants axis.  
        Dim xmlTree As XElement = _   
            <aw:Root aw:Att1="AttributeContent">  
                 <aw:Child>Some text  
                     <aw:GrandChild>element content</aw:GrandChild>  
                 </aw:Child>  
             </aw:Root>  
  
        Dim de = From el In xmlTree...<aw:Child> _  
                 Select el  
  
        For Each el In de  
            Console.WriteLine(el.Name)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="871bc-195">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-195">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Child  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-196">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-196">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Element">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XElement Element (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XElement Element(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Element (name As XName) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XElement ^ Element(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="member this.Element : System.Xml.Linq.XName -&gt; System.Xml.Linq.XElement" Usage="xContainer.Element name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="871bc-197">照合する <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="871bc-197">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="871bc-198">指定した <see cref="T:System.Xml.Linq.XName" /> の最初の子要素を (ドキュメント順に) 取得します。</span><span class="sxs-lookup"><span data-stu-id="871bc-198">Gets the first (in document order) child element with the specified <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="871bc-199">指定した <see cref="T:System.Xml.Linq.XElement" /> に一致するか、<see langword="null" /> の <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="871bc-199">A <see cref="T:System.Xml.Linq.XElement" /> that matches the specified <see cref="T:System.Xml.Linq.XName" />, or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-200">返します`null`指定の名前を持つ要素が存在しない場合。</span><span class="sxs-lookup"><span data-stu-id="871bc-200">Returns `null` if there is no element with the specified name.</span></span>  
  
 <span data-ttu-id="871bc-201">一部の軸メソッドは、要素または属性のコレクションを返します。</span><span class="sxs-lookup"><span data-stu-id="871bc-201">Some axis methods return collections of elements or attributes.</span></span> <span data-ttu-id="871bc-202">このメソッドは、1 つの要素のみを返します。</span><span class="sxs-lookup"><span data-stu-id="871bc-202">This method returns only a single element.</span></span>  
  
 <span data-ttu-id="871bc-203">このメソッドが戻る`null`指定した名前を持つ要素が見つからない場合。</span><span class="sxs-lookup"><span data-stu-id="871bc-203">This method returns `null` if the element with the specified name is not found.</span></span> <span data-ttu-id="871bc-204">すべての要素を構築するためのメソッド (のコンス トラクター <xref:System.Xml.Linq.XElement>、<xref:System.Xml.Linq.XContainer.Add%2A>など) を受け入れる`null`として有効な引数。</span><span class="sxs-lookup"><span data-stu-id="871bc-204">All of the methods that allow you to construct elements (the constructor of <xref:System.Xml.Linq.XElement>, <xref:System.Xml.Linq.XContainer.Add%2A>, and so on) accept `null` as a valid argument.</span></span> <span data-ttu-id="871bc-205">便利な表現形式を使用することができます。 関数型構築は、の一部としてこのメソッドを呼び出すことができますし、ソース ツリーに要素が存在する場合にのみ構築される XML ツリーに要素を追加します。</span><span class="sxs-lookup"><span data-stu-id="871bc-205">This allows you to use a convenient idiom: you can call this method as part of functional construction, and the element is added to the XML tree being constructed if and only if the element exists in the source tree.</span></span> <span data-ttu-id="871bc-206">次の例では、この手法を示します。</span><span class="sxs-lookup"><span data-stu-id="871bc-206">The following example shows this idiom.</span></span>  
  
 <span data-ttu-id="871bc-207">対照的に<xref:System.Xml.Linq.XContainer.Elements%2A>、このメソッドは、軸メソッドではありません。</span><span class="sxs-lookup"><span data-stu-id="871bc-207">In contrast to <xref:System.Xml.Linq.XContainer.Elements%2A>, this method is not an axis method.</span></span> <span data-ttu-id="871bc-208">遅延実行を使用しません単に、呼び出されたときに要素を返します。</span><span class="sxs-lookup"><span data-stu-id="871bc-208">It does not use deferred execution; it simply returns an element when called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-209">次の例では、このメソッドの 2 つの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="871bc-209">The following example shows two uses of this method.</span></span> <span data-ttu-id="871bc-210">メソッドを 1 つのケース内の要素を検索します`srcTree`します。</span><span class="sxs-lookup"><span data-stu-id="871bc-210">In one case, the method finds the element in `srcTree`.</span></span> <span data-ttu-id="871bc-211">2 番目の場合は、メソッドは要素が見つかりません、ソース ツリーで要素には追加されません`xmlTree`例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="871bc-211">In the second case, the method does not find the element in the source tree, no element is added to `xmlTree`, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="871bc-212">Visual Basic の例が子 XML プロパティを使用することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="871bc-212">Note that the Visual Basic example uses the child XML property.</span></span> <span data-ttu-id="871bc-213">使用しても、 <xref:System.Xml.Linq.XContainer.Element%2A> Visual Basic で直接メソッド。</span><span class="sxs-lookup"><span data-stu-id="871bc-213">It is also allowable to use the <xref:System.Xml.Linq.XContainer.Element%2A> method directly in Visual Basic.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    srcTree.Element("Element3"),  
    // Even though Element9 does not exist in srcTree, the following line  
    // will not throw an exception.  
    srcTree.Element("Element9")  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <%= srcTree.<Element3> %>  
            <%= srcTree.<Element9> %>  
        </Root>  
  
' Even though Element9 does not exist in srcTree, adding it to the tree  
' will not throw an exception.  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="871bc-214">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-214">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
  <Element3>3</Element3>  
</Root>  
```  
  
 <span data-ttu-id="871bc-215">同じ例を次に示しますが、ここで XML が名前空間です。</span><span class="sxs-lookup"><span data-stu-id="871bc-215">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="871bc-216">詳細については、次を参照してください。 [XML 名前空間の使用](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)します。</span><span class="sxs-lookup"><span data-stu-id="871bc-216">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement srcTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Element1", 1),  
    new XElement(aw + "Element2", 2),  
    new XElement(aw + "Element3", 3),  
    new XElement(aw + "Element4", 4),  
    new XElement(aw + "Element5", 5)  
);  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child1", 1),  
    new XElement(aw + "Child2", 2),  
    new XElement(aw + "Child3", 3),  
    new XElement(aw + "Child4", 4),  
    new XElement(aw + "Child5", 5),  
    srcTree.Element(aw + "Element3"),  
    // Even though Element9 does not exist in srcTree, the following line  
    // will not throw an exception.  
    srcTree.Element(aw + "Element9")  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim srcTree As XElement = _   
            <aw:Root>  
                <aw:Element1>1</aw:Element1>  
                <aw:Element2>2</aw:Element2>  
                <aw:Element3>3</aw:Element3>  
                <aw:Element4>4</aw:Element4>  
                <aw:Element5>5</aw:Element5>  
            </aw:Root>  
  
        Dim xmlTree As XElement = _  
            <aw:Root>  
                <aw:Child1>1</aw:Child1>  
                <aw:Child2>2</aw:Child2>  
                <aw:Child3>3</aw:Child3>  
                <aw:Child4>4</aw:Child4>  
                <aw:Child5>5</aw:Child5>  
                <%= srcTree.<aw:Element3> %>  
                <%= srcTree.<aw:Element9> %>  
            </aw:Root>  
  
        ' Even though Element9 does not exist in srcTree, adding it to the tree  
        ' will not throw an exception.  
  
        Console.WriteLine(xmlTree)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="871bc-217">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-217">This example produces the following output:</span></span>  
  
```xml  
<aw:Root xmlns:aw="http://www.adventure-works.com">  
  <aw:Child1>1</aw:Child1>  
  <aw:Child2>2</aw:Child2>  
  <aw:Child3>3</aw:Child3>  
  <aw:Child4>4</aw:Child4>  
  <aw:Child5>5</aw:Child5>  
  <aw:Element3>3</aw:Element3>  
</aw:Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-218">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-218">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Elements">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="871bc-219">この要素またはドキュメントの子要素のコレクションをドキュメント順に返します。</span><span class="sxs-lookup"><span data-stu-id="871bc-219">Returns a collection of the child elements of this element or document, in document order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-220">このメソッドは遅延実行を使用します。</span><span class="sxs-lookup"><span data-stu-id="871bc-220">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-221">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-221">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Elements">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Elements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Elements" />
      <MemberSignature Language="VB.NET" Value="Public Function Elements () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Elements();" />
      <MemberSignature Language="F#" Value="member this.Elements : unit -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xContainer.Elements " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="871bc-222">この要素またはドキュメントの子要素のコレクションをドキュメント順に返します。</span><span class="sxs-lookup"><span data-stu-id="871bc-222">Returns a collection of the child elements of this element or document, in document order.</span></span></summary>
        <returns><span data-ttu-id="871bc-223">この <see cref="T:System.Collections.Generic.IEnumerable`1" /> の子要素をドキュメント順に格納している <see cref="T:System.Xml.Linq.XElement" /> の <see cref="T:System.Xml.Linq.XContainer" />。</span><span class="sxs-lookup"><span data-stu-id="871bc-223">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the child elements of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-224">このメソッドは遅延実行を使用します。</span><span class="sxs-lookup"><span data-stu-id="871bc-224">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-225">次の例では、XML ツリーを作成し、この軸メソッドを使用していくつかの要素を選択します。</span><span class="sxs-lookup"><span data-stu-id="871bc-225">The following example creates an XML tree, and then selects some elements using this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements()  
    where (int)el <= 3  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim elements = From el In xmlTree.Elements _  
               Where el.Value <= 3 _  
               Select el  
  
For Each el In elements  
    Console.WriteLine(el)  
Next  
```  
  
 <span data-ttu-id="871bc-226">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-226">This example produces the following output:</span></span>  
  
```  
<Child1>1</Child1>  
<Child2>2</Child2>  
<Child3>3</Child3>  
```  
  
 <span data-ttu-id="871bc-227">同じ例を次に示しますが、ここで XML が名前空間です。</span><span class="sxs-lookup"><span data-stu-id="871bc-227">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="871bc-228">詳細については、次を参照してください。 [XML 名前空間の使用](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)します。</span><span class="sxs-lookup"><span data-stu-id="871bc-228">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child1", 1),  
    new XElement(aw + "Child2", 2),  
    new XElement(aw + "Child3", 3),  
    new XElement(aw + "Child4", 4),  
    new XElement(aw + "Child5", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements()  
    where (int)el <= 3  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <aw:Root>  
                <aw:Child1>1</aw:Child1>  
                <aw:Child2>2</aw:Child2>  
                <aw:Child3>3</aw:Child3>  
                <aw:Child4>4</aw:Child4>  
                <aw:Child5>5</aw:Child5>  
            </aw:Root>  
  
        Dim elements = From el In xmlTree.Elements _  
                       Where el.Value <= 3 _  
                       Select el  
  
        For Each el In elements  
            Console.WriteLine(el)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="871bc-229">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-229">This example produces the following output:</span></span>  
  
```  
<aw:Child1 xmlns:aw="http://www.adventure-works.com">1</aw:Child1>  
<aw:Child2 xmlns:aw="http://www.adventure-works.com">2</aw:Child2>  
<aw:Child3 xmlns:aw="http://www.adventure-works.com">3</aw:Child3>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-230">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-230">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Elements">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Elements(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Elements (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Elements(System::Xml::Linq::XName ^ name);" />
      <MemberSignature Language="F#" Value="member this.Elements : System.Xml.Linq.XName -&gt; seq&lt;System.Xml.Linq.XElement&gt;" Usage="xContainer.Elements name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="871bc-231">照合する <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="871bc-231">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="871bc-232">この要素またはドキュメントの子要素のフィルター処理されたコレクションをドキュメント順に返します。</span><span class="sxs-lookup"><span data-stu-id="871bc-232">Returns a filtered collection of the child elements of this element or document, in document order.</span></span> <span data-ttu-id="871bc-233">一致する <see cref="T:System.Xml.Linq.XName" /> を持つ要素のみがコレクションに含められます。</span><span class="sxs-lookup"><span data-stu-id="871bc-233">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="871bc-234">一致する <see cref="T:System.Collections.Generic.IEnumerable`1" /> がある <see cref="T:System.Xml.Linq.XElement" /> の子をドキュメント順に格納している <see cref="T:System.Xml.Linq.XContainer" /> の <see cref="T:System.Xml.Linq.XName" />。</span><span class="sxs-lookup"><span data-stu-id="871bc-234">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the children of the <see cref="T:System.Xml.Linq.XContainer" /> that have a matching <see cref="T:System.Xml.Linq.XName" />, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-235">このメソッドは遅延実行を使用します。</span><span class="sxs-lookup"><span data-stu-id="871bc-235">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-236">次の例では、XML ツリーを作成し、この軸メソッドを使用していくつかの子要素を選択します。</span><span class="sxs-lookup"><span data-stu-id="871bc-236">The following example creates an XML tree, and then selects several child elements using this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Type1", 1),  
    new XElement("Type1", 2),  
    new XElement("Type2", 3),  
    new XElement("Type2", 4),  
    new XElement("Type2", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements("Type2")  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Type1>1</Type1>  
            <Type1>2</Type1>  
            <Type2>3</Type2>  
            <Type2>4</Type2>  
            <Type2>5</Type2>  
        </Root>  
  
Dim elements = From el In xmlTree.<Type2> _  
               Select el  
  
For Each el In elements  
    Console.WriteLine(el)  
Next  
```  
  
 <span data-ttu-id="871bc-237">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-237">This example produces the following output:</span></span>  
  
```  
<Type2>3</Type2>  
<Type2>4</Type2>  
<Type2>5</Type2>  
```  
  
 <span data-ttu-id="871bc-238">同じ例を次に示しますが、ここで XML が名前空間です。</span><span class="sxs-lookup"><span data-stu-id="871bc-238">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="871bc-239">詳細については、次を参照してください。 [XML 名前空間の使用](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)します。</span><span class="sxs-lookup"><span data-stu-id="871bc-239">For more information, see [Working with XML Namespaces](https://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Type1", 1),  
    new XElement(aw + "Type1", 2),  
    new XElement(aw + "Type2", 3),  
    new XElement(aw + "Type2", 4),  
    new XElement(aw + "Type2", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements(aw + "Type2")  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _   
            <aw:Root>  
                <aw:Type1>1</aw:Type1>  
                <aw:Type1>2</aw:Type1>  
                <aw:Type2>3</aw:Type2>  
                <aw:Type2>4</aw:Type2>  
                <aw:Type2>5</aw:Type2>  
            </aw:Root>  
  
        Dim elements = From el In xmlTree.<aw:Type2> _  
                       Select el  
  
        For Each el In elements  
            Console.WriteLine(el)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="871bc-240">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-240">This example produces the following output:</span></span>  
  
```  
<aw:Type2 xmlns:aw="http://www.adventure-works.com">3</aw:Type2>  
<aw:Type2 xmlns:aw="http://www.adventure-works.com">4</aw:Type2>  
<aw:Type2 xmlns:aw="http://www.adventure-works.com">5</aw:Type2>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-241">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-241">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FirstNode">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNode FirstNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNode FirstNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XContainer.FirstNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstNode As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNode ^ FirstNode { System::Xml::Linq::XNode ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FirstNode : System.Xml.Linq.XNode" Usage="System.Xml.Linq.XContainer.FirstNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="871bc-242">このノードの最初の子ノードを取得します。</span><span class="sxs-lookup"><span data-stu-id="871bc-242">Gets the first child node of this node.</span></span></summary>
        <value><span data-ttu-id="871bc-243"><see cref="T:System.Xml.Linq.XNode" /> の最初の子ノードを格納している <see cref="T:System.Xml.Linq.XContainer" />。</span><span class="sxs-lookup"><span data-stu-id="871bc-243">An <see cref="T:System.Xml.Linq.XNode" /> containing the first child node of the <see cref="T:System.Xml.Linq.XContainer" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="871bc-244">次の例は、子要素を含む要素を作成します。</span><span class="sxs-lookup"><span data-stu-id="871bc-244">The following example creates an element that contains child elements.</span></span> <span data-ttu-id="871bc-245">親要素の最初の子ノードを取得します。</span><span class="sxs-lookup"><span data-stu-id="871bc-245">It then gets the first child node of the parent element.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XNode firstNode = xmlTree.FirstNode;  
Console.WriteLine(firstNode);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim firstNode As XNode = xmlTree.FirstNode  
Console.WriteLine(firstNode)  
```  
  
 <span data-ttu-id="871bc-246">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-246">This example produces the following output:</span></span>  
  
```xml  
<Child1>1</Child1>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XContainer.LastNode" />
        <altmember cref="M:System.Xml.Linq.XContainer.Nodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-247">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-247">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LastNode">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNode LastNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNode LastNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XContainer.LastNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastNode As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNode ^ LastNode { System::Xml::Linq::XNode ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LastNode : System.Xml.Linq.XNode" Usage="System.Xml.Linq.XContainer.LastNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="871bc-248">このノードの最後の子ノードを取得します。</span><span class="sxs-lookup"><span data-stu-id="871bc-248">Gets the last child node of this node.</span></span></summary>
        <value><span data-ttu-id="871bc-249"><see cref="T:System.Xml.Linq.XNode" /> の最後の子ノードを格納している <see cref="T:System.Xml.Linq.XContainer" />。</span><span class="sxs-lookup"><span data-stu-id="871bc-249">An <see cref="T:System.Xml.Linq.XNode" /> containing the last child node of the <see cref="T:System.Xml.Linq.XContainer" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="871bc-250">次の例は、子要素を含む要素を作成します。</span><span class="sxs-lookup"><span data-stu-id="871bc-250">The following example creates an element that contains child elements.</span></span> <span data-ttu-id="871bc-251">親要素の最後の子ノードを取得します。</span><span class="sxs-lookup"><span data-stu-id="871bc-251">It then gets the last child node of the parent element.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XNode lastNode = xmlTree.LastNode;  
Console.WriteLine(lastNode);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim lastNode As XNode = xmlTree.LastNode  
Console.WriteLine(lastNode)  
```  
  
 <span data-ttu-id="871bc-252">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-252">This example produces the following output:</span></span>  
  
```xml  
<Child5>5</Child5>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XContainer.FirstNode" />
        <altmember cref="M:System.Xml.Linq.XContainer.Nodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-253">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-253">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Nodes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; Nodes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; Nodes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Nodes" />
      <MemberSignature Language="VB.NET" Value="Public Function Nodes () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ Nodes();" />
      <MemberSignature Language="F#" Value="member this.Nodes : unit -&gt; seq&lt;System.Xml.Linq.XNode&gt;" Usage="xContainer.Nodes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Xml.Linq.XContainer/&lt;Nodes&gt;d__1))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(System.Xml.Linq.XContainer/&lt;Nodes&gt;d__18))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="871bc-254">この要素またはドキュメントの子ノードのコレクションをドキュメント順に返します。</span><span class="sxs-lookup"><span data-stu-id="871bc-254">Returns a collection of the child nodes of this element or document, in document order.</span></span></summary>
        <returns><span data-ttu-id="871bc-255">この <see cref="T:System.Collections.Generic.IEnumerable`1" /> の内容をドキュメント順に格納している <see cref="T:System.Xml.Linq.XNode" /> の <see cref="T:System.Xml.Linq.XContainer" />。</span><span class="sxs-lookup"><span data-stu-id="871bc-255">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the contents of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-256">コンテンツに属性が含まれていないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="871bc-256">Note that the content does not include attributes.</span></span> <span data-ttu-id="871bc-257">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]属性は、ツリーのノードであると見なされません。</span><span class="sxs-lookup"><span data-stu-id="871bc-257">In [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], attributes are not considered to be nodes of the tree.</span></span> <span data-ttu-id="871bc-258">要素に関連付けられている名前/値ペアです。</span><span class="sxs-lookup"><span data-stu-id="871bc-258">They are name/value pairs associated with an element.</span></span>  
  
 <span data-ttu-id="871bc-259">このメソッドは遅延実行を使用します。</span><span class="sxs-lookup"><span data-stu-id="871bc-259">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-260">次の例では、さまざまな種類のノードで XML ツリーを作成します。</span><span class="sxs-lookup"><span data-stu-id="871bc-260">The following example creates an XML tree with a variety of types of nodes.</span></span> <span data-ttu-id="871bc-261">これは、後を列挙して、ノードを印刷するには、この軸メソッドに対してクエリします。</span><span class="sxs-lookup"><span data-stu-id="871bc-261">It then queries this axis method to enumerate and print the nodes.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XComment("a comment"),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XText("mixed content"),  
    new XElement("Child5", 5)  
);  
IEnumerable<XNode> nodes =  
    from nd in xmlTree.Nodes()  
    select nd;  
foreach (XNode node in nodes)  
    Console.WriteLine(node);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <!--a comment-->  
            <Child3>3</Child3>  
            <Child4>4</Child4>mixed content<Child5>5</Child5>  
            </Root>  
  
Dim nodes = From nd In xmlTree.Nodes() _  
            Select nd  
  
For Each node In nodes  
    Console.WriteLine(node)  
Next  
```  
  
 <span data-ttu-id="871bc-262">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-262">This example produces the following output:</span></span>  
  
```  
<Child1>1</Child1>  
<Child2>2</Child2>  
<!--a comment-->  
<Child3>3</Child3>  
<Child4>4</Child4>  
mixed content  
<Child5>5</Child5>  
```  
  
 <span data-ttu-id="871bc-263">次の例では、さまざまな種類のノードを含む XML ツリーを作成します。</span><span class="sxs-lookup"><span data-stu-id="871bc-263">The following example creates an XML tree that contains a variety of types of nodes.</span></span> <span data-ttu-id="871bc-264">ノードの種類の印刷、ツリーの一部を列挙し、します。</span><span class="sxs-lookup"><span data-stu-id="871bc-264">It then enumerates through portions of the tree, printing the node types.</span></span>  
  
```csharp  
XDocument xmlTree = new XDocument(  
    new XComment("a comment"),  
    new XProcessingInstruction("xml-stylesheet", "type=\"text/xsl\" href=\"hello.xsl\""),  
    new XElement("Root",  
        new XAttribute("Att", "attContent"),  
        new XElement("Child1",  
            new XCData("CDATA content")  
        ),  
        new XElement("Child2",  
            new XText("Text content")  
        )  
    )  
);  
  
foreach (XNode node in xmlTree.Nodes())  
{  
    Console.WriteLine(node.NodeType);  
    if (node.NodeType == XmlNodeType.Element)  
    {  
        foreach (XAttribute att in ((XElement)node).Attributes())  
            Console.WriteLine(att.NodeType);  
        foreach (XNode node2 in ((XElement)node).Nodes())  
        {  
            Console.WriteLine(node2.NodeType);  
            if (node2.NodeType == XmlNodeType.Element)  
                foreach (XNode node3 in ((XElement)node2).Nodes())  
                    Console.WriteLine(node3.NodeType);  
        }  
    }  
}  
```  
  
```vb  
Dim xmlTree As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
    <!--a comment-->  
    <?xml-stylesheet type='text/xsl' href='hello.xsl'?>  
    <Root Att="attContent">  
        <Child1><![CDATA[CDATA content]]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.Attributes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-265">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-265">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemoveNodes">
      <MemberSignature Language="C#" Value="public void RemoveNodes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveNodes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.RemoveNodes" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveNodes ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveNodes();" />
      <MemberSignature Language="F#" Value="member this.RemoveNodes : unit -&gt; unit" Usage="xContainer.RemoveNodes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="871bc-266">このドキュメントまたは要素から子ノードを削除します。</span><span class="sxs-lookup"><span data-stu-id="871bc-266">Removes the child nodes from this document or element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-267">属性を含む要素でこのメソッドを呼び出すと、このメソッドは、属性を削除できません。</span><span class="sxs-lookup"><span data-stu-id="871bc-267">If you call this method on an element that contains attributes, this method will not remove the attributes.</span></span> <span data-ttu-id="871bc-268">要素の属性を削除する使用<xref:System.Xml.Linq.XElement.RemoveAttributes%2A>します。</span><span class="sxs-lookup"><span data-stu-id="871bc-268">To remove the attributes of an element, use <xref:System.Xml.Linq.XElement.RemoveAttributes%2A>.</span></span>  
  
 <span data-ttu-id="871bc-269"><xref:System.Xml.Linq.Extensions.Remove%2A>メソッドに関連の機能です。</span><span class="sxs-lookup"><span data-stu-id="871bc-269">The <xref:System.Xml.Linq.Extensions.Remove%2A> method has related functionality.</span></span> <span data-ttu-id="871bc-270">コレクション内のすべてのノードの子ノードを削除します。</span><span class="sxs-lookup"><span data-stu-id="871bc-270">It removes the child nodes of every node in a collection.</span></span>  
  
 <span data-ttu-id="871bc-271">このメソッドが発生、<xref:System.Xml.Linq.XObject.Changed>と<xref:System.Xml.Linq.XObject.Changing>イベント。</span><span class="sxs-lookup"><span data-stu-id="871bc-271">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-272">次の例では、いくつかの子ノードを含む XML ツリーを作成します。</span><span class="sxs-lookup"><span data-stu-id="871bc-272">The following example creates an XML tree that contains some child nodes.</span></span> <span data-ttu-id="871bc-273">これは、後、子ノードを削除するには、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="871bc-273">It then calls this method to remove the child nodes.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XComment("a comment"),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XText("mixed content"),  
    new XElement("Child5", 5)  
);  
xmlTree.RemoveNodes();  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmltree As XElement = _   
    <Root>  
        <Child1>1</Child1>  
        <Child2>2</Child2>  
        <!--a comment-->  
        <Child3>3</Child3>  
        <Child4>4</Child4>mixed content<Child5>5</Child5>  
    </Root>  
  
xmltree.RemoveNodes()  
Console.WriteLine(xmltree)  
```  
  
 <span data-ttu-id="871bc-274">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-274">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-275">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-275">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceNodes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="871bc-276">このドキュメントまたは要素の子ノードを指定された内容で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="871bc-276">Replaces the children nodes of this document or element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-277">詳細については、この関数に渡すことができる有効なコンテンツは、次を参照してください。[有効なコンテンツの XElement オブジェクトと XDocument オブジェクト](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)します。</span><span class="sxs-lookup"><span data-stu-id="871bc-277">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="871bc-278">このメソッドが発生、<xref:System.Xml.Linq.XObject.Changed>と<xref:System.Xml.Linq.XObject.Changing>イベント。</span><span class="sxs-lookup"><span data-stu-id="871bc-278">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="871bc-279">このメソッドはスナップショット セマンティクスです。</span><span class="sxs-lookup"><span data-stu-id="871bc-279">This method has snapshot semantics.</span></span> <span data-ttu-id="871bc-280">まず、新しいコンテンツのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="871bc-280">It first creates a copy of the new content.</span></span> <span data-ttu-id="871bc-281">このノードのすべての子ノードを削除します。</span><span class="sxs-lookup"><span data-stu-id="871bc-281">It then removes all children nodes of this node.</span></span> <span data-ttu-id="871bc-282">最後に、子ノードとして新しいコンテンツを追加します。</span><span class="sxs-lookup"><span data-stu-id="871bc-282">Finally, it adds the new content as children nodes.</span></span> <span data-ttu-id="871bc-283">つまり、子ノード自体にクエリを使用する子ノードを置き換えることができます。</span><span class="sxs-lookup"><span data-stu-id="871bc-283">This means that you can replace children nodes using a query on the children nodes themselves.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-284">次の例では、2 つの XML ツリーを作成し、このメソッドを使用して、クエリの結果のうち 1 つの内容を置き換えます。</span><span class="sxs-lookup"><span data-stu-id="871bc-284">The following example creates two XML trees, and then uses this method to replace the contents of one of them with the results of a query.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5)  
);  
root.ReplaceNodes(  
    from el in root.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>1</Child>  
        <Child>2</Child>  
        <Child>3</Child>  
        <Child>4</Child>  
        <Child>5</Child>  
    </Root>  
root.ReplaceNodes( _  
    From el In root.Elements _  
    Where el.Value >= 3 _  
    Select el)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="871bc-285">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-285">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-286">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-286">LINQ to XML</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceNodes">
      <MemberSignature Language="C#" Value="public void ReplaceNodes (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceNodes(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceNodes (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceNodes(System::Object ^ content);" />
      <MemberSignature Language="F#" Value="member this.ReplaceNodes : obj -&gt; unit" Usage="xContainer.ReplaceNodes content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="871bc-287">子ノードを置き換える単純な内容またはコンテンツ オブジェクトのコレクションを格納しているコンテンツ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="871bc-287">A content object containing simple content or a collection of content objects that replace the children nodes.</span></span></param>
        <summary><span data-ttu-id="871bc-288">このドキュメントまたは要素の子ノードを指定された内容で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="871bc-288">Replaces the children nodes of this document or element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-289">詳細については、この関数に渡すことができる有効なコンテンツは、次を参照してください。[有効なコンテンツの XElement オブジェクトと XDocument オブジェクト](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)します。</span><span class="sxs-lookup"><span data-stu-id="871bc-289">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="871bc-290">このメソッドが発生、<xref:System.Xml.Linq.XObject.Changed>と<xref:System.Xml.Linq.XObject.Changing>イベント。</span><span class="sxs-lookup"><span data-stu-id="871bc-290">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="871bc-291">このメソッドはスナップショット セマンティクスです。</span><span class="sxs-lookup"><span data-stu-id="871bc-291">This method has snapshot semantics.</span></span> <span data-ttu-id="871bc-292">まず、新しいコンテンツのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="871bc-292">It first creates a copy of the new content.</span></span> <span data-ttu-id="871bc-293">このノードのすべての子ノードを削除します。</span><span class="sxs-lookup"><span data-stu-id="871bc-293">It then removes all children nodes of this node.</span></span> <span data-ttu-id="871bc-294">最後に、子ノードとして新しいコンテンツを追加します。</span><span class="sxs-lookup"><span data-stu-id="871bc-294">Finally, it adds the new content as children nodes.</span></span> <span data-ttu-id="871bc-295">つまり、子ノード自体にクエリを使用する子ノードを置き換えることができます。</span><span class="sxs-lookup"><span data-stu-id="871bc-295">This means that you can replace children nodes using a query on the children nodes themselves.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-296">次の例では、子ノードを含む XML ツリーを作成します。</span><span class="sxs-lookup"><span data-stu-id="871bc-296">The following example creates an XML tree that contains children nodes.</span></span> <span data-ttu-id="871bc-297">すべての子ノードを 1 つの要素で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="871bc-297">It then replaces all of the children nodes with a single element.</span></span>  
  
 <span data-ttu-id="871bc-298">子ノードの結果に置き換える例を参照する、[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]クエリを参照してください<xref:System.Xml.Linq.XContainer.ReplaceNodes%2A>します。</span><span class="sxs-lookup"><span data-stu-id="871bc-298">To see an example of replacing the children nodes with the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query, see <xref:System.Xml.Linq.XContainer.ReplaceNodes%2A>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5)  
);  
root.ReplaceNodes(  
    from el in root.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>1</Child>  
        <Child>2</Child>  
        <Child>3</Child>  
        <Child>4</Child>  
        <Child>5</Child>  
    </Root>  
root.ReplaceNodes( _  
    From el In root.Elements _  
    Where el.Value >= 3 _  
    Select el)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="871bc-299">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-299">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-300">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-300">LINQ to XML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReplaceNodes">
      <MemberSignature Language="C#" Value="public void ReplaceNodes (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceNodes(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceNodes (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceNodes(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberSignature Language="F#" Value="member this.ReplaceNodes : obj[] -&gt; unit" Usage="xContainer.ReplaceNodes content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="871bc-301">コンテンツ オブジェクトのパラメーター リスト。</span><span class="sxs-lookup"><span data-stu-id="871bc-301">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="871bc-302">このドキュメントまたは要素の子ノードを指定された内容で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="871bc-302">Replaces the children nodes of this document or element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="871bc-303">詳細については、この関数に渡すことができる有効なコンテンツは、次を参照してください。[有効なコンテンツの XElement オブジェクトと XDocument オブジェクト](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)します。</span><span class="sxs-lookup"><span data-stu-id="871bc-303">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](https://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="871bc-304">このメソッドが発生、<xref:System.Xml.Linq.XObject.Changed>と<xref:System.Xml.Linq.XObject.Changing>イベント。</span><span class="sxs-lookup"><span data-stu-id="871bc-304">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="871bc-305">このメソッドはスナップショット セマンティクスです。</span><span class="sxs-lookup"><span data-stu-id="871bc-305">This method has snapshot semantics.</span></span> <span data-ttu-id="871bc-306">まず、新しいコンテンツのコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="871bc-306">It first creates a copy of the new content.</span></span> <span data-ttu-id="871bc-307">このノードのすべての子ノードを削除します。</span><span class="sxs-lookup"><span data-stu-id="871bc-307">It then removes all children nodes of this node.</span></span> <span data-ttu-id="871bc-308">最後に、子ノードとして新しいコンテンツを追加します。</span><span class="sxs-lookup"><span data-stu-id="871bc-308">Finally, it adds the new content as children nodes.</span></span> <span data-ttu-id="871bc-309">つまり、子ノード自体にクエリを使用する子ノードを置き換えることができます。</span><span class="sxs-lookup"><span data-stu-id="871bc-309">This means that you can replace children nodes using a query on the children nodes themselves.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="871bc-310">次の例では、ディクショナリと、XML ツリーを作成します。</span><span class="sxs-lookup"><span data-stu-id="871bc-310">The following example creates a dictionary and an XML tree.</span></span> <span data-ttu-id="871bc-311">ディクショナリのクエリに結果を射影し、<xref:System.Collections.Generic.IEnumerable%601>の<xref:System.Xml.Linq.XElement>クエリの結果を XML ツリーの内容に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="871bc-311">It then queries the dictionary, projects the results to an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, and replaces the contents of the XML tree with the results of the query.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5)  
);  
root.ReplaceNodes(  
    from el in root.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>1</Child>  
        <Child>2</Child>  
        <Child>3</Child>  
        <Child>4</Child>  
        <Child>5</Child>  
    </Root>  
root.ReplaceNodes( _  
    From el In root.Elements _  
    Where el.Value >= 3 _  
    Select el)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="871bc-312">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="871bc-312">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13"><span data-ttu-id="871bc-313">LINQ to XML</span><span class="sxs-lookup"><span data-stu-id="871bc-313">LINQ to XML</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>