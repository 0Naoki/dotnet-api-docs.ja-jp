<Type Name="XDocumentType" FullName="System.Xml.Linq.XDocumentType">
  <TypeSignature Language="C#" Value="public class XDocumentType : System.Xml.Linq.XNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XDocumentType extends System.Xml.Linq.XNode" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XDocumentType" />
  <TypeSignature Language="VB.NET" Value="Public Class XDocumentType&#xA;Inherits XNode" />
  <TypeSignature Language="C++ CLI" Value="public ref class XDocumentType : System::Xml::Linq::XNode" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0a1f9-101">XML ドキュメント型定義 (DTD) を表します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-101">Represents an XML Document Type Definition (DTD).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a1f9-102">Xml データ型の定義 (DTD) は、次を行う方法です。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-102">Data Type Definitions (DTD) in XML are a way to do the following:</span></span>  
  
-   <span data-ttu-id="0a1f9-103">限られた範囲に XML ツリーを検証します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-103">Validate XML trees to a limited extent.</span></span>  
  
-   <span data-ttu-id="0a1f9-104">テキストの置換のフォームは、エンティティを展開します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-104">Expand entities, which is a form of text replacement.</span></span>  
  
-   <span data-ttu-id="0a1f9-105">既定の属性を指定します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-105">Supply default attributes.</span></span>  
  
 <span data-ttu-id="0a1f9-106">このクラスは、DTD の XML の概念を表します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-106">This class represents the XML concept of a DTD.</span></span>  
  
 <span data-ttu-id="0a1f9-107">DTD のサポートで[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]は制限されます。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-107">DTD support in [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] is limited.</span></span>  
  
 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]<span data-ttu-id="0a1f9-108"> 既定では、内部エンティティの順に展開されますが、外部エンティティ参照しない限りは解決されません、<xref:System.Xml.XmlReader>が関連付け<xref:System.Xml.XmlResolver>XML ツリーを読み込むために使用します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-108"> will expand internal entities by default, but it will not resolve external entity references unless an <xref:System.Xml.XmlReader> with an associated <xref:System.Xml.XmlResolver> is used to load the XML tree.</span></span>  
  
 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]<span data-ttu-id="0a1f9-109"> 検証を使用することが、ドキュメント、DTD に対して検証されません<xref:System.Xml.XmlReader>必要な場合は、DTD の検証を実行します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-109"> will not validate a document against a DTD, but you can use a validating <xref:System.Xml.XmlReader> to perform DTD validation if necessary.</span></span>  
  
 <span data-ttu-id="0a1f9-110">検証する、[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]ツリーを使用して、XML スキーマに対して、<xref:System.Xml.Schema.Extensions.Validate%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-110">To validate an [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] tree against an XML schema, use the <xref:System.Xml.Schema.Extensions.Validate%2A> method.</span></span>  
  
 <span data-ttu-id="0a1f9-111">ドキュメントには、DTD で定義されているエンティティ参照が含まれている、XML ツリーの作成時に、参照が展開されます。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-111">When a document contains entity references that are defined in a DTD, the references are expanded upon creation of the XML tree.</span></span> <span data-ttu-id="0a1f9-112">ただし、シリアル化または XML ツリーを保存するときに、エンティティの展開のコンテンツが維持されます。エンティティ参照は。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-112">However, when you serialize or save the XML tree, the content of the expanded entities is preserved; the entity references are not.</span></span>  
  
 <span data-ttu-id="0a1f9-113">DTD の既定の属性は、XML ツリーの標準属性として実体化されます。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-113">Default attributes from the DTD will be materialized as regular attributes in the XML tree.</span></span> <span data-ttu-id="0a1f9-114">DTD の既定の属性が実体化されると、属性、DTD の既定の属性であったことを確認する方法はありません。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-114">After a default attribute from the DTD is materialized, there is no way to determine that the attribute was a default attribute from the DTD.</span></span>  
  
 <span data-ttu-id="0a1f9-115">内部の DTD を含む XML ドキュメントを使用して XML ツリーを設定できます。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-115">You can populate an XML tree with an XML document that contains an internal DTD.</span></span> <span data-ttu-id="0a1f9-116">XML ツリーが含まれます、<xref:System.Xml.Linq.XDocument.DocumentType%2A>ノード。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-116">The XML tree will then contain a <xref:System.Xml.Linq.XDocument.DocumentType%2A> node.</span></span> <span data-ttu-id="0a1f9-117">シリアル化またはツリーを保存するときに、内部の DTD はドキュメントの一部として保存もします。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-117">When you serialize or save the tree, the internal DTD will also be saved as part of the document.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0a1f9-118"><see cref="T:System.Xml.Linq.XDocumentType" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-118">Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocumentType" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocumentType (System.Xml.Linq.XDocumentType other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XDocumentType other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocumentType.#ctor(System.Xml.Linq.XDocumentType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XDocumentType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocumentType(System::Xml::Linq::XDocumentType ^ other);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XDocumentType" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="0a1f9-119">コピー元の <see cref="T:System.Xml.Linq.XDocumentType" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-119">An <see cref="T:System.Xml.Linq.XDocumentType" /> object to copy from.</span></span></param>
        <summary><span data-ttu-id="0a1f9-120"><see cref="T:System.Xml.Linq.XDocumentType" /> クラスのインスタンスを、別の <see cref="T:System.Xml.Linq.XDocumentType" /> オブジェクトから初期化します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-120">Initializes an instance of the <see cref="T:System.Xml.Linq.XDocumentType" /> class from another <see cref="T:System.Xml.Linq.XDocumentType" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a1f9-121">XML ツリーの詳細コピーを行うときに、このコンス トラクターは内部使用、主にされます。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-121">This constructor is primarily used internally when making a deep copy of an XML tree.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XDocumentType (string name, string publicId, string systemId, string internalSubset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string publicId, string systemId, string internalSubset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocumentType.#ctor(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, publicId As String, systemId As String, internalSubset As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XDocumentType(System::String ^ name, System::String ^ publicId, System::String ^ systemId, System::String ^ internalSubset);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="publicId" Type="System.String" />
        <Parameter Name="systemId" Type="System.String" />
        <Parameter Name="internalSubset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0a1f9-122">DTD の修飾名が格納されている <see cref="T:System.String" />。XML ドキュメントのルート要素の修飾名と同じです。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-122">A <see cref="T:System.String" /> that contains the qualified name of the DTD, which is the same as the qualified name of the root element of the XML document.</span></span></param>
        <param name="publicId"><span data-ttu-id="0a1f9-123">外部パブリック DTD のパブリック ID が格納されている <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-123">A <see cref="T:System.String" /> that contains the public identifier of an external public DTD.</span></span></param>
        <param name="systemId"><span data-ttu-id="0a1f9-124">外部プライベート DTD のシステム ID が格納されている <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-124">A <see cref="T:System.String" /> that contains the system identifier of an external private DTD.</span></span></param>
        <param name="internalSubset"><span data-ttu-id="0a1f9-125">内部 DTD の内部サブセットが格納されている <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-125">A <see cref="T:System.String" /> that contains the internal subset for an internal DTD.</span></span></param>
        <summary><span data-ttu-id="0a1f9-126">
          <see cref="T:System.Xml.Linq.XDocumentType" /> クラスのインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-126">Initializes an instance of the <see cref="T:System.Xml.Linq.XDocumentType" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0a1f9-127">次の例では、内部 DTD でドキュメントを作成します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-127">The following example creates a document with an internal DTD.</span></span> <span data-ttu-id="0a1f9-128">作成すると、<xref:System.Xml.Linq.XDocumentType>オブジェクト、DTD (Pubs) と内部サブセットを格納する文字列の修飾名を指定します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-128">When it creates the <xref:System.Xml.Linq.XDocumentType> object, it specifies the qualified name of the DTD (Pubs), and a string that contains the internal subset.</span></span> <span data-ttu-id="0a1f9-129">ドキュメントが public または private の外部 DTD を使用しないため、`publicId`と`systemId`に設定されている`null`です。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-129">Because the document does not use a public or private external DTD, the `publicId` and `systemId` are set to `null`.</span></span>  
  
```csharp  
string internalSubset = @"<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>";  
  
string target = "xml-stylesheet";  
string data = "href=\"mystyle.css\" title=\"Compact\" type=\"text/css\"";  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment."),  
    new XProcessingInstruction(target, data),  
    new XDocumentType("Pubs", null, null, internalSubset),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
doc.Declaration = new XDeclaration("1.0", "utf-8", "true");  
  
Console.WriteLine(doc);  
```  
  
```vb  
Dim internalSubset = _  
    "<!ELEMENT Pubs (Book+)>" & Environment.NewLine & _  
    "<!ELEMENT Book (Title, Author)>" & Environment.NewLine & _  
    "<!ELEMENT Title (#PCDATA)>" & Environment.NewLine & _  
    "<!ELEMENT Author (#PCDATA)>"  
  
Dim doc As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
    <!--This is a comment.-->  
    <?xml-stylesheet href="mystyle.css" title="Compact" type="text/css"?>  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
        </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
    </Pubs>  
    <!--This is another comment.-->  
  
doc.FirstNode.NextNode.AddAfterSelf(new XDocumentType("Pubs", Nothing, Nothing, internalSubset))  
  
Console.WriteLine(doc)  
```  
  
 <span data-ttu-id="0a1f9-130">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-130">This example produces the following output:</span></span>  
  
```xml  
<!--This is a comment.-->  
<?xml-stylesheet href="mystyle.css" title="Compact" type="text/css"?>  
<!DOCTYPE Pubs [<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>]>  
<Pubs>  
  <Book>  
    <Title>Artifacts of Roman Civilization</Title>  
    <Author>Moreno, Jordao</Author>  
  </Book>  
  <Book>  
    <Title>Midieval Tools and Implements</Title>  
    <Author>Gazit, Inbar</Author>  
  </Book>  
</Pubs>  
<!--This is another comment.-->  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalSubset">
      <MemberSignature Language="C#" Value="public string InternalSubset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InternalSubset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocumentType.InternalSubset" />
      <MemberSignature Language="VB.NET" Value="Public Property InternalSubset As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InternalSubset { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0a1f9-131">このドキュメント型定義 (DTD) の内部サブセットを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-131">Gets or sets the internal subset for this Document Type Definition (DTD).</span></span></summary>
        <value><span data-ttu-id="0a1f9-132">このドキュメント型定義 (DTD) の内部サブセットが格納されている <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-132">A <see cref="T:System.String" /> that contains the internal subset for this Document Type Definition (DTD).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0a1f9-133">次の例では、含まれている内部サブセット DTD を使用してドキュメントを作成します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-133">The following example creates a document with a DTD that contains an internal subset.</span></span>  
  
```csharp  
string internalSubset = @"<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>";  
  
string target = "xml-stylesheet";  
string data = "href=\"mystyle.css\" title=\"Compact\" type=\"text/css\"";  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment."),  
    new XProcessingInstruction(target, data),  
    new XDocumentType("Pubs", null, null, internalSubset),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
doc.Declaration = new XDeclaration("1.0", "utf-8", "true");  
  
Console.WriteLine(doc.DocumentType.InternalSubset);  
```  
  
```vb  
Dim internalSubset = _  
    "<!ELEMENT Pubs (Book+)>" & Environment.NewLine & _  
    "<!ELEMENT Book (Title, Author)>" & Environment.NewLine & _  
    "<!ELEMENT Title (#PCDATA)>" & Environment.NewLine & _  
    "<!ELEMENT Author (#PCDATA)>"  
  
Dim doc As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
    <!--This is a comment.-->  
    <?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
        </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
    </Pubs>  
    <!--This is another comment.-->  
  
doc.FirstNode.AddAfterSelf(new XDocumentType("Pubs", Nothing, Nothing, internalSubset))  
  
Console.WriteLine(doc.DocumentType.InternalSubset)  
```  
  
 <span data-ttu-id="0a1f9-134">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-134">This example produces the following output:</span></span>  
  
```  
<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocumentType.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0a1f9-135">このドキュメント型定義 (DTD) の名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-135">Gets or sets the name for this Document Type Definition (DTD).</span></span></summary>
        <value><span data-ttu-id="0a1f9-136">このドキュメント型定義 (DTD) の名前が格納されている <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-136">A <see cref="T:System.String" /> that contains the name for this Document Type Definition (DTD).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0a1f9-137">次の例では、DTD を含む XML ドキュメントを作成します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-137">The following example creates an XML document that contains a DTD.</span></span> <span data-ttu-id="0a1f9-138">ドキュメントを作成すた後には、このプロパティを使用して、DTD の修飾名を取得します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-138">After creating the document, it retrieves the qualified name of the DTD using this property.</span></span>  
  
```csharp  
string internalSubset = @"<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>";  
  
string target = "xml-stylesheet";  
string data = "href=\"mystyle.css\" title=\"Compact\" type=\"text/css\"";  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment."),  
    new XProcessingInstruction(target, data),  
    new XDocumentType("Pubs", null, null, internalSubset),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
doc.Declaration = new XDeclaration("1.0", "utf-8", "true");  
  
Console.WriteLine(doc.DocumentType.Name);  
```  
  
```vb  
Dim internalSubset = _  
    "<!ELEMENT Pubs (Book+)>" & Environment.NewLine & _  
    "<!ELEMENT Book (Title, Author)>" & Environment.NewLine & _  
    "<!ELEMENT Title (#PCDATA)>" & Environment.NewLine & _  
    "<!ELEMENT Author (#PCDATA)>"  
  
Dim doc As XDocument = _  
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
    <!--This is a comment.-->  
    <?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
            </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
    </Pubs>  
    <!--This is another comment.-->  
  
doc.FirstNode.AddAfterSelf(new XDocumentType("Pubs", Nothing, Nothing, internalSubset))  
  
Console.WriteLine(doc.DocumentType.Name)  
```  
  
 <span data-ttu-id="0a1f9-139">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-139">This example produces the following output:</span></span>  
  
```  
Pubs  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocumentType.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0a1f9-140">このノードのノード型を取得します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-140">Gets the node type for this node.</span></span></summary>
        <value><span data-ttu-id="0a1f9-141">ノード型。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-141">The node type.</span></span> <span data-ttu-id="0a1f9-142"><see cref="T:System.Xml.Linq.XDocumentType" /> オブジェクトでは、この値は <see cref="F:System.Xml.XmlNodeType.DocumentType" /> です。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-142">For <see cref="T:System.Xml.Linq.XDocumentType" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.DocumentType" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a1f9-143">すべてのクラスから派生したため<xref:System.Xml.Linq.XObject>を含む、<xref:System.Xml.Linq.XObject.NodeType%2A>プロパティの具体的なサブクラスのコレクションで動作するコードを記述することができます<xref:System.Xml.Linq.XObject>です。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-143">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="0a1f9-144">コードは、コレクション内の各ノードのノード型をテストできます。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-144">Your code can then test for the node type of each node in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a1f9-145">次の例では、ノードの型を取得するには、このプロパティの使用、<xref:System.Xml.Linq.XDocumentType>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-145">The following example shows the use of this property to retrieve the node type for an <xref:System.Xml.Linq.XDocumentType> object.</span></span>  
  
```csharp  
string internalSubset = @"<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>";  
  
string target = "xml-stylesheet";  
string data = "href=\"mystyle.css\" title=\"Compact\" type=\"text/css\"";  
  
XDocument doc = new XDocument(  
    new XComment("This is a comment."),  
    new XProcessingInstruction(target, data),  
    new XDocumentType("Pubs", null, null, internalSubset),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
doc.Declaration = new XDeclaration("1.0", "utf-8", "true");  
  
Console.WriteLine(doc.DocumentType.NodeType);  
```  
  
```vb  
Dim internalSubset = _  
    "<!ELEMENT Pubs (Book+)>" & Environment.NewLine & _  
    "<!ELEMENT Book (Title, Author)>" & Environment.NewLine & _  
    "<!ELEMENT Title (#PCDATA)>" & Environment.NewLine & _  
    "<!ELEMENT Author (#PCDATA)>"  
  
Dim doc As XDocument = _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
    <!--This is a comment.-->  
    <?xml-stylesheet href='mystyle.css' title='Compact' type='text/css'?>  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
        </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
    </Pubs>  
    <!--This is another comment.-->  
  
doc.FirstNode.AddAfterSelf(new XDocumentType("Pubs", Nothing, Nothing, internalSubset))  
  
Console.WriteLine(doc.DocumentType.NodeType.ToString())  
```  
  
 <span data-ttu-id="0a1f9-146">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-146">This example produces the following output:</span></span>  
  
```  
DocumentType  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublicId">
      <MemberSignature Language="C#" Value="public string PublicId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PublicId" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocumentType.PublicId" />
      <MemberSignature Language="VB.NET" Value="Public Property PublicId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PublicId { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0a1f9-147">このドキュメント型定義 (DTD) のパブリック ID を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-147">Gets or sets the public identifier for this Document Type Definition (DTD).</span></span></summary>
        <value><span data-ttu-id="0a1f9-148">このドキュメント型定義 (DTD) のパブリック ID が格納されている <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-148">A <see cref="T:System.String" /> that contains the public identifier for this Document Type Definition (DTD).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a1f9-149">XML ドキュメントでは、外部のパブリック DTD を使用する場合、このプロパティは、外部 DTD のパブリック識別子が格納されます。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-149">If an XML document uses an external public DTD, this property will contain the public identifier of the external DTD.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemId">
      <MemberSignature Language="C#" Value="public string SystemId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SystemId" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XDocumentType.SystemId" />
      <MemberSignature Language="VB.NET" Value="Public Property SystemId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SystemId { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0a1f9-150">このドキュメント型定義 (DTD) のシステム ID を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-150">Gets or sets the system identifier for this Document Type Definition (DTD).</span></span></summary>
        <value><span data-ttu-id="0a1f9-151">このドキュメント型定義 (DTD) のシステム ID が格納されている <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-151">A <see cref="T:System.String" /> that contains the system identifier for this Document Type Definition (DTD).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a1f9-152">XML ドキュメントでは、外部の秘密 DTD を使用する場合、このプロパティは、外部 DTD の個人識別子が格納されます。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-152">If an XML document uses an external private DTD, this property will contain the private identifier of the external DTD.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a1f9-153">次の例では、外部の秘密 DTD を参照する XML ドキュメントを作成します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-153">The following example creates an XML document that refers to an external private DTD.</span></span> <span data-ttu-id="0a1f9-154">DTD 内部サブセットがありませんでした。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-154">The DTD does not have an internal subset.</span></span> <span data-ttu-id="0a1f9-155">呼び出し、<xref:System.Xml.Linq.XDocumentType>コンス トラクターがプライベートの外部の DTD の使用を反映します。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-155">The call to the <xref:System.Xml.Linq.XDocumentType> constructor reflects the use of the external private DTD.</span></span> <span data-ttu-id="0a1f9-156">渡します`null`内部サブセットのです。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-156">It passes `null` for the internal subset.</span></span>  
  
```csharp  
string pubsDtd =  
@"<!ELEMENT Pubs (Book+)>  
<!ELEMENT Book (Title, Author)>  
<!ELEMENT Title (#PCDATA)>  
<!ELEMENT Author (#PCDATA)>";  
File.WriteAllText("Pubs.dtd", pubsDtd);  
  
string target = "xml-stylesheet";  
string data = "href=\"mystyle.css\" title=\"Compact\" type=\"text/css\"";  
  
XDocument doc = new XDocument(  
    new XDocumentType("Pubs", null, "Pubs.dtd", null),  
    new XElement("Pubs",   
        new XElement("Book",  
            new XElement("Title", "Artifacts of Roman Civilization"),  
            new XElement("Author", "Moreno, Jordao")  
        ),  
        new XElement("Book",  
            new XElement("Title", "Midieval Tools and Implements"),  
            new XElement("Author", "Gazit, Inbar")  
        )  
    ),  
    new XComment("This is another comment.")  
);  
doc.Declaration = new XDeclaration("1.0", "utf-8", "true");  
doc.Save("Pubs.xml");  
  
// Validate Pubs.xml against Pubs.dtd.  
XmlReaderSettings xrs = new XmlReaderSettings();  
xrs.ProhibitDtd = false;  
xrs.ValidationType = ValidationType.DTD;  
xrs.ConformanceLevel = ConformanceLevel.Auto;  
XmlReader xr = XmlReader.Create("Pubs.xml", xrs);  
XDocument doc2 = XDocument.Load(xr);  
  
XDocumentType dt = doc2.Document.DocumentType;  
Console.WriteLine("SystemId:{0}", dt.SystemId);  
```  
  
```vb  
Dim pubsDtd As String = _   
    "<!ELEMENT Pubs (Book+)>" & Environment.NewLine & _  
    "<!ELEMENT Book (Title, Author)>" & Environment.NewLine & _  
    "<!ELEMENT Title (#PCDATA)>" & Environment.NewLine & _  
    "<!ELEMENT Author (#PCDATA)>"  
File.WriteAllText("Pubs.dtd", pubsDtd)  
  
Dim target As String = "xml-stylesheet"  
Dim data As String = "href='mystyle.css' title='Compact' type='text/css'"  
  
Dim doc As XDocument = _  
    <?xml version='1.0'?>  
    <Pubs>  
        <Book>  
            <Title>Artifacts of Roman Civilization</Title>  
            <Author>Moreno, Jordao</Author>  
        </Book>  
        <Book>  
            <Title>Midieval Tools and Implements</Title>  
            <Author>Gazit, Inbar</Author>  
        </Book>  
    </Pubs>  
    <!--This is another comment.-->  
  
doc _  
.FirstNode _  
.AddBeforeSelf(New XDocumentType("Pubs", Nothing, "Pubs.dtd", Nothing))  
  
doc.Declaration = New XDeclaration("1.0", "utf-8", "true")  
doc.Save("Pubs.xml")  
  
' Validate Pubs.xml against Pubs.dtd.  
Dim xrs As XmlReaderSettings = New XmlReaderSettings()  
xrs.ProhibitDtd = False  
xrs.ValidationType = ValidationType.DTD  
xrs.ConformanceLevel = ConformanceLevel.Auto  
Dim xr As XmlReader = XmlReader.Create("Pubs.xml", xrs)  
Dim doc2 As XDocument = XDocument.Load(xr)  
  
Dim dt As XDocumentType = doc2.Document.DocumentType  
Console.WriteLine("SystemId:{0}", dt.SystemId)  
```  
  
 <span data-ttu-id="0a1f9-157">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-157">This example produces the following output:</span></span>  
  
```  
SystemId:Pubs.dtd  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocumentType.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="0a1f9-158">このメソッドの書き込み対象の <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-158">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span></span></param>
        <summary><span data-ttu-id="0a1f9-159">この <see cref="T:System.Xml.Linq.XDocumentType" /> を <see cref="T:System.Xml.XmlWriter" /> に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-159">Write this <see cref="T:System.Xml.Linq.XDocumentType" /> to an <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a1f9-160">このメソッドが XML ツリーを作成する方法によって内部的に使用、主に、<xref:System.Xml.XmlWriter>です。</span><span class="sxs-lookup"><span data-stu-id="0a1f9-160">This method is primarily used internally by the methods that write an XML tree to an <xref:System.Xml.XmlWriter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XDocumentType.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>