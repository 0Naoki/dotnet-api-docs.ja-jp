<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XElement.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac515213489ac8be26d6703a879772581c4b4082467.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15213489ac8be26d6703a879772581c4b4082467</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XElement">
          <source>Represents an XML element.</source>
          <target state="translated">XML 要素を表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XElement">
          <source>See <bpt id="p1">[</bpt>XElement Class Overview<ept id="p1">](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec)</ept> and the Remarks section on this page for usage information and examples.</source>
          <target state="translated">使用法の情報と例については、「<bpt id="p1">[</bpt>XElement クラスの概要<ept id="p1">](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec)</ept>」およびこのページの「解説」セクションを参照してください。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>This class represents an XML element, the fundamental XML construct.</source>
          <target state="translated">このクラスは、XML 要素、基本的な XML 構造を表します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>See <bpt id="p1">[</bpt>XElement Class Overview<ept id="p1">](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec)</ept> for other usage information.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>XElement クラスの概要<ept id="p1">](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec)</ept>の他の使用状況情報。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>An element has an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, optionally one or more attributes, and can optionally contain content (for more information, see <ph id="ph2">&lt;xref:System.Xml.Linq.XContainer.Nodes%2A&gt;</ph>).</source>
          <target state="translated">要素が、<ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>で、必要に応じて、その属性し、コンテンツを含めることができます必要に応じて 1 つまたは複数 (詳細については、次を参照してください。 <ph id="ph2">&lt;xref:System.Xml.Linq.XContainer.Nodes%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>An <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> can contain the following types of content:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>次の種類のコンテンツを含めることができます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>For details about the valid content of an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">有効なコンテンツの詳細について、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>を参照してください<bpt id="p1">[</bpt>有効なコンテンツの XElement オブジェクトと XDocument オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> derives from <ph id="ph2">&lt;xref:System.Xml.Linq.XContainer&gt;</ph>, which derives from <ph id="ph3">&lt;xref:System.Xml.Linq.XNode&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> 派生した<ph id="ph2">&lt;xref:System.Xml.Linq.XContainer&gt;</ph>から派生した<ph id="ph3">&lt;xref:System.Xml.Linq.XNode&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>Some <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> methods can be used from XAML.</source>
          <target state="translated">いくつか<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>XAML からメソッドを使用することができます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>For more information, see <bpt id="p1">[</bpt>LINQ to XML Dynamic Properties<ept id="p1">](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>LINQ to XML の動的プロパティ<ept id="p1">](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>The following example creates an XML tree.</source>
          <target state="translated">次の例では、XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>The content of the new element comes from a LINQ query.</source>
          <target state="translated">新しい要素の内容は、LINQ クエリから取得されます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>The following is the same example, but in this case the XML is in a namespace.</source>
          <target state="translated">同じ例を次に示しますが、ここで、XML が名前空間には。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>For more information, see <bpt id="p1">[</bpt>Working with XML Namespaces<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML 名前空間の使用<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XElement">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>For details about the valid content that can be passed to this constructor, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">このコンス トラクターに渡すことができる有効なコンテンツに関する詳細については、「<bpt id="p1">[</bpt>有効なコンテンツの XElement オブジェクトと XDocument オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>There is an implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">文字列からの暗黙的な変換がある<ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">新たに作成する代わりにパラメーターとして文字列を指定するのには、このコンス トラクターの一般的な使用<ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>When creating an element in a namespace, typical use is to use the addition operator overload with an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and a string to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">加算演算子オーバー ロードを使用する一般的な使用方法を名前空間内の要素を作成するとき、<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>および作成する文字列、<ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>For more information, see <bpt id="p1">[</bpt>Working with XML Namespaces<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML 名前空間の使用<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>The following example creates an XML tree.</source>
          <target state="translated">次の例では、XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>The content of the new element comes from a LINQ query.</source>
          <target state="translated">新しい要素の内容は、LINQ クエリから取得されます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> object to copy from.</source>
          <target state="translated">コピー元の <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> class from another <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> クラスの新しいインスタンスを、別の <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> オブジェクトから初期化します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)">
          <source>This constructor makes a deep copy of an element.</source>
          <target state="translated">このコンス トラクターは、要素のディープ コピーを作成します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)">
          <source>The following example creates an XML tree, creates a clone of the tree, and then calls <ph id="ph1">&lt;xref:System.Xml.Linq.XNode.DeepEquals%2A&gt;</ph>, which tests whether the two XML trees are equal.</source>
          <target state="translated">次の例は、XML ツリーを作成して、ツリーの複製を作成しを呼び出して<ph id="ph1">&lt;xref:System.Xml.Linq.XNode.DeepEquals%2A&gt;</ph>、2 つの XML ツリーが等しいかどうかをテストします。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the name of the element.</source>
          <target state="translated">要素の名前を格納する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> class with the specified name.</source>
          <target state="translated">指定した名前を使用して、<ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
          <source>This constructor creates an element with no content and no attributes.</source>
          <target state="translated">このコンス トラクターは、内容と属性を持たない要素を作成します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
          <source>There is an implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">文字列からの暗黙的な変換がある<ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
          <source>Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">新たに作成する代わりにパラメーターとして文字列を指定するのには、このコンス トラクターの一般的な使用<ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
          <source>When creating an element in a namespace, typical use is to use the addition operator overload with an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and a string to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">加算演算子オーバー ロードを使用する一般的な使用方法を名前空間内の要素を作成するとき、<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>および作成する文字列、<ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
          <source>For more information, see <bpt id="p1">[</bpt>Working with XML Namespaces<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML 名前空間の使用<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
          <source>The following example creates an element with no content.</source>
          <target state="translated">次の例では、内容の要素を作成しません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
          <source>The following example creates an element in a namespace with no content.</source>
          <target state="translated">次の例では、コンテンツがないと、名前空間に要素を作成します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
          <source>For more information, see <bpt id="p1">[</bpt>Working with XML Namespaces<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML 名前空間の使用<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> that contains unevaluated queries that will be iterated for the contents of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> の内容に対して反復処理される、評価されていないクエリを格納する <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> class from an <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> オブジェクトから <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)">
          <source>This constructor iterates through the contents of the specified <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, and creates an element with its contents.</source>
          <target state="translated">このコンス トラクターは、指定の内容を反復処理<ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>、され、その内容の要素を作成します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)">
          <source>The following example creates a source XML tree, and then creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> from a query on the source XML tree.</source>
          <target state="translated">次の例は、ソース XML ツリーを作成し、作成し、<ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>ソース XML ツリーに対してクエリからです。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)">
          <source>It then serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> to the console, adds a new element to the source XML tree, and then serializes the <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> again.</source>
          <target state="translated">シリアル化し、<ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>をコンソールには、ソース XML ツリーに新しい要素を追加し、シリアル化し、<ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>もう一度です。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)">
          <source>You can see that element newly added to the source XML tree is not included in the first serialization, but is included in the second.</source>
          <target state="translated">ソース XML ツリーに新しく追加された要素の最初のシリアル化には含まれませんが、2 番目に含まれてを表示できます。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the element name.</source>
          <target state="translated">要素名を格納する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>The contents of the element.</source>
          <target state="translated">要素の内容。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> class with the specified name and content.</source>
          <target state="translated">指定した名前と内容を持つ <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>This constructor creates an element with the specified content and attributes.</source>
          <target state="translated">このコンス トラクターは、指定されたコンテンツおよび属性を持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>There is an implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">文字列からの暗黙的な変換がある<ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">新たに作成する代わりにパラメーターとして文字列を指定するのには、このコンス トラクターの一般的な使用<ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>When creating an element in a namespace, typical use is to use the addition operator overload with an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and a string to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">加算演算子オーバー ロードを使用する一般的な使用方法を名前空間内の要素を作成するとき、<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>および作成する文字列、<ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Working with XML Namespaces<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML 名前空間の使用<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>For details about the valid content that can be passed to this constructor, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">このコンス トラクターに渡すことができる有効なコンテンツに関する詳細については、「<bpt id="p1">[</bpt>有効なコンテンツの XElement オブジェクトと XDocument オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>The following example creates an XML tree.</source>
          <target state="translated">次の例では、XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>The content of the new element comes from a LINQ query.</source>
          <target state="translated">新しい要素の内容は、LINQ クエリから取得されます。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>The following example creates an XML tree with a variety of types of content.</source>
          <target state="translated">次の例では、さまざまな種類のコンテンツの XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>The following example creates an XML tree in a namespace.</source>
          <target state="translated">次の例では、名前空間で XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>The following example creates an XML tree with nested namespaces.</source>
          <target state="translated">次の例では、入れ子になった名前空間を持つ XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the element name.</source>
          <target state="translated">要素名を格納する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>The initial content of the element.</source>
          <target state="translated">要素の初期コンテンツ。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> class with the specified name and content.</source>
          <target state="translated">指定した名前と内容を持つ <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>This constructor creates an element with the specified content and attributes.</source>
          <target state="translated">このコンス トラクターは、指定されたコンテンツおよび属性を持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>There is an implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">文字列からの暗黙的な変換がある<ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">新たに作成する代わりにパラメーターとして文字列を指定するのには、このコンス トラクターの一般的な使用<ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>When creating an element in a namespace, typical use is to use the addition operator overload with an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> and a string to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">加算演算子オーバー ロードを使用する一般的な使用方法を名前空間内の要素を作成するとき、<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>および作成する文字列、<ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>For more information, see <bpt id="p1">[</bpt>Working with XML Namespaces<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML 名前空間の使用<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>です。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>For details about the valid content that can be passed to this constructor, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">このコンス トラクターに渡すことができる有効なコンテンツに関する詳細については、「<bpt id="p1">[</bpt>有効なコンテンツの XElement オブジェクトと XDocument オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>です。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>The following example creates an XML tree.</source>
          <target state="translated">次の例では、XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>The content of the new element comes from a LINQ query.</source>
          <target state="translated">新しい要素の内容は、LINQ クエリから取得されます。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>The following example creates an XML tree with a variety of types of content.</source>
          <target state="translated">次の例では、さまざまな種類のコンテンツの XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>The following example creates an XML tree in a namespace.</source>
          <target state="translated">次の例では、名前空間で XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>The following example creates an XML tree with nested namespaces.</source>
          <target state="translated">次の例では、入れ子になった名前空間を持つ XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XElement">
          <source>Returns a collection of elements that contain this element, and the ancestors of this element.</source>
          <target state="translated">この要素およびこの要素の先祖を格納している、要素のコレクションを返します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>The elements in the returned collection are in reverse document order.</source>
          <target state="translated">返されるコレクション内の要素は、ドキュメントの逆順になっています。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>This method uses deferred execution.</source>
          <target state="translated">このメソッドは遅延実行を使用します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf">
          <source>Returns a collection of elements that contain this element, and the ancestors of this element.</source>
          <target state="translated">この要素およびこの要素の先祖を格納している、要素のコレクションを返します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> of elements that contain this element, and the ancestors of this element.</source>
          <target state="translated">この要素およびこの要素の先祖を格納している、要素の <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf">
          <source>The elements in the returned collection are in reverse document order.</source>
          <target state="translated">返されるコレクション内の要素は、ドキュメントの逆順になっています。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf">
          <source>This method uses deferred execution.</source>
          <target state="translated">このメソッドは遅延実行を使用します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf">
          <source>The following example creates an XML tree.</source>
          <target state="translated">次の例では、XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf">
          <source>It then finds the <ph id="ph1">`GrandChild`</ph> element, and then prints the ancestors of it.</source>
          <target state="translated">検出し、<ph id="ph1">`GrandChild`</ph>要素、および、その先祖を出力します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to match.</source>
          <target state="translated">照合する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
          <source>Returns a filtered collection of elements that contain this element, and the ancestors of this element.</source>
          <target state="translated">この要素およびこの要素の先祖を格納している、フィルター処理された要素のコレクションを返します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
          <source>Only elements that have a matching <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> are included in the collection.</source>
          <target state="translated">一致する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> を持つ要素のみがコレクションに含められます。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> that contain this element, and the ancestors of this element.</source>
          <target state="translated">この要素およびこの要素の先祖を格納している、<ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
          <source>Only elements that have a matching <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> are included in the collection.</source>
          <target state="translated">一致する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> を持つ要素のみがコレクションに含められます。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
          <source>The elements in the returned collection are in reverse document order.</source>
          <target state="translated">返されるコレクション内の要素は、ドキュメントの逆順になっています。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
          <source>This method uses deferred execution.</source>
          <target state="translated">このメソッドは遅延実行を使用します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
          <source>The following example uses this .</source>
          <target state="translated">次の例は、これを使用します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> of the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph> to get.</source>
          <target state="translated">取得する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph> of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> that has the specified <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> を持つ、この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph> that has the specified <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>; <ph id="ph3">&lt;see langword="null" /&gt;</ph> if there is no attribute with the specified name.</source>
          <target state="translated">指定した名前 <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> を持つ <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph>。指定した名前を持つ属性がない場合は <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
          <source>Some  return collections of elements or attributes.</source>
          <target state="translated">いくつかは、要素または属性のコレクションを返します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
          <source>This method returns only a single attribute.</source>
          <target state="translated">このメソッドは、1 つの属性のみを返します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
          <source>Sometimes this is referred to as a <bpt id="p1">*</bpt>singleton<ept id="p1">*</ept> (in contrast to a <bpt id="p2">*</bpt>collection<ept id="p2">*</ept>).</source>
          <target state="translated">これとも呼ば、<bpt id="p1">*</bpt>シングルトン<ept id="p1">*</ept>(対照的に、<bpt id="p2">*</bpt>コレクション<ept id="p2">*</ept>)。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
          <source>Visual Basic users can use the integrated attribute axis to retrieve the value of an attribute with a specified name.</source>
          <target state="translated">Visual Basic の場合は、統合属性軸を使用して、指定した名前の属性の値を取得できます。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
          <source>The following example creates an element with an attribute.</source>
          <target state="translated">次の例では、属性を持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
          <source>It then retrieves the attribute using this method.</source>
          <target state="translated">このメソッドを使用して属性を取得します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
          <source>The following is the same example, but in this case the XML is in a namespace.</source>
          <target state="translated">同じ例を次に示しますが、ここで、XML が名前空間には。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
          <source>For more information, see <bpt id="p1">[</bpt>Working with XML Namespaces<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML 名前空間の使用<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>です。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XElement">
          <source>Returns a collection of attributes of this element.</source>
          <target state="translated">この要素の属性のコレクションを返します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>This method uses deferred execution.</source>
          <target state="translated">このメソッドは遅延実行を使用します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Attributes">
          <source>Returns a collection of attributes of this element.</source>
          <target state="translated">この要素の属性のコレクションを返します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Attributes">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph> of attributes of this element.</source>
          <target state="translated">この要素の <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph> 属性の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes">
          <source>The attributes in the returned collection are in the order that they were added to the element.</source>
          <target state="translated">返されるコレクションに属性は、要素に追加された順序でです。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes">
          <source>If the XML tree was parsed from XML, the attributes are returned in document order.</source>
          <target state="translated">XML から XML ツリーが解析された場合は、ドキュメントの順序で、属性が返されます。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes">
          <source>This method uses deferred execution.</source>
          <target state="translated">このメソッドは遅延実行を使用します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes">
          <source>The following example creates an element with two attributes.</source>
          <target state="translated">次の例では、次の 2 つの属性を持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes">
          <source>It then uses this  to retrieve all attributes of the element.</source>
          <target state="translated">使用して、この要素のすべての属性を取得します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes">
          <source>The following is the same example, but in this case the XML is in a namespace.</source>
          <target state="translated">同じ例を次に示しますが、ここで、XML が名前空間には。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes">
          <source>For more information, see <bpt id="p1">[</bpt>Working with XML Namespaces<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML 名前空間の使用<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>です。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to match.</source>
          <target state="translated">照合する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
          <source>Returns a filtered collection of attributes of this element.</source>
          <target state="translated">この要素の属性のフィルター処理されたコレクションを返します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
          <source>Only elements that have a matching <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> are included in the collection.</source>
          <target state="translated">一致する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> を持つ要素のみがコレクションに含められます。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph> that contains the attributes of this element.</source>
          <target state="translated">この要素の属性を格納している <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
          <source>Only elements that have a matching <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> are included in the collection.</source>
          <target state="translated">一致する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> を持つ要素のみがコレクションに含められます。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
          <source>Attribute names must be unique within an element.</source>
          <target state="translated">属性名は、要素内で一意でなければなりません。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
          <source>Therefore, this  can return either a collection that contains only one attribute, or it can return an empty collection.</source>
          <target state="translated">したがって、1 つだけの属性を含むコレクションを返します。 または、空のコレクションを返すことができます。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
          <source>This method uses deferred execution.</source>
          <target state="translated">このメソッドは遅延実行を使用します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
          <source>The following example uses this .</source>
          <target state="translated">次の例は、これを使用します。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
          <source>The following is the same example, but in this case the XML is in a namespace.</source>
          <target state="translated">同じ例を次に示しますが、ここで、XML が名前空間には。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
          <source>For more information, see <bpt id="p1">[</bpt>Working with XML Namespaces<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XML 名前空間の使用<ept id="p1">](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430)</ept>です。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.DescendantNodesAndSelf">
          <source>Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.</source>
          <target state="translated">この要素およびこの要素のすべての子孫ノードをドキュメント順で格納している、ノードのコレクションを返します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.DescendantNodesAndSelf">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNode" /&gt;</ph> that contain this element, and all descendant nodes of this element, in document order.</source>
          <target state="translated">この要素およびこの要素のすべての子孫ノードを格納している、ドキュメント順の <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XNode" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.DescendantNodesAndSelf">
          <source>This method uses deferred execution.</source>
          <target state="translated">このメソッドは遅延実行を使用します。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.DescendantNodesAndSelf">
          <source>The following example creates an XML tree, and then uses this .</source>
          <target state="translated">次の例では、XML ツリーを作成し、これを使用します。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.DescendantNodesAndSelf">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XElement">
          <source>Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</source>
          <target state="translated">この要素およびこの要素のすべての子孫要素をドキュメント順で格納している、要素のコレクションを返します。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>This method uses deferred execution.</source>
          <target state="translated">このメソッドは遅延実行を使用します。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.DescendantsAndSelf">
          <source>Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</source>
          <target state="translated">この要素およびこの要素のすべての子孫要素をドキュメント順で格納している、要素のコレクションを返します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.DescendantsAndSelf">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> of elements that contain this element, and all descendant elements of this element, in document order.</source>
          <target state="translated">この要素およびこの要素のすべての子孫要素をドキュメント順で格納している、要素の <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.DescendantsAndSelf">
          <source>This method uses deferred execution.</source>
          <target state="translated">このメソッドは遅延実行を使用します。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.DescendantsAndSelf">
          <source>The following example creates an XML tree, and then uses this .</source>
          <target state="translated">次の例では、XML ツリーを作成し、これを使用します。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.DescendantsAndSelf">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to match.</source>
          <target state="translated">照合する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)">
          <source>Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order.</source>
          <target state="translated">この要素およびこの要素のすべての子孫要素をドキュメント順で格納している、フィルター処理された要素のコレクションを返します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)">
          <source>Only elements that have a matching <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> are included in the collection.</source>
          <target state="translated">一致する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> を持つ要素のみがコレクションに含められます。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> that contain this element, and all descendant elements of this element, in document order.</source>
          <target state="translated">この要素およびこの要素のすべての子孫要素をドキュメント順で格納している <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の<ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)">
          <source>Only elements that have a matching <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> are included in the collection.</source>
          <target state="translated">一致する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> を持つ要素のみがコレクションに含められます。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)">
          <source>This method uses deferred execution.</source>
          <target state="translated">このメソッドは遅延実行を使用します。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)">
          <source>The following example creates an XML tree, and then uses this .</source>
          <target state="translated">次の例では、XML ツリーを作成し、これを使用します。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XElement.EmptySequence">
          <source>Gets an empty collection of elements.</source>
          <target state="translated">要素の空のコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.EmptySequence">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> that contains an empty collection.</source>
          <target state="translated">空のコレクションを格納している <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.EmptySequence">
          <source>This property is typically used by class implementers when writing a method that returns a collection of elements.</source>
          <target state="translated">このプロパティは要素のコレクションを返すメソッドを記述する場合にクラスの実装によって通常使用されます。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.EmptySequence">
          <source>If the method must return no elements, it can use this property to get an empty collection of <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects.</source>
          <target state="translated">このプロパティを使用して、空のコレクションを取得する場合は、メソッドは要素を返すことがない必要があります、これ<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XElement.FirstAttribute">
          <source>Gets the first attribute of this element.</source>
          <target state="translated">この要素の最初の属性を取得します。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.FirstAttribute">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph> that contains the first attribute of this element.</source>
          <target state="translated">この要素の最初の属性を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.FirstAttribute">
          <source>Attributes are stored in the element in the order that they were added to the element.</source>
          <target state="translated">属性は、要素に追加された順序で要素に格納されます。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.FirstAttribute">
          <source>The following example uses this property.</source>
          <target state="translated">次の例では、このプロパティを使用します。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.FirstAttribute">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.GetDefaultNamespace">
          <source>Gets the default <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の既定の <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.GetDefaultNamespace">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> that contains the default namespace of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の既定の名前空間を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetDefaultNamespace">
          <source>Namespace declarations may be persisted as attributes in the XML tree.</source>
          <target state="translated">Namespace 宣言は、XML ツリー内の属性として永続化可能性があります。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetDefaultNamespace">
          <source>These special attributes declare namespaces, including default namespaces.</source>
          <target state="translated">これらの特別な属性は、既定の名前空間を含む、名前空間を宣言します。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetDefaultNamespace">
          <source>This method finds the namespace declaration that declares the default namespace, if there is one, and returns the <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> for the default namespace.</source>
          <target state="translated">このメソッドは、1 つを使用する必要がある場合は、既定の名前空間を宣言する名前空間宣言を検索し、返します、<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>既定の名前空間。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetDefaultNamespace">
          <source>If there is no attribute that declares the default namespace, then this method returns <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">既定の名前空間を宣言する属性がないかどうかは、このメソッドが戻る<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetDefaultNamespace">
          <source>When creating XML trees using C#, even if an XML tree would be serialized with a default namespace, if the namespace is not persisted in the XML tree as an attribute, this method will not report the namespace as the default namespace.</source>
          <target state="translated">C# を使用して XML ツリーを作成するには、XML ツリーはシリアル化する既定の名前空間の場合は、属性として XML ツリーで、名前空間は保持されない場合も、このメソッドは、名前空間を既定の名前空間として報告されません。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetDefaultNamespace">
          <source>When creating XML trees using Visual Basic and XML literals, if you create the XML in a default namespace using the Imports statement, then a namespace attribute will be created in the tree by the Visual Basic compiler, and this method will report that namespace.</source>
          <target state="translated">Imports ステートメントを使用して既定の名前空間で XML を作成する場合は、Visual Basic および XML のリテラルを使用した XML ツリーを作成する、ときにし、名前空間の属性が作成ツリーで、Visual Basic コンパイラによってされこのメソッドはその名前空間を報告します。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetDefaultNamespace">
          <source>The following example creates an XML tree that has a default namespace.</source>
          <target state="translated">次の例を既定の名前空間を持つ XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetDefaultNamespace">
          <source>It then uses this method to retrieve the default namespace.</source>
          <target state="translated">このメソッドを使用して、既定の名前空間を取得します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetDefaultNamespace">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
          <source>A string that contains the namespace prefix to look up.</source>
          <target state="translated">検索対象の名前空間プレフィックスを格納している文字列。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
          <source>Gets the namespace associated with a particular prefix for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> のプレフィックスに関連付けられた名前空間を取得します。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> for the namespace associated with the prefix for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> のプレフィックスに関連付けられた名前空間の <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
          <source>This method looks through the XML tree for namespace attributes that are in scope for this element.</source>
          <target state="translated">このメソッドは、この要素のスコープ内にある名前空間属性の XML ツリーを検索します。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
          <source>Namespace prefixes are specified in namespace attributes that are in the XML tree.</source>
          <target state="translated">Namespace プレフィックスは、XML ツリー内にある名前空間属性で指定されます。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
          <source>The following example creates an XML tree that has a namespace with an associated prefix.</source>
          <target state="translated">次の例を関連付けられたプリフィックスを持つ名前空間を持つ XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
          <source>It then uses this method to retrieve the <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> for the prefix.</source>
          <target state="translated">取得し、このメソッドを使用して、<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>プレフィックス。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
          <source>When using Visual Basic, you would typically use the <bpt id="p1">[</bpt>GetXmlNamespace Operator<ept id="p1">](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md)</ept> operator, as follows</source>
          <target state="translated">通常使用 Visual Basic を使用する場合、 <bpt id="p1">[</bpt>GetXmlNamespace 演算子<ept id="p1">](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md)</ept>次のように、演算子</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> to look up.</source>
          <target state="translated">検索対象の <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
          <source>Gets the prefix associated with a namespace for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の名前空間に関連付けられているプレフィックスを取得します。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the namespace prefix.</source>
          <target state="translated">名前空間プレフィックスを格納している <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
          <source>This method looks through the XML tree for namespace attributes that are in scope for this element.</source>
          <target state="translated">このメソッドは、この要素のスコープ内にある名前空間属性の XML ツリーを検索します。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
          <source>Namespace prefixes are specified in namespace attributes that are in the XML tree.</source>
          <target state="translated">Namespace プレフィックスは、XML ツリー内にある名前空間属性で指定されます。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
          <source>If the namespace is the default namespace, and there is no prefix for the namespace, then this method returns null.</source>
          <target state="translated">名前空間は、既定の名前空間、名前空間のプレフィックスがない場合は、このメソッドは null を返します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
          <source>The following example creates an XML tree that contains a namespace with a prefix.</source>
          <target state="translated">次の例では、プレフィックスを持つ名前空間を含む XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
          <source>It then uses this method to retrieve the prefix for the namespace.</source>
          <target state="translated">このメソッドを使用して、名前空間のプレフィックスを取得します。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
          <source>Notice that this example uses the implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> when calling this method.</source>
          <target state="translated">この例には、文字列からの暗黙的な変換が使用されて<ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph>このメソッドを呼び出すときにします。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XElement.HasAttributes">
          <source>Gets a value indicating whether this element has at least one attribute.</source>
          <target state="translated">この要素が 1 つ以上の属性を持っているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.HasAttributes">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element has at least one attribute; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この要素が 1 つ以上の属性を持っている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.HasAttributes">
          <source>The following example uses this property.</source>
          <target state="translated">次の例では、このプロパティを使用します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.HasAttributes">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XElement.HasElements">
          <source>Gets a value indicating whether this element has at least one child element.</source>
          <target state="translated">この要素が 1 つ以上の子要素を持っているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.HasElements">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element has at least one child element; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この要素が 1 つ以上の子要素を持っている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.HasElements">
          <source>The following example uses this property.</source>
          <target state="translated">次の例では、このプロパティを使用します。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.HasElements">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XElement.IsEmpty">
          <source>Gets a value indicating whether this element contains no content.</source>
          <target state="translated">この要素に内容が格納されていないかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.IsEmpty">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this element contains no content; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">この要素に内容が格納されていない場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.IsEmpty">
          <source>Note that an element that contains a start and end tag with no content between the tags is not considered to be an empty element.</source>
          <target state="translated">開始タグと終了タグの間でコンテンツを含む要素が空の要素であると見なされますできませんに注意してください。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.IsEmpty">
          <source>It has content with no length.</source>
          <target state="translated">長さのコンテンツがありません。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.IsEmpty">
          <source>Only an element that contains only a start tag, and is expressed as a terminated empty element, is considered to be empty.</source>
          <target state="translated">開始タグのみを含み、強制終了された空の要素として表される要素だけが空にすると見なされます。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.IsEmpty">
          <source>The following example creates a variety of XML trees, and shows the value of this property with each tree.</source>
          <target state="translated">次の例では、さまざまな XML ツリーを作成し、各ツリーには、このプロパティの値を示しています。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.IsEmpty">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XElement.LastAttribute">
          <source>Gets the last attribute of this element.</source>
          <target state="translated">この要素の最後の属性を取得します。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.LastAttribute">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph> that contains the last attribute of this element.</source>
          <target state="translated">この要素の最後の属性を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.LastAttribute">
          <source>Attributes are stored in the element in the order that they were added to the element.</source>
          <target state="translated">属性は、要素に追加された順序で要素に格納されます。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.LastAttribute">
          <source>The following example creates an XML tree with three attributes.</source>
          <target state="translated">次の例では、次の 3 つの属性を持つ XML ツリーを作成します。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.LastAttribute">
          <source>It then writes the last attribute as output.</source>
          <target state="translated">これは、後の出力として最後の属性を書き込みます。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.LastAttribute">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XElement">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> from a file specified by a URI, from an <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>, or from an <ph id="ph3">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated">URI で指定されたファイル、<ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>、または <ph id="ph3">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> から、新しい <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> を作成します。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>You can use one of the overloads of this method to load an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> from a file, a <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>, or an <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">このメソッドのオーバー ロードのいずれかを使用するにを読み込む、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>ファイルから、 <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>、または<ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>To create an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> from a string that contains XML, use <ph id="ph2">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph>.</source>
          <target state="translated">作成する、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>から XML を表す文字列を使用して<ph id="ph2">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
          <source>The stream that contains the XML data.</source>
          <target state="translated">XML データを格納しているストリーム。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> instance by using the specified stream.</source>
          <target state="translated">指定されたストリームを使用して新しい <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> インスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> object used to read the data that is contained in the stream.</source>
          <target state="translated">ストリームに格納されているデータを読み取るために使用する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
          <source>If you want to control load options, use the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Load%2A&gt;</ph> overload that takes <ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph> as a parameter.</source>
          <target state="translated">読み込みオプションを制御する場合は、使用、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Load%2A&gt;</ph>を受け取るオーバー ロード<ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
          <source>If you have to modify <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>, following these steps:</source>
          <target state="translated">変更しなければならない場合<ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>、次の手順します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
          <source>Create an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> by calling one of the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> overloads that take <ph id="ph3">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> as a parameter.</source>
          <target state="translated">作成、<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>のいずれかを呼び出すことによって、<ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph>を受け取るオーバー ロード<ph id="ph3">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
          <source>Pass the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to one of the <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>'s <ph id="ph3">&lt;xref:System.Xml.Linq.XElement.Load%2A&gt;</ph> overloads that takes <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph> as a parameter.</source>
          <target state="translated">渡す、<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>のいずれかに、<ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>の<ph id="ph3">&lt;xref:System.Xml.Linq.XElement.Load%2A&gt;</ph>を取るオーバー ロード<ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> that will be read for the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> content.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容として読み込む <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
          <source>Loads an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> from a <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> から <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> を読み込みます。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> that contains the XML that was read from the specified <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> から読み込まれた XML を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
          <source>This method reads the raw XML into the XML tree.</source>
          <target state="translated">このメソッドは、XML ツリーに生の XML を読み取ります。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
          <source>It discards all insignificant white space in the file.</source>
          <target state="translated">ファイル内のすべての余分な空白を破棄します。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
          <source>The following example loads an element from a <ph id="ph1">&lt;xref:System.IO.StringReader&gt;</ph>.</source>
          <target state="translated">次の例から要素を読み込み、<ph id="ph1">&lt;xref:System.IO.StringReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.String)">
          <source>A URI string referencing the file to load into a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">新しい <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> に読み込むファイルを参照している URI 文字列。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.String)">
          <source>Loads an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> from a file.</source>
          <target state="translated">ファイルから <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> を読み込みます。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> that contains the contents of the specified file.</source>
          <target state="translated">指定したファイルの内容を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String)">
          <source>This method reads the raw XML into the XML tree.</source>
          <target state="translated">このメソッドは、XML ツリーに生の XML を読み取ります。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String)">
          <source>It discards all insignificant white space in the file.</source>
          <target state="translated">ファイル内のすべての余分な空白を破棄します。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String)">
          <source>The following example creates an XML tree, saves it to a file, and then uses this method to load the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> from the file.</source>
          <target state="translated">次の例は、XML ツリーを作成し、ファイルに保存し、このメソッドを使用してロード、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>ファイルからです。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> that will be read for the content of the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容として読み込む <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
          <source>Loads an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> から <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> を読み込みます。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> that contains the XML that was read from the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> から読み込まれた XML を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
          <source>By creating an <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> from a DOM document, and then using the <ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> to create an <ph id="ph3">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</source>
          <target state="translated">作成することで、 <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> DOM ドキュメントとしを使用してから、<ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph>を作成する、 <ph id="ph3">&lt;xref:System.Xml.Linq.XElement&gt;</ph>、このメソッドは、linq to XML ツリーに DOM ドキュメントのコピーを作成するために使用できます。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
          <source>The following example creates a DOM document, creates an <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> from the DOM document, instantiates a tree from the reader.</source>
          <target state="translated">次の例は、DOM ドキュメントを作成、作成、 <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> DOM ドキュメントからリーダーからツリーをインスタンス化します。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
          <source>This code effectively copies a DOM document into a LINQ to XML tree.</source>
          <target state="translated">このコードは、DOM ドキュメントを LINQ に、XML ツリーを効果的にコピーします。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>The stream containing the XML data.</source>
          <target state="translated">XML データが含まれるストリーム。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> object that specifies whether to load base URI and line information.</source>
          <target state="translated">ベース URI と行情報を読み込むかどうかを指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</source>
          <target state="translated">指定されたストリームを使用して新しい <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> インスタンスを作成し、必要に応じて、空白の維持、ベース URI の設定、および行情報の保持を行います。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> object used to read the data that the stream contains.</source>
          <target state="translated">ストリームに格納されたデータを読み取るために使用する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>If you have to modify <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>, following these steps:</source>
          <target state="translated">変更しなければならない場合<ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>、次の手順します。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>Create an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> by calling one of the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> overloads that take <ph id="ph3">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph> as a parameter.</source>
          <target state="translated">作成、<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>のいずれかを呼び出すことによって、<ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph>を受け取るオーバー ロード<ph id="ph3">&lt;xref:System.Xml.XmlReaderSettings&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
          <source>Pass the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to one of the <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>'s <ph id="ph3">&lt;xref:System.Xml.Linq.XElement.Load%2A&gt;</ph> overloads that takes <ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph> as a parameter.</source>
          <target state="translated">渡す、<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>のいずれかに、<ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>の<ph id="ph3">&lt;xref:System.Xml.Linq.XElement.Load%2A&gt;</ph>を取るオーバー ロード<ph id="ph4">&lt;xref:System.Xml.XmlReader&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> that will be read for the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> content.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容として読み込む <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.</source>
          <target state="translated">空白に対する動作、およびベース URI と行情報を読み込むかどうかを指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Loads an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> from a <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>, optionally preserving white space and retaining line information.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> から <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> を読み込み、オプションで、空白の維持および行情報の保持を行います。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> that contains the XML that was read from the specified <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> から読み込まれた XML を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to read all white space in the source XML.</source>
          <target state="translated">ソース XML がインデントを設定できない場合は、設定、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>にフラグが設定<ph id="ph2">`options`</ph>により、ソース XML 内のすべての空白文字を読み取るリーダー。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Nodes of type <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> are created for both significant and insignificant white space.</source>
          <target state="translated">型のノード<ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph>両方は、有意の空白スペースを作成します。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, not setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to ignore all of the insignificant white space in the source XML.</source>
          <target state="translated">設定しない場合は、ソース XML では、インデント、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>にフラグが設定<ph id="ph2">`options`</ph>ソース XML で意味のない空白をすべて無視するリーダーをによりします。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>The XML tree is created without any text nodes for insignificant white space.</source>
          <target state="translated">意味のない空白のテキスト ノードなしは、XML ツリーが作成されます。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is not indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> has no effect.</source>
          <target state="translated">XML ソースがインデントを設定できない場合は、設定、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>フラグ<ph id="ph2">`options`</ph>も何も起こりません。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</source>
          <target state="translated">有意の空白は維持され、全体にわたる複数の空白テキスト ノードの作成を引き起こす可能性のある意味のない空白はありません。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph> to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> from a string that contains XML.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph>を作成する、 <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> XML を表す文字列から。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Setting <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> will have no effect when loading from a <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>効果はありませんから読み込むときに、<ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>There is a performance penalty if you set the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flag.</source>
          <target state="translated">設定した場合は、パフォーマンスの低下、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>The line information is accurate immediately after loading the XML document.</source>
          <target state="translated">行の情報は、XML ドキュメントの読み込み後すぐに正確です。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>If you modify the XML tree after loading the document, the line information may become meaningless.</source>
          <target state="translated">ドキュメントの読み込み後、XML ツリーを変更する場合は、行の情報が無意味になる可能性があります。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>The following example loads an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> from a <ph id="ph2">&lt;xref:System.IO.StringReader&gt;</ph> in two different ways: preserving white space, and not preserving white space.</source>
          <target state="translated">次の例、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>から、 <ph id="ph2">&lt;xref:System.IO.StringReader&gt;</ph> 2 つの異なる方法で: 空白文字を保持して、空白を保持しません。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>It then uses a query to determine the number of white space nodes in the resulting XML tree.</source>
          <target state="translated">クエリを使用して、結果として得られる XML ツリー内の空白ノードの数を決定します。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>The following example loads the line information as it loads from the <ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>.</source>
          <target state="translated">次の例から読み込むように行情報を読み込みます、<ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>It then prints the line information.</source>
          <target state="translated">行の情報が印刷されます。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>A URI string referencing the file to load into an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> に読み込むファイルを参照している URI 文字列。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.</source>
          <target state="translated">空白に対する動作、およびベース URI と行情報を読み込むかどうかを指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>Loads an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> from a file, optionally preserving white space, setting the base URI, and retaining line information.</source>
          <target state="translated">ファイルから <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> を読み込み、必要に応じて、空白の維持、ベース URI の設定、および行情報の保持を行います。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> that contains the contents of the specified file.</source>
          <target state="translated">指定したファイルの内容を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to read all white space in the source XML.</source>
          <target state="translated">ソース XML がインデントを設定できない場合は、設定、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>にフラグが設定<ph id="ph2">`options`</ph>により、ソース XML 内のすべての空白文字を読み取るリーダー。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>Nodes of type <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> are created for both significant and insignificant white space.</source>
          <target state="translated">型のノード<ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph>両方は、有意の空白スペースを作成します。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, not setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to ignore all of the insignificant white space in the source XML.</source>
          <target state="translated">設定しない場合は、ソース XML では、インデント、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>にフラグが設定<ph id="ph2">`options`</ph>ソース XML で意味のない空白をすべて無視するリーダーをによりします。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>The XML tree is created without any text nodes for insignificant white space.</source>
          <target state="translated">意味のない空白のテキスト ノードなしは、XML ツリーが作成されます。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is not indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> has no effect.</source>
          <target state="translated">XML ソースがインデントを設定できない場合は、設定、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>フラグ<ph id="ph2">`options`</ph>も何も起こりません。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</source>
          <target state="translated">有意の空白は維持され、全体にわたる複数の空白テキスト ノードの作成を引き起こす可能性のある意味のない空白はありません。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph> to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> from a string that contains XML.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph>を作成する、 <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> XML を表す文字列から。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>There is a performance penalty if you set the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flags.</source>
          <target state="translated">設定した場合は、パフォーマンスの低下、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>と<ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>The base URI and the line information are accurate immediately after loading the XML document.</source>
          <target state="translated">ベース URI と行の情報は XML ドキュメントの読み込み後すぐに正確です。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>If you modify the XML tree after loading the document, the base URI and line information may become meaningless.</source>
          <target state="translated">ドキュメントの読み込み後、XML ツリーを変更する場合は、ベース URI および行の情報が無意味になる可能性があります。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>The following example loads an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> from a file in two different ways: preserving white space, and not preserving white space.</source>
          <target state="translated">次の例、 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> 2 つの異なる方法でファイルから: 空白文字を保持して、空白を保持しません。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>It then uses a query to determine the number of white space nodes in the resulting XML tree.</source>
          <target state="translated">クエリを使用して、結果として得られる XML ツリー内の空白ノードの数を決定します。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>The following example loads the base URI and line information as it loads the file.</source>
          <target state="translated">次の例は、ファイルが読み込まれるベース URI および行の情報を読み込みます。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>It then prints the base URI and the line information.</source>
          <target state="translated">ベース URI と行の情報を出力します。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>This example uses the following resource file: <bpt id="p1">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept>.</source>
          <target state="translated">この例では次のリソース ファイル:<bpt id="p1">[</bpt>サンプル XML ファイル: 一般的な購買発注書 (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348)</ept>です。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> that will be read for the content of the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容として読み込む <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.</source>
          <target state="translated">空白に対する動作、およびベース URI と行情報を読み込むかどうかを指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>Loads an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>, optionally preserving white space, setting the base URI, and retaining line information.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> から <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> を読み込み、必要に応じて、空白の維持、ベース URI の設定、および行情報の保持を行います。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> that contains the XML that was read from the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> から読み込まれた XML を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>By creating an <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> from a DOM document, and then using the <ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> to create an <ph id="ph3">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</source>
          <target state="translated">作成することで、 <ph id="ph1">&lt;xref:System.Xml.XmlNodeReader&gt;</ph> DOM ドキュメントとしを使用してから、<ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph>を作成する、 <ph id="ph3">&lt;xref:System.Xml.Linq.XElement&gt;</ph>、このメソッドは、linq to XML ツリーに DOM ドキュメントのコピーを作成するために使用できます。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph> to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> from a string that contains XML.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph>を作成する、 <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph> XML を表す文字列から。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>Setting <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> is not valid when loading from a <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>からの読み込みのときは無効な<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> will be configured to either read whitespace or not.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>かどうか読み取りの空白に構成されます。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces.</source>
          <target state="translated">LINQ to XML ツリーに表示されます、空白ノードをリーダー サーフェスします。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>This will be the behavior regardless of whether <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> is set or not.</source>
          <target state="translated">これはかどうかに関係なく動作になります<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>設定されているか。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> may have a valid base URI or not.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>か、有効な基本 URI があります。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>If you set <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>, the base URI will be set in the XML tree from the base URI that is reported by the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">設定した場合<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>、ベース URI は、によって報告されるベース URI から XML ツリーに設定されます、<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> may have a valid line information or not.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>か、有効なライン情報があります。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>If you set <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>, the line information will be set in the XML tree from the line information that is reported by the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">設定した場合<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>、行の情報は、によって報告される行の情報から、XML ツリーに設定されます、<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>There is a performance penalty if you set the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flag.</source>
          <target state="translated">設定した場合は、パフォーマンスの低下、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The line information is accurate immediately after loading the XML document.</source>
          <target state="translated">行の情報は、XML ドキュメントの読み込み後すぐに正確です。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>If you modify the XML tree after loading the document, the line information may become meaningless.</source>
          <target state="translated">ドキュメントの読み込み後、XML ツリーを変更する場合は、行の情報が無意味になる可能性があります。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>The following example loads the line information that it loads from the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">次の例から読み込む行情報を読み込みます、<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>It then prints the line information.</source>
          <target state="translated">行の情報が印刷されます。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XElement.Name">
          <source>Gets or sets the name of this element.</source>
          <target state="translated">この要素の名前を取得または設定します。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.Name">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the name of this element.</source>
          <target state="translated">この要素の名前を格納している <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.Name">
          <source>Setting this property will raise the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.</source>
          <target state="translated">このプロパティは生成の設定、<ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph>と<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.Name">
          <source>The following example uses this property to determine the name of an element.</source>
          <target state="translated">次の例では、要素の名前を特定するのにこのプロパティを使用します。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.Name">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XElement.NodeType">
          <source>Gets the node type for this node.</source>
          <target state="translated">このノードのノード型を取得します。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.NodeType">
          <source>The node type.</source>
          <target state="translated">ノード型。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.NodeType">
          <source>For <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> objects, this value is <ph id="ph2">&lt;see cref="F:System.Xml.XmlNodeType.Element" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> オブジェクトでは、この値は <ph id="ph2">&lt;see cref="F:System.Xml.XmlNodeType.Element" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.NodeType">
          <source>Because all classes that derive from <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> contain a <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph> property, you can write code that operates on collections of concrete subclass of <ph id="ph3">&lt;xref:System.Xml.Linq.XObject&gt;</ph>.</source>
          <target state="translated">すべてのクラスから派生したため<ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>を含む、<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.NodeType%2A&gt;</ph>プロパティの具体的なサブクラスのコレクションで動作するコードを記述することができます<ph id="ph3">&lt;xref:System.Xml.Linq.XObject&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.NodeType">
          <source>Your code can then test for the node type of each node in the collection.</source>
          <target state="translated">コードは、コレクション内の各ノードのノード型をテストできます。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.NodeType">
          <source>The following example uses this property to print the node type of an element.</source>
          <target state="translated">次の例では、要素のノード型を印刷するのにこのプロパティを使用します。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.NodeType">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean">
          <source>A <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> that contains the content of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean">
          <source>When converting to <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</source>
          <target state="translated">変換するときに<ph id="ph1">&lt;xref:System.Boolean&gt;</ph>属性または要素の場合は、使用できる値は「0」、「1」と"true"を生成する文字列または"false"トリミングし、小文字に変換した後です。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean">
          <source>The following example creates some elements with boolean values.</source>
          <target state="translated">次の例では、ブール値をいくつかの要素を作成します。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean">
          <source>It then casts them to <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">それらをキャストして<ph id="ph1">&lt;xref:System.Boolean&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean">
          <source>The <ph id="ph1">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.DateTime" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.DateTime" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.DateTime" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph2">&lt;see cref="T:System.DateTime" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
          <source>A <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> that contains the content of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
          <source>The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</source>
          <target state="translated">属性または日付と時刻のコンテンツを含む要素の値空間は、ISO 8601 で説明されている日時に密接に関連します。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
          <source>When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</source>
          <target state="translated">属性または日付と時刻のコンテンツを含む要素を作成する場合は、W3C の仕様あたり属性または要素の値が書式設定します。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
          <source>See the W3C specification for more details.</source>
          <target state="translated">詳細については、W3C の仕様を参照してください。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
          <source>Behavior is lax when casting to a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> from an attribute or element.</source>
          <target state="translated">キャストする場合は、動作が厳密でない、<ph id="ph1">&lt;xref:System.DateTime&gt;</ph>属性または要素からです。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
          <source>Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph>.</source>
          <target state="translated">属性または要素の値は、W3C の仕様あたり正確に設定されていない、場合でもは適切に変換後の値を<ph id="ph1">&lt;xref:System.DateTime&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
          <source>This conversion operator uses <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph> to convert from a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph>.</source>
          <target state="translated">この変換演算子を使用して<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>から変換する、<ph id="ph2">&lt;xref:System.DateTime&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
          <source>The following example creates an element with date and time content.</source>
          <target state="translated">次の例では、日付と時刻のコンテンツを持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
          <source>It then casts it to <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> to retrieve the value.</source>
          <target state="translated">それをキャストして<ph id="ph1">&lt;xref:System.DateTime&gt;</ph>値を取得します。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
          <source>The <ph id="ph1">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XAttribute" /&gt;</ph> の値を <ph id="ph2">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset">
          <source>A <ph id="ph1">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph> that contains the content of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset">
          <source>This conversion operator uses the <ph id="ph1">&lt;xref:System.Xml.XmlConvert&gt;</ph> class to do the conversion.</source>
          <target state="translated">この変換演算子を使用して、<ph id="ph1">&lt;xref:System.Xml.XmlConvert&gt;</ph>変換を行うクラスです。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset">
          <source>The following example creates an element with date and time content.</source>
          <target state="translated">次の例では、日付と時刻のコンテンツを持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset">
          <source>It then casts to <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> to retrieve the value.</source>
          <target state="translated">キャストして、<ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph>値を取得します。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset">
          <source>The <ph id="ph1">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Decimal" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Decimal" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Decimal" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph2">&lt;see cref="T:System.Decimal" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal">
          <source>A <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> that contains the content of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal">
          <source>The following example creates an element with a decimal value.</source>
          <target state="translated">次の例では、10 進値を持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal">
          <source>It then retrieves the value of the attribute by casting to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph>.</source>
          <target state="translated">キャストすることで、属性の値を取得し<ph id="ph1">&lt;xref:System.Decimal&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal">
          <source>The <ph id="ph1">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double">
          <source>A <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> that contains the content of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double">
          <source>The following example creates an attribute with <ph id="ph1">`double`</ph> content.</source>
          <target state="translated">次の例を使用して属性を作成する<ph id="ph1">`double`</ph>コンテンツ。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.Double&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double">
          <source>The <ph id="ph1">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Guid" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Guid" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Guid" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph2">&lt;see cref="T:System.Guid" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid">
          <source>A <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> that contains the content of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid">
          <source>The following example creates an element with a guid as content.</source>
          <target state="translated">次の例では、コンテンツとして、guid を持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.Guid&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.Guid&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid">
          <source>The <ph id="ph1">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Int32" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Int32" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Int32" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph2">&lt;see cref="T:System.Int32" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32">
          <source>A <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that contains the content of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32">
          <source>The following example creates an element with an integer as content.</source>
          <target state="translated">次の例では、コンテンツとして整数を含む要素を作成します。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.Int32&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32">
          <source>The <ph id="ph1">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Int64" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Int64" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Int64" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph2">&lt;see cref="T:System.Int64" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64">
          <source>A <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that contains the content of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64">
          <source>The following example creates an element with a long integer as content.</source>
          <target state="translated">次の例では、コンテンツとして長整数型で要素を作成します。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64">
          <source>It then retrieves the value of the element by casting to <ph id="ph1">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">キャストすることで、要素の値を取得し<ph id="ph1">&lt;xref:System.Int64&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64">
          <source>The <ph id="ph1">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.Boolean" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.Boolean" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.Boolean" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph3">&lt;see cref="T:System.Boolean" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> that contains the content of this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}">
          <source>When converting to <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</source>
          <target state="translated">変換するときに<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.Boolean&gt;</ph>属性または要素の場合は、使用できる値は「0」、「1」と"true"を生成する文字列または"false"トリミングし、小文字に変換した後です。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}">
          <source>The following example creates an element with boolean content.</source>
          <target state="translated">次の例では、ブール型のコンテンツを持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.Boolean&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.DateTime" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.DateTime" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.DateTime" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph3">&lt;see cref="T:System.DateTime" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.DateTime" /&gt;</ph> that contains the content of this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph2">&lt;see cref="T:System.DateTime" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
          <source>The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</source>
          <target state="translated">属性または日付と時刻のコンテンツを含む要素の値空間は、ISO 8601 で説明されている日時に密接に関連します。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
          <source>When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</source>
          <target state="translated">属性または日付と時刻のコンテンツを含む要素を作成する場合は、W3C の仕様あたり属性または要素の値が書式設定します。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
          <source>See the W3C specification for more details.</source>
          <target state="translated">詳細については、W3C の仕様を参照してください。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
          <source>The behavior is lax when casting to a <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> from an attribute or element.</source>
          <target state="translated">キャストする場合の動作は厳密でない、<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.DateTime&gt;</ph>属性または要素からです。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
          <source>Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.DateTime&gt;</ph>.</source>
          <target state="translated">属性または要素の値は、W3C の仕様あたり正確に設定されていない、場合でもは適切に変換後の値を<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.DateTime&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
          <source>This conversion operator uses <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph> to convert from a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph>.</source>
          <target state="translated">この変換演算子を使用して<ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>から変換する、<ph id="ph2">&lt;xref:System.DateTime&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
          <source>The following example creates an element with a date and time as content.</source>
          <target state="translated">次の例では、日付と時刻の内容の要素を作成します。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.DateTime&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.DateTime&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to an <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph3">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph> that contains the content of this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph2">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}">
          <source>This conversion operator uses the <ph id="ph1">&lt;xref:System.Xml.XmlConvert&gt;</ph> class to do the conversion.</source>
          <target state="translated">この変換演算子を使用して、<ph id="ph1">&lt;xref:System.Xml.XmlConvert&gt;</ph>変換を行うクラスです。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}">
          <source>The following example creates an element with date and time content.</source>
          <target state="translated">次の例では、日付と時刻のコンテンツを持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}">
          <source>It then casts to <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph> to retrieve the value.</source>
          <target state="translated">キャストして、<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph>値を取得します。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.DateTimeOffset" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.Decimal" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.Decimal" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.Decimal" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph3">&lt;see cref="T:System.Decimal" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Decimal" /&gt;</ph> that contains the content of this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph2">&lt;see cref="T:System.Decimal" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}">
          <source>The following example creates an element with decimal content.</source>
          <target state="translated">次の例では、10 進数のコンテンツを持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.Decimal&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.Decimal&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.Double" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.Double" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.Double" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph3">&lt;see cref="T:System.Double" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> that contains the content of this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}">
          <source>The following example creates an element with double precision floating point content.</source>
          <target state="translated">次の例では、倍精度浮動ポイントのコンテンツを要素を作成します。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.Double&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.Guid" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.Guid" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.Guid" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph3">&lt;see cref="T:System.Guid" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Guid" /&gt;</ph> that contains the content of this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph2">&lt;see cref="T:System.Guid" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}">
          <source>The following example creates an element with guid content.</source>
          <target state="translated">次の例では、guid のコンテンツを持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.Guid&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.Guid&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.Int32" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.Int32" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.Int32" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph3">&lt;see cref="T:System.Int32" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Int32" /&gt;</ph> that contains the content of this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph2">&lt;see cref="T:System.Int32" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}">
          <source>The following example creates an element with unsigned integer content.</source>
          <target state="translated">次の例では、符号なし整数のコンテンツを持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.Int32&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.Int64" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.Int64" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.Int64" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph3">&lt;see cref="T:System.Int64" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Int64" /&gt;</ph> that contains the content of this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph2">&lt;see cref="T:System.Int64" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}">
          <source>The following example creates an element with long integer content.</source>
          <target state="translated">次の例では、長整数型のコンテンツを持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.Int64&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.Single" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.Single" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.Single" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph3">&lt;see cref="T:System.Single" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Single" /&gt;</ph> that contains the content of this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph2">&lt;see cref="T:System.Single" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}">
          <source>The following example creates an element with single precision floating point content.</source>
          <target state="translated">次の例では、単精度浮動小数点数を内容と要素を作成します。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.Single&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.Single&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph3">&lt;see cref="T:System.TimeSpan" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that contains the content of this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
          <source>The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</source>
          <target state="translated">属性または期間の内容を格納する要素の値空間は、ISO 8601 で説明されている期間の内容に密接に関連しています。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
          <source>When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</source>
          <target state="translated">属性または期間の内容を格納する要素を作成する場合は、W3C の仕様あたり属性または要素の値が書式設定します。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
          <source>Please see the W3C specification for more details.</source>
          <target state="translated">詳細については、W3C の仕様を参照してください。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
          <source>Behavior is lax when casting to a <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> from an attribute or element.</source>
          <target state="translated">キャストする場合は、動作が厳密でない、<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>属性または要素からです。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
          <source>Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">属性または要素の値は、W3C の仕様あたり正確に設定されていない、場合でもは適切に変換後の値を<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
          <source>The following example creates an element with time span content.</source>
          <target state="translated">次の例の要素を作成期間コンテンツします。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.UInt32" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.UInt32" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.UInt32" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph3">&lt;see cref="T:System.UInt32" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.UInt32" /&gt;</ph> that contains the content of this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph2">&lt;see cref="T:System.UInt32" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}">
          <source>The following example creates an element with unsigned integer content.</source>
          <target state="translated">次の例では、符号なし整数のコンテンツを持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.UInt32&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.UInt32&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.UInt32" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.UInt32" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.UInt64" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.UInt64" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph3">&lt;see cref="T:System.UInt64" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph3">&lt;see cref="T:System.UInt64" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}">
          <source>A <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.UInt64" /&gt;</ph> that contains the content of this <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph2">&lt;see cref="T:System.UInt64" /&gt;</ph> の <ph id="ph1">&lt;see cref="T:System.Nullable`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}">
          <source>The following example creates an element with unsigned long integer content.</source>
          <target state="translated">次の例では、符号なし長整数のコンテンツを持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.UInt64&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph2">&lt;xref:System.UInt64&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.UInt64" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.UInt64" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.Single" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Single" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Single" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph2">&lt;see cref="T:System.Single" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single">
          <source>A <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> that contains the content of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single">
          <source>The following example creates an element with single precision floating point content.</source>
          <target state="translated">次の例では、単精度浮動小数点数を内容と要素を作成します。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.Single&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.Single&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single">
          <source>The <ph id="ph1">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph2">&lt;see cref="T:System.String" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the content of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> has children, the concatenated string value of all of the element's text and descendant's text is returned.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>に子がすべての要素のテキストと子のテキストの連結された文字列値が返されます。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String">
          <source>The following example creates an element with string content.</source>
          <target state="translated">次の例では、文字列のコンテンツを持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.String&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that contains the content of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
          <source>The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</source>
          <target state="translated">属性または期間の内容を格納する要素の値空間は、ISO 8601 で説明されている期間の内容に密接に関連しています。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
          <source>When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</source>
          <target state="translated">属性または期間の内容を格納する要素を作成する場合は、W3C の仕様あたり属性または要素の値が書式設定します。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
          <source>Please see the W3C specification for more details.</source>
          <target state="translated">詳細については、W3C の仕様を参照してください。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
          <source>Behavior is lax when casting to a <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> from an attribute or element.</source>
          <target state="translated">キャストする場合は、動作が厳密でない、<ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph>属性または要素からです。</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
          <source>Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">属性または要素の値は、W3C の仕様あたり正確に設定されていない、場合でもは適切に変換後の値を<ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
          <source>The following example creates an element with time span content.</source>
          <target state="translated">次の例の要素を作成期間コンテンツします。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
          <source>The <ph id="ph1">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.UInt32" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.UInt32" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.UInt32" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph2">&lt;see cref="T:System.UInt32" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32">
          <source>A <ph id="ph1">&lt;see cref="T:System.UInt32" /&gt;</ph> that contains the content of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.UInt32" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32">
          <source>The following example creates an element with unsigned integer content.</source>
          <target state="translated">次の例では、符号なし整数のコンテンツを持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.UInt32&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.UInt32&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.UInt32" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.UInt32" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32">
          <source>The <ph id="ph1">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to cast to <ph id="ph2">&lt;see cref="T:System.UInt64" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.UInt64" /&gt;</ph> にキャストする <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64">
          <source>Cast the value of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.UInt64" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の値を <ph id="ph2">&lt;see cref="T:System.UInt64" /&gt;</ph> にキャストします。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64">
          <source>A <ph id="ph1">&lt;see cref="T:System.UInt64" /&gt;</ph> that contains the content of this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の内容を格納している <ph id="ph1">&lt;see cref="T:System.UInt64" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64">
          <source>The following example creates an element with unsigned long integer content.</source>
          <target state="translated">次の例では、符号なし長整数のコンテンツを持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64">
          <source>It then retrieves the value by casting to <ph id="ph1">&lt;xref:System.UInt64&gt;</ph>.</source>
          <target state="translated">キャストすることで値を取得し<ph id="ph1">&lt;xref:System.UInt64&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64">
          <source>The element does not contain a valid <ph id="ph1">&lt;see cref="T:System.UInt64" /&gt;</ph> value.</source>
          <target state="translated">要素が、有効な <ph id="ph1">&lt;see cref="T:System.UInt64" /&gt;</ph> 値を格納していません。</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64">
          <source>The <ph id="ph1">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XElement">
          <source>Load an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> from a string that contains XML, optionally preserving white space and retaining line information.</source>
          <target state="translated">XML を格納した文字列から <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> を読み込み、必要に応じて、空白および行情報を保持します。</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Parse(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains XML.</source>
          <target state="translated">XML を格納している <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Parse(System.String)">
          <source>Load an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> from a string that contains XML.</source>
          <target state="translated">XML を格納した文字列から <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> を読み込みます。</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Parse(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> populated from the string that contains XML.</source>
          <target state="translated">XML を格納した文字列から設定された <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String)">
          <source>This method does not preserve white space.</source>
          <target state="translated">このメソッドでは、空白文字は保持されません。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String)">
          <source>If you want to preserve white space in the XML tree, use the overload of the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph> method that takes <ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph> as a parameter.</source>
          <target state="translated">XML ツリー内の空白を保持する場合は、オーバー ロードを使用して、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Parse%2A&gt;</ph>を受け取るメソッド<ph id="ph2">&lt;xref:System.Xml.Linq.LoadOptions&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String)">
          <source>The following example creates a string that contains XML.</source>
          <target state="translated">次の例では、XML を表す文字列を作成します。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String)">
          <source>It then parses the string into an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">文字列を解析し、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains XML.</source>
          <target state="translated">XML を格納している <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph> that specifies white space behavior, and whether to load base URI and line information.</source>
          <target state="translated">空白に対する動作、およびベース URI と行情報を読み込むかどうかを指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.LoadOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>Load an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> from a string that contains XML, optionally preserving white space and retaining line information.</source>
          <target state="translated">XML を格納した文字列から <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> を読み込み、必要に応じて、空白および行情報を保持します。</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> populated from the string that contains XML.</source>
          <target state="translated">XML を格納した文字列から設定された <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to read all white space in the source XML.</source>
          <target state="translated">ソース XML がインデントを設定できない場合は、設定、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>にフラグが設定<ph id="ph2">`options`</ph>により、ソース XML 内のすべての空白文字を読み取るリーダー。</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>Nodes of type <ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph> are created for both significant and insignificant white space.</source>
          <target state="translated">型のノード<ph id="ph1">&lt;xref:System.Xml.Linq.XText&gt;</ph>両方は、有意の空白スペースを作成します。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is indented, not setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> causes the reader to ignore all of the insignificant white space in the source XML.</source>
          <target state="translated">設定しない場合は、ソース XML では、インデント、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>にフラグが設定<ph id="ph2">`options`</ph>ソース XML で意味のない空白をすべて無視するリーダーをによりします。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>The XML tree is created without any text nodes for insignificant white space.</source>
          <target state="translated">意味のない空白のテキスト ノードなしは、XML ツリーが作成されます。</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>If the source XML is not indented, setting the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph> flag in <ph id="ph2">`options`</ph> has no effect.</source>
          <target state="translated">XML ソースがインデントを設定できない場合は、設定、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.PreserveWhitespace&gt;</ph>フラグ<ph id="ph2">`options`</ph>も何も起こりません。</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</source>
          <target state="translated">有意の空白は維持され、全体にわたる複数の空白テキスト ノードの作成を引き起こす可能性のある意味のない空白はありません。</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>Setting <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph> will have no effect when parsing from a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">設定<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetBaseUri&gt;</ph>効果はありませんから解析の際に、<ph id="ph2">&lt;xref:System.String&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> may have a valid line information or not.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>か、有効なライン情報があります。</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>If you set <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>, the line information will be set in the XML tree from the line information that is reported by the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">設定した場合<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>、行の情報は、によって報告される行の情報から、XML ツリーに設定されます、<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>There is a performance penalty if you set the <ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph> flag.</source>
          <target state="translated">設定した場合は、パフォーマンスの低下、<ph id="ph1">&lt;xref:System.Xml.Linq.LoadOptions.SetLineInfo&gt;</ph>フラグ。</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>The line information is accurate immediately after loading the XML document.</source>
          <target state="translated">行の情報は、XML ドキュメントの読み込み後すぐに正確です。</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>If you modify the XML tree after loading the document, the line information may become meaningless.</source>
          <target state="translated">ドキュメントの読み込み後、XML ツリーを変更する場合は、行の情報が無意味になる可能性があります。</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>LINQ to XML's loading functionality is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">XML の読み込み機能への LINQ の基盤となって<ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>Therefore, you might catch any exceptions that are thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> overload methods and the <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> methods that read and parse the document.</source>
          <target state="translated">によってスローされる例外をキャッチするため、<ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドをオーバー ロードおよび<ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph>を読み取り、ドキュメントを解析するメソッド。</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>The following example parses a string into an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> in two different ways: preserving white space, and not preserving white space.</source>
          <target state="translated">次の例に文字列を解析して、 <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> 2 つの異なる方法で: 空白文字を保持して、空白を保持しません。</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>It then uses a query to determine the number of white space nodes in the resulting XML tree.</source>
          <target state="translated">クエリを使用して、結果として得られる XML ツリー内の空白ノードの数を決定します。</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>The following example retains line information as it parses the string.</source>
          <target state="translated">次の例では、文字列を解析する際に行情報が保持されます。</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.RemoveAll">
          <source>Removes nodes and attributes from this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> からノードおよび属性を削除します。</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.RemoveAll">
          <source>This method will raise the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.</source>
          <target state="translated">このメソッドが発生、<ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph>と<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.RemoveAll">
          <source>The following example creates an element with attributes and child elements.</source>
          <target state="translated">次の例では、属性と子要素を持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.RemoveAll">
          <source>It then calls this method to remove both the attributes and the child elements.</source>
          <target state="translated">属性と子要素の両方を削除するには、このメソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.RemoveAll">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.RemoveAttributes">
          <source>Removes the attributes of this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の属性を削除します。</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.RemoveAttributes">
          <source>This method will raise the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.</source>
          <target state="translated">このメソッドが発生、<ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph>と<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.RemoveAttributes">
          <source>The following example creates an element with attributes and child elements.</source>
          <target state="translated">次の例では、属性と子要素を持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.RemoveAttributes">
          <source>It then calls this method to remove the attributes.</source>
          <target state="translated">属性を削除するには、このメソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.RemoveAttributes">
          <source>The child elements remain.</source>
          <target state="translated">子要素のままになります。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.RemoveAttributes">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XElement">
          <source>Replaces the child nodes and the attributes of this element with the specified content.</source>
          <target state="translated">この要素の子ノードおよび属性を、指定された内容で置き換えます。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</source>
          <target state="translated">このメソッドは、スナップショットのセマンティクスを使用して、新しい内容で作成します。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>This means that you can query the contents of the current element and use the results of the query as the specified new content.</source>
          <target state="translated">これは、現在の要素の内容を照会およびクエリの結果を指定した新しいコンテンツとして使用できることを意味します。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>For details about the valid content that can be passed to this function, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">この関数に渡すことができる有効なコンテンツに関する詳細については、「<bpt id="p1">[</bpt>有効なコンテンツの XElement オブジェクトと XDocument オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>です。</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>This method will raise the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.</source>
          <target state="translated">このメソッドが発生、<ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph>と<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.</source>
          <target state="translated">次の例では、このメソッドは、クエリ結果の要素の内容を交換する LINQ クエリの結果を渡します。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>It queries the element that is having its contents replaced.</source>
          <target state="translated">内容が置き換えられている要素を照会します。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
          <source>The content that will replace the child nodes and attributes of this element.</source>
          <target state="translated">この要素の子ノードおよび属性を置き換える内容。</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
          <source>Replaces the child nodes and the attributes of this element with the specified content.</source>
          <target state="translated">この要素の子ノードおよび属性を、指定された内容で置き換えます。</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
          <source>This method first removes existing content and attributes.</source>
          <target state="translated">このメソッドは、まず、既存のコンテンツおよび属性を削除します。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
          <source>It then adds the specified <ph id="ph1">`content`</ph>.</source>
          <target state="translated">これは、後、追加、指定した<ph id="ph1">`content`</ph>です。</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
          <source>This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</source>
          <target state="translated">このメソッドは、スナップショットのセマンティクスを使用して、新しい内容で作成します。</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
          <source>This means that you can query the contents of the current element and use the results of the query as the specified new content.</source>
          <target state="translated">これは、現在の要素の内容を照会およびクエリの結果を指定した新しいコンテンツとして使用できることを意味します。</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
          <source>For details about the valid content that can be passed to this function, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">この関数に渡すことができる有効なコンテンツに関する詳細については、「<bpt id="p1">[</bpt>有効なコンテンツの XElement オブジェクトと XDocument オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>です。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
          <source>This method will raise the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.</source>
          <target state="translated">このメソッドが発生、<ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph>と<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
          <source>The following example uses this method.</source>
          <target state="translated">次の例では、このメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
          <source>A parameter list of content objects.</source>
          <target state="translated">コンテンツ オブジェクトのパラメーター リスト。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
          <source>Replaces the child nodes and the attributes of this element with the specified content.</source>
          <target state="translated">この要素の子ノードおよび属性を、指定された内容で置き換えます。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
          <source>This method first removes existing content and attributes.</source>
          <target state="translated">このメソッドは、まず、既存のコンテンツおよび属性を削除します。</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
          <source>It then adds the specified <ph id="ph1">`content`</ph>.</source>
          <target state="translated">これは、後、追加、指定した<ph id="ph1">`content`</ph>です。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
          <source>This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</source>
          <target state="translated">このメソッドは、スナップショットのセマンティクスを使用して、新しい内容で作成します。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
          <source>This means that you can query the contents of the current element and use the results of the query as the specified new content.</source>
          <target state="translated">これは、現在の要素の内容を照会およびクエリの結果を指定した新しいコンテンツとして使用できることを意味します。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
          <source>For details about the valid content that can be passed to this function, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">この関数に渡すことができる有効なコンテンツに関する詳細については、「<bpt id="p1">[</bpt>有効なコンテンツの XElement オブジェクトと XDocument オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>です。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
          <source>This method will raise the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.</source>
          <target state="translated">このメソッドが発生、<ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph>と<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
          <source>The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.</source>
          <target state="translated">次の例では、このメソッドは、クエリ結果の要素の内容を交換する LINQ クエリの結果を渡します。</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XElement">
          <source>Replaces the attributes of this element with the specified content.</source>
          <target state="translated">この要素の属性を、指定された内容で置き換えます。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>This method will raise the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.</source>
          <target state="translated">このメソッドが発生、<ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph>と<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>For details about the valid content that can be passed to this function, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">この関数に渡すことができる有効なコンテンツに関する詳細については、「<bpt id="p1">[</bpt>有効なコンテンツの XElement オブジェクトと XDocument オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>です。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>The following example creates an element with three attributes.</source>
          <target state="translated">次の例では、次の 3 つの属性を持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>It then uses this method to replace all of the attributes of the element with a single attribute.</source>
          <target state="translated">このメソッドを使用して、1 つの属性を持つすべての要素の属性を置き換えます。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XElement">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
          <source>The content that will replace the attributes of this element.</source>
          <target state="translated">この要素の属性を置き換える内容。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
          <source>Replaces the attributes of this element with the specified content.</source>
          <target state="translated">この要素の属性を、指定された内容で置き換えます。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
          <source>This method first removes existing attributes.</source>
          <target state="translated">このメソッドは、まず既存の属性を削除します。</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
          <source>It then adds the specified <ph id="ph1">`content`</ph>.</source>
          <target state="translated">これは、後、追加、指定した<ph id="ph1">`content`</ph>です。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
          <source>For details about the valid content that can be passed to this function, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">この関数に渡すことができる有効なコンテンツに関する詳細については、「<bpt id="p1">[</bpt>有効なコンテンツの XElement オブジェクトと XDocument オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>です。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
          <source>This method will raise the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.</source>
          <target state="translated">このメソッドが発生、<ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph>と<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
          <source>The following example creates an element with three attributes.</source>
          <target state="translated">次の例では、次の 3 つの属性を持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
          <source>It then uses this method to replace all of the attributes of the element with a single attribute.</source>
          <target state="translated">このメソッドを使用して、1 つの属性を持つすべての要素の属性を置き換えます。</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
          <source>A parameter list of content objects.</source>
          <target state="translated">コンテンツ オブジェクトのパラメーター リスト。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
          <source>Replaces the attributes of this element with the specified content.</source>
          <target state="translated">この要素の属性を、指定された内容で置き換えます。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
          <source>This method first removes existing attributes.</source>
          <target state="translated">このメソッドは、まず既存の属性を削除します。</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
          <source>It then adds the specified <ph id="ph1">`content`</ph>.</source>
          <target state="translated">これは、後、追加、指定した<ph id="ph1">`content`</ph>です。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
          <source>For details about the valid content that can be passed to this function, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">この関数に渡すことができる有効なコンテンツに関する詳細については、「<bpt id="p1">[</bpt>有効なコンテンツの XElement オブジェクトと XDocument オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>です。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
          <source>This method will raise the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.</source>
          <target state="translated">このメソッドが発生、<ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph>と<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
          <source>The following example creates an element with three attributes.</source>
          <target state="translated">次の例では、次の 3 つの属性を持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
          <source>It then replaces the attributes with other attributes.</source>
          <target state="translated">その他の属性で属性を置き換えます。</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XElement">
          <source>Serialize this element's underlying XML tree.</source>
          <target state="translated">この要素の基になる XML ツリーをシリアル化します。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XElement">
          <source>The output can be saved to a file, an <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph>, a <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>, or an <ph id="ph3">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">出力は、ファイル、<ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph>、<ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>、または <ph id="ph3">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> に保存できます。</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XElement">
          <source>Optionally, formatting (indenting) can be disabled.</source>
          <target state="translated">必要に応じて、書式設定 (インデント) を無効にできます。</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
          <source>The stream to output this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の出力先のストリーム。</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
          <source>Outputs this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> を指定した <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> に出力します。</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">シリアル化された XML はインデントされます。</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">すべての余分な空白は削除され、され、XML は適切なインデントにできるように、追加の空白文字が追加されます。</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
          <source>The behavior of this method is that insignificant white space will not be preserved.</source>
          <target state="translated">このメソッドの動作は、その意味のない空白は保持されません。</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
          <source>If you want to control white space, use the overload of <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> that takes <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">空白を制御する場合は、オーバー ロードを使用して<ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph>を受け取る<ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> option to save unindented XML.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph>インデントされていない XML を保存するオプションです。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
          <source>This will cause the writer to write all white spaces exactly as represented in the XML tree.</source>
          <target state="translated">これにより、XML ツリーで表されるとおりにすべての空白文字を書き込むライター。</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph>重複する名前空間宣言を削除する場合はオプションです。</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> will be written to.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の書き込み先の <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
          <source>Serialize this element to a <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated">この要素をシリアル化して <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> に書き込みます。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">シリアル化された XML はインデントされます。</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">すべての余分な空白は削除され、され、XML は適切なインデントにできるように、追加の空白文字が追加されます。</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
          <source>The behavior of this method is that white space will not be preserved.</source>
          <target state="translated">このメソッドの動作は、空白は保持されません。</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
          <source>If you want to control white space, use the overload of <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> that allows you to specify <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">空白を制御する場合は、オーバー ロードを使用して<ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph>を指定することができます<ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, saves the document to a <ph id="ph2">&lt;xref:System.IO.StringWriter&gt;</ph>, and then prints the string to the console.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>にドキュメントを保存、 <ph id="ph2">&lt;xref:System.IO.StringWriter&gt;</ph>、し、コンソールに文字列を出力します。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the name of the file.</source>
          <target state="translated">ファイルの名前を格納する <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.String)">
          <source>Serialize this element to a file.</source>
          <target state="translated">この要素をシリアル化してファイルに書き込みます。</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">シリアル化された XML はインデントされます。</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">すべての余分な空白は削除され、され、XML は適切なインデントにできるように、追加の空白文字が追加されます。</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String)">
          <source>The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.</source>
          <target state="translated">このメソッドの動作は、XML ツリー内のノードは保持されません、意味のない空白文字です。</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String)">
          <source>If you want to control white space, use the overload of <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> that allows you to specify <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">空白を制御する場合は、オーバー ロードを使用して<ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph>を指定することができます<ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String)">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, saves the document to a file, and then prints the file to the console.</source>
          <target state="translated">次の例を作成、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>をファイルにドキュメントを保存、および、ファイルをコンソールに出力します。</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> will be written to.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の書き込み先の <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)">
          <source>Serialize this element to an <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">この要素をシリアル化して <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> に書き込みます。</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)">
          <source>The following example shows how to save an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> to an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> を <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> に保存する方法を次の例に示します。</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>The stream to output this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> の出力先のストリーム。</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> object that specifies formatting behavior.</source>
          <target state="translated">書式設定の動作を指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>Outputs this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, optionally specifying formatting behavior.</source>
          <target state="translated">オプションで書式設定動作を指定して、指定した <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> にこの <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> を出力します。</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>By default the <ph id="ph1">`options`</ph> are set to <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions.None&gt;</ph>.</source>
          <target state="translated">既定では、<ph id="ph1">`options`</ph>に設定されている<ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions.None&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">このオプションは無関係で意味のない空白はすべて削除し、XML が適切なインデントされないように、適切な意味のない空白を追加します。</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">インデントされていない XML を保存する場合は、指定、<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph>を示すフラグ<ph id="ph2">`options`</ph>です。</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white spaces exactly as represented in the XML tree.</source>
          <target state="translated">これにより、XML ツリーで表されるとおりにすべての空白文字を書き込むライター。</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph>重複する名前空間宣言を削除する場合はオプションです。</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to output the XML to.</source>
          <target state="translated">XML を出力する <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> that specifies formatting behavior.</source>
          <target state="translated">書式設定の動作を指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>Serialize this element to a <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>, optionally disabling formatting.</source>
          <target state="translated">この要素をシリアル化して <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> に書き込み、必要に応じて、書式設定を無効にします。</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">インデントされていない XML を保存する場合は、指定、<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph>を示すフラグ<ph id="ph2">`options`</ph>です。</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white space exactly as represented in the XML tree.</source>
          <target state="translated">これにより、XML ツリーで表されるとおりにすべての空白文字を書き込むライター。</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>If you want to save indented XML, do not specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">インデントされた XML を保存する場合を指定しない、<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph>を示すフラグ<ph id="ph2">`options`</ph>です。</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">これは、余分なで意味のない空白はすべてを削除し、XML が適切なインデントされないように、適切な意味のない空白を追加します。</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This is the default behavior, and the behavior of the overloads of the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> methods that do not take <ph id="ph2">`options`</ph> as a parameter.</source>
          <target state="translated">これは、既定の動作とのオーバー ロードの動作、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph>を受け取らないメソッド<ph id="ph2">`options`</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The following example shows two uses of this method.</source>
          <target state="translated">次の例では、このメソッドの 2 つの使用を示します。</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The first use preserves white space.</source>
          <target state="translated">初めて使用するには、空白が維持されます。</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The second serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> with formatting.</source>
          <target state="translated">2 番目のシリアル化、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>書式を設定しています。</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.</source>
          <target state="translated">ドキュメントがあるないためホワイト スペースが構築されては、インデントは設定されません、XML を出力する空白を維持します。</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the name of the file.</source>
          <target state="translated">ファイルの名前を格納する <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> that specifies formatting behavior.</source>
          <target state="translated">書式設定の動作を指定する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>Serialize this element to a file, optionally disabling formatting.</source>
          <target state="translated">この要素をシリアル化してファイルに書き込み、オプションで、書式設定を無効にします。</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">インデントされていない XML を保存する場合は、指定、<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph>を示すフラグ<ph id="ph2">`options`</ph>です。</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white space exactly as represented in the XML tree.</source>
          <target state="translated">これにより、XML ツリーで表されるとおりにすべての空白文字を書き込むライター。</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>If you want to save indented XML, do not specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">インデントされた XML を保存する場合を指定しない、<ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph>を示すフラグ<ph id="ph2">`options`</ph>です。</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">これは、余分なで意味のない空白はすべてを削除し、XML が適切なインデントされないように、適切な意味のない空白を追加します。</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This is the default behavior, and the behavior of the overloads of the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> methods that do not take <ph id="ph2">`options`</ph> as a parameter.</source>
          <target state="translated">これは、既定の動作とのオーバー ロードの動作、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph>を受け取らないメソッド<ph id="ph2">`options`</ph>をパラメーターとして。</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>読み込みまたは XML の解析中に空白を維持<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept>と<bpt id="p2">[</bpt>維持空白中にシリアル化する<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>です。</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The following example shows two uses of this method.</source>
          <target state="translated">次の例では、このメソッドの 2 つの使用を示します。</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The first use preserves white space.</source>
          <target state="translated">初めて使用するには、空白が維持されます。</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The second one serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> with formatting.</source>
          <target state="translated">2 つ目のシリアル化、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>書式を設定しています。</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the name of the attribute to change.</source>
          <target state="translated">変更する属性の名前を格納する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>The value to assign to the attribute.</source>
          <target state="translated">属性に代入する値。</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>The attribute is removed if the value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">値が <ph id="ph1">&lt;see langword="null" /&gt;</ph> の場合は属性が削除されます。</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>Otherwise, the value is converted to its string representation and assigned to the <ph id="ph1">&lt;see cref="P:System.Xml.Linq.XAttribute.Value" /&gt;</ph> property of the attribute.</source>
          <target state="translated">それ以外の場合は、値が文字列形式に変換され、属性の <ph id="ph1">&lt;see cref="P:System.Xml.Linq.XAttribute.Value" /&gt;</ph> プロパティに代入されます。</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>Sets the value of an attribute, adds an attribute, or removes an attribute.</source>
          <target state="translated">属性の値の設定、属性の追加、または属性の削除を行います。</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>This method is designed to make it easy to maintain a list of name/value pairs as a set of attributes.</source>
          <target state="translated">このメソッドは、一連の属性として名前/値ペアの一覧を管理しやすいように設計されています。</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>When maintaining the list, you need to add pairs, modify pairs, or delete pairs.</source>
          <target state="translated">一覧を保持する場合のペアを追加のペアを変更またはのペアを削除する必要があります。</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>If you call this method passing a name that does not exist as an attribute, this method creates an attribute for you.</source>
          <target state="translated">属性として存在しない名前指定してこのメソッドを呼び出した場合、このメソッドは、属性を作成します。</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>If you call this method passing the name of an existing attribute, this method modifies the value of the attribute to the value that you specify.</source>
          <target state="translated">既存の属性の名前を渡してこのメソッドを呼び出す場合は、このメソッドは、指定した値を属性の値を変更します。</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>If you pass <ph id="ph1">`null`</ph> for <ph id="ph2">`value`</ph>, this method removes the attribute.</source>
          <target state="translated">渡す場合<ph id="ph1">`null`</ph>の<ph id="ph2">`value`</ph>、このメソッドは、属性を削除します。</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>This method will raise the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.</source>
          <target state="translated">このメソッドが発生、<ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph>と<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>The value is assigned to the attribute with the specified name.</source>
          <target state="translated">値は、指定した名前を持つ属性に割り当てられます。</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>If no attribute with the specified name exists, a new attribute is added.</source>
          <target state="translated">指定した名前を持つ属性が存在しない場合は、新しい属性が追加されます。</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>If the value is <ph id="ph1">`null`</ph>, the attribute with the specified name, if any, is deleted.</source>
          <target state="translated">値が場合<ph id="ph1">`null`</ph>、指定した名前を持つ属性が存在する場合は削除します。</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Maintaining Name/Value Pairs<ept id="p1">](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>名前/値ペアの維持<ept id="p1">](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)</ept>です。</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>The following example creates an element with an attribute.</source>
          <target state="translated">次の例では、属性を持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>It then uses this method to replace the content of the attribute.</source>
          <target state="translated">このメソッドを使用して、属性の内容を置き換えます。</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is an instance of <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> が、<ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> のインスタンスです。</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the name of the child element to change.</source>
          <target state="translated">変更する子要素の名前を格納する <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>The value to assign to the child element.</source>
          <target state="translated">子要素に代入する値。</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>The child element is removed if the value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">値が <ph id="ph1">&lt;see langword="null" /&gt;</ph> の場合は、子要素が削除されます。</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>Otherwise, the value is converted to its string representation and assigned to the <ph id="ph1">&lt;see cref="P:System.Xml.Linq.XElement.Value" /&gt;</ph> property of the child element.</source>
          <target state="translated">それ以外の場合は、値が文字列形式に変換され、子要素の <ph id="ph1">&lt;see cref="P:System.Xml.Linq.XElement.Value" /&gt;</ph> プロパティに代入されます。</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>Sets the value of a child element, adds a child element, or removes a child element.</source>
          <target state="translated">子要素の値の設定、子要素の追加、または子要素の削除を行います。</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>This method is designed to make it easy to maintain a list of name/value pairs as a set of children elements.</source>
          <target state="translated">このメソッドは、一連の子要素として名前/値ペアの一覧を管理しやすいように設計されています。</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>When maintaining the list, you need to add pairs, modify pairs, or delete pairs.</source>
          <target state="translated">一覧を保持する場合のペアを追加のペアを変更またはのペアを削除する必要があります。</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>If you call this method passing a name that does not exist as a child element, this method creates a child element for you.</source>
          <target state="translated">子要素として存在しない名前指定してこのメソッドを呼び出した場合、このメソッドは、子要素を作成します。</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>If you call this method passing the name of an existing child element, this method modifies the value of the child element to the value that you specify.</source>
          <target state="translated">既存の子要素の名前を渡してこのメソッドを呼び出す場合は、このメソッドは、指定した値に子要素の値を変更します。</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>If you pass <ph id="ph1">`null`</ph> for <ph id="ph2">`value`</ph>, this method removes the child element.</source>
          <target state="translated">渡す場合<ph id="ph1">`null`</ph>の<ph id="ph2">`value`</ph>、このメソッドは、子要素を削除します。</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>This method will raise events.</source>
          <target state="translated">このメソッドには、イベントが発生します。</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>The value is assigned to the first child element with the specified name.</source>
          <target state="translated">値は、指定した名前の最初の子要素に割り当てられます。</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>If no child element with the specified name exists, a new child element is added.</source>
          <target state="translated">指定した名前を持つ子要素が存在しない場合は、新しい子要素が追加されます。</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>If the value is null, the first child element with the specified name, if any, is deleted.</source>
          <target state="translated">値が null の場合、指定した名前を持つ最初の子要素、存在する場合は削除されます。</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>This method does not add child nodes or attributes to the specified child element.</source>
          <target state="translated">このメソッドは、指定された子要素に子ノードまたは属性を追加できません。</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>This method throws an exception if any object that derives from <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph> is passed as <ph id="ph2">`value`</ph>.</source>
          <target state="translated">このメソッドは、任意のオブジェクトから派生する場合に例外をスロー<ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>として渡される<ph id="ph2">`value`</ph>です。</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Maintaining Name/Value Pairs<ept id="p1">](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>名前/値ペアの維持<ept id="p1">](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691)</ept>です。</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>The following example creates an element with a child element.</source>
          <target state="translated">次の例では、子要素を持つ要素を作成します。</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>It then uses this method to set the value of the child element.</source>
          <target state="translated">このメソッドを使用して、子要素の値を設定します。</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is an instance of <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> が、<ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> のインスタンスです。</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetValue(System.Object)">
          <source>The value to assign to this element.</source>
          <target state="translated">この要素に代入する値。</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetValue(System.Object)">
          <source>The value is converted to its string representation and assigned to the <ph id="ph1">&lt;see cref="P:System.Xml.Linq.XElement.Value" /&gt;</ph> property.</source>
          <target state="translated">値は、文字列形式に変換され、<ph id="ph1">&lt;see cref="P:System.Xml.Linq.XElement.Value" /&gt;</ph> プロパティに代入されます。</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetValue(System.Object)">
          <source>Sets the value of this element.</source>
          <target state="translated">現在の要素の値を設定します。</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetValue(System.Object)">
          <source>This method will raise the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.</source>
          <target state="translated">このメソッドが発生、<ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph>と<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetValue(System.Object)">
          <source>It is invalid to pass an instance of a class that derives from <ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>, such as <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">派生したクラスのインスタンスを渡すことはできません<ph id="ph1">&lt;xref:System.Xml.Linq.XObject&gt;</ph>など<ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetValue(System.Object)">
          <source>The following example creates an element that contains a child element.</source>
          <target state="translated">次の例では、子要素が含まれる要素を作成します。</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetValue(System.Object)">
          <source>It then sets the value of the element using this method.</source>
          <target state="translated">このメソッドを使用して要素の値を設定します。</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.SetValue(System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetValue(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.SetValue(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is an <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XObject" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema">
          <source>Gets an XML schema definition that describes the XML representation of this object.</source>
          <target state="translated">このオブジェクトの XML 表現を記述する XML スキーマ定義を取得します。</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph> that describes the XML representation of the object that is produced by the <ph id="ph2">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /&gt;</ph> method and consumed by the <ph id="ph3">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /&gt;</ph> メソッドによって生成され <ph id="ph3">&lt;see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /&gt;</ph> メソッドによって処理されるオブジェクトの XML 表現を記述する <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchema" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema">
          <source>This method is part of implementation of the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface.</source>
          <target state="translated">このメソッドの実装の一部である、<ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema">
          <source>This method is used internally for serializing object graphs that contain LINQ to XML objects.</source>
          <target state="translated">このメソッドは内部 LINQ には to XML オブジェクトが含まれているオブジェクト グラフをシリアル化するために使用されます。</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema">
          <source>For an example of serializing an object graph that contains LINQ to XML objects, see <bpt id="p1">[</bpt>Serializing Object Graphs that Contain XElement Objects<ept id="p1">](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)</ept>.</source>
          <target state="translated">XML オブジェクトを LINQ を含むオブジェクト グラフをシリアル化の例は、次を参照してください。<bpt id="p1">[</bpt>シリアル番号化オブジェクト グラフを含む XElement オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)</ept>です。</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> from which the object is deserialized.</source>
          <target state="translated">オブジェクトの逆シリアル化元の <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
          <source>Generates an object from its XML representation.</source>
          <target state="translated">オブジェクトの XML 表現からオブジェクトを生成します。</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
          <source>This method is part of implementation of the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface.</source>
          <target state="translated">このメソッドの実装の一部である、<ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
          <source>This method is used internally for serializing object graphs that contain LINQ to XML objects.</source>
          <target state="translated">このメソッドは内部 LINQ には to XML オブジェクトが含まれているオブジェクト グラフをシリアル化するために使用されます。</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
          <source>For an example of serializing an object graph that contains LINQ to XML objects, see <bpt id="p1">[</bpt>Serializing Object Graphs that Contain XElement Objects<ept id="p1">](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)</ept>.</source>
          <target state="translated">XML オブジェクトを LINQ を含むオブジェクト グラフをシリアル化の例は、次を参照してください。<bpt id="p1">[</bpt>シリアル番号化オブジェクト グラフを含む XElement オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)</ept>です。</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> to which this object is serialized.</source>
          <target state="translated">このオブジェクトのシリアル化先となる <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
          <source>Converts an object into its XML representation.</source>
          <target state="translated">オブジェクトを XML 表現に変換します。</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
          <source>This method is used internally for marshaling object graphs that contain LINQ to XML objects.</source>
          <target state="translated">このメソッドは、LINQ には to XML オブジェクトが含まれているオブジェクト グラフをマーシャ リングの内部使用されます。</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
          <source>For an example of serializing an object graph that contains LINQ to XML objects, see <bpt id="p1">[</bpt>Serializing Object Graphs that Contain XElement Objects<ept id="p1">](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)</ept>.</source>
          <target state="translated">XML オブジェクトを LINQ を含むオブジェクト グラフをシリアル化の例は、次を参照してください。<bpt id="p1">[</bpt>シリアル番号化オブジェクト グラフを含む XElement オブジェクト<ept id="p1">](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5)</ept>です。</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XElement.Value">
          <source>Gets or sets the concatenated text contents of this element.</source>
          <target state="translated">この要素の連結されたテキスト コンテンツを取得または設定します。</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.Value">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains all of the text content of this element.</source>
          <target state="translated">この要素のすべてのテキスト コンテンツを格納している <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.Value">
          <source>If there are multiple text nodes, they will be concatenated.</source>
          <target state="translated">複数のテキスト ノードがある場合は、連結されます。</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.Value">
          <source>Using this property, you can get or set the value of an element.</source>
          <target state="translated">このプロパティを使用して、取得または要素の値を設定します。</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.Value">
          <source>Setting this property will raise the <ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph> events.</source>
          <target state="translated">このプロパティは生成の設定、<ph id="ph1">&lt;xref:System.Xml.Linq.XObject.Changed&gt;</ph>と<ph id="ph2">&lt;xref:System.Xml.Linq.XObject.Changing&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.Value">
          <source>If you want to get the value of an element but you are not sure that it exists, it is more convenient to use the explicit conversion operators, and assign the element to a nullable type such as <ph id="ph1">`string`</ph> or <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph> of <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">明示的な変換演算子を使用しなどの要素を null 許容型に割り当てるに都合が場合、要素の値を取得する点がある場合は、存在していることを確認して<ph id="ph1">`string`</ph>または<ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph>の<ph id="ph3">&lt;xref:System.Int32&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.Value">
          <source>If the element does not exist, the nullable type is set to <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Null 許容型に設定されている要素が存在しない場合<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.Value">
          <source>By contrast, if you want to use this property, you must make sure that the <ph id="ph1">&lt;xref:System.Xml.Linq.XContainer.Element%2A&gt;</ph> method does not return <ph id="ph2">`null`</ph> before you access this property.</source>
          <target state="translated">これに対し、このプロパティを使用する場合は、する必要があることを確認、<ph id="ph1">&lt;xref:System.Xml.Linq.XContainer.Element%2A&gt;</ph>メソッドが返されません<ph id="ph2">`null`</ph>このプロパティにアクセスする前にします。</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.Value">
          <source>The following example uses this property to retrieve the text of an element with mixed content.</source>
          <target state="translated">次の例では、混合コンテンツを持つ要素のテキストを取得するのにこのプロパティを使用します。</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XElement.Value">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> into which this method will write.</source>
          <target state="translated">このメソッドの書き込み対象の <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)">
          <source>Write this element to an <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">この要素を <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> に書き込みます。</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)">
          <source>The following example shows how to write an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> to an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated">次の例を記述する方法を示しています、<ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>を<ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)">
          <source>Note that the example did not write an XML declaration.</source>
          <target state="translated">例が XML 宣言を作成していないことに注意してください。</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">この例を実行すると、次の出力が生成されます。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>