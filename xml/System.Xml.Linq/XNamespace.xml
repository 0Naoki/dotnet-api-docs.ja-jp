<Type Name="XNamespace" FullName="System.Xml.Linq.XNamespace">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4e6daba021fcb83aea5f304b739a62766ac61e5a" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32090388" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XNamespace" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XNamespace extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNamespace" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XNamespace" />
  <TypeSignature Language="C++ CLI" Value="public ref class XNamespace sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="d237a-101">XML 名前空間を表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d237a-101">Represents an XML namespace.</span>
      </span>
      <span data-ttu-id="d237a-102">このクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d237a-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d237a-103">このクラスは、名前空間の XML 構造を表します。</span><span class="sxs-lookup"><span data-stu-id="d237a-103">This class represents the XML construct of namespaces.</span></span>  
  
 <span data-ttu-id="d237a-104">各<xref:System.Xml.Linq.XName>が含まれています、<xref:System.Xml.Linq.XNamespace>です。</span><span class="sxs-lookup"><span data-stu-id="d237a-104">Every <xref:System.Xml.Linq.XName> contains an <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="d237a-105">要素が名前空間内になくても、要素の <xref:System.Xml.Linq.XName> には、名前空間 <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType> が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d237a-105">Even if an element is not in a namespace, the element's <xref:System.Xml.Linq.XName> still contains a namespace, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d237a-106"><xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> プロパティが `null` になることはありません。</span><span class="sxs-lookup"><span data-stu-id="d237a-106">The <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> property is guaranteed to not be `null`.</span></span>  
  
## <a name="creating-an-xnamespace-object"></a><span data-ttu-id="d237a-107">XNamespace オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="d237a-107">Creating an XNamespace Object</span></span>  
 <span data-ttu-id="d237a-108">作成する最も一般的な方法、<xref:System.Xml.Linq.XNamespace>オブジェクトを単に文字列を代入します。</span><span class="sxs-lookup"><span data-stu-id="d237a-108">The most common way to create an <xref:System.Xml.Linq.XNamespace> object is to simply assign a string to it.</span></span> <span data-ttu-id="d237a-109">ローカルの名前を持つ名前空間は、加算演算子の上書きを使用して、結合します。</span><span class="sxs-lookup"><span data-stu-id="d237a-109">You can then combine the namespace with a local name by using the override of the addition operator.</span></span> <span data-ttu-id="d237a-110">次の例は、この表現方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d237a-110">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d237a-111">ただし、Visual basic では通常宣言するグローバルな既定の名前空間では、次のように。</span><span class="sxs-lookup"><span data-stu-id="d237a-111">However, in Visual Basic, you would typically declare a global default namespace, as follows:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>Content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d237a-112">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-112">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">Content</Root>  
```  
  
 <span data-ttu-id="d237a-113">文字列を割り当てる、<xref:System.Xml.Linq.XNamespace>から暗黙の変換を使用して<xref:System.String>です。</span><span class="sxs-lookup"><span data-stu-id="d237a-113">Assigning a string to an <xref:System.Xml.Linq.XNamespace> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="d237a-114">参照してください[する方法: 名前空間 (c#) (LINQ to XML) を持つドキュメントを作成する](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c)詳細と例についてはします。</span><span class="sxs-lookup"><span data-stu-id="d237a-114">See [How to: Create a Document with Namespaces (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) for more information and examples.</span></span>  
  
 <span data-ttu-id="d237a-115">参照してください[Visual Basic (LINQ to XML) の名前空間](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc)について Visual Basic での名前空間を使用します。</span><span class="sxs-lookup"><span data-stu-id="d237a-115">See [Namespaces in Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) for more information on using namespaces in Visual Basic.</span></span>  
  
## <a name="controlling-namespace-prefixes"></a><span data-ttu-id="d237a-116">プレフィックスの Namespace を制御します。</span><span class="sxs-lookup"><span data-stu-id="d237a-116">Controlling Namespace Prefixes</span></span>  
 <span data-ttu-id="d237a-117">名前空間を宣言する属性を作成する場合は、シリアル化された XML の属性で指定されたプレフィックスが永続化します。</span><span class="sxs-lookup"><span data-stu-id="d237a-117">If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML.</span></span> <span data-ttu-id="d237a-118">プレフィックスを持つ名前空間を宣言する属性を作成するには、属性の名前の名前空間が <xref:System.Xml.Linq.XNamespace.Xmlns%2A> で、属性の名前が名前空間プレフィックスであるような属性を作成します。</span><span class="sxs-lookup"><span data-stu-id="d237a-118">To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, and the name of the attribute is the namespace prefix.</span></span> <span data-ttu-id="d237a-119">属性の値は、名前空間の URI です。</span><span class="sxs-lookup"><span data-stu-id="d237a-119">The value of the attribute is the URI of the namespace.</span></span> <span data-ttu-id="d237a-120">次の例は、この表現方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d237a-120">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"), _  
    "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d237a-121">Visual basic で名前空間プレフィックスを制御する名前空間ノードを作成する代わりに通常使用グローバル名前空間の宣言。</span><span class="sxs-lookup"><span data-stu-id="d237a-121">In Visual Basic, instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>Content</aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d237a-122">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-122">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">Content</aw:Root>  
```  
  
 <span data-ttu-id="d237a-123">詳細については、次を参照してください。[する方法: コントロール Namespace プレフィックス (c#) (LINQ to XML)](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28)です。</span><span class="sxs-lookup"><span data-stu-id="d237a-123">For more information, see [How to: Control Namespace Prefixes (C#) (LINQ to XML)](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).</span></span>  
  
## <a name="creating-a-default-namespace"></a><span data-ttu-id="d237a-124">既定の Namespace を作成します。</span><span class="sxs-lookup"><span data-stu-id="d237a-124">Creating a Default Namespace</span></span>  
 <span data-ttu-id="d237a-125">属性名に"xmlns"という特殊な値が設定されている場合、名前空間となる属性の構築、ときに、XML ツリーをシリアル化されるとき、名前空間として宣言する既定の名前空間。</span><span class="sxs-lookup"><span data-stu-id="d237a-125">When constructing an attribute that will be a namespace, if the attribute name has the special value of "xmlns", then when the XML tree is serialized, the namespace will be declared as the default namespace.</span></span> <span data-ttu-id="d237a-126">"Xmlns"自体の名前を持つ特別な属性は、任意の名前空間ではありません。</span><span class="sxs-lookup"><span data-stu-id="d237a-126">The special attribute with the name of "xmlns" itself is not in any namespace.</span></span> <span data-ttu-id="d237a-127">属性の値は、名前空間 URI です。</span><span class="sxs-lookup"><span data-stu-id="d237a-127">The value of the attribute is the namespace URI.</span></span>  
  
 <span data-ttu-id="d237a-128">次の例では、名前空間を既定の名前空間にする方法で宣言されている属性を含む XML ツリーを作成します。</span><span class="sxs-lookup"><span data-stu-id="d237a-128">The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute("xmlns", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute("xmlns", "http://www.adventure-works.com"), _  
    New XElement(aw + "Child", "content") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d237a-129">Visual Basic の既定の名前空間を作成する名前空間ノードを作成する代わりに通常使用グローバルな既定の名前空間宣言。</span><span class="sxs-lookup"><span data-stu-id="d237a-129">In Visual Basic, instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <Child>content</Child>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d237a-130">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-130">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child>content</Child>  
</Root>  
```  
  
## <a name="xnamespace-atomization"></a><span data-ttu-id="d237a-131">XNamespace アトミック化</span><span class="sxs-lookup"><span data-stu-id="d237a-131">XNamespace Atomization</span></span>  
 <span data-ttu-id="d237a-132"><xref:System.Xml.Linq.XNamespace> オブジェクトは分解されることが保証されています。つまり、まったく同じ URI を持つ 2 つの <xref:System.Xml.Linq.XNamespace> オブジェクトは、同一のインスタンスを共有することになります。</span><span class="sxs-lookup"><span data-stu-id="d237a-132"><xref:System.Xml.Linq.XNamespace> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XNamespace> objects have exactly the same URI, they will share the same instance.</span></span> <span data-ttu-id="d237a-133">等値演算子および比較演算子は、この目的で明示的に提供されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-133">The equality and comparison operators are provided explicitly for this purpose.</span></span>  
  
## <a name="using-expanded-names"></a><span data-ttu-id="d237a-134">拡張名の使用</span><span class="sxs-lookup"><span data-stu-id="d237a-134">Using Expanded Names</span></span>  
 <span data-ttu-id="d237a-135">名前空間とローカル名を指定する別の方法は、フォームで拡張名を使用する`{namespace}name`:</span><span class="sxs-lookup"><span data-stu-id="d237a-135">Another way to specify a namespace and a local name is to use an expanded name in the form `{namespace}name`:</span></span>  
  
```csharp  
XElement e = new XElement("{http://www.adventure-works.com}Root",  
     new XAttribute("{http://www.adventure-works.com}Att", "content")  
);  
Console.WriteLine(e);  
```  
  
```vb  
Dim e As XElement = New XElement("{http://www.adventure-works.com}Root", _  
     New XAttribute("{http://www.adventure-works.com}Att", "content") _  
)  
Console.WriteLine(e)  
```  
  
 <span data-ttu-id="d237a-136">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-136">This example produces the following output:</span></span>  
  
```  
<Root p1:Att="content" xmlns:p1="http://www.adventure-works.com" xmlns="http://www.adventure-works.com" />  
```  
  
 <span data-ttu-id="d237a-137">ただし、この方法はパフォーマンスに影響を与えます。</span><span class="sxs-lookup"><span data-stu-id="d237a-137">This approach has performance implications.</span></span> <span data-ttu-id="d237a-138">展開名が含まれた文字列を [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] に渡すたびに、名前を解析し、分解された名前空間を検索し、分解された名前を検索する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d237a-138">Each time that you pass a string that contains an expanded name to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], it must parse the name, find the atomized namespace, and find the atomized name.</span></span> <span data-ttu-id="d237a-139">この処理は CPU 時間を消費します。</span><span class="sxs-lookup"><span data-stu-id="d237a-139">This process takes CPU time.</span></span> <span data-ttu-id="d237a-140">パフォーマンスが重要な場合は、別のアプローチを使用することがあります。</span><span class="sxs-lookup"><span data-stu-id="d237a-140">If performance is important, you may want to use a different approach.</span></span>  
  
 <span data-ttu-id="d237a-141">Visual basic で推奨される方法は XML リテラルを使用する展開名の使用は関係しません。</span><span class="sxs-lookup"><span data-stu-id="d237a-141">With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d237a-142">現在の <see cref="T:System.Xml.Linq.XNamespace" /> と比較する <see cref="T:System.Xml.Linq.XNamespace" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-142">The <see cref="T:System.Xml.Linq.XNamespace" /> to compare to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d237a-143">指定した <see cref="T:System.Xml.Linq.XNamespace" /> が現在の <see cref="T:System.Xml.Linq.XNamespace" /> と等しいかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-143">Determines whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d237a-144">指定した <see cref="T:System.Boolean" /> が現在の <see cref="T:System.Xml.Linq.XNamespace" /> と等しいかどうかを示す <see cref="T:System.Xml.Linq.XNamespace" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-144">A <see cref="T:System.Boolean" /> that indicates whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d237a-145">2 つの<xref:System.Xml.Linq.XNamespace>するオブジェクトと等しく、同じ URI がある必要があります。</span><span class="sxs-lookup"><span data-stu-id="d237a-145">For two <xref:System.Xml.Linq.XNamespace> objects to be equal, they must have the same URI.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d237a-146">次の例では、同じ URI を参照する 2 つの名前空間を比較します。</span><span class="sxs-lookup"><span data-stu-id="d237a-146">The following example compares two namespaces that refer to the same URI.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Console.WriteLine(GetXmlNamespace(aw) = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d237a-147">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-147">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Get (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XNamespace Get(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XNamespace ^ Get(System::String ^ namespaceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">
          <span data-ttu-id="d237a-148">名前空間 URI を格納している <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-148">A <see cref="T:System.String" /> that contains a namespace URI.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d237a-149">指定した URI (Uniform Resource Identifier) の <see cref="T:System.Xml.Linq.XNamespace" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-149">Gets an <see cref="T:System.Xml.Linq.XNamespace" /> for the specified Uniform Resource Identifier (URI).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d237a-150">指定した URI から作成された <see cref="T:System.Xml.Linq.XNamespace" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-150">An <see cref="T:System.Xml.Linq.XNamespace" /> created from the specified URI.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d237a-151">返された<xref:System.Xml.Linq.XNamespace>オブジェクトをアトミックであることが保証 (つまり、これがその特定の URI のシステムで 1 つのみ)。</span><span class="sxs-lookup"><span data-stu-id="d237a-151">The returned <xref:System.Xml.Linq.XNamespace> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d237a-152">次の例の取得、<xref:System.Xml.Linq.XNamespace>指定した URI から。</span><span class="sxs-lookup"><span data-stu-id="d237a-152">The following example gets a <xref:System.Xml.Linq.XNamespace> from a specified URI.</span></span>  
  
```csharp  
XNamespace aw = XNamespace.Get("http://www.adventure-works.com");  
  
// This is the preferred form.  
XNamespace aw2 = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
Console.WriteLine(aw2);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = XNamespace.Get("http://www.adventure-works.com")  
  
        ' This is the preferred form.  
        Dim aw2 As XNamespace = GetXmlNamespace(aw)  
        Console.WriteLine(aw)  
        Console.WriteLine(aw2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d237a-153">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-153">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d237a-154">この <see cref="T:System.Xml.Linq.XNamespace" /> のハッシュ コードを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-154">Gets a hash code for this <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d237a-155">
            <see cref="T:System.Int32" /> のハッシュ コードを格納している <see cref="T:System.Xml.Linq.XNamespace" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-155">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d237a-156">このメソッドは、ハッシュ関数として機能<xref:System.Xml.Linq.XNamespace>します。</span><span class="sxs-lookup"><span data-stu-id="d237a-156">This method serves as a hash function for <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="d237a-157">使用することができます<xref:System.Xml.Linq.XNamespace.GetHashCode%2A>ハッシュ、ハッシュ テーブルなどのアルゴリズムとデータ構造で。</span><span class="sxs-lookup"><span data-stu-id="d237a-157">You can use <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in hashing algorithms and data structures like a hash table.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName GetName (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XName GetName(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetName (localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XName ^ GetName(System::String ^ localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">
          <span data-ttu-id="d237a-158">ローカル名を格納している <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-158">A <see cref="T:System.String" /> that contains a local name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d237a-159">この <see cref="T:System.Xml.Linq.XName" /> と指定したローカル名から作成された <see cref="T:System.Xml.Linq.XNamespace" /> オブジェクトを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-159">Returns an <see cref="T:System.Xml.Linq.XName" /> object created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d237a-160">この <see cref="T:System.Xml.Linq.XName" /> と指定したローカル名から作成された <see cref="T:System.Xml.Linq.XNamespace" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-160">An <see cref="T:System.Xml.Linq.XName" /> created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d237a-161">返された<xref:System.Xml.Linq.XName>オブジェクトをアトミックであることが保証 (つまり、これが特定の展開名のシステムで 1 つだけ)。</span><span class="sxs-lookup"><span data-stu-id="d237a-161">The returned <xref:System.Xml.Linq.XName> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d237a-162">次の例では、このプロパティを使用して、取得、<xref:System.Xml.Linq.XName>です。</span><span class="sxs-lookup"><span data-stu-id="d237a-162">The following example uses this property to retrieve an <xref:System.Xml.Linq.XName>.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XName name = aw.GetName("Root");  
Console.WriteLine("{0}", name);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim name As XName = aw.GetName("Root")  
        Console.WriteLine("{0}", name)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d237a-163">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-163">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d237a-164">この名前空間の URI を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-164">Gets the Uniform Resource Identifier (URI) of this namespace.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d237a-165">名前空間の URI を格納する <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-165">A <see cref="T:System.String" /> that contains the URI of the namespace.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d237a-166">次の例では、このプロパティを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d237a-166">The following example shows how to use this property:</span></span>  
  
```csharp  
string markup =  
@"<aw:Root  
    xmlns:aw='http://www.adventure-works.com'/>";  
XElement root = XElement.Parse(markup);  
Console.WriteLine(root.Name.Namespace.NamespaceName);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim root As XElement = <aw:Root/>  
        Console.WriteLine(root.Name.Namespace.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d237a-167">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-167">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace None" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ None { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d237a-168">対応する名前空間がない <see cref="T:System.Xml.Linq.XNamespace" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-168">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to no namespace.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d237a-169">対応する名前空間がない <see cref="T:System.Xml.Linq.XNamespace" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-169">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to no namespace.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d237a-170">場合は、要素または属性は、名前空間なしでは、その名前空間は、このプロパティによって返される名前空間に設定されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-170">If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d237a-171">次の例では、要素を確認するには、このプロパティは、名前空間なしで使用を示します。</span><span class="sxs-lookup"><span data-stu-id="d237a-171">The following example shows uses this property to determine which elements are in no namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
  
XElement root = new XElement("Root",  
    new XElement(aw + "ChildInNamespace", "content"),  
    new XElement("ChildInNoNamespace", "content")  
);  
  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("Root element is in no namespace");  
else  
    Console.WriteLine("Root element is in a namespace");  
  
if (root.Element(aw + "ChildInNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNamespace element is in a namespace");  
  
if (root.Element("ChildInNoNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNoNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNoNamespace element is in a namespace");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <aw:ChildInNamespace>content</aw:ChildInNamespace>  
                <ChildInNoNamespace>content</ChildInNoNamespace>  
            </Root>  
  
        If (root.Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("Root element is in no namespace")  
        Else  
            Console.WriteLine("Root element is in a namespace")  
        End If  
  
        If (root.Element(GetXmlNamespace(aw) + "ChildInNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNamespace element is in a namespace")  
        End If  
  
        If (root.Element("ChildInNoNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNoNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNoNamespace element is in a namespace")  
        End If  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d237a-172">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-172">This example produces the following output:</span></span>  
  
```  
Root element is in no namespace  
ChildInNamespace element is in a namespace  
ChildInNoNamespace element is in no namespace  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName operator + (System.Xml.Linq.XNamespace ns, string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Addition(class System.Xml.Linq.XNamespace ns, string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (ns As XNamespace, localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ operator +(System::Xml::Linq::XNamespace ^ ns, System::String ^ localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns">
          <span data-ttu-id="d237a-173">名前空間を格納している <see cref="T:System.Xml.Linq.XNamespace" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-173">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace.</span>
          </span>
        </param>
        <param name="localName">
          <span data-ttu-id="d237a-174">ローカル名を格納している <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-174">A <see cref="T:System.String" /> that contains the local name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d237a-175">
            <see cref="T:System.Xml.Linq.XNamespace" /> オブジェクトとローカル名を結合して、<see cref="T:System.Xml.Linq.XName" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-175">Combines an <see cref="T:System.Xml.Linq.XNamespace" /> object with a local name to create an <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d237a-176">名前空間とローカル名から構築された新しい <see cref="T:System.Xml.Linq.XName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-176">The new <see cref="T:System.Xml.Linq.XName" /> constructed from the namespace and local name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d237a-177">この演算子は、名前空間と、要素または属性の作成にローカル名の組み合わせの一般的な表現形式を使用できます。</span><span class="sxs-lookup"><span data-stu-id="d237a-177">This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute.</span></span> <span data-ttu-id="d237a-178">この表現方法では、短い変数を使用する名前空間を参照することを名前空間プレフィックスの利点のいくつか示します。</span><span class="sxs-lookup"><span data-stu-id="d237a-178">This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short.</span></span> <span data-ttu-id="d237a-179">これにより、XML ツリーを作成するコードの構文のノイズがなくなります。</span><span class="sxs-lookup"><span data-stu-id="d237a-179">This eliminates syntactic noise in the code that creates XML trees.</span></span>  
  
## Examples  
 <span data-ttu-id="d237a-180">次の例では、使用、`+`オペレーターを作成、<xref:System.Xml.Linq.XName>から、<xref:System.Xml.Linq.XNamespace>とローカル名。</span><span class="sxs-lookup"><span data-stu-id="d237a-180">The following example shows the use of the `+` operator to create an <xref:System.Xml.Linq.XName> from an <xref:System.Xml.Linq.XNamespace> and a local name.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XElement(aw + "Child") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d237a-181">Visual basic では、優先の表現方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d237a-181">In Visual Basic, this is the preferred idiom:</span></span>  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Dim root As XElement = _  
            <Root>  
                <Child/>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d237a-182">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-182">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d237a-183">比較対象となる最初の <see cref="T:System.Xml.Linq.XNamespace" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-183">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d237a-184">比較対象となる 2 番目の <see cref="T:System.Xml.Linq.XNamespace" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-184">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d237a-185">
            <see cref="T:System.Xml.Linq.XNamespace" /> の 2 つのインスタンスが等しいかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-185">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d237a-186">
            <paramref name="left" /> と <paramref name="right" /> が等しいかどうかを示す <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-186">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d237a-187">演算子のオーバー ロード`==`と`!=`間の比較を有効にするために用意されます<xref:System.Xml.Linq.XNamespace>と文字列 (たとえば、 `element.Name.Namespace == "http://www.adventure-works.com"`)。</span><span class="sxs-lookup"><span data-stu-id="d237a-187">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="d237a-188">定義済みの参照の等値演算子 (C#) で参照変換でのみ、他の型に変換する 1 つのオペランドが必要し、文字列からの暗黙的な変換を考慮しない<xref:System.Xml.Linq.XNamespace>です。</span><span class="sxs-lookup"><span data-stu-id="d237a-188">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>  
   
## Examples  
 <span data-ttu-id="d237a-189">次の例では、比較した結果、<xref:System.Xml.Linq.XNamespace>と文字列。</span><span class="sxs-lookup"><span data-stu-id="d237a-189">The following example shows the comparison of an <xref:System.Xml.Linq.XNamespace> and a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d237a-190">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-190">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XNamespace (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XNamespace op_Implicit(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XNamespace ^(System::String ^ namespaceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">
          <span data-ttu-id="d237a-191">名前空間 URI を格納している <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-191">A <see cref="T:System.String" /> that contains the namespace URI.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d237a-192">URI が含まれている文字列を <see cref="T:System.Xml.Linq.XNamespace" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-192">Converts a string containing a Uniform Resource Identifier (URI) to an <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d237a-193">URI 文字列から構築された <see cref="T:System.Xml.Linq.XNamespace" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-193">An <see cref="T:System.Xml.Linq.XNamespace" /> constructed from the URI string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="d237a-194">次の例では、初期化、<xref:System.Xml.Linq.XNamespace>変数の文字列をそこに割り当てます。</span><span class="sxs-lookup"><span data-stu-id="d237a-194">The following example shows the initialization of an <xref:System.Xml.Linq.XNamespace> variable by assigning a string to it.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d237a-195">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-195">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d237a-196">比較対象となる最初の <see cref="T:System.Xml.Linq.XNamespace" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-196">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d237a-197">比較対象となる 2 番目の <see cref="T:System.Xml.Linq.XNamespace" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-197">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d237a-198">
            <see cref="T:System.Xml.Linq.XNamespace" /> の 2 つのインスタンスが等しくないかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-198">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d237a-199">
            <paramref name="left" /> と <paramref name="right" /> が等しくないかどうかを示す <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-199">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are not equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d237a-200">演算子のオーバー ロード`==`と`!=`間の比較を有効にするために用意されます<xref:System.Xml.Linq.XNamespace>と文字列 (たとえば、 `element.Name.Namespace == "http://www.adventure-works.com"`)。</span><span class="sxs-lookup"><span data-stu-id="d237a-200">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="d237a-201">定義済みの参照の等値演算子 (C#) で参照変換でのみ、他の型に変換する 1 つのオペランドが必要し、文字列からの暗黙的な変換を考慮しない<xref:System.Xml.Linq.XNamespace>です。</span><span class="sxs-lookup"><span data-stu-id="d237a-201">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>   
  
## Examples  
 <span data-ttu-id="d237a-202">次の例では、比較、<xref:System.Xml.Linq.XNamespace>を文字列にします。</span><span class="sxs-lookup"><span data-stu-id="d237a-202">The following example shows a comparison of a <xref:System.Xml.Linq.XNamespace> to a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw != "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw <> "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d237a-203">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-203">This example produces the following output:</span></span>  
  
```  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d237a-204">この <see cref="T:System.Xml.Linq.XNamespace" /> の URI を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-204">Returns the URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d237a-205">この <see cref="T:System.Xml.Linq.XNamespace" /> の URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-205">The URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d237a-206">次の例では、このメソッドを使用して、名前空間をコンソールに出力します。</span><span class="sxs-lookup"><span data-stu-id="d237a-206">The following example uses this method to print a namespace on the console.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine("{0}", aw.ToString());  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine("{0}", aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d237a-207">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-207">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xml">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xml { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xml" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xml" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xml As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xml { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d237a-208">XML URI (<c>http://www.w3.org/XML/1998/namespace</c>) に対応する <see cref="T:System.Xml.Linq.XNamespace" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-208">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d237a-209">
            <see cref="T:System.Xml.Linq.XNamespace" /> XML URI に対応する (<c>http://www.w3.org/XML/1998/namespace</c>)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-209">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d237a-210">特定などの属性を標準化`space`には、`http://www.w3.org/XML/1998/namespace`名前空間。</span><span class="sxs-lookup"><span data-stu-id="d237a-210">Certain standardized attributes, such as `space`, are in the `http://www.w3.org/XML/1998/namespace` namespace.</span></span> <span data-ttu-id="d237a-211">W3C 標準では、宣言するのには、XML ツリー内の属性としてこの名前空間がないことを指定します。</span><span class="sxs-lookup"><span data-stu-id="d237a-211">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="d237a-212">これは、常に、XML パーサーで自動的に使用できる予約済み名前空間です。</span><span class="sxs-lookup"><span data-stu-id="d237a-212">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d237a-213">次の例を作成する方法を示しています、 `xml:space="preserve"` XML ツリー内の属性。</span><span class="sxs-lookup"><span data-stu-id="d237a-213">The following example shows how to create an `xml:space="preserve"` attribute in an XML tree:</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute(XNamespace.Xml + "space", "preserve"),  
    new XElement("Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _  
    <Root xml:space="preserve">  
        <Child>content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d237a-214">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-214">This example produces the following output:</span></span>  
  
```  
<Root xml:space="preserve">  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xmlns">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xmlns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xmlns" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xmlns" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xmlns As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xmlns { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d237a-215">xmlns URI (<c>http://www.w3.org/2000/xmlns/</c>) に対応する <see cref="T:System.Xml.Linq.XNamespace" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-215">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the xmlns URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d237a-216">
            <see cref="T:System.Xml.Linq.XNamespace" />に対応する、 **xmlns** URI (<c>http://www.w3.org/2000/xmlns/</c>)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d237a-216">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the **xmlns** URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d237a-217">名前空間を宣言する場合に名前空間属性自体は、 **xmlns**名前空間。</span><span class="sxs-lookup"><span data-stu-id="d237a-217">When you declare namespaces, the namespace attributes themselves are in the **xmlns** namespace.</span></span> <span data-ttu-id="d237a-218">W3C 標準では、宣言するのには、XML ツリー内の属性としてこの名前空間がないことを指定します。</span><span class="sxs-lookup"><span data-stu-id="d237a-218">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="d237a-219">これは、常に、XML パーサーで自動的に使用できる予約済み名前空間です。</span><span class="sxs-lookup"><span data-stu-id="d237a-219">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d237a-220">次の例では、XML ツリーを名前空間を追加する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d237a-220">The following example shows how to add a namespace to an XML tree.</span></span> <span data-ttu-id="d237a-221">名前空間を宣言する属性の名前空間は、このプロパティによって返される名前空間です。</span><span class="sxs-lookup"><span data-stu-id="d237a-221">The namespace for the attribute that declares the namespace is the namespace returned by this property.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root = <aw:Root xmlns:aw="http://www.adventure-works.com">  
               <aw:Child>content</aw:Child>  
           </aw:Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d237a-222">Visual Basic では、優先の表現形式です。</span><span class="sxs-lookup"><span data-stu-id="d237a-222">In Visual Basic, the preferred idiom is:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>  
                <aw:Child>content</aw:Child>  
            </aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d237a-223">この例を実行すると、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d237a-223">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">  
  <aw:Child>content</aw:Child>  
</aw:Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>