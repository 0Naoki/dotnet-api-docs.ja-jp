<Type Name="WebRequest" FullName="System.Net.WebRequest">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4b7adbafa75eb510ecc590f90854c11f33013f8d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30470686" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WebRequest : MarshalByRefObject, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit WebRequest extends System.MarshalByRefObject implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Net.WebRequest" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WebRequest&#xA;Inherits MarshalByRefObject&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebRequest abstract : MarshalByRefObject, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Requests</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Uniform Resource Identifier (URI) に対する要求を実行します。 これは <see langword="abstract" /> クラスです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest> `abstract`の基本クラスです。インターネットからデータにアクセスするための NET の要求/応答モデルです。 要求/応答モデルを使用するアプリケーションは、アプリケーションがのインスタンスが動作、プロトコルに依存しない方法で、インターネットからデータを要求することができます、<xref:System.Net.WebRequest>プロトコル固有の派生クラスの詳細を実行中にクラス要求。  
  
 要求は、アプリケーションからサーバー上の Web ページなどの特定の URI に送信されます。 URI の一覧から作成する場合は、適切な派生クラスを決定する<xref:System.Net.WebRequest>子孫がアプリケーションに登録します。 <xref:System.Net.WebRequest> 子孫は、通常、HTTP、FTP などの特定のプロトコルを処理する登録しますが、特定のサーバーまたはサーバー上のパスに要求を処理する登録されていることができます。  
  
 <xref:System.Net.WebRequest>クラスがスローされます、<xref:System.Net.WebException>インターネット リソースへのアクセス中にエラーが発生します。 <xref:System.Net.WebException.Status%2A>のいずれかのプロパティは、<xref:System.Net.WebExceptionStatus>エラーの原因を示す値。 ときに<xref:System.Net.WebException.Status%2A>は<xref:System.Net.WebExceptionStatus.ProtocolError?displayProperty=nameWithType>、<xref:System.Net.WebException.Response%2A>プロパティが含まれています、<xref:System.Net.WebResponse>インターネット リソースから受信します。  
  
 <xref:System.Net.WebRequest>クラスは、`abstract`クラスの実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます<xref:System.Net.WebRequest.Create%2A>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
> [!NOTE]
>  使用して、<xref:System.Net.WebRequest.Create%2A>新しい初期化するメソッドを<xref:System.Net.WebRequest>インスタンス。 使用しないで、<xref:System.Net.WebRequest>コンス トラクターです。  
  
> [!NOTE]
>  WebRequest オブジェクトを作成するアプリケーションは、通常のユーザーの資格情報で実行している場合、アプリケーションはアクセス許可が明示的に指定されてユーザーにこれを行う場合を除き、ローカル コンピューター ストアにインストールされている証明書にアクセスすることはできません。  
  
   
  
## Examples  
 次の例を作成する方法を示しています、<xref:System.Net.WebRequest>をインスタンス化し、応答を返します。  
  
 [!code-cpp[NclWebRequestSimple#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebRequestSimple/CPP/webrequestget.cpp#1)]
 [!code-csharp[NclWebRequestSimple#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebRequestSimple/CS/webrequestget.cs#1)]
 [!code-vb[NclWebRequestSimple#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebRequestSimple/VB/webrequestget.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.WebPermission">要求された URI またはに要求をリダイレクトする任意の URI にアクセスします。 <see cref="F:System.Net.NetworkAccess.Connect" /> (関連する列挙体)</permission>
    <block subset="none" type="overrides">
      <para>継承する場合<see cref="T:System.Net.WebRequest" />、次のメンバーをオーバーライドする必要があります: <see cref="P:System.Net.WebRequest.Method" />、 <see cref="P:System.Net.WebRequest.RequestUri" />、 <see cref="P:System.Net.WebRequest.Headers" />、 <see cref="P:System.Net.WebRequest.ContentLength" />、 <see cref="P:System.Net.WebRequest.ContentType" />、 <see cref="P:System.Net.WebRequest.Credentials" />、 <see cref="P:System.Net.WebRequest.PreAuthenticate" />、 <see cref="M:System.Net.WebRequest.GetRequestStream" />、 <see cref="M:System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、 <see cref="M:System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)" />、 <see cref="M:System.Net.WebRequest.GetResponse" />、 <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />、および<see cref="M:System.Net.WebRequest.EndGetResponse(System.IAsyncResult)" />です。 さらの実装を提供する必要があります、<see cref="T:System.Net.IWebRequestCreate" />を定義するインターフェイス、<see cref="M:System.Net.IWebRequestCreate.Create(System.Uri)" />メソッドを呼び出すときに使用される<see cref="M:System.Net.WebRequest.Create(System.Uri)" />です。 実装するクラスを登録する必要があります、<see cref="T:System.Net.IWebRequestCreate" />インターフェイスを使用して、<see cref="M:System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)" />メソッドまたは構成ファイル。</para>
    </block>
    <altmember cref="T:System.Net.HttpWebRequest" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Net.WebRequest" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WebRequest();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Net.WebRequest" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Net.WebRequest.Create%2A>新しい初期化するメソッドを<xref:System.Net.WebRequest>インスタンス。 コンス トラクターを使用しないでください。  
  
   
  
## Examples  
 次の例を作成する方法を示しています、<xref:System.Net.WebRequest>を呼び出してインスタンス、<xref:System.Net.WebRequest.Create%2A>メソッドを<xref:System.Net.WebRequest>クラスです。  
  
 [!code-cpp[Classic WebRequest.WebRequest Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic WebRequest.WebRequest Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebRequest.WebRequest Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebRequest.WebRequest Example/CS/source.cs#1)]
 [!code-vb[Classic WebRequest.WebRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebRequest.WebRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebRequest (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WebRequest(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">新しい <see cref="T:System.Net.WebRequest" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="streamingContext">新しい <see cref="T:System.Net.WebRequest" /> インスタンスに関連付けられているシリアル化ストリームのソースを示す <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
        <summary>
          <see cref="T:System.Net.WebRequest" /> クラスと <see cref="T:System.Runtime.Serialization.SerializationInfo" /> クラスの指定したインスタンスから、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターを実装する派生クラスに実装すると、<xref:System.Runtime.Serialization.ISerializable>のためのインターフェイス、<xref:System.Net.WebRequest>子孫です。  
  
 シリアル化を使用する場合に、アプリケーションが完全信頼モードで実行する必要があることに注意してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">コンストラクターが派生クラスでオーバーライドされていないのに、そのコンストラクターへのアクセスが試行されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public virtual void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>要求を中止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.Abort%2A>メソッドの使用を開始するインターネット リソースへの非同期要求のキャンセル、<xref:System.Net.WebRequest.BeginGetResponse%2A>メソッドです。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.AuthenticationLevel AuthenticationLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.AuthenticationLevel AuthenticationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.AuthenticationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationLevel As AuthenticationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::AuthenticationLevel AuthenticationLevel { System::Net::Security::AuthenticationLevel get(); void set(System::Net::Security::AuthenticationLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.AuthenticationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この要求で使用する認証レベルおよび偽装レベルを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Net.Security.AuthenticationLevel" /> 値のビットごとの組み合わせ。 既定値は <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested" /> です。  
  
 相互認証では、クライアントとサーバーの両方が、それらの身元を証明する資格情報を提供します。 <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequired" /> と <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested" /> は、Kerberos 認証に関連する値です。 Kerberos 認証は、直接サポートすることも、Negotiate セキュリティ プロトコルを使用して実際のセキュリティ プロトコルを選択する場合に使用することもできます。 認証プロトコルの詳細については、次を参照してください。[インターネット認証](http://msdn.microsoft.com/library/d342e87c-f672-4660-a513-41a2f2b80c4a)です。  
  
 相互認証が行われたかどうかを確認するには、<see cref="P:System.Net.WebResponse.IsMutuallyAuthenticated" /> プロパティをチェックします。  
  
 <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequired" /> 認証フラグの値を指定していて相互認証が行われない場合、アプリケーションは、相互認証が失敗したことを示す <see cref="T:System.Net.ProtocolViolationException" /> 内部例外を持つ <see cref="T:System.IO.IOException" /> を受け取ります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、このプロパティの値を設定します。  
  
 [!code-cpp[NclCredPolicy#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#1)]
 [!code-csharp[NclCredPolicy#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGetRequestStream">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginGetRequestStream (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginGetRequestStream(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginGetRequestStream (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginGetRequestStream(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> デリゲート。</param>
        <param name="state">非同期要求の状態情報を格納するオブジェクト。</param>
        <summary>派生クラスでオーバーライドされると、<see cref="M:System.Net.WebRequest.GetRequestStream" /> メソッドの非同期バージョンを提供します。</summary>
        <returns>非同期の要求を参照する <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.BeginGetRequestStream%2A>メソッドは、インターネット リソースへのデータの送信に使用されるストリームへの非同期要求を開始します。 実装するコールバック メソッド、<xref:System.AsyncCallback>使用を委任、<xref:System.Net.WebRequest.EndGetRequestStream%2A>要求ストリームを返すメソッド。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
   
  
## Examples  
 次の例では、<xref:System.Net.WebRequest.BeginGetRequestStream%2A>を非同期的に、要求のストリームを取得します。  
  
 [!code-cpp[WebRequest_BeginGetRequest#3](~/samples/snippets/cpp/VS_Snippets_Remoting/WebRequest_BeginGetRequest/CPP/webrequest_begingetrequest.cpp#3)]
 [!code-csharp[WebRequest_BeginGetRequest#3](~/samples/snippets/csharp/VS_Snippets_Remoting/WebRequest_BeginGetRequest/CS/webrequest_begingetrequest.cs#3)]
 [!code-vb[WebRequest_BeginGetRequest#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebRequest_BeginGetRequest/VB/webrequest_begingetrequest.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
        <altmember cref="M:System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginGetResponse">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginGetResponse (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginGetResponse(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginGetResponse (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginGetResponse(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> デリゲート。</param>
        <param name="state">非同期要求の状態情報を格納するオブジェクト。</param>
        <summary>派生クラスでオーバーライドされると、インターネット リソースの非同期要求を開始します。</summary>
        <returns>非同期の要求を参照する <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.BeginGetResponse%2A>メソッドは、応答の非同期要求を開始します。 実装するコールバック メソッド、<xref:System.AsyncCallback>使用を委任、<xref:System.Net.WebRequest.EndGetResponse%2A>を返すメソッドを<xref:System.Net.WebResponse>インターネット リソースからです。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
> [!NOTE]
>  WebException がスローされた場合を使用して、<xref:System.Net.WebException.Response%2A>と<xref:System.Net.WebException.Status%2A>サーバーからの応答を決定する例外のプロパティです。  
  
   
  
## Examples  
 次の例では<xref:System.Net.WebRequest.BeginGetResponse%2A>を非同期的にターゲット リソースを要求します。 リソースが取得されたときに、指定されたコールバック メソッドが実行されます。  
  
 [!code-cpp[WebRequest_BeginGetResponse#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebRequest_BeginGetResponse/CPP/webrequest_begingetresponse.cpp#2)]
 [!code-csharp[WebRequest_BeginGetResponse#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebRequest_BeginGetResponse/CS/webrequest_begingetresponse.cs#2)]
 [!code-vb[WebRequest_BeginGetResponse#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebRequest_BeginGetResponse/VB/webrequest_begingetresponse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
        <altmember cref="M:System.Net.WebRequest.EndGetResponse(System.IAsyncResult)" />
        <altmember cref="M:System.Net.WebRequest.GetResponse" />
      </Docs>
    </Member>
    <Member MemberName="CachePolicy">
      <MemberSignature Language="C#" Value="public virtual System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Cache.RequestCachePolicy CachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.CachePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CachePolicy As RequestCachePolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::Cache::RequestCachePolicy ^ CachePolicy { System::Net::Cache::RequestCachePolicy ^ get(); void set(System::Net::Cache::RequestCachePolicy ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この要求のキャッシュ ポリシーを取得または設定します。</summary>
        <value>キャッシュ ポリシーを定義する <see cref="T:System.Net.Cache.RequestCachePolicy" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のキャッシュ ポリシーが存在している、キャッシュ内で要求されたリソースの応答をキャッシュから取得できるかどうかを決定します。 通常キャッシュされた応答を使用すると、アプリケーションのパフォーマンスが向上がリスクがキャッシュ内の応答が、サーバー上の応答と一致しません。  
  
 Machine.config 構成ファイルまたは設定して既定のキャッシュ ポリシーを指定することができます、<xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A>ハイパー テキスト転送プロトコル (HTTP) またはセキュア ハイパー テキスト転送プロトコル (HTTPS) の URI スキームを使用する要求のプロパティです。  
  
 リソースの応答ストリームが取得され、ストリームの末尾に読み込まれる場合、リソースのコピーはキャッシュに追加だけです。 同じリソースに対して別の要求は、この要求のキャッシュ ポリシー レベルに応じて、キャッシュされたコピーを使用できます。  
  
   
  
## Examples  
 次のコード例では、Web 要求のキャッシュ ポリシーの設定を示します。  
  
 [!code-cpp[NCLSimpleCache#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSimpleCache/CPP/NCLSimpleCache.cpp#2)]
 [!code-csharp[NCLSimpleCache#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSimpleCache/CS/example.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Cache.RequestCachePolicy" />
        <altmember cref="T:System.Net.Cache.HttpRequestCacheLevel" />
        <altmember cref="T:System.Net.Cache.RequestCacheLevel" />
        <altmember cref="P:System.Net.HttpWebRequest.DefaultCachePolicy" />
        <altmember cref="P:System.Net.WebRequest.DefaultCachePolicy" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionGroupName">
      <MemberSignature Language="C#" Value="public virtual string ConnectionGroupName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionGroupName" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.ConnectionGroupName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ConnectionGroupName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionGroupName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、要求で使用する接続グループの名前を取得または設定します。</summary>
        <value>要求で使用する接続グループの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.ConnectionGroupName%2A>プロパティが 1 つまたは複数の接続プールにアプリケーション内の特定の要求を関連付けます。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="P:System.Net.WebRequest.ConnectionGroupName" />プロパティは通常を潜在的なセキュリティ上の問題を回避するインターネット リソースへの接続と資格情報のセットを共有する要求のグループを関連付けます。</para>
        </block>
        <altmember cref="P:System.Net.Configuration.ConnectionManagementElement.MaxConnection" />
        <altmember cref="P:System.Net.HttpWebRequest.ConnectionGroupName" />
      </Docs>
    </Member>
    <Member MemberName="ContentLength">
      <MemberSignature Language="C#" Value="public virtual long ContentLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ContentLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.ContentLength" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ContentLength As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long ContentLength { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、送信している要求データのコンテンツ長を取得または設定します。</summary>
        <value>送信している要求データのバイト数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.ContentLength%2A>プロパティにはによって、インターネット リソースに送信されるデータのバイト数が含まれています、<xref:System.Net.WebRequest>インスタンス。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
   
  
## Examples  
 次の例のセット、<xref:System.Net.WebRequest.ContentLength%2A>プロパティを出力バイト バッファー内のバイト数。  
  
 [!code-cpp[WebRequest_ContentType#4](~/samples/snippets/cpp/VS_Snippets_Remoting/WebRequest_ContentType/CPP/webrequest_contenttype.cpp#4)]
 [!code-csharp[WebRequest_ContentType#4](~/samples/snippets/csharp/VS_Snippets_Remoting/WebRequest_ContentType/CS/webrequest_contenttype.cs#4)]
 [!code-vb[WebRequest_ContentType#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebRequest_ContentType/VB/webrequest_contenttype.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
        <altmember cref="P:System.Net.HttpWebRequest.ContentLength" />
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public virtual string ContentType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.ContentType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ContentType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContentType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、送信している要求データのコンテンツ タイプを取得または設定します。</summary>
        <value>要求データのコンテンツ タイプ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.ContentType%2A>プロパティには、要求のメディアの種類が含まれています。 これは、通常、MIME コンテンツのエンコーディングします。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
   
  
## Examples  
 次の例のセット、<xref:System.Net.WebRequest.ContentType%2A>プロパティを適切なメディアの種類。  
  
 [!code-cpp[WebRequest_ContentType#4](~/samples/snippets/cpp/VS_Snippets_Remoting/WebRequest_ContentType/CPP/webrequest_contenttype.cpp#4)]
 [!code-csharp[WebRequest_ContentType#4](~/samples/snippets/csharp/VS_Snippets_Remoting/WebRequest_ContentType/CS/webrequest_contenttype.cs#4)]
 [!code-vb[WebRequest_ContentType#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebRequest_ContentType/VB/webrequest_contenttype.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
        <altmember cref="P:System.Net.HttpWebRequest.ContentType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しい <see cref="T:System.Net.WebRequest" /> を初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Net.WebRequest Create (string requestUriString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.WebRequest Create(string requestUriString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (requestUriString As String) As WebRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::WebRequest ^ Create(System::String ^ requestUriString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUriString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUriString">インターネット リソースを識別する URI。</param>
        <summary>指定した URI スキーム用に新しい <see cref="T:System.Net.WebRequest" /> のインスタンスを初期化します。</summary>
        <returns>特定の URI スキーム用の <see cref="T:System.Net.WebRequest" /> 派生クラス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.Create%2A>の子孫を返します、<xref:System.Net.WebRequest>クラスに登録されている最も近いとしての実行時に決定`requestUri`です。  
  
 始まる URI の場合など、`http://`または`https://`に渡された`requestUri`、<xref:System.Net.HttpWebRequest>によって返される<xref:System.Net.WebRequest.Create%2A>です。 場合で始まる URI`ftp://`代わりに、渡される、<xref:System.Net.WebRequest.Create%2A>メソッドは、<xref:System.Net.FtpWebRequest>インスタンス。 場合で始まる URI`file://`代わりに、渡される、<xref:System.Net.WebRequest.Create%2A>メソッドは、<xref:System.Net.FileWebRequest>インスタンス。  
  
 既に登録されている事前登録済みの予約の種類、次のとおりです。  
  
-   `http://`  
  
-   `https://`  
  
-   `ftp://`  
  
-   `file://`  
  
 .NET にはサポートが含まれています、 `http://`、 `https://`、 `ftp://`、および`file://`URI スキーム。 カスタム<xref:System.Net.WebRequest>に登録されているその他の要求を処理する子孫、<xref:System.Net.WebRequest.RegisterPrefix%2A>メソッドです。  
  
 <xref:System.Net.WebRequest.Create%2A>メソッドを使用、`requestUriString`を作成するパラメーター、<xref:System.Uri>新しいに渡されるインスタンス<xref:System.Net.WebRequest>です。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、次を参照してください。 [ &#91; \<topic://conUsingNetworkTracing >&#93;](http://msdn.microsoft.com/library/e993b7c3-087f-45d8-9c02-9dded936d804)です。  
  
   
  
## Examples  
 次の例で<xref:System.Net.WebRequest.Create%2A>インスタンスを作成する、<xref:System.Net.HttpWebRequest>インスタンス。 ターゲット URL を表す文字列は、コンス トラクターのパラメーターとして使用されます。  
  
 [!code-cpp[WebResponse_ResponseUri#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebResponse_ResponseUri/CPP/webresponse_responseuri.cpp#1)]
 [!code-csharp[WebResponse_ResponseUri#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebResponse_ResponseUri/CS/webresponse_responseuri.cs#1)]
 [!code-vb[WebResponse_ResponseUri#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebResponse_ResponseUri/VB/webresponse_responseuri.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <paramref name="requestUriString" /> で指定された要求スキームが登録されていません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="requestUriString" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元には、要求された URI または要求のリダイレクト先である URI に接続するアクセス許可がありません。</exception>
        <exception cref="T:System.UriFormatException">
          <block subset="none" type="note">
            <para>  
 [Windows ストア アプリ用 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) または[ポータブル クラス ライブラリ](http://msdn.microsoft.com/library/c31e1663-c164-4e65-b66d-d3aa8750a154)では、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。  
  
</para>
          </block>
          <paramref name="requestUriString" /> で指定された URI は、有効な URI ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Net.WebRequest Create (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.WebRequest Create(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.Create(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (requestUri As Uri) As WebRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::WebRequest ^ Create(Uri ^ requestUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri">要求されたリソースの URI を格納する <see cref="T:System.Uri" />。</param>
        <summary>指定した URI スキーム用に新しい <see cref="T:System.Net.WebRequest" /> のインスタンスを初期化します。</summary>
        <returns>指定した URI スキーム用の <see cref="T:System.Net.WebRequest" /> 派生クラス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.Create%2A>の子孫を返します、<xref:System.Net.WebRequest>クラスに登録されている最も近いとしての実行時に決定`requestUri`です。  
  
 作成する場合など、<xref:System.Net.WebRequest>子孫、Handler1 への要求を処理する`http://www.contoso.com/text/`と別の名前付きへの要求を処理する Handler2 `http://www.contoso.com/code/`、使用することができます<xref:System.Net.WebRequest.Create%2A>いずれかに関連付けられている WebRequest 子孫を返します指定した URI。  
  
 子を返す、 <xref:System.Net.WebRequest> URI のスキーム部分のみに基づいて、クラスを使用して、<xref:System.Net.WebRequest.CreateDefault%2A>メソッドです。  
  
 始まる URI の場合など、`http://`または`https://`に渡された`requestUri`、<xref:System.Net.HttpWebRequest>によって返される<xref:System.Net.WebRequest.Create%2A>です。 場合で始まる URI`ftp://`代わりに、渡される、<xref:System.Net.WebRequest.Create%2A>メソッドは、<xref:System.Net.FileWebRequest>インスタンス。 場合で始まる URI`file://`代わりに、渡される、<xref:System.Net.WebRequest.Create%2A>メソッドは、<xref:System.Net.FileWebRequest>インスタンス。  
  
 既に登録されている事前登録済みの予約の種類、次のとおりです。  
  
-   `http://`  
  
-   `https://`  
  
-   `ftp://`  
  
-   `file://`  
  
 .NET にはサポートが含まれています、 `http://`、 `https://`、 `ftp://`、および`file://`URI スキーム。 カスタム<xref:System.Net.WebRequest>に登録されているその他の要求を処理する子孫、<xref:System.Net.WebRequest.RegisterPrefix%2A>メソッドです。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、次を参照してください。 [ &#91; \<topic://conUsingNetworkTracing >&#93;](http://msdn.microsoft.com/library/e993b7c3-087f-45d8-9c02-9dded936d804)です。  
  
   
  
## Examples  
 次の例で<xref:System.Net.WebRequest.Create%2A>インスタンスを作成する、<xref:System.Net.HttpWebRequest>インスタンス。 ターゲット URL を表す Uri は、コンス トラクターのパラメーターとして使用されます。  
  
 [!code-cpp[WebRequest_Create#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebRequest_Create/CPP/webrequest_create.cpp#1)]
 [!code-csharp[WebRequest_Create#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebRequest_Create/CS/webrequest_create.cs#1)]
 [!code-vb[WebRequest_Create#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebRequest_Create/VB/webrequest_create.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <paramref name="requestUri" /> で指定された要求スキームが登録されていません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="requestUri" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元には、要求された URI または要求のリダイレクト先である URI に接続するアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDefault">
      <MemberSignature Language="C#" Value="public static System.Net.WebRequest CreateDefault (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.WebRequest CreateDefault(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.CreateDefault(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDefault (requestUri As Uri) As WebRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::WebRequest ^ CreateDefault(Uri ^ requestUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri">要求されたリソースの URI を格納する <see cref="T:System.Uri" />。</param>
        <summary>指定した URI スキーム用に新しい <see cref="T:System.Net.WebRequest" /> のインスタンスを初期化します。</summary>
        <returns>指定した URI スキーム用の <see cref="T:System.Net.WebRequest" /> 派生クラス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.CreateDefault%2A>メソッドを返します。、<xref:System.Net.WebRequest>子孫のインスタンスの URI スキーム部分のみに基づいています。  
  
 始まる URI の場合など、`http://`に渡された`requestUri`、<xref:System.Net.HttpWebRequest>によって返される<xref:System.Net.WebRequest.CreateDefault%2A>です。 場合で始まる URI`file://`代わりに、渡される、<xref:System.Net.WebRequest.CreateDefault%2A>メソッドは、<xref:System.Net.FileWebRequest>です。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET でネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <paramref name="requestUri" /> で指定された要求スキームが登録されていません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="requestUri" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元には、要求された URI または要求のリダイレクト先である URI に接続するアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateHttp">
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した URI 用に新しい <see cref="T:System.Net.HttpWebRequest" /> インスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateHttp">
      <MemberSignature Language="C#" Value="public static System.Net.HttpWebRequest CreateHttp (string requestUriString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.HttpWebRequest CreateHttp(string requestUriString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.CreateHttp(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateHttp (requestUriString As String) As HttpWebRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::HttpWebRequest ^ CreateHttp(System::String ^ requestUriString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpWebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUriString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUriString">インターネット リソースを識別する URI 文字列。</param>
        <summary>指定した URI 文字列用に新しい <see cref="T:System.Net.HttpWebRequest" /> インスタンスを初期化します。</summary>
        <returns>指定した URI 文字列の <see cref="T:System.Net.HttpWebRequest" /> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.CreateHttp%28System.String%29>メソッドのインスタンスを返します、<xref:System.Net.HttpWebRequest>のクラス、`requestUriString`です。  
  
 で始まる URI`http://`または`http://`に渡される、`requestUriString`パラメーター、<xref:System.Net.HttpWebRequest>によって返される<xref:System.Net.WebRequest.CreateHttp%28System.String%29>です。 もう 1 つは他のスキームをスロー、<xref:System.NotSupportedException>です。  
  
 <xref:System.Net.WebRequest.CreateHttp%28System.String%29>メソッドを使用、`requestUriString`を作成するパラメーター、<xref:System.Uri>新しいに渡されるインスタンス<xref:System.Net.HttpWebRequest>です。 メソッドが成功した場合、<xref:System.Net.HttpWebRequest.AllowReadStreamBuffering%2A>プロパティで返された<xref:System.Net.HttpWebRequest>インスタンスに設定されて`false`です。  
  
 .NET にはサポートが含まれています、`http://`と`https://`URI スキーム。 カスタム<xref:System.Net.WebRequest>に登録されているその他の要求を処理する子孫、<xref:System.Net.WebRequest.RegisterPrefix%2A>メソッドです。 <xref:System.Net.WebRequest.Create%28System.String%29>の子孫を作成するメソッドを使用することができます、<xref:System.Net.WebRequest>他のスキームのクラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <paramref name="requestUriString" /> で指定された要求スキームが、http スキームまたは https スキームです。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="requestUriString" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元には、要求された URI または要求のリダイレクト先である URI に接続するアクセス許可がありません。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="requestUriString" /> で指定された URI は、有効な URI ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateHttp">
      <MemberSignature Language="C#" Value="public static System.Net.HttpWebRequest CreateHttp (Uri requestUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.HttpWebRequest CreateHttp(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.CreateHttp(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateHttp (requestUri As Uri) As HttpWebRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::HttpWebRequest ^ CreateHttp(Uri ^ requestUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpWebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri">インターネット リソースを識別する URI。</param>
        <summary>指定した URI 用に新しい <see cref="T:System.Net.HttpWebRequest" /> インスタンスを初期化します。</summary>
        <returns>指定した URI 文字列の <see cref="T:System.Net.HttpWebRequest" /> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.CreateHttp%28System.Uri%29>メソッドのインスタンスを返します、<xref:System.Net.HttpWebRequest>のクラス、`requestUri`です。  
  
 で始まる URI`http://`または`http://`に渡される、`requestUri`パラメーター、<xref:System.Net.HttpWebRequest>によって返される<xref:System.Net.WebRequest.CreateHttp%28System.Uri%29>です。 もう 1 つは他のスキームをスロー、<xref:System.NotSupportedException>です。  
  
 <xref:System.Net.WebRequest.CreateHttp%28System.Uri%29>メソッドを使用、`requestUri`を新規作成するパラメーター<xref:System.Net.HttpWebRequest>インスタンス。 メソッドが成功した場合、<xref:System.Net.HttpWebRequest.AllowReadStreamBuffering%2A>プロパティで返された<xref:System.Net.HttpWebRequest>インスタンスに設定されて`false`です。  
  
 .NET にはサポートが含まれています、`http://`と`https://`URI スキーム。 カスタム<xref:System.Net.WebRequest>に登録されているその他の要求を処理する子孫、<xref:System.Net.WebRequest.RegisterPrefix%2A>メソッドです。 <xref:System.Net.WebRequest.Create%28System.Uri%29>の子孫を作成するメソッドを使用することができます、<xref:System.Net.WebRequest>他のスキームのクラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <paramref name="requestUri" /> で指定された要求スキームが、http スキームまたは https スキームです。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="requestUri" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元には、要求された URI または要求のリダイレクト先である URI に接続するアクセス許可がありません。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="requestUri" /> で指定された URI は、有効な URI ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreatorInstance">
      <MemberSignature Language="C#" Value="public virtual System.Net.IWebRequestCreate CreatorInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IWebRequestCreate CreatorInstance" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.CreatorInstance" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CreatorInstance As IWebRequestCreate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::IWebRequestCreate ^ CreatorInstance { System::Net::IWebRequestCreate ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IWebRequestCreate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、<see cref="T:System.Net.IWebRequestCreate" /> クラスから派生するファクトリ オブジェクトを取得します。このクラスは、指定 URI に対して要求を行うためにインスタンス化される <see cref="T:System.Net.WebRequest" /> を作成するために使用されます。</summary>
        <value>
          <see cref="M:System.Net.IWebRequestCreate.Create(System.Uri)" /> メソッドによって返される派生 <see cref="T:System.Net.WebRequest" /> 型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
このプロパティにより、アプリケーションを特定する<xref:System.Net.IWebRequestCreate>派生ファクトリ オブジェクトが、要求を作成するために使用します。 このオブジェクトはあります[System.Net.Browser.WebRequestCreator.BrowserHttp](https://msdn.microsoft.com/library/system.net.browser.webrequestcreator.browserhttp(v=vs.95))または[System.Net.Browser.WebRequestCreator.ClientHttp](https://msdn.microsoft.com/library/system.net.browser.webrequestcreator.clienthttp(v=vs.95))から派生したカスタムのインスタンスの場合もありますが、<xref:System.Net.IWebRequestCreate>です。 これにより、アプリケーションで決定するかどうか、ブラウザーをホストしている[!INCLUDE[silverlight](~/includes/silverlight-md.md)]、[!INCLUDE[silverlight](~/includes/silverlight-md.md)]クライアント、または、一部のカスタム オブジェクトの HTTP 要求と応答の処理、<xref:System.Net.WebRequest>インスタンス。 <xref:System.Net.WebRequest.RegisterPrefix%2A>メソッドにより、派生元を構成するアプリケーション<xref:System.Net.WebRequest>型は、特定の URI を要求するときにインスタンス化されます。 <xref:System.Net.WebRequest> 作成者は、通常、このような HTTP または HTTPS で、特定のプロトコルを処理する登録しますが、特定のサーバーまたはサーバー上のパスに要求を処理する登録されていることができます。 これは、派生した 1 つ以上の場合に役立ちます<xref:System.Net.WebRequest>型は同じプロトコルの要求を処理できます。 [!INCLUDE[sil3_first](~/includes/sil3-first-md.md)]以降のランタイムは、複数の HTTP ハンドラーをサポートしているとさまざまな機能を持つ各します。 たとえば、Representational State Transfer (REST) を使用する web サービスが必要な[System.Net.Browser.WebRequestCreator.ClientHttp](https://msdn.microsoft.com/library/system.net.browser.webrequestcreator.clienthttp(v=vs.95))ハンドラー SOAP web サービスは、既定値を使用できる場合があります、 [System.Net.Browser.WebRequestCreator.BrowserHttp](https://msdn.microsoft.com/library/system.net.browser.webrequestcreator.browserhttp(v=vs.95))ハンドラー。
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public virtual System.Net.ICredentials Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials { System::Net::ICredentials ^ get(); void set(System::Net::ICredentials ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、インターネット リソースを使用して要求を認証するために使用されるネットワーク資格情報を取得または設定します。</summary>
        <value>要求に関連付けられた認証資格情報を格納する <see cref="T:System.Net.ICredentials" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.Credentials%2A>プロパティには、インターネット リソースにアクセスするために必要な認証の資格情報が含まれています。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
   
  
## Examples  
 次の例のセット、<xref:System.Net.WebRequest.Credentials%2A>プロパティの現在のユーザーの既定の資格情報を使用します。 要求が行われたときに、このプロパティに格納されている資格情報は、クライアントの検証に使用されます。 これは、設定と同じ、<xref:System.Net.WebRequest.UseDefaultCredentials%2A>プロパティを`true`です。  
  
 [!code-cpp[NclWebRequestSimple#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebRequestSimple/CPP/webrequestget.cpp#2)]
 [!code-csharp[NclWebRequestSimple#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebRequestSimple/CS/webrequestget.cs#2)]
 [!code-vb[NclWebRequestSimple#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebRequestSimple/VB/webrequestget.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="P:System.Net.HttpWebRequest.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="DefaultCachePolicy">
      <MemberSignature Language="C#" Value="public static System.Net.Cache.RequestCachePolicy DefaultCachePolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.Cache.RequestCachePolicy DefaultCachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.DefaultCachePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultCachePolicy As RequestCachePolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::Cache::RequestCachePolicy ^ DefaultCachePolicy { System::Net::Cache::RequestCachePolicy ^ get(); void set(System::Net::Cache::RequestCachePolicy ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この要求の既定のキャッシュ ポリシーを取得または設定します。</summary>
        <value>他のポリシーが適用できない場合に、この要求で有効なキャッシュ ポリシーを指定する <see cref="T:System.Net.Cache.HttpRequestCachePolicy" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の条件が存在しない場合、このポリシーはこの要求の使用します。  
  
-   ない<xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A>プロパティがこの要求に対して指定します。  
  
-   コンピューターとアプリケーション構成ファイルを指定しない、統一リソース識別子 (URI) に適用可能なキャッシュ ポリシーは、この要求の作成に使用します。  
  
 キャッシュ ポリシーは、要求されたリソースがリソースのホスト コンピューターに要求を送信する代わりにキャッシュから実行できるかどうかを判断します。  
  
 リソースの応答ストリームが取得され、ストリームの末尾に読み込まれる場合、リソースのコピーはキャッシュに追加だけです。 同じリソースに対して別の要求は、この要求のキャッシュ ポリシー レベルに応じて、キャッシュされたコピーを使用できます。  
  
   
  
## Examples  
 次のコード例では、Web 要求の既定のキャッシュ ポリシーの設定を示します。  
  
 [!code-cpp[NCLSimpleCache#15](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSimpleCache/CPP/NCLSimpleCache.cpp#15)]
 [!code-csharp[NCLSimpleCache#15](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSimpleCache/CS/example.cs#15)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.WebPermission">ネットワーク リソースに無制限のアクセス許可。 関連する列挙。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Net.Cache.RequestCachePolicy" />
        <altmember cref="T:System.Net.Cache.HttpRequestCacheLevel" />
        <altmember cref="T:System.Net.Cache.RequestCacheLevel" />
        <altmember cref="P:System.Net.HttpWebRequest.DefaultCachePolicy" />
        <altmember cref="P:System.Net.WebRequest.CachePolicy" />
      </Docs>
    </Member>
    <Member MemberName="DefaultWebProxy">
      <MemberSignature Language="C#" Value="public static System.Net.IWebProxy DefaultWebProxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.IWebProxy DefaultWebProxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.DefaultWebProxy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultWebProxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::IWebProxy ^ DefaultWebProxy { System::Net::IWebProxy ^ get(); void set(System::Net::IWebProxy ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>グローバル HTTP プロキシを取得または設定します。</summary>
        <value>
          <see cref="T:System.Net.IWebProxy" /> のインスタンスへのすべての呼び出しで使用される <see cref="T:System.Net.WebRequest" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.DefaultWebProxy%2A>プロパティを取得またはグローバル プロキシを設定します。 <xref:System.Net.WebRequest.DefaultWebProxy%2A>プロパティが既定のプロキシを決定するすべて<xref:System.Net.WebRequest>要求がプロキシをサポートし、プロキシが設定されていない使用して明示的にインスタンスを使用して、<xref:System.Net.HttpWebRequest.Proxy%2A>プロパティです。 プロキシはによりサポートされている<xref:System.Net.FtpWebRequest>と<xref:System.Net.HttpWebRequest>です。  
  
 <xref:System.Net.WebRequest.DefaultWebProxy%2A>プロパティは、app.config ファイルからプロキシ設定を読み取ります。 構成ファイルがない場合は、現在のユーザーの Internet Explorer (IE) のプロキシ設定が使用されます。  
  
 場合、<xref:System.Net.WebRequest.DefaultWebProxy%2A>プロパティの null、それ以降のすべてのインスタンスに設定されて、<xref:System.Net.WebRequest>によって作成されたクラス、<xref:System.Net.WebRequest.Create%2A>または<xref:System.Net.WebRequest.CreateDefault%2A>メソッドには、プロキシはありません。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.WebPermission">取得またはグローバル HTTP プロキシを設定します。 関連する列挙。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="EndGetRequestStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream EndGetRequestStream (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream EndGetRequestStream(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndGetRequestStream (asyncResult As IAsyncResult) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ EndGetRequestStream(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">ストリームの保留中の要求を参照する <see cref="T:System.IAsyncResult" />。</param>
        <summary>派生クラスでオーバーライドされると、インターネット リソースにデータを書き込むための <see cref="T:System.IO.Stream" /> を返します。</summary>
        <returns>データを書き込む <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.EndGetRequestStream%2A>メソッドによって開始された非同期ストリーム要求を完了すると、<xref:System.Net.WebRequest.BeginGetRequestStream%2A>メソッドです。  
  
> [!NOTE]
>  ガベージ コレクションのタイミングに関する問題を避けるためには、必ずを呼び出すことで、応答ストリームを閉じる、<xref:System.IO.Stream.Close%2A>メソッドによって返されたストリームを<xref:System.Net.WebResponse.GetResponseStream%2A>呼び出した後<xref:System.Net.WebRequest.EndGetResponse%2A>です。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
   
  
## Examples  
 次の例を取得し、呼び出すことによって、要求のストリームを使用して、<xref:System.Net.WebRequest.EndGetRequestStream%2A>です。 <xref:System.Net.WebRequest.EndGetRequestStream%2A>メソッドへの非同期呼び出しを完了すると<xref:System.Net.WebRequest.BeginGetRequestStream%2A>です。  
  
 [!code-cpp[WebRequest_BeginGetRequest#3](~/samples/snippets/cpp/VS_Snippets_Remoting/WebRequest_BeginGetRequest/CPP/webrequest_begingetrequest.cpp#3)]
 [!code-csharp[WebRequest_BeginGetRequest#3](~/samples/snippets/csharp/VS_Snippets_Remoting/WebRequest_BeginGetRequest/CS/webrequest_begingetrequest.cs#3)]
 [!code-vb[WebRequest_BeginGetRequest#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebRequest_BeginGetRequest/VB/webrequest_begingetrequest.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
        <altmember cref="M:System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="EndGetResponse">
      <MemberSignature Language="C#" Value="public virtual System.Net.WebResponse EndGetResponse (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Net.WebResponse EndGetResponse(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.EndGetResponse(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndGetResponse (asyncResult As IAsyncResult) As WebResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Net::WebResponse ^ EndGetResponse(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">応答に対する保留中の要求を参照する <see cref="T:System.IAsyncResult" />。</param>
        <summary>派生クラスでオーバーライドされると、<see cref="T:System.Net.WebResponse" /> を返します。</summary>
        <returns>インターネット要求への応答を格納する <see cref="T:System.Net.WebResponse" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.EndGetResponse%2A>メソッドで開始したインターネット リソースへの非同期要求が完了すると、<xref:System.Net.WebRequest.BeginGetResponse%2A>メソッドです。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
   
  
## Examples  
 次の例では、<xref:System.Net.WebRequest.EndGetResponse%2A>ターゲット リソースを取得します。  
  
 [!code-cpp[WebRequest_BeginGetResponse#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebRequest_BeginGetResponse/CPP/webrequest_begingetresponse.cpp#1)]
 [!code-csharp[WebRequest_BeginGetResponse#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebRequest_BeginGetResponse/CS/webrequest_begingetresponse.cs#1)]
 [!code-vb[WebRequest_BeginGetResponse#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebRequest_BeginGetResponse/VB/webrequest_begingetresponse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
        <altmember cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="streamingContext">このシリアル化の転送先を指定する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
        <summary>
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、対象のオブジェクトをシリアル化するために必要なデータを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 含まれる任意のオブジェクト、<xref:System.Runtime.Serialization.SerializationInfo>自動的に追跡され、フォーマッタによってシリアル化します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequestStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream GetRequestStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetRequestStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.GetRequestStream" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRequestStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ GetRequestStream();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、インターネット リソースにデータを書き込むための <see cref="T:System.IO.Stream" /> を返します。</summary>
        <returns>インターネット リソースにデータを書き込む <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.GetRequestStream%2A>メソッドは、インターネット リソースへのデータを送信する要求を開始し、返します、<xref:System.IO.Stream>インターネット リソースにデータを送信するためのインスタンス。  
  
 <xref:System.Net.WebRequest.GetRequestStream%2A>メソッドへの同期アクセスを提供する、<xref:System.IO.Stream>です。 非同期のアクセスを使用して、<xref:System.Net.WebRequest.BeginGetRequestStream%2A>と<xref:System.Net.WebRequest.EndGetRequestStream%2A>メソッドです。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
   
  
## Examples  
 次の例では、<xref:System.Net.WebRequest.GetRequestStream%2A>ストリームしてから、書き込みのデータ ストリームを取得します。  
  
 [!code-cpp[WebRequest_ContentType#4](~/samples/snippets/cpp/VS_Snippets_Remoting/WebRequest_ContentType/CPP/webrequest_contenttype.cpp#4)]
 [!code-csharp[WebRequest_ContentType#4](~/samples/snippets/csharp/VS_Snippets_Remoting/WebRequest_ContentType/CS/webrequest_contenttype.cs#4)]
 [!code-vb[WebRequest_ContentType#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebRequest_ContentType/VB/webrequest_contenttype.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
        <altmember cref="M:System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetRequestStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetRequestStreamAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetRequestStreamAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.GetRequestStreamAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRequestStreamAsync () As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetRequestStreamAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、インターネット リソースへのデータ書き込みの <see cref="T:System.IO.Stream" /> を非同期操作として返します。</summary>
        <returns>非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトはときに、完了、<xref:System.IO.Stream>インターネットへのデータの書き込みのリソースが使用可能です。  
  
 呼び出した後<xref:System.Net.WebRequest.GetRequestStreamAsync%2A>を呼び出す前に、要求のストリームを閉じるかどうかを確認<xref:System.Net.WebRequest.GetResponseAsync%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResponse">
      <MemberSignature Language="C#" Value="public virtual System.Net.WebResponse GetResponse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Net.WebResponse GetResponse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.GetResponse" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResponse () As WebResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Net::WebResponse ^ GetResponse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、インターネット要求への応答を返します。</summary>
        <returns>インターネット要求への応答を格納する <see cref="T:System.Net.WebResponse" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.GetResponse%2A>メソッドは、インターネット リソースに要求を送信しを返します、<xref:System.Net.WebResponse>インスタンス。 呼び出しによって、要求が既に開始されて<xref:System.Net.WebRequest.GetRequestStream%2A>、<xref:System.Net.WebRequest.GetResponse%2A>メソッドが要求を完了し、すべての応答を返します。  
  
 <xref:System.Net.WebRequest.GetResponse%2A>メソッドへの同期アクセスを提供する、<xref:System.Net.WebResponse>です。 非同期のアクセスを使用して、<xref:System.Net.WebRequest.BeginGetResponse%2A>と<xref:System.Net.WebRequest.EndGetResponse%2A>メソッドです。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
> [!NOTE]
>  WebException がスローされた場合を使用して、<xref:System.Net.WebException.Response%2A>と<xref:System.Net.WebException.Status%2A>サーバーからの応答を決定する例外のプロパティです。  
  
   
  
## Examples  
 次の例のセット、 <xref:System.Net.WebRequest.Timeout%2A> 10000 ミリ秒プロパティです。 リソースが返されることができます、前に、タイムアウト期間が経過すると、<xref:System.Net.WebException>がスローされます。  
  
 [!code-cpp[WebRequest_Timeout#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebRequest_Timeout/CPP/webrequest_timeout.cpp#1)]
 [!code-csharp[WebRequest_Timeout#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebRequest_Timeout/CS/webrequest_timeout.cs#1)]
 [!code-vb[WebRequest_Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebRequest_Timeout/VB/webrequest_timeout.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
        <altmember cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.Net.WebResponse" />
      </Docs>
    </Member>
    <Member MemberName="GetResponseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Net.WebResponse&gt; GetResponseAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebResponse&gt; GetResponseAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.GetResponseAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResponseAsync () As Task(Of WebResponse)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Net::WebResponse ^&gt; ^ GetResponseAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、インターネット要求への応答を非同期操作として返します。</summary>
        <returns>非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、インターネット要求への応答は使用後に完了します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemWebProxy">
      <MemberSignature Language="C#" Value="public static System.Net.IWebProxy GetSystemWebProxy ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IWebProxy GetSystemWebProxy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.GetSystemWebProxy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemWebProxy () As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::IWebProxy ^ GetSystemWebProxy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の偽装ユーザーの Internet Explorer の設定で構成されたプロキシを返します。</summary>
        <returns>
          <see cref="T:System.Net.IWebProxy" /> のインスタンスへのすべての呼び出しで使用される <see cref="T:System.Net.WebRequest" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.GetSystemWebProxy%2A> メソッドは、現在のユーザーの Internet Explorer (IE) のプロキシ設定を読み取ります。 このプロセスは、IE の 自動構成スクリプトを手動でプロキシ サーバー設定を使用してを自動的にプロキシ設定を検出するオプションが含まれています、手動でプロキシ サーバー設定の詳細。  
  
 使用することができます、アプリケーションが複数のユーザーを偽装する場合、<xref:System.Net.WebRequest.GetSystemWebProxy%2A>各権限を借用したユーザーのプロキシを取得します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.WebPermission">取得またはグローバル HTTP プロキシを設定します。 関連する列挙。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public virtual System.Net.WebHeaderCollection Headers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection Headers" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.Headers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Headers As WebHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::WebHeaderCollection ^ Headers { System::Net::WebHeaderCollection ^ get(); void set(System::Net::WebHeaderCollection ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、要求に関連付けられたヘッダーの名前/値ペアのコレクションを取得または設定します。</summary>
        <value>要求に関連付けられたヘッダーの名前/値ペアを格納する <see cref="T:System.Net.WebHeaderCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.Headers%2A>プロパティが含まれています、<xref:System.Net.WebHeaderCollection>インターネット リソースに送信するヘッダー情報を含むインスタンス。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
   
  
## Examples  
 次の例では、この要求に関連付けられたヘッダーの名前/値ペアを表示します。  
  
 [!code-cpp[WebRequest_Headers#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebRequest_Headers/CPP/webrequest_headers.cpp#1)]
 [!code-csharp[WebRequest_Headers#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebRequest_Headers/CS/webrequest_headers.cs#1)]
 [!code-vb[WebRequest_Headers#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebRequest_Headers/VB/webrequest_headers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
        <altmember cref="T:System.Net.WebHeaderCollection" />
        <altmember cref="P:System.Net.HttpWebRequest.Headers" />
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); void set(System::Security::Principal::TokenImpersonationLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の要求に対する偽装レベルを取得または設定します。</summary>
        <value>
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 偽装レベルは、サーバーがクライアントの資格情報を使用する方法を決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public virtual string Method { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Method" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.Method" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Method As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Method { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、要求で使用するプロトコル メソッドを取得または設定します。</summary>
        <value>要求で使用するプロトコル メソッド。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生クラスでオーバーライドされると、<xref:System.Net.WebRequest.Method%2A>プロパティには、この要求で使用する要求メソッドが含まれています。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
   
  
## Examples  
 次の例のセット、<xref:System.Net.WebRequest.Method%2A>プロパティを示すために、要求が、ターゲット ホストにデータを投稿するをします。  
  
 [!code-cpp[WebRequest_BeginGetRequest#3](~/samples/snippets/cpp/VS_Snippets_Remoting/WebRequest_BeginGetRequest/CPP/webrequest_begingetrequest.cpp#3)]
 [!code-csharp[WebRequest_BeginGetRequest#3](~/samples/snippets/csharp/VS_Snippets_Remoting/WebRequest_BeginGetRequest/CS/webrequest_begingetrequest.cs#3)]
 [!code-vb[WebRequest_BeginGetRequest#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebRequest_BeginGetRequest/VB/webrequest_begingetrequest.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="P:System.Net.WebRequest.Method" />プロパティが実装されているプロトコルの任意の有効な要求メソッドを含めることができます。 既定値は、プロトコル固有のプロパティを設定するを必要としない既定要求/応答トランザクションを提供する必要があります。</para>
        </block>
        <altmember cref="P:System.Net.HttpWebRequest.Method" />
      </Docs>
    </Member>
    <Member MemberName="PreAuthenticate">
      <MemberSignature Language="C#" Value="public virtual bool PreAuthenticate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreAuthenticate" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.PreAuthenticate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PreAuthenticate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool PreAuthenticate { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされる場合、要求を事前認証するかどうかを指定します。</summary>
        <value>
          事前認証する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 最初の要求を除き、<xref:System.Net.WebRequest.PreAuthenticate%2A>プロパティは、サーバーを待機することがなく後続の要求の認証情報を送信するかどうかを示します。 ときに<xref:System.Net.WebRequest.PreAuthenticate%2A>は`false`、<xref:System.Net.WebRequest>認証チャレンジの認証情報を送信する前に待機します。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
   
  
## Examples  
 次の例のセット、<xref:System.Net.WebRequest.PreAuthenticate%2A>プロパティを`true`できるように、<xref:System.Net.NetworkCredential>に格納されている、<xref:System.Net.WebRequest.Credentials%2A>プロパティは、リソース要求と共にに送信されます。  
  
 [!code-cpp[WebRequest_PreAuthenticate#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebRequest_PreAuthenticate/CPP/webrequest_preauthenticate.cpp#1)]
 [!code-csharp[WebRequest_PreAuthenticate#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebRequest_PreAuthenticate/CS/webrequest_preauthenticate.cs#1)]
 [!code-vb[WebRequest_PreAuthenticate#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebRequest_PreAuthenticate/VB/webrequest_preauthenticate.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
        <altmember cref="P:System.Net.HttpWebRequest.PreAuthenticate" />
      </Docs>
    </Member>
    <Member MemberName="Proxy">
      <MemberSignature Language="C#" Value="public virtual System.Net.IWebProxy Proxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IWebProxy Proxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.Proxy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Proxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::IWebProxy ^ Proxy { System::Net::IWebProxy ^ get(); void set(System::Net::IWebProxy ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、インターネット リソースにアクセスするために使用するネットワーク プロキシを取得または設定します。</summary>
        <value>インターネット リソースにアクセスするために使用する <see cref="T:System.Net.IWebProxy" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.Proxy%2A>プロパティは、要求がインターネット リソースへのアクセスに使用するネットワーク プロキシを識別します。 プロキシ サーバー経由ではなく直接インターネット リソースが要求されます。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
   
  
## Examples  
 次の例では、現在のネットワーク プロキシのアドレスを表示し、新しいネットワーク プロキシのアドレスとポート番号を割り当てることができます。  
  
 [!code-cpp[WebRequest_Proxy#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebRequest_Proxy/CPP/webrequest_proxy.cpp#1)]
 [!code-csharp[WebRequest_Proxy#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebRequest_Proxy/CS/webrequest_proxy.cs#1)]
 [!code-vb[WebRequest_Proxy#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebRequest_Proxy/VB/webrequest_proxy.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
        <altmember cref="T:System.Net.IWebProxy" />
        <altmember cref="T:System.Net.WebProxy" />
        <altmember cref="P:System.Net.HttpWebRequest.Proxy" />
      </Docs>
    </Member>
    <Member MemberName="RegisterPortableWebRequestCreator">
      <MemberSignature Language="C#" Value="public static void RegisterPortableWebRequestCreator (System.Net.IWebRequestCreate creator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterPortableWebRequestCreator(class System.Net.IWebRequestCreate creator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.RegisterPortableWebRequestCreator(System.Net.IWebRequestCreate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterPortableWebRequestCreator (creator As IWebRequestCreate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterPortableWebRequestCreator(System::Net::IWebRequestCreate ^ creator);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="creator" Type="System.Net.IWebRequestCreate" />
      </Parameters>
      <Docs>
        <param name="creator">登録する <see cref="T:System.Net.IWebRequestCreate" /> オブジェクト。</param>
        <summary>
          <see cref="T:System.Net.IWebRequestCreate" /> オブジェクトを登録します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterPrefix">
      <MemberSignature Language="C#" Value="public static bool RegisterPrefix (string prefix, System.Net.IWebRequestCreate creator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RegisterPrefix(string prefix, class System.Net.IWebRequestCreate creator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterPrefix (prefix As String, creator As IWebRequestCreate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool RegisterPrefix(System::String ^ prefix, System::Net::IWebRequestCreate ^ creator);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="creator" Type="System.Net.IWebRequestCreate" />
      </Parameters>
      <Docs>
        <param name="prefix">
          <see cref="T:System.Net.WebRequest" /> 派生クラスが処理する完全な URI または URI プレフィックス。</param>
        <param name="creator">
          <see cref="T:System.Net.WebRequest" /> が <see cref="T:System.Net.WebRequest" /> 派生クラスを作成するために呼び出す作成メソッド。</param>
        <summary>指定した URI 用の <see cref="T:System.Net.WebRequest" /> 派生クラスを登録します。</summary>
        <returns>
          登録が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.RegisterPrefix%2A>メソッド レジスタ<xref:System.Net.WebRequest>子孫を要求を処理します。 <xref:System.Net.WebRequest> 子孫は、通常、このような HTTP、FTP などの特定のプロトコルを処理する登録しますが、特定のサーバーまたはサーバー上のパスに要求を処理する登録されていることができます。  
  
 既に登録されている事前登録済みの予約の種類、次のとおりです。  
  
-   `http://`  
  
-   `https://`  
  
-   `ftp://`  
  
-   `file://`  
  
 詳細については、次を参照してください。、<xref:System.Net.WebRequest.Create%28System.String%29>と<xref:System.Net.WebRequest.Create%28System.Uri%29>メソッドです。  
  
 重複するプレフィックスを指定することはできません。 <xref:System.Net.WebRequest.RegisterPrefix%2A> 返します`false`に重複するプレフィックスを登録する試行が行われた場合。  
  
> [!NOTE]
>  <xref:System.Net.HttpWebRequest>既定で HTTP と HTTPS スキームの要求を処理するクラスが登録されています。 別の登録を試みます<xref:System.Net.WebRequest>スキームではこれらの子は失敗します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="prefix" /> は <see langword="null" /> です  
  
 - または -  
  
 <paramref name="creator" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RequestUri">
      <MemberSignature Language="C#" Value="public virtual Uri RequestUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri RequestUri" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.RequestUri" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RequestUri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Uri ^ RequestUri { Uri ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、要求に関連付けられたインターネット リソースの URI を取得します。</summary>
        <value>要求に関連付けられているリソースを表す <see cref="T:System.Uri" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生クラスでオーバーライドされると、<xref:System.Net.WebRequest.RequestUri%2A>プロパティが含まれています、<xref:System.Uri>インスタンスが<xref:System.Net.WebRequest.Create%2A>メソッドを使用して、要求を作成します。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
   
  
## Examples  
 次の例のチェック、<xref:System.Net.WebRequest.RequestUri%2A>プロパティを最初に要求したサイトを決定します。  
  
 [!code-cpp[WebRequest_RequestUri1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebRequest_RequestUri1/CPP/webrequest_requesturi.cpp#1)]
 [!code-csharp[WebRequest_RequestUri1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebRequest_RequestUri1/CS/webrequest_requesturi.cs#1)]
 [!code-vb[WebRequest_RequestUri1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebRequest_RequestUri1/VB/webrequest_requesturi.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="P:System.Net.WebRequest.RequestUri" /> 元に含める必要があります<see cref="T:System.Uri" />に渡されるインスタンス、<see cref="M:System.Net.WebRequest.Create(System.Uri)" />メソッドです。 子孫が実際に要求を処理する URI を格納するプロパティを提供する必要があります、プロトコルが要求の処理を別の URI に要求をリダイレクトできる場合は、</para>
        </block>
        <altmember cref="P:System.Net.HttpWebRequest.RequestUri" />
        <altmember cref="P:System.Net.HttpWebRequest.Address" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">
          <see cref="T:System.Net.WebRequest" /> のシリアル化されたデータを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="streamingContext">新しい <see cref="T:System.Net.WebRequest" /> に関連付けられているシリアル化ストリームの転送先を格納している <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
        <summary>派生クラスでオーバーライドされる場合、<see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスに、<see cref="T:System.Net.WebRequest" /> をシリアル化するために必要なデータを設定します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">インターフェイスが派生クラスでオーバーライドされていないのに、オブジェクトのシリアル化が試行されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public virtual int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Timeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Timeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求がタイムアウトするまでのミリ秒単位の時間を取得または設定します。</summary>
        <value>要求がタイムアウトするまでのミリ秒単位の時間または要求がタイムアウトしないことを示す値 <see cref="F:System.Threading.Timeout.Infinite" />。既定値は、派生クラスによって定義されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebRequest.Timeout%2A>プロパティは、要求がタイムアウトになるとスローされるまで (ミリ秒単位) の時間の長さを示す、<xref:System.Net.WebException>です。 <xref:System.Net.WebRequest.Timeout%2A>プロパティによる同期要求のみに影響を与える、<xref:System.Net.WebRequest.GetResponse%2A>メソッドです。 非同期要求のタイムアウトを使用して、<xref:System.Net.WebRequest.Abort%2A>メソッドです。  
  
> [!NOTE]
>  <xref:System.Net.WebRequest>クラスは、`abstract`クラスです。 実際の動作<xref:System.Net.WebRequest>によって返される、派生クラスによって実行時にインスタンスが決定されます、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>メソッドです。 既定値と例外の詳細についてなどの子孫のクラスのドキュメントを参照してください<xref:System.Net.HttpWebRequest>と<xref:System.Net.FileWebRequest>です。  
  
   
  
## Examples  
 次の例のセット、 <xref:System.Net.WebRequest.Timeout%2A> 10000 ミリ秒プロパティです。 リソースが返されることができます、前に、タイムアウト期間が経過すると、<xref:System.Net.WebException>がスローされます。  
  
 [!code-cpp[WebRequest_Timeout#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebRequest_Timeout/CPP/webrequest_timeout.cpp#1)]
 [!code-csharp[WebRequest_Timeout#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebRequest_Timeout/CS/webrequest_timeout.cs#1)]
 [!code-vb[WebRequest_Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebRequest_Timeout/VB/webrequest_timeout.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
        <block subset="none" type="overrides">
          <para>派生クラスでは、タイムアウトを通知スローすることによって、<see cref="T:System.Net.WebException" />で、<see cref="P:System.Net.WebException.Status" />フィールドに設定<see cref="F:System.Net.WebExceptionStatus.Timeout" />です。 ときに<see cref="P:System.Net.WebRequest.Timeout" />に設定されている<see cref="F:System.Threading.Timeout.Infinite" />派生クラスはタイムアウトしません。</para>
        </block>
        <altmember cref="P:System.Net.HttpWebRequest.Timeout" />
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public virtual bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebRequest.UseDefaultCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UseDefaultCredentials As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool UseDefaultCredentials { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされる場合、<see cref="T:System.Boolean" /> が要求と共に送信されるかどうかを制御する <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 値を取得または設定します。</summary>
        <value>
          既定の資格情報を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定`true`この要求が行われるときに<xref:System.Net.WebRequest>オブジェクト認証が必要、サーバーによって要求された場合、現在ログオンしているユーザーの資格情報を使用します。 クライアント アプリケーションでは、これはほとんどのシナリオでは、目的の動作です。 中間層アプリケーションの場合、このプロパティを使用する代わりに、ASP.NET アプリケーションなど、通常、設定、<xref:System.Net.WebRequest.Credentials%2A>プロパティが代わりに、要求が行われるクライアントの資格情報をします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">要求の送信後に、このプロパティを設定しようとしました。</exception>
        <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティへのアクセスが試行されました。</exception>
      </Docs>
    </Member>
  </Members>
</Type>