<Type Name="HttpListenerContext" FullName="System.Net.HttpListenerContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fc1e87b533e11c673d551750dfe4f38bb9f28850" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48661837" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpListenerContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListenerContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListenerContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerContext sealed" />
  <TypeSignature Language="F#" Value="type HttpListenerContext = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e0268-101"><see cref="T:System.Net.HttpListener" /> クラスで使用される要求オブジェクトと応答オブジェクトへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="e0268-101">Provides access to the request and response objects used by the <see cref="T:System.Net.HttpListener" /> class.</span></span> <span data-ttu-id="e0268-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="e0268-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0268-103">このクラスによって処理されているクライアントのハイパー テキスト転送プロトコル (HTTP) 要求に関連する情報を提供する<xref:System.Net.HttpListener>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e0268-103">This class provides the information related to a client's Hypertext Transfer Protocol (HTTP) request being processed by an <xref:System.Net.HttpListener> object.</span></span> <span data-ttu-id="e0268-104">このクラスもできるようにするメソッドには、 <xref:System.Net.HttpListener> WebSocket 接続を受け付けるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e0268-104">This class also has methods that allow an <xref:System.Net.HttpListener> object to accept a WebSocket connection.</span></span>  
  
 <span data-ttu-id="e0268-105"><xref:System.Net.HttpListener.GetContext%2A>メソッドのインスタンスを返します、<xref:System.Net.HttpListenerContext>クラス。</span><span class="sxs-lookup"><span data-stu-id="e0268-105">The <xref:System.Net.HttpListener.GetContext%2A> method returns instances of the <xref:System.Net.HttpListenerContext> class.</span></span> <span data-ttu-id="e0268-106">クライアントの要求を表すオブジェクトを取得する、<xref:System.Net.HttpListenerContext.Request%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="e0268-106">To get the object that represents the client request, use the <xref:System.Net.HttpListenerContext.Request%2A> property.</span></span> <span data-ttu-id="e0268-107">によってクライアントに送信される応答を表すオブジェクトを取得する、<xref:System.Net.HttpListener>を使用して、<xref:System.Net.HttpListenerContext.Response%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="e0268-107">To get the object that represents the response that will be sent to the client by the <xref:System.Net.HttpListener>, use the <xref:System.Net.HttpListenerContext.Response%2A> property.</span></span> <span data-ttu-id="e0268-108">ユーザーのログイン名とかどうかが認証されているなど、要求を送信するクライアントに関する情報を取得するにはプロパティを照会、<xref:System.Security.Principal.IPrincipal>によって返されるオブジェクト、<xref:System.Net.HttpListenerContext.User%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="e0268-108">To get user information about the client sending the request, such as its login name and whether it has been authenticated, you can query the properties in the <xref:System.Security.Principal.IPrincipal> object returned by the <xref:System.Net.HttpListenerContext.User%2A> property.</span></span>  
  
 <span data-ttu-id="e0268-109">閉じる、<xref:System.Net.HttpListenerContext>オブジェクトがクライアントに応答を送信およびによって使用されているリソースを解放、<xref:System.Net.HttpListenerContext>します。</span><span class="sxs-lookup"><span data-stu-id="e0268-109">Closing an <xref:System.Net.HttpListenerContext> object sends the response to the client and frees any resources used by the <xref:System.Net.HttpListenerContext>.</span></span> <span data-ttu-id="e0268-110">中止、<xref:System.Net.HttpListenerContext>が既に送信されていない、しで使用されたリソースを解放する場合は、オブジェクトは、クライアントへの応答を破棄、<xref:System.Net.HttpListenerContext>します。</span><span class="sxs-lookup"><span data-stu-id="e0268-110">Aborting an <xref:System.Net.HttpListenerContext> object discards the response to the client if it has not already been sent, and frees any resources used by the <xref:System.Net.HttpListenerContext>.</span></span> <span data-ttu-id="e0268-111">閉じるか中止後、<xref:System.Net.HttpListenerContext>オブジェクト、そのメソッドまたはプロパティを参照することはできません。</span><span class="sxs-lookup"><span data-stu-id="e0268-111">After closing or aborting an <xref:System.Net.HttpListenerContext> object, you cannot reference its methods or properties.</span></span> <span data-ttu-id="e0268-112">これを行う場合が表示されます、<xref:System.ObjectDisposedException>例外。</span><span class="sxs-lookup"><span data-stu-id="e0268-112">If you do so, you will receive an <xref:System.ObjectDisposedException> exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0268-113">次のコード例では、クライアント要求のユーザー情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="e0268-113">The following code example displays the user information for a client request.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#8)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="T:System.Net.HttpListenerRequest" />
    <altmember cref="T:System.Net.HttpListenerResponse" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AcceptWebSocketAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e0268-114">WebSocket 接続を非同期操作として受け入れます。</span><span class="sxs-lookup"><span data-stu-id="e0268-114">Accept a WebSocket connection as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol);" />
      <MemberSignature Language="F#" Value="member this.AcceptWebSocketAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;" Usage="httpListenerContext.AcceptWebSocketAsync subProtocol" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subProtocol"><span data-ttu-id="e0268-115">サポートされている WebSocket サブプロトコル。</span><span class="sxs-lookup"><span data-stu-id="e0268-115">The supported WebSocket sub-protocol.</span></span></param>
        <summary><span data-ttu-id="e0268-116">WebSocket 接続を非同期操作として受け入れます。</span><span class="sxs-lookup"><span data-stu-id="e0268-116">Accept a WebSocket connection as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="e0268-117"><see cref="T:System.Threading.Tasks.Task`1" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e0268-117">Returns <see cref="T:System.Threading.Tasks.Task`1" />.</span></span>  
  
<span data-ttu-id="e0268-118">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e0268-118">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="e0268-119">タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、<see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="e0268-119">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns an <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0268-120">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="e0268-120">This operation will not block.</span></span> <span data-ttu-id="e0268-121">返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、WebSocket 接続が受け入れられた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="e0268-121">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the WebSocket connection has been accepted.</span></span>  
  
 <span data-ttu-id="e0268-122">受信バッファーのサイズは、16,385 バイトです。</span><span class="sxs-lookup"><span data-stu-id="e0268-122">The size of the receive buffer is 16,385 bytes.</span></span> <span data-ttu-id="e0268-123">WebSocket のキープ アライブ間隔は、30,000 (30 秒) の既定値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="e0268-123">The WebSocket keep-alive interval is set to the default value of 30,000 (30 seconds).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e0268-124"><paramref name="subProtocol" /> が空の文字列です。</span><span class="sxs-lookup"><span data-stu-id="e0268-124"><paramref name="subProtocol" /> is an empty string</span></span> 
<span data-ttu-id="e0268-125">- または -</span><span class="sxs-lookup"><span data-stu-id="e0268-125">-or-</span></span> 
 <span data-ttu-id="e0268-126"><paramref name="subProtocol" /> に無効な文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="e0268-126"><paramref name="subProtocol" /> contains illegal characters.</span></span></exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException"><span data-ttu-id="e0268-127">WebSocket ハンドシェイクを完了するために応答を送信中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="e0268-127">An error occurred when sending the response to complete the WebSocket handshake.</span></span></exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol, TimeSpan keepAliveInterval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol, valuetype System.TimeSpan keepAliveInterval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String, keepAliveInterval As TimeSpan) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol, TimeSpan keepAliveInterval);" />
      <MemberSignature Language="F#" Value="member this.AcceptWebSocketAsync : string * TimeSpan -&gt; System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;" Usage="httpListenerContext.AcceptWebSocketAsync (subProtocol, keepAliveInterval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" />
        <Parameter Name="keepAliveInterval" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="subProtocol"><span data-ttu-id="e0268-128">サポートされている WebSocket サブプロトコル。</span><span class="sxs-lookup"><span data-stu-id="e0268-128">The supported WebSocket sub-protocol.</span></span></param>
        <param name="keepAliveInterval"><span data-ttu-id="e0268-129">WebSocket プロトコルのキープ アライブ間隔 (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="e0268-129">The WebSocket protocol keep-alive interval in milliseconds.</span></span></param>
        <summary><span data-ttu-id="e0268-130">サポートされている WebSocket サブプロトコルと WebSocket のキープアライブ間隔を指定する WebSocket 接続を、非同期操作として受け入れます。</span><span class="sxs-lookup"><span data-stu-id="e0268-130">Accept a WebSocket connection specifying the supported WebSocket sub-protocol  and WebSocket keep-alive interval as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="e0268-131"><see cref="T:System.Threading.Tasks.Task`1" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e0268-131">Returns <see cref="T:System.Threading.Tasks.Task`1" />.</span></span>  
  
<span data-ttu-id="e0268-132">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e0268-132">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="e0268-133">タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、<see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="e0268-133">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns an <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0268-134">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="e0268-134">This operation will not block.</span></span> <span data-ttu-id="e0268-135">返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、WebSocket 接続が受け入れられた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="e0268-135">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the WebSocket connection has been accepted.</span></span>  
  
 <span data-ttu-id="e0268-136">受信バッファーのサイズは、16,385 バイトです。</span><span class="sxs-lookup"><span data-stu-id="e0268-136">The size of the receive buffer is 16,385 bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e0268-137"><paramref name="subProtocol" /> が空の文字列です。</span><span class="sxs-lookup"><span data-stu-id="e0268-137"><paramref name="subProtocol" /> is an empty string</span></span> 
<span data-ttu-id="e0268-138">- または -</span><span class="sxs-lookup"><span data-stu-id="e0268-138">-or-</span></span> 
 <span data-ttu-id="e0268-139"><paramref name="subProtocol" /> に無効な文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="e0268-139"><paramref name="subProtocol" /> contains illegal characters.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e0268-140"><paramref name="keepAliveInterval" /> が小さすぎます。</span><span class="sxs-lookup"><span data-stu-id="e0268-140"><paramref name="keepAliveInterval" /> is too small.</span></span></exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException"><span data-ttu-id="e0268-141">WebSocket ハンドシェイクを完了するために応答を送信中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="e0268-141">An error occurred when sending the response to complete the WebSocket handshake.</span></span></exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol, int32 receiveBufferSize, valuetype System.TimeSpan keepAliveInterval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String, receiveBufferSize As Integer, keepAliveInterval As TimeSpan) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);" />
      <MemberSignature Language="F#" Value="member this.AcceptWebSocketAsync : string * int * TimeSpan -&gt; System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;" Usage="httpListenerContext.AcceptWebSocketAsync (subProtocol, receiveBufferSize, keepAliveInterval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" />
        <Parameter Name="receiveBufferSize" Type="System.Int32" />
        <Parameter Name="keepAliveInterval" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="subProtocol"><span data-ttu-id="e0268-142">サポートされている WebSocket サブプロトコル。</span><span class="sxs-lookup"><span data-stu-id="e0268-142">The supported WebSocket sub-protocol.</span></span></param>
        <param name="receiveBufferSize"><span data-ttu-id="e0268-143">受信バッファーのサイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="e0268-143">The receive buffer size in bytes.</span></span></param>
        <param name="keepAliveInterval"><span data-ttu-id="e0268-144">WebSocket プロトコルのキープ アライブ間隔 (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="e0268-144">The WebSocket protocol keep-alive interval in milliseconds.</span></span></param>
        <summary><span data-ttu-id="e0268-145">サポートされている WebSocket サブプロトコル受信バッファー サイズと WebSocket のキープアライブ間隔を指定する WebSocket 接続を、非同期操作として受け入れます。</span><span class="sxs-lookup"><span data-stu-id="e0268-145">Accept a WebSocket connection specifying the supported WebSocket sub-protocol, receive buffer size, and WebSocket keep-alive interval as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="e0268-146"><see cref="T:System.Threading.Tasks.Task`1" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e0268-146">Returns <see cref="T:System.Threading.Tasks.Task`1" />.</span></span>  
  
<span data-ttu-id="e0268-147">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e0268-147">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="e0268-148">タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、<see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="e0268-148">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns an <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0268-149">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="e0268-149">This operation will not block.</span></span> <span data-ttu-id="e0268-150">返された<xref:System.Threading.Tasks.Task%601>> オブジェクトは、WebSocket 接続が受け入れられた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="e0268-150">The returned <xref:System.Threading.Tasks.Task%601> > object will complete after the WebSocket connection has been accepted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e0268-151"><paramref name="subProtocol" /> が空の文字列です。</span><span class="sxs-lookup"><span data-stu-id="e0268-151"><paramref name="subProtocol" /> is an empty string</span></span> 
<span data-ttu-id="e0268-152">- または -</span><span class="sxs-lookup"><span data-stu-id="e0268-152">-or-</span></span> 
 <span data-ttu-id="e0268-153"><paramref name="subProtocol" /> に無効な文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="e0268-153"><paramref name="subProtocol" /> contains illegal characters.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e0268-154"><paramref name="keepAliveInterval" /> が小さすぎます。</span><span class="sxs-lookup"><span data-stu-id="e0268-154"><paramref name="keepAliveInterval" /> is too small.</span></span>  
  
<span data-ttu-id="e0268-155">- または -</span><span class="sxs-lookup"><span data-stu-id="e0268-155">-or-</span></span> 
 <span data-ttu-id="e0268-156"><paramref name="receiveBufferSize" /> が 16 バイト未満です</span><span class="sxs-lookup"><span data-stu-id="e0268-156"><paramref name="receiveBufferSize" /> is less than 16 bytes</span></span> 
<span data-ttu-id="e0268-157">- または -</span><span class="sxs-lookup"><span data-stu-id="e0268-157">-or-</span></span> 
 <span data-ttu-id="e0268-158"><paramref name="receiveBufferSize" /> が 64K バイトを超えています。</span><span class="sxs-lookup"><span data-stu-id="e0268-158"><paramref name="receiveBufferSize" /> is greater than 64K bytes.</span></span></exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException"><span data-ttu-id="e0268-159">WebSocket ハンドシェイクを完了するために応答を送信中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="e0268-159">An error occurred when sending the response to complete the WebSocket handshake.</span></span></exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment&lt;byte&gt; internalBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol, int32 receiveBufferSize, valuetype System.TimeSpan keepAliveInterval, valuetype System.ArraySegment`1&lt;unsigned int8&gt; internalBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String, receiveBufferSize As Integer, keepAliveInterval As TimeSpan, internalBuffer As ArraySegment(Of Byte)) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment&lt;System::Byte&gt; internalBuffer);" />
      <MemberSignature Language="F#" Value="member this.AcceptWebSocketAsync : string * int * TimeSpan * ArraySegment&lt;byte&gt; -&gt; System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;" Usage="httpListenerContext.AcceptWebSocketAsync (subProtocol, receiveBufferSize, keepAliveInterval, internalBuffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" />
        <Parameter Name="receiveBufferSize" Type="System.Int32" />
        <Parameter Name="keepAliveInterval" Type="System.TimeSpan" />
        <Parameter Name="internalBuffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="subProtocol"><span data-ttu-id="e0268-160">サポートされている WebSocket サブプロトコル。</span><span class="sxs-lookup"><span data-stu-id="e0268-160">The supported WebSocket sub-protocol.</span></span></param>
        <param name="receiveBufferSize"><span data-ttu-id="e0268-161">受信バッファーのサイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="e0268-161">The receive buffer size in bytes.</span></span></param>
        <param name="keepAliveInterval"><span data-ttu-id="e0268-162">WebSocket プロトコルのキープ アライブ間隔 (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="e0268-162">The WebSocket protocol keep-alive interval in milliseconds.</span></span></param>
        <param name="internalBuffer"><span data-ttu-id="e0268-163">この操作で使用する内部バッファー。</span><span class="sxs-lookup"><span data-stu-id="e0268-163">An internal buffer to use for this operation.</span></span></param>
        <summary><span data-ttu-id="e0268-164">サポートされている WebSocket サブプロトコル受信バッファー サイズ、WebSocket のキープアライブ間隔、内部バッファーを指定する WebSocket 接続を、非同期操作として受け入れます。</span><span class="sxs-lookup"><span data-stu-id="e0268-164">Accept a WebSocket connection specifying the supported WebSocket sub-protocol, receive buffer size, WebSocket keep-alive interval, and the internal buffer as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="e0268-165"><see cref="T:System.Threading.Tasks.Task`1" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e0268-165">Returns <see cref="T:System.Threading.Tasks.Task`1" />.</span></span>  
  
<span data-ttu-id="e0268-166">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e0268-166">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="e0268-167">タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、<see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="e0268-167">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns an <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0268-168">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="e0268-168">This operation will not block.</span></span> <span data-ttu-id="e0268-169">返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、WebSocket 接続が受け入れられた後に完了します。</span><span class="sxs-lookup"><span data-stu-id="e0268-169">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the WebSocket connection has been accepted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e0268-170"><paramref name="subProtocol" /> が空の文字列です。</span><span class="sxs-lookup"><span data-stu-id="e0268-170"><paramref name="subProtocol" /> is an empty string</span></span> 
<span data-ttu-id="e0268-171">- または -</span><span class="sxs-lookup"><span data-stu-id="e0268-171">-or-</span></span> 
 <span data-ttu-id="e0268-172"><paramref name="subProtocol" /> に無効な文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="e0268-172"><paramref name="subProtocol" /> contains illegal characters.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e0268-173"><paramref name="keepAliveInterval" /> が小さすぎます。</span><span class="sxs-lookup"><span data-stu-id="e0268-173"><paramref name="keepAliveInterval" /> is too small.</span></span>  
  
<span data-ttu-id="e0268-174">- または -</span><span class="sxs-lookup"><span data-stu-id="e0268-174">-or-</span></span> 
 <span data-ttu-id="e0268-175"><paramref name="receiveBufferSize" /> が 16 バイト未満です</span><span class="sxs-lookup"><span data-stu-id="e0268-175"><paramref name="receiveBufferSize" /> is less than 16 bytes</span></span> 
<span data-ttu-id="e0268-176">- または -</span><span class="sxs-lookup"><span data-stu-id="e0268-176">-or-</span></span> 
 <span data-ttu-id="e0268-177"><paramref name="receiveBufferSize" /> が 64K バイトを超えています。</span><span class="sxs-lookup"><span data-stu-id="e0268-177"><paramref name="receiveBufferSize" /> is greater than 64K bytes.</span></span></exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException"><span data-ttu-id="e0268-178">WebSocket ハンドシェイクを完了するために応答を送信中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="e0268-178">An error occurred when sending the response to complete the WebSocket handshake.</span></span></exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerRequest Request { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerRequest Request" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerContext.Request" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Request As HttpListenerRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerRequest ^ Request { System::Net::HttpListenerRequest ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Request : System.Net.HttpListenerRequest" Usage="System.Net.HttpListenerContext.Request" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0268-179">クライアントのリソース要求を表す <see cref="T:System.Net.HttpListenerRequest" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="e0268-179">Gets the <see cref="T:System.Net.HttpListenerRequest" /> that represents a client's request for a resource.</span></span></summary>
        <value><span data-ttu-id="e0268-180">クライアント要求を表す <see cref="T:System.Net.HttpListenerRequest" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e0268-180">An <see cref="T:System.Net.HttpListenerRequest" /> object that represents the client request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0268-181">これを閉じた場合<xref:System.Net.HttpListenerContext>、閉じる、クライアントへの応答を送信には、<xref:System.Net.HttpListenerResponse>応答、および閉じるを格納している、<xref:System.Net.HttpListenerRequest>このプロパティによって返されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e0268-181">If you close this <xref:System.Net.HttpListenerContext>, it will send the response to the client, close the <xref:System.Net.HttpListenerResponse> that contains the response, and close the <xref:System.Net.HttpListenerRequest> object returned by this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0268-182">次のコード例では、このメソッドの呼び出しを示しています。</span><span class="sxs-lookup"><span data-stu-id="e0268-182">The following code example demonstrates calling this method.</span></span> <span data-ttu-id="e0268-183">`listener`変数を保持する<xref:System.Net.HttpListener>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e0268-183">The `listener` variable holds an <xref:System.Net.HttpListener> object.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Response">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerResponse Response { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerResponse Response" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerContext.Response" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Response As HttpListenerResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerResponse ^ Response { System::Net::HttpListenerResponse ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Response : System.Net.HttpListenerResponse" Usage="System.Net.HttpListenerContext.Response" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerResponse</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0268-184">クライアントの要求に応答してクライアントに送信される <see cref="T:System.Net.HttpListenerResponse" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e0268-184">Gets the <see cref="T:System.Net.HttpListenerResponse" /> object that will be sent to the client in response to the client's request.</span></span></summary>
        <value><span data-ttu-id="e0268-185">クライアントに応答を送り返すために使用する <see cref="T:System.Net.HttpListenerResponse" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e0268-185">An <see cref="T:System.Net.HttpListenerResponse" /> object used to send a response back to the client.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0268-186">プロパティを設定して、アプリケーションが応答を構成、<xref:System.Net.HttpListenerResponse>このプロパティによって返されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e0268-186">Your application configures the response by setting properties in the <xref:System.Net.HttpListenerResponse> object returned by this property.</span></span> <span data-ttu-id="e0268-187">応答を構成した後に送信するクライアントの応答を終了するかこれを閉じて<xref:System.Net.HttpListenerContext>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e0268-187">After configuring the response, you send it to the client by closing the response, or by closing this <xref:System.Net.HttpListenerContext> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0268-188">次のコード例では、クライアントの要求に対する応答を取得し、応答本文を追加することを示します。</span><span class="sxs-lookup"><span data-stu-id="e0268-188">The following code example demonstrates getting the response to a client's request and adding the response body.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="e0268-189">注: このメンバーは、アプリケーションでネットワークのトレースを有効にした場合に、トレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="e0268-189">Note: This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e0268-190">詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。</span><span class="sxs-lookup"><span data-stu-id="e0268-190">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="User">
      <MemberSignature Language="C#" Value="public System.Security.Principal.IPrincipal User { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal User" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerContext.User" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property User As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::IPrincipal ^ User { System::Security::Principal::IPrincipal ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.User : System.Security.Principal.IPrincipal" Usage="System.Net.HttpListenerContext.User" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0268-191">要求が <see cref="T:System.Net.HttpListenerContext" /> オブジェクトによって表されるクライアントの ID、認証情報、セキュリティ ロールを取得するために使用するオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="e0268-191">Gets an object used to obtain identity, authentication information, and security roles for the client whose request is represented by this <see cref="T:System.Net.HttpListenerContext" /> object.</span></span></summary>
        <value><span data-ttu-id="e0268-192">クライアントを記述する <see cref="T:System.Security.Principal.IPrincipal" /> オブジェクト。この <see cref="T:System.Net.HttpListener" /> を提供した <see cref="T:System.Net.HttpListenerContext" /> が認証を必要としない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e0268-192">An <see cref="T:System.Security.Principal.IPrincipal" /> object that describes the client, or <see langword="null" /> if the <see cref="T:System.Net.HttpListener" /> that supplied this <see cref="T:System.Net.HttpListenerContext" /> does not require authentication.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0268-193"><xref:System.Net.HttpListener>を使用して認証が必要なことを示します、<xref:System.Net.HttpListener.AuthenticationSchemes%2A>プロパティまたは指定することによって、<xref:System.Net.AuthenticationSchemeSelector>デリゲートを使用して、<xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="e0268-193">An <xref:System.Net.HttpListener> indicates that it requires authentication using the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> property or by specifying an <xref:System.Net.AuthenticationSchemeSelector> delegate using the <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> property.</span></span>  
  
 <span data-ttu-id="e0268-194">クライアントのログイン名と認証情報を確認するには<xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=nameWithType>このプロパティによって返されるオブジェクトのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="e0268-194">To determine the client's login name and authentication information, check the <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=nameWithType> property in the object returned by this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0268-195">次のコード例では、クライアント、および応答でクライアントに返すに関するへのアクセスの id と認証情報を示します。</span><span class="sxs-lookup"><span data-stu-id="e0268-195">The following code example demonstrates accessing identity and authentication information about the client, and returning it to the client in the response.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="e0268-196">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /><see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="e0268-196">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /><see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>