<Type Name="UpdateSourceExceptionFilterCallback" FullName="System.Windows.Data.UpdateSourceExceptionFilterCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1e21650008b7c58b6606f8e780046f3aebc215e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36564252" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate object UpdateSourceExceptionFilterCallback(object bindExpression, Exception exception);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed UpdateSourceExceptionFilterCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.UpdateSourceExceptionFilterCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function UpdateSourceExceptionFilterCallback(bindExpression As Object, exception As Exception) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ UpdateSourceExceptionFilterCallback(System::Object ^ bindExpression, Exception ^ exception);" />
  <TypeSignature Language="F#" Value="type UpdateSourceExceptionFilterCallback = delegate of obj * Exception -&gt; obj" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="bindExpression" Type="System.Object" />
    <Parameter Name="exception" Type="System.Exception" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="bindExpression">The object with the exception.</param>
    <param name="exception">The exception encountered.</param>
    <summary>Represents the method that handles exceptions that are thrown during the update of the binding source value. This must be used with the <see cref="T:System.Windows.Controls.ExceptionValidationRule" />.</summary>
    <returns>An object that is typically one of the following:  <list type="table"><listheader><term> Value  </term><description> Description  </description></listheader><item><term><see langword="null" /></term><description> To ignore any exceptions. The default behavior (if there is no <see cref="T:System.Windows.Data.UpdateSourceExceptionFilterCallback" />) is to create a <see cref="T:System.Windows.Controls.ValidationError" /> with the exception and adds it to the <see cref="P:System.Windows.Controls.Validation.Errors" /> collection of the bound element.  </description></item><item><term> Any object  </term><description> To create a <see cref="T:System.Windows.Controls.ValidationError" /> object with the <see cref="P:System.Windows.Controls.ValidationError.ErrorContent" /> set to that object.  The <see cref="T:System.Windows.Controls.ValidationError" /> object is added to <see cref="P:System.Windows.Controls.Validation.Errors" /> collection of the bound element.  </description></item><item><term> A <see cref="T:System.Windows.Controls.ValidationError" /> object  </term><description> To set the <see cref="T:System.Windows.Data.BindingExpression" /> or <see cref="T:System.Windows.Data.MultiBindingExpression" /> object as the <see cref="P:System.Windows.Controls.ValidationError.BindingInError" />. The <see cref="T:System.Windows.Controls.ValidationError" /> object is added to <see cref="P:System.Windows.Controls.Validation.Errors" /> collection of the bound element.  </description></item></list></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 関連付けられている場合、<xref:System.Windows.Controls.ExceptionValidationRule>で、<xref:System.Windows.Data.Binding>オブジェクトを使用するオプションがある、<xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A>プロパティを例外を処理するためのカスタム ロジックを提供するには、このコールバックを設定します。 バインディング エンジンは、バインディング ソースの値を更新する際に例外が発生するたびに、このコールバックが呼び出されます。  
  
 場合、<xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A>が指定されていない、 <xref:System.Windows.Data.Binding>、バインディング エンジンを作成、<xref:System.Windows.Controls.ValidationError>例外を使用し、それを追加、<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType>バインドされている要素のコレクション。  
  
   
  
## Examples  
 <xref:System.Windows.Controls.TextBox.Text%2A> 、次のプロパティ<xref:System.Windows.Controls.TextBox>データにバインドされて、ソース プロパティ`Age3`型である`int`です。 <xref:System.Windows.Controls.ExceptionValidationRule> (ときに、ユーザーを整数に変換できない値を入力) などのソース プロパティの更新中にスローされる例外をチェックします。  
  
 [!code-xaml[BindValidation#tbExceptionFilter](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#tbexceptionfilter)]  
  
 これらの例外を処理するためのカスタム ロジックを提供するオプションがあります。 次の例を使用する方法を示しています、<xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A>プロパティを設定、 <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>:  
  
 [!code-csharp[BindValidation#filtercallback](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#filtercallback)]  
  
 実装例を次に示します、 <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>:  
  
 [!code-csharp[BindValidation#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#handler)]  
  
 サンプル全体については、次を参照してください。[のバインドの検証のサンプル](http://go.microsoft.com/fwlink/?LinkID=159972)です。  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Data.MultiBinding.UpdateSourceExceptionFilter" />
  </Docs>
</Type>