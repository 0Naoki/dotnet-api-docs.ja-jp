<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ReverseRandomAccessIterator`1.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5175141f77d8f99c3affcf85184de7dd1d8d0394e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">175141f77d8f99c3affcf85184de7dd1d8d0394e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
          <source>Provides an iterator that supports the following operations: moving forward one position by calling <bpt id="p1">&lt;c&gt;</bpt>operator--<ept id="p1">&lt;/c&gt;</ept>, moving backward one position by calling <bpt id="p2">&lt;c&gt;</bpt>operator++<ept id="p2">&lt;/c&gt;</ept>, accessing an element by using <bpt id="p3">&lt;c&gt;</bpt>operator[]<ept id="p3">&lt;/c&gt;</ept>, and accessing an element by using pointer arithmetic.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>operator--<ept id="p1">&lt;/c&gt;</ept> を呼び出して位置を 1 つ前に進める操作、<bpt id="p2">&lt;c&gt;</bpt>operator++<ept id="p2">&lt;/c&gt;</ept> を呼び出して位置を 1 つ後に戻す操作、<bpt id="p3">&lt;c&gt;</bpt>operator[]<ept id="p3">&lt;/c&gt;</ept> を使用して 1 つの要素にアクセスする操作、ポインター演算を使用して 1 つの要素にアクセスする操作をサポートする反復子を提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">新しい <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトを割り当て、初期化します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">新しい <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトを割り当て、初期化します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>An existing <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> object to be copied to the current container.</source>
          <target state="translated">現在のコンテナーにコピーする既存の <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object from an existing <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">既存の <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトから、新しい <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> オブジェクトを割り当て、初期化します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>An existing <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object to be copied to the current container.</source>
          <target state="translated">現在のコンテナーにコピーする既存の <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Allocates and initializes a new <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object from an existing <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">既存の <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトから、新しい <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトを割り当て、初期化します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.base">
          <source>Gets the underlying base iterator for the <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトの基になる基本反復子を取得します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.base">
          <source>The underlying base iterator for the <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトの基になる基本反復子。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Clone">
          <source>Creates a copy of the current <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトのコピーを作成します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Clone">
          <source>A copy of the current <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトのコピー。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.container">
          <source>Gets the container that the iterator is traversing.</source>
          <target state="translated">反復子が走査するコンテナーを取得します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.container">
          <source>The container that the iterator is traversing.</source>
          <target state="translated">反復子が走査するコンテナー。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
          <target state="translated">現在の反復子が指している要素と指定の反復子が指している要素の距離を確認します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">現在の反復子と同じコンテナーを指す有効な反復子。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
          <target state="translated">現在の反復子が指している要素と指定の反復子が指している要素の距離を確認します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The distance, in number of elements, between the element that the current iterator is pointing to and the element that <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> is pointing to.</source>
          <target state="translated">現在の反復子が指している要素と <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> が指している要素の距離 (距離は要素数で表します)。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>This number is negative if <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> points to an element that is before the element that the current iterator points to.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> が指す要素が現在の反復子が指す要素よりも前にある場合、この数は負になります。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">現在の反復子と同じコンテナーを指す有効な反復子。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</source>
          <target state="translated">現在の反復子が指している要素と指定の反復子が指している要素の距離を確認します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The distance, in number of elements, between the element that the current iterator is pointing to and the element that <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> is pointing to.</source>
          <target state="translated">現在の反復子が指している要素と <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> が指している要素の距離 (距離は要素数で表します)。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>This number is negative if <ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> points to an element that is before the element that the current iterator points to.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="_Right" /&gt;</ph> が指す要素が現在の反復子が指す要素よりも前にある場合、この数は負になります。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
          <source>Determines whether two iterators are the same object.</source>
          <target state="translated">2 つの反復子が同じオブジェクトであるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">現在の <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトと比較する <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">指定の <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> オブジェクトが現在の <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトと同じかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are the same object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">2 つの反復子が同じオブジェクトである場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">現在の <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトと比較する <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object is the same as the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">指定の <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトが現在の <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトと同じかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> objects are the same object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">2 つの <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトが同じオブジェクトである場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Item(System.Int32)">
          <source>The position of the element to access.</source>
          <target state="translated">アクセスする要素の位置。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Item(System.Int32)">
          <source>Accesses the element at the given position in the container.</source>
          <target state="translated">コンテナー内の指定の位置にある要素にアクセスします。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Item(System.Int32)">
          <source>The element at the given position in the container.</source>
          <target state="translated">コンテナー内の指定の位置にある要素。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
          <source>Determines whether the current iterator is pointing to an element in the container that is before the element that a given iterator points to.</source>
          <target state="translated">コンテナーの中で現在の反復子が指している要素が指定の反復子が指している要素よりも前にあるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">現在の反復子と同じコンテナーを指す有効な反復子。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</source>
          <target state="translated">コンテナーの中で現在の反復子が指している要素が指定の反復子が指している要素よりも前にあるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current iterator is pointing to an element that comes before the element that <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph> is pointing to; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在の反復子が指している要素が <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph> が指している要素よりも前にある場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>A valid iterator that points to the same container as the current iterator.</source>
          <target state="translated">現在の反復子と同じコンテナーを指す有効な反復子。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</source>
          <target state="translated">コンテナーの中で現在の反復子が指している要素が指定の反復子が指している要素よりも前にあるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current iterator is pointing to an element that comes before the element that <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph> is pointing to; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">現在の反復子が指している要素が <ph id="ph2">&lt;paramref name="_Right" /&gt;</ph> が指している要素よりも前にある場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.move(System.Int32)">
          <source>The number of elements to traverse.</source>
          <target state="translated">走査する要素の数。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.move(System.Int32)">
          <source>To move the iterator forward, specify a negative number.</source>
          <target state="translated">反復子を前に進める場合は、負の数を指定します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.move(System.Int32)">
          <source>To move the iterator backward, use a positive number.</source>
          <target state="translated">反復子を後に戻す場合は、正の数を指定します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.move(System.Int32)">
          <source>Moves the iterator by the given number of elements.</source>
          <target state="translated">指定の要素数だけ反復子を移動します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.move(System.Int32)">
          <source>The actual number of elements traversed.</source>
          <target state="translated">実際に走査した要素の数。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.move(System.Int32)">
          <source>This number will differ from <ph id="ph1">&lt;paramref name="_Offset" /&gt;</ph> if the beginning or end of the container is reached before iterating the desired number of elements.</source>
          <target state="translated">指定の要素数だけ反復子を移動する前にコンテナーの先頭または末尾に達した場合は、<ph id="ph1">&lt;paramref name="_Offset" /&gt;</ph> とは異なる数になります。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.next">
          <source>Increments the reverse iterator to the next position in the underlying container, or to the first position in front of the beginning of container if the container has been completely traversed.</source>
          <target state="translated">基になるコンテナー内の次の位置に反転反復子をインクリメントします。コンテナーの走査が完了した場合は、コンテナーの先頭の前にある最初の位置にインクリメントします。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
          <source>Increments the reverse iterator by the given number of elements.</source>
          <target state="translated">指定の要素数だけ反転反復子をインクリメントします。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>The number of elements to increment.</source>
          <target state="translated">インクリメントする要素の数。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>Increments the reverse iterator by the given number of elements.</source>
          <target state="translated">指定の要素数だけ反転反復子をインクリメントします。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>The integer parameter is specified on the right side of the addition operator.</source>
          <target state="translated">加算演算子の右辺には整数のパラメーターを指定します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">反復子。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The number of elements to increment.</source>
          <target state="translated">インクリメントする要素の数。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to increment.</source>
          <target state="translated">インクリメントする反復子。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Increments the reverse iterator by the given number of elements.</source>
          <target state="translated">指定の要素数だけ反転反復子をインクリメントします。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The integer parameter is specified on the left side of the addition operator.</source>
          <target state="translated">加算演算子の左辺には整数のパラメーターを指定します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>An iterator.</source>
          <target state="translated">反復子。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object to assign to the current object.</source>
          <target state="translated">現在のオブジェクトに代入する <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Assigns the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object to the current object.</source>
          <target state="translated">指定の <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトを現在のオブジェクトに代入します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The current object (<bpt id="p1">&lt;c&gt;</bpt>*this<ept id="p1">&lt;/c&gt;</ept>).</source>
          <target state="translated">現在のオブジェクト (<bpt id="p1">&lt;c&gt;</bpt>*this<ept id="p1">&lt;/c&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
          <source>Decrements the reverse iterator by one element.</source>
          <target state="translated">反転反復子を 1 要素だけデクリメントします。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
          <source>Decrements the reverse iterator by one element.</source>
          <target state="translated">反転反復子を 1 要素だけデクリメントします。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
          <source>This is the prefix version of the decrement operator.</source>
          <target state="translated">これは前置バージョンのデクリメント演算子です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
          <source>An iterator.</source>
          <target state="translated">反復子。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>Decrements the reverse iterator by one element.</source>
          <target state="translated">反転反復子を 1 要素だけデクリメントします。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>This is the postfix version of the decrement operator.</source>
          <target state="translated">これは、後置バージョンのデクリメント演算子です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">反復子。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">現在の <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトと比較する <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether two iterators are the same object.</source>
          <target state="translated">2 つの反復子が同じオブジェクトであるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are the same object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">2 つの反復子が同じオブジェクトである場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">この演算子を同等の方法は<ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)?displayProperty=nameWithType&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">左辺の反復子と比較する反復子。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is greater than the position of the given right-side iterator.</source>
          <target state="translated">左辺の反復子の位置が右辺に指定されている反復子の位置より大きいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is greater than the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">左辺の反復子が右辺に指定されている反復子より大きい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">左辺の反復子と比較する反復子。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.</source>
          <target state="translated">左辺の反復子の位置が右辺に指定されている反復子の位置以上であるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">左辺の反復子が右辺に指定されている反復子以上の場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
          <source>Converts a <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> を <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> に変換します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
          <source>The current iterator as an <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> としての現在の反復子。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
          <source>Increments the reverse iterator by one element.</source>
          <target state="translated">反転反復子を 1 要素だけインクリメントします。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
          <source>Increments the reverse iterator by one element.</source>
          <target state="translated">反転反復子を 1 要素だけインクリメントします。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
          <source>This is the prefix version of the increment operator.</source>
          <target state="translated">これは前置バージョンのインクリメント演算子です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
          <source>An iterator.</source>
          <target state="translated">反復子。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>Increments the reverse iterator by one element.</source>
          <target state="translated">反転反復子を 1 要素だけインクリメントします。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>This is the postfix version of the increment operator.</source>
          <target state="translated">これは、後置バージョンのインクリメント演算子です。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">反復子。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object to compare with the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">現在の <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトと比較する <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object differs from the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">指定の <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトが現在の <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> オブジェクトと異なるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two iterators are different objects; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">2 つの反復子が異なるオブジェクトの場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">左辺の反復子と比較する反復子。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.</source>
          <target state="translated">左辺の反復子の位置が右辺に指定されている反復子の位置より小さいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is less than the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">左辺の反復子が右辺に指定されている反復子より小さい場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">この演算子を同等の方法は<ph id="ph1">&lt;xref:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})?displayProperty=nameWithType&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator to compare with the left-side iterator.</source>
          <target state="translated">左辺の反復子と比較する反復子。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Determines whether the position of the left-side iterator is less than or equal to the position of the given right-side iterator.</source>
          <target state="translated">左辺の反復子の位置が右辺に指定されている反復子の位置以下であるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the left-side iterator is less than or equal to the given right-side iterator; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">左辺の反復子が右辺に指定されている反復子以下の場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator that the operator is applied to.</source>
          <target state="translated">演算子が適用される反復子。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Returns the element that the iterator is currently pointing to.</source>
          <target state="translated">反復子が現在指している要素への参照を返します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The element that the iterator is currently pointing to.</source>
          <target state="translated">反復子が現在指している要素。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The iterator that the operator is applied to.</source>
          <target state="translated">演算子が適用される反復子。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>Returns the element that the iterator is currently pointing to.</source>
          <target state="translated">反復子が現在指している要素への参照を返します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
          <source>The element that the iterator is currently pointing to.</source>
          <target state="translated">反復子が現在指している要素。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
          <source>Decrements the iterator by the given number of elements, or determines the difference between two iterators.</source>
          <target state="translated">指定の要素数だけ反復子をデクリメントするか、2 つの反復子の差を確認します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> to be subtracted from the current <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph> object.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /&gt;</ph> オブジェクトから減算する <ph id="ph2">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>Determines the difference between two iterators.</source>
          <target state="translated">2 つの反復子の差を確認します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
          <source>The difference, in number of elements, between the two iterators.</source>
          <target state="translated">2 つの反復子の差 (差は要素数で表します)。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>The number of elements to decrement.</source>
          <target state="translated">デクリメントする要素の数。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>Decrements the iterator by the given number of elements.</source>
          <target state="translated">指定の要素数だけ反復子をデクリメントします。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>The integer parameter is specified on the right side of the subtraction operator.</source>
          <target state="translated">減算演算子の右辺には整数のパラメーターを指定します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
          <source>An iterator.</source>
          <target state="translated">反復子。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.prev">
          <source>Positions the iterator to the element immediately after the current element.</source>
          <target state="translated">現在の要素の直後の要素に反復子を移動します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.valid">
          <source>Determines whether the iterator is valid and can be safely used to traverse the underlying container.</source>
          <target state="translated">反復子が有効で、基になるコンテナーの走査のために安全に使用できるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.valid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the iterator is valid and safe to use; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">反復子が有効で安全に使用できる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>