<Type Name="IBidirectionalIterator&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5e7aae637660537dbcd5f2002675b411b0e03919" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36726147" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IBidirectionalIterator&lt;TValue&gt; : Microsoft.VisualC.StlClr.Generic.IForwardIterator&lt;TValue&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IBidirectionalIterator`1&lt;TValue&gt; implements class Microsoft.VisualC.StlClr.Generic.IForwardIterator`1&lt;!TValue&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBidirectionalIterator(Of TValue)&#xA;Implements IForwardIterator(Of TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public interface class IBidirectionalIterator : Microsoft::VisualC::StlClr::Generic::IForwardIterator&lt;TValue&gt;" />
  <TypeSignature Language="F#" Value="type IBidirectionalIterator&lt;'Value&gt; = interface&#xA;    interface IForwardIterator&lt;'Value&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IForwardIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue">[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]</typeparam>
    <summary>インクリメント演算子を使用して前方に、デクリメント演算子を使用して後方に、双方向でコンテナーの要素にアクセスできる反復子のためのインターフェイス。 反復子が指す要素については、読み書きの両方を何回でも実行できます。 双方向反復子は、入力反復子または出力反復子が必要な場所であればどこででも使用できます。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="prev">
      <MemberSignature Language="C#" Value="public void prev ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void prev() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev" />
      <MemberSignature Language="VB.NET" Value="Public Sub prev ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void prev();" />
      <MemberSignature Language="F#" Value="abstract member prev : unit -&gt; unit" Usage="iBidirectionalIterator.prev " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の要素の直前の要素に反復子を移動します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>