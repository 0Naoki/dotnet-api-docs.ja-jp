<Type Name="Expression" FullName="System.Linq.Expressions.Expression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2d2bcc9edb22ce616e169fae6c835a452b366252" /><Meta Name="ms.sourcegitcommit" Value="9e3550fb2088d4faf2043f0acb29da4555519937" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/12/2018" /><Meta Name="ms.locfileid" Value="53301065" /></Metadata><TypeSignature Language="C#" Value="public abstract class Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Expression extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.Expression" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Expression" />
  <TypeSignature Language="C++ CLI" Value="public ref class Expression abstract" />
  <TypeSignature Language="F#" Value="type Expression = class" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="62a30-101">式ツリー ノードを表すクラスの派生元の基底クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="62a30-101">Provides the base class from which the classes that represent expression tree nodes are derived.</span></span> <span data-ttu-id="62a30-102">さまざまなノード型を作成する <see langword="static" /> (Visual Basic では <see langword="Shared" />) ファクトリ メソッドも含まれています。</span><span class="sxs-lookup"><span data-stu-id="62a30-102">It also contains <see langword="static" /> (<see langword="Shared" /> in Visual Basic) factory methods to create the various node types.</span></span> <span data-ttu-id="62a30-103">これは <see langword="abstract" /> クラスです。</span><span class="sxs-lookup"><span data-stu-id="62a30-103">This is an <see langword="abstract" /> class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-104">次のコード例では、ブロック式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-104">The following code example shows how to create a block expression.</span></span> <span data-ttu-id="62a30-105">ブロック式から成る 2 つ<xref:System.Linq.Expressions.MethodCallExpression>オブジェクトと 1 つ<xref:System.Linq.Expressions.ConstantExpression>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-105">The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-106"><see cref="T:System.Linq.Expressions.Expression" /> の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-106">Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Expression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a30-107"><see cref="T:System.Linq.Expressions.Expression" /> の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-107">Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression (System.Linq.Expressions.ExpressionType nodeType, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Linq.Expressions.ExpressionType nodeType, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Expression(System::Linq::Expressions::ExpressionType nodeType, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Linq.Expressions.Expression : System.Linq.Expressions.ExpressionType * Type -&gt; System.Linq.Expressions.Expression" Usage="new System.Linq.Expressions.Expression (nodeType, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="nodeType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="nodeType"><span data-ttu-id="62a30-108">ノード型として設定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-108">The <see cref="T:System.Linq.Expressions.ExpressionType" /> to set as the node type.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-109">この <see cref="P:System.Linq.Expressions.Expression.Type" /> の <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-109">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of this <see cref="T:System.Linq.Expressions.Expression" />.</span></span></param>
        <summary><span data-ttu-id="62a30-110"><see cref="T:System.Linq.Expressions.Expression" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="62a30-110">Initializes a new instance of the <see cref="T:System.Linq.Expressions.Expression" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-111">このコンス トラクターは、派生クラスのコンス トラクターから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-111">This constructor is called from constructors in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="abstract member Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression&#xA;override this.Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="expression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor"><span data-ttu-id="62a30-112">このノードを走査するビジター。</span><span class="sxs-lookup"><span data-stu-id="62a30-112">The visitor to visit this node with.</span></span></param>
        <summary><span data-ttu-id="62a30-113">このノード型の特定の Visit メソッドにデスパッチします。</span><span class="sxs-lookup"><span data-stu-id="62a30-113">Dispatches to the specific visit method for this node type.</span></span> <span data-ttu-id="62a30-114">たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="62a30-114">For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-115">このノードの走査結果。</span><span class="sxs-lookup"><span data-stu-id="62a30-115">The result of visiting this node.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-116">この既定の実装の<xref:System.Linq.Expressions.ExpressionType.Extension>ノード呼び出し<xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-116">This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span> <span data-ttu-id="62a30-117">訪問者の派生クラスで複数の特定のメソッドを呼び出すには、このメソッドをオーバーライドして、<xref:System.Linq.Expressions.ExpressionVisitor>クラス。</span><span class="sxs-lookup"><span data-stu-id="62a30-117">Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class.</span></span> <span data-ttu-id="62a30-118">ただし、サポートすることがまだ訪問者が不明な呼び出すことによって<xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-118">However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-119">オーバーフロー チェックを行わない算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-119">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Add(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-120"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-120">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-121"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-121">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-122">オーバーフロー チェックを行わない算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-122">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-123"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-123">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-124">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-124">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-125"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-125">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-126">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-126">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-127">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-127">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-128"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-128">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-129">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-129">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-130">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-130">Implementing Method</span></span>  
 <span data-ttu-id="62a30-131">次の規則は、操作の選択したメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-131">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-132">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、加算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-132">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-133">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-133">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-134">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-134">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-135">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-135">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-136">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-136">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-137">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-137">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-138">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-138">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-139">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-139">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-140">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-140">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-141">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-141">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-142">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-142">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-143">ノードの型は、定義済みの加算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-143">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="62a30-144">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-144">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-145">ノードの型は、定義済みの加算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-145">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-146">次のコード例では、2 つの整数を追加する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-146">The following code example shows how to create an expression that adds two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#1)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-147"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-147"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-148">加算演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-148">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Add(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Add : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Add (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-149"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-149">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-150"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-150">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-151"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-151">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-152">オーバーフロー チェックを行わない算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-152">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span></span> <span data-ttu-id="62a30-153">実装メソッドを指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-153">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-154"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Add" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-154">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-155">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-155">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-156"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-156">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-157">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-157">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-158">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-158">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-159"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-159">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-160">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-160">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-161">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-161">Implementing Method</span></span>  
 <span data-ttu-id="62a30-162">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-162">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-163">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-163">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-164">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、加算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-164">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-165">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-165">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-166">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-166">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-167">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-167">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-168">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-168">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-169">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-169">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-170">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-170">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-171">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-171">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-172">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-172">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-173">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-173">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-174">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-174">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-175">ノードの型は、定義済みの加算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-175">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="62a30-176">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-176">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-177">ノードの型は、定義済みの加算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-177">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-178"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-178"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-179"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-179"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-180"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には加算演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-180"><paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-181">オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-181">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AddAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-182"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-182">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-183"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-183">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-184">オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-184">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-185"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-185">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-186">次のコード例では、整数型の変数に値を追加し、操作の結果を変数に代入する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-186">The following code example shows how to create an expression that adds a value to an integer variable and then assigns the result of the operation to the variable.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#18)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AddAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-187"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-187">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-188"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-188">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-189"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-189">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-190">オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-190">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-191"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-191">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member AddAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-192"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-192">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-193"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-193">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-194"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-194">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-195"><see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-195">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-196">オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-196">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-197"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-197">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-198">オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-198">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AddAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssignChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-199"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-199">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-200"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-200">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-201">オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-201">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-202"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-202">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AddAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssignChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-203"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-203">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-204"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-204">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-205"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-205">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-206">オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-206">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-207"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-207">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member AddAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssignChecked (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-208"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-208">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-209"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-209">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-210"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-210">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-211"><see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-211">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-212">オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-212">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-213"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-213">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-214">オーバーフロー チェックを行う算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-214">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AddChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-215"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-215">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-216"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-216">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-217">オーバーフロー チェックを行う算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-217">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-218"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-218">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-219">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-219">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-220"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-220">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-221">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-221">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-222">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-222">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-223"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-223">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-224">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-224">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-225">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-225">Implementing Method</span></span>  
 <span data-ttu-id="62a30-226">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-226">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-227">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、加算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-227">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-228">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-228">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-229">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-229">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-230">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-230">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-231">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-231">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-232">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-232">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-233">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-233">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-234">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-234">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-235">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-235">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-236">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-236">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-237">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-237">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-238">ノードの型は、定義済みの加算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-238">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="62a30-239">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-239">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-240">ノードの型は、定義済みの加算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-240">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-241"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-241"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-242">加算演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-242">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AddChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-243"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-243">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-244"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-244">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-245"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-245">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-246">オーバーフロー チェックを行う算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-246">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span></span> <span data-ttu-id="62a30-247">実装メソッドを指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-247">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-248"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-248">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-249">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-249">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-250"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-250">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-251">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-251">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-252">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-252">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-253"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-253">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-254">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-254">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-255">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-255">Implementing Method</span></span>  
 <span data-ttu-id="62a30-256">操作のメソッドの実装は、次の規則に基づいて選択されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-256">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="62a30-257">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-257">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-258">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、加算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-258">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-259">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-259">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-260">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-260">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-261">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-261">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-262">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-262">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-263">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-263">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-264">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-264">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-265">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-265">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-266">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-266">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-267">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-267">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-268">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-268">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-269">ノードの型は、定義済みの加算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-269">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="62a30-270">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-270">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-271">ノードの型は、定義済みの加算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-271">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-272"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-272"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-273"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-273"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-274"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には加算演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-274"><paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="And">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-275">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="AND" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-275">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ And(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member And : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.And (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-276"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-276">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-277"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-277">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-278">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="AND" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-278">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-279"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.And" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-279">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-280">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-280">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-281"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-281">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-282">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-282">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-283">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-283">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-284"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-284">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-285">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-285">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-286">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-286">Implementing Method</span></span>  
 <span data-ttu-id="62a30-287">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-287">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-288">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表します`AND`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-288">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-289">の場合`left`します。型と`right`します。型は整数またはブール値の型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-289">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-290">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-290">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-291">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-291">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-292">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-292">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-293">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-293">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-294">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-294">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-295">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-295">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-296">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-296">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-297">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-297">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-298">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-298">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-299">ノードの型は、結果の型、定義済みのビットごと`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-299">The type of the node is the result type of the predefined bitwise `AND` operator.</span></span>  
  
-   <span data-ttu-id="62a30-300">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-300">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-301">ノードの型は、結果の型、定義済みのビットごとに対応する null 許容型`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-301">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-302">次のコード例では、2 つのブール値で論理 AND 演算を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-302">The following code example shows how to create an expression that represents a logical AND operation on two Boolean values.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#2)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-303"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-303"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-304">ビットごとの <see langword="AND" /> 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-304">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ And(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member And : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.And (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-305"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-305">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-306"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-306">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-307"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-307">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-308">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="AND" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-308">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span></span> <span data-ttu-id="62a30-309">実装メソッドを指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-309">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-310"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.And" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-310">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-311">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-311">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-312"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-312">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-313">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-313">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-314">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-314">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-315"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-315">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-316">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-316">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-317">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-317">Implementing Method</span></span>  
 <span data-ttu-id="62a30-318">操作のメソッドの実装は、次の規則に基づいて選択されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-318">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="62a30-319">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-319">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-320">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表します`AND`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-320">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-321">の場合`left`します。型と`right`します。型は整数またはブール値の型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-321">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-322">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-322">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-323">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-323">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-324">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-324">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-325">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-325">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-326">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-326">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-327">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-327">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-328">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-328">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-329">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-329">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-330">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-330">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-331">ノードの型は、結果の型、定義済みのビットごと`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-331">The type of the node is the result type of the predefined bitwise `AND` operator.</span></span>  
  
-   <span data-ttu-id="62a30-332">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-332">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-333">ノードの型は、結果の型、定義済みのビットごとに対応する null 許容型`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-333">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-334"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-334"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-335"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-335"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-336"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type にはビット処理 <see langword="AND" /> 演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-336"><paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AndAlso">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-337">1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="AND" /> 演算を表す <see langword="true" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-337">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlso (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAlso(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AndAlso : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAlso (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-338"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-338">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-339"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-339">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-340">1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="AND" /> 演算を表す <see langword="true" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-340">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-341"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-341">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-342">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-342">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-343"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-343">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-344">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-344">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-345">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-345">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-346"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-346">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-347">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-347">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-348">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-348">Implementing Method</span></span>  
 <span data-ttu-id="62a30-349">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-349">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-350">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表します`AND`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-350">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="62a30-351">条件付き`AND`c# または Visual Basic の演算子をオーバー ロードできません。</span><span class="sxs-lookup"><span data-stu-id="62a30-351">The conditional `AND` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="62a30-352">ただし、条件付き`AND`演算子はビット演算を使用して評価`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-352">However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator.</span></span> <span data-ttu-id="62a30-353">そのため、ユーザー定義のオーバー ロードをビットごとの`AND`演算子は、このノード型のメソッドの実装を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-353">Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="62a30-354">の場合`left`します。型と`right`します。型がブール型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-354">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-355">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-355">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-356">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-356">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-357">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-357">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-358">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-358">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-359">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-359">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-360">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-360">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-361">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-361">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-362">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-362">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-363">`left`.型と`right`します。種類は、同じブール型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-363">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="62a30-364">場合`left`します。型と`right`します。型が null 非許容には、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-364">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-365">ノードの型は、定義済みの条件式の結果型`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-365">The type of the node is the result type of the predefined conditional `AND` operator.</span></span>  
  
-   <span data-ttu-id="62a30-366">場合`left`します。型と`right`します。型が null 許容には、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-366">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-367">ノードの型は、定義済みの条件式の結果型に対応する null 許容型`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-367">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-368">次のコード例では、式を作成するを論理を実行し、場合にのみ、その 2 つのオペランドに対する操作に最初のオペランドが評価する方法を示しています。`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-368">The following code example shows how to create an expression that performs a logical AND operation on its two operands only if the first operand evaluates to `true`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#19)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-369"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-369"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-370">ビットごとの <see langword="AND" /> 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-370">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="62a30-371">または</span><span class="sxs-lookup"><span data-stu-id="62a30-371">-or-</span></span> 
 <span data-ttu-id="62a30-372"><paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-372"><paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlso (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAlso(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AndAlso : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAlso (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-373"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-373">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-374"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-374">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-375"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-375">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-376">1 番目のオペランドが true に解決された場合にのみ 2 番目のオペランドを評価する条件付き <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="AND" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-376">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand is resolved to true.</span></span> <span data-ttu-id="62a30-377">実装メソッドを指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-377">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-378"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-378">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-379">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-379">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-380"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-380">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-381">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-381">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-382">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-382">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-383"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-383">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-384">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-384">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-385">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-385">Implementing Method</span></span>  
 <span data-ttu-id="62a30-386">操作のメソッドの実装は、次の規則に基づいて選択されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-386">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="62a30-387">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-387">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-388">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表します`AND`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-388">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="62a30-389">条件付き`AND`c# または Visual Basic の演算子をオーバー ロードできません。</span><span class="sxs-lookup"><span data-stu-id="62a30-389">The conditional `AND` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="62a30-390">ただし、条件付き`AND`演算子はビット演算を使用して評価`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-390">However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator.</span></span> <span data-ttu-id="62a30-391">そのため、ユーザー定義のオーバー ロードをビットごとの`AND`演算子は、このノード型のメソッドの実装を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-391">Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="62a30-392">の場合`left`します。型と`right`します。型がブール型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-392">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-393">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-393">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-394">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-394">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-395">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-395">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-396">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-396">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-397">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-397">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-398">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-398">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-399">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-399">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-400">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-400">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-401">`left`.型と`right`します。種類は、同じブール型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-401">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="62a30-402">場合`left`します。型と`right`します。型が null 非許容には、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-402">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-403">ノードの型は、定義済みの条件式の結果型`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-403">The type of the node is the result type of the predefined conditional `AND` operator.</span></span>  
  
-   <span data-ttu-id="62a30-404">場合`left`します。型と`right`します。型が null 許容には、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-404">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-405">ノードの型は、定義済みの条件式の結果型に対応する null 許容型`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-405">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-406"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-406"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-407"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-407"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-408"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type にはビット処理 <see langword="AND" /> 演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-408"><paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="62a30-409">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-409">-or-</span></span> 
 <span data-ttu-id="62a30-410"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-410"><paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AndAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-411">ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-411">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AndAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-412"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-412">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-413"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-413">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-414">ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-414">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-415"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-415">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AndAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-416"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-416">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-417"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-417">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-418"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-418">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-419">ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-419">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-420"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-420">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member AndAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-421"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-421">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-422"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-422">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-423"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-423">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-424"><see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-424">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-425">ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-425">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-426"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-426">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrayAccess">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-427">配列にアクセスするための <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-427">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayAccess (array As Expression, indexes As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ ArrayAccess(System::Linq::Expressions::Expression ^ array, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayAccess : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.ArrayAccess (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="62a30-428">多次元配列を表す式。</span><span class="sxs-lookup"><span data-stu-id="62a30-428">An expression that represents the multidimensional array.</span></span></param>
        <param name="indexes"><span data-ttu-id="62a30-429">配列のインデックス化に使用する式を格納している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-429">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing expressions used to index the array.</span></span></param>
        <summary><span data-ttu-id="62a30-430">多次元配列にアクセスするための <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-430">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access a multidimensional array.</span></span></summary>
        <returns><span data-ttu-id="62a30-431">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-431">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-432">使用して配列を表す式を取得できます、<xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A>メソッド、または<xref:System.Linq.Expressions.Expression.NewArrayBounds%2A>または<xref:System.Linq.Expressions.Expression.NewArrayInit%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-432">The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-433">次のコード例を使用して多次元配列内の要素の値を変更する方法を示しています、`ArrayAccess`メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-433">The following code example shows how to change the value of an element in a multidimensional array by using the `ArrayAccess` method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#21)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayAccess (array As Expression, ParamArray indexes As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ ArrayAccess(System::Linq::Expressions::Expression ^ array, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayAccess : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.ArrayAccess (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="62a30-434">インデックス化する配列を表す式。</span><span class="sxs-lookup"><span data-stu-id="62a30-434">An expression representing the array to index.</span></span></param>
        <param name="indexes"><span data-ttu-id="62a30-435">配列のインデックス化に使用する式を格納している配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-435">An array that contains expressions used to index the array.</span></span></param>
        <summary><span data-ttu-id="62a30-436">配列にアクセスするための <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-436">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</span></span></summary>
        <returns><span data-ttu-id="62a30-437">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-437">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-438">使用して配列を表す式を取得できます、<xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A>メソッド、または<xref:System.Linq.Expressions.Expression.NewArrayBounds%2A>または<xref:System.Linq.Expressions.Expression.NewArrayInit%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-438">The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span></span>  
  
 <span data-ttu-id="62a30-439">多次元配列は、使用、<xref:System.Linq.Expressions.Expression.ArrayAccess%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-439">For multidimensional arrays, use the <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-440">次のコード例を使用して配列要素の値を変更する方法を示しています、`ArrayAccess`メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-440">The following code example shows how to change a value of an array element by using the `ArrayAccess` method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#20)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrayIndex">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-441">配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.Expression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-441">Creates an <see cref="T:System.Linq.Expressions.Expression" /> that represents applying an array index operator.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, indexes As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayIndex : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.ArrayIndex (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="62a30-442"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-442">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to.</span></span></param>
        <param name="indexes"><span data-ttu-id="62a30-443"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-443">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-444">ランクが 1 より大きい配列への配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-444">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to an array of rank more than one.</span></span></summary>
        <returns><span data-ttu-id="62a30-445"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-445">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-446">各要素`indexes`あります<xref:System.Linq.Expressions.Expression.Type%2A>等しく<xref:System.Int32>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-446">Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>.</span></span> <span data-ttu-id="62a30-447"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`array`ランクがの要素の数と一致する、配列型を表す必要があります`indexes`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-447">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.</span></span>  
  
 <span data-ttu-id="62a30-448">場合のランク`array`します。このメソッドが戻る型が 1 の場合、<xref:System.Linq.Expressions.BinaryExpression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-448">If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="62a30-449"><xref:System.Linq.Expressions.BinaryExpression.Left%2A>プロパティに設定されて`array`と<xref:System.Linq.Expressions.BinaryExpression.Right%2A>プロパティの 1 つの要素に設定されて`indexes`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-449">The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`.</span></span> <span data-ttu-id="62a30-450"><xref:System.Linq.Expressions.Expression.Type%2A>のプロパティ、<xref:System.Linq.Expressions.BinaryExpression>の要素の型を表す`array`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-450">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.</span></span>  
  
 <span data-ttu-id="62a30-451">場合のランク`array`します。このメソッドが戻る型が 1 つ以上の場合、<xref:System.Linq.Expressions.MethodCallExpression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-451">If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>.</span></span> <span data-ttu-id="62a30-452"><xref:System.Linq.Expressions.MethodCallExpression.Method%2A>プロパティに設定されて、<xref:System.Reflection.MethodInfo>パブリック インスタンス メソッドを記述する`Get`によって表される型で、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`array`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-452">The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-453">次の例では、使用する方法、<xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29>を作成する方法、 <xref:System.Linq.Expressions.MethodCallExpression> 2 次元配列にインデックスを表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-453">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-454"><paramref name="array" /> または <paramref name="indexes" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-454"><paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-455"><paramref name="array" />.Type は配列型を表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-455"><paramref name="array" />.Type does not represent an array type.</span></span>  
  
<span data-ttu-id="62a30-456">または</span><span class="sxs-lookup"><span data-stu-id="62a30-456">-or-</span></span> 
<span data-ttu-id="62a30-457"><paramref name="array" />.Type のランクは、<paramref name="indexes" /> の要素の数と一致しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-457">The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.</span></span>  
  
<span data-ttu-id="62a30-458">または</span><span class="sxs-lookup"><span data-stu-id="62a30-458">-or-</span></span> 
<span data-ttu-id="62a30-459"><paramref name="indexes" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<see cref="T:System.Int32" /> 型を表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-459">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, index As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, System::Linq::Expressions::Expression ^ index);" />
      <MemberSignature Language="F#" Value="static member ArrayIndex : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ArrayIndex (array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="index" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="62a30-460"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-460">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="index"><span data-ttu-id="62a30-461"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-461">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-462">ランク 1 の配列への配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-462">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents applying an array index operator to an array of rank one.</span></span></summary>
        <returns><span data-ttu-id="62a30-463"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-463">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-464">`index` 型のインデックスを表す必要があります<xref:System.Int32>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-464">`index` must represent an index of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="62a30-465"><xref:System.Linq.Expressions.BinaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.BinaryExpression>は`null`、両方と<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>に設定されている`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-465">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null`, and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span> <span data-ttu-id="62a30-466"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが要素の型と等しい`array`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-466">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the element type of `array`.Type.</span></span> <span data-ttu-id="62a30-467"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-467">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-468"><paramref name="array" /> または <paramref name="index" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-468"><paramref name="array" /> or <paramref name="index" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-469"><paramref name="array" />.Type は配列型を表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-469"><paramref name="array" />.Type does not represent an array type.</span></span>  
  
<span data-ttu-id="62a30-470">または</span><span class="sxs-lookup"><span data-stu-id="62a30-470">-or-</span></span> 
 <span data-ttu-id="62a30-471"><paramref name="array" />.Type は、ランクが 1 ではない配列型を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-471"><paramref name="array" />.Type represents an array type whose rank is not 1.</span></span>  
  
<span data-ttu-id="62a30-472">または</span><span class="sxs-lookup"><span data-stu-id="62a30-472">-or-</span></span> 
 <span data-ttu-id="62a30-473"><paramref name="index" />.Type は、<see cref="T:System.Int32" /> 型を表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-473"><paramref name="index" />.Type does not represent the <see cref="T:System.Int32" /> type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, ParamArray indexes As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayIndex : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.ArrayIndex (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="62a30-474"><see cref="T:System.Linq.Expressions.Expression" /> のインスタンスの配列 (配列のインデックス操作のインデックス)。</span><span class="sxs-lookup"><span data-stu-id="62a30-474">An array of <see cref="T:System.Linq.Expressions.Expression" /> instances - indexes for the array index operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="62a30-475"><see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-475">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-476">多次元配列への配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-476">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to a multidimensional array.</span></span></summary>
        <returns><span data-ttu-id="62a30-477"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-477">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-478">各要素`indexes`あります<xref:System.Linq.Expressions.Expression.Type%2A>等しく<xref:System.Int32>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-478">Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>.</span></span> <span data-ttu-id="62a30-479"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`array`ランクがの要素の数と一致する、配列型を表す必要があります`indexes`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-479">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.</span></span>  
  
 <span data-ttu-id="62a30-480">場合のランク`array`します。このメソッドが戻る型が 1 の場合、<xref:System.Linq.Expressions.BinaryExpression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-480">If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="62a30-481"><xref:System.Linq.Expressions.BinaryExpression.Left%2A>プロパティに設定されて`array`と<xref:System.Linq.Expressions.BinaryExpression.Right%2A>プロパティの 1 つの要素に設定されて`indexes`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-481">The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`.</span></span> <span data-ttu-id="62a30-482"><xref:System.Linq.Expressions.Expression.Type%2A>のプロパティ、<xref:System.Linq.Expressions.BinaryExpression>の要素の型を表す`array`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-482">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.</span></span>  
  
 <span data-ttu-id="62a30-483">場合のランク`array`します。このメソッドが戻る型が 1 つ以上の場合、<xref:System.Linq.Expressions.MethodCallExpression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-483">If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>.</span></span> <span data-ttu-id="62a30-484"><xref:System.Linq.Expressions.MethodCallExpression.Method%2A>プロパティに設定されて、<xref:System.Reflection.MethodInfo>パブリック インスタンス メソッドを記述する`Get`によって表される型で、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`array`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-484">The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-485">次の例では、使用する方法、<xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29>を作成する方法、 <xref:System.Linq.Expressions.MethodCallExpression> 2 次元配列にインデックスを表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-485">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-486"><paramref name="array" /> または <paramref name="indexes" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-486"><paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-487"><paramref name="array" />.Type は配列型を表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-487"><paramref name="array" />.Type does not represent an array type.</span></span>  
  
<span data-ttu-id="62a30-488">または</span><span class="sxs-lookup"><span data-stu-id="62a30-488">-or-</span></span> 
<span data-ttu-id="62a30-489"><paramref name="array" />.Type のランクは、<paramref name="indexes" /> の要素の数と一致しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-489">The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.</span></span>  
  
<span data-ttu-id="62a30-490">または</span><span class="sxs-lookup"><span data-stu-id="62a30-490">-or-</span></span> 
<span data-ttu-id="62a30-491"><paramref name="indexes" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<see cref="T:System.Int32" /> 型を表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-491">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayLength">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ArrayLength (System.Linq.Expressions.Expression array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ArrayLength(class System.Linq.Expressions.Expression array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayLength (array As Expression) As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ArrayLength(System::Linq::Expressions::Expression ^ array);" />
      <MemberSignature Language="F#" Value="static member ArrayLength : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.ArrayLength array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="62a30-492"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-492">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-493">1 次元配列の長さを取得する式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-493">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression for obtaining the length of a one-dimensional array.</span></span></summary>
        <returns><span data-ttu-id="62a30-494"><see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> と等しい <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <paramref name="array" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-494">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to <paramref name="array" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-495"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`array`配列型を表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-495">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type.</span></span>  
  
 <span data-ttu-id="62a30-496"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>と等しい<xref:System.Int32>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-496">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is equal to <xref:System.Int32>.</span></span> <span data-ttu-id="62a30-497"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>プロパティは`null`、両方と<xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A>に設定されている`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-497">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`, and both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-498"><paramref name="array" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-498"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-499"><paramref name="array" />.Type は配列型を表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-499"><paramref name="array" />.Type does not represent an array type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Assign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Assign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Assign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Assign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Assign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Assign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Assign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-500"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-500">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-501"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-501">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-502">代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-502">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-503"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-503">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-504">`Assign`式は、値の型の値をコピーし、参照型への参照をコピーします。</span><span class="sxs-lookup"><span data-stu-id="62a30-504">The `Assign` expression copies a value for value types, and it copies a reference for reference types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-505">次のコード例では、代入演算を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-505">The following code example shows how to create an expression that represents an assignment operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#12)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Bind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-506">メンバーの初期化を表す <see cref="T:System.Linq.Expressions.MemberAssignment" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-506">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberAssignment ^ Bind(System::Reflection::MemberInfo ^ member, System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Bind : System.Reflection.MemberInfo * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MemberAssignment" Usage="System.Linq.Expressions.Expression.Bind (member, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="62a30-507"><see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-507">A <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span></span></param>
        <param name="expression"><span data-ttu-id="62a30-508"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-508">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-509">フィールドまたはプロパティの初期化を表す <see cref="T:System.Linq.Expressions.MemberAssignment" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-509">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a field or property.</span></span></summary>
        <returns><span data-ttu-id="62a30-510"><see cref="T:System.Linq.Expressions.MemberAssignment" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-510">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-511"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`expression`によって表される型に代入する必要があります、<xref:System.Reflection.FieldInfo.FieldType%2A>または<xref:System.Reflection.PropertyInfo.PropertyType%2A>プロパティの`member`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-511">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.FieldInfo.FieldType%2A> or <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of `member`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-512"><paramref name="member" /> または <paramref name="expression" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-512"><paramref name="member" /> or <paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-513"><paramref name="member" /> は、フィールドまたはプロパティを表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-513"><paramref name="member" /> does not represent a field or property.</span></span>  
  
<span data-ttu-id="62a30-514">または</span><span class="sxs-lookup"><span data-stu-id="62a30-514">-or-</span></span> 
<span data-ttu-id="62a30-515"><paramref name="member" /> によって表されるプロパティに <see langword="set" /> アクセサーが含まれません。</span><span class="sxs-lookup"><span data-stu-id="62a30-515">The property represented by <paramref name="member" /> does not have a <see langword="set" /> accessor.</span></span>  
  
<span data-ttu-id="62a30-516">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-516">-or-</span></span> 
 <span data-ttu-id="62a30-517"><paramref name="expression" />.Type は、<paramref name="member" /> を表すフィールドまたはプロパティの型に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-517"><paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberAssignment ^ Bind(System::Reflection::MethodInfo ^ propertyAccessor, System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Bind : System.Reflection.MethodInfo * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MemberAssignment" Usage="System.Linq.Expressions.Expression.Bind (propertyAccessor, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor"><span data-ttu-id="62a30-518">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-518">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <param name="expression"><span data-ttu-id="62a30-519"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-519">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-520">プロパティ アクセサー メソッドを使用したメンバーの初期化を表す <see cref="T:System.Linq.Expressions.MemberAssignment" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-520">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member by using a property accessor method.</span></span></summary>
        <returns><span data-ttu-id="62a30-521"><see cref="T:System.Linq.Expressions.MemberAssignment" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティ、<paramref name="propertyAccessor" /> に設定された <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> を含む <paramref name="expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-521">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property set to <paramref name="expression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-522"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`expression`によって表される型に代入する必要があります、<xref:System.Reflection.PropertyInfo.PropertyType%2A>プロパティでアクセスされるプロパティの`propertyAccessor`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-522">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the property accessed in `propertyAccessor`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-523"><paramref name="propertyAccessor" /> または <paramref name="expression" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-523"><paramref name="propertyAccessor" /> or <paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-524"><paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-524"><paramref name="propertyAccessor" /> does not represent a property accessor method.</span></span>  
  
<span data-ttu-id="62a30-525">または</span><span class="sxs-lookup"><span data-stu-id="62a30-525">-or-</span></span> 
<span data-ttu-id="62a30-526"><paramref name="propertyAccessor" /> によってアクセスされるプロパティは <see langword="set" /> アクセサーを持っていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-526">The property accessed by <paramref name="propertyAccessor" /> does not have a <see langword="set" /> accessor.</span></span>  
  
<span data-ttu-id="62a30-527">または</span><span class="sxs-lookup"><span data-stu-id="62a30-527">-or-</span></span> 
 <span data-ttu-id="62a30-528"><paramref name="expression" />.Type は、<paramref name="member" /> を表すフィールドまたはプロパティの型に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-528"><paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Block">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-529"><see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-529">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (expressions As IEnumerable(Of Expression)) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block expressions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expressions"><span data-ttu-id="62a30-530">ブロック内の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-530">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="62a30-531">指定された式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-531">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="62a30-532">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-532">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-533">ブロック式が実行されたときに、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-533">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (ParamArray expressions As Expression()) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block expressions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expressions"><span data-ttu-id="62a30-534">ブロック内の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-534">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="62a30-535">指定された式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-535">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="62a30-536">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-536">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-537">ブロック式が実行されたときに、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-537">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-538">次のコード例では、ブロック式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-538">The following code example shows how to create a block expression.</span></span> <span data-ttu-id="62a30-539">ブロック式から成る 2 つ<xref:System.Linq.Expressions.MethodCallExpression>オブジェクトと 1 つ<xref:System.Linq.Expressions.ConstantExpression>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-539">The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (variables As IEnumerable(Of ParameterExpression), expressions As IEnumerable(Of Expression)) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;System.Linq.Expressions.ParameterExpression&gt; * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables"><span data-ttu-id="62a30-540">ブロック内の変数。</span><span class="sxs-lookup"><span data-stu-id="62a30-540">The variables in the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="62a30-541">ブロック内の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-541">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="62a30-542">指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-542">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span></span></summary>
        <returns><span data-ttu-id="62a30-543">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-543">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-544">ブロック式が実行されたときに、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-544">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-545">次のコード例では、ブロック式にパラメーターを渡すし、ブロック内では、このパラメーターを処理する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-545">The following code example shows how to pass a parameter to a block expression and process this parameter within a block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#14)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (variables As IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;System.Linq.Expressions.ParameterExpression&gt; * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables"><span data-ttu-id="62a30-546">ブロック内の変数。</span><span class="sxs-lookup"><span data-stu-id="62a30-546">The variables in the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="62a30-547">ブロック内の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-547">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="62a30-548">指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-548">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span></span></summary>
        <returns><span data-ttu-id="62a30-549">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-549">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-550">ブロック式が実行されたときに、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-550">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="62a30-551">ブロック内の 1 つ目の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-551">The first expression in the block.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-552">ブロック内の 2 つ目の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-552">The second expression in the block.</span></span></param>
        <summary><span data-ttu-id="62a30-553">2 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-553">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains two expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="62a30-554">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-554">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-555">ブロック式が実行されたときに、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-555">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-556">ブロックの結果の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-556">The result type of the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="62a30-557">ブロック内の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-557">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="62a30-558">指定された式を含み、変数を含まず、特定の結果の型を持つ <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-558">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</span></span></summary>
        <returns><span data-ttu-id="62a30-559">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-559">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-560">ブロックの結果の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-560">The result type of the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="62a30-561">ブロック内の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-561">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="62a30-562">指定された式を含み、変数を含まず、特定の結果の型を持つ <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-562">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</span></span></summary>
        <returns><span data-ttu-id="62a30-563">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-563">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="62a30-564">ブロック内の 1 つ目の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-564">The first expression in the block.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-565">ブロック内の 2 つ目の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-565">The second expression in the block.</span></span></param>
        <param name="arg2"><span data-ttu-id="62a30-566">ブロック内の 3 つ目の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-566">The third expression in the block.</span></span></param>
        <summary><span data-ttu-id="62a30-567">3 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-567">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains three expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="62a30-568">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-568">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-569">ブロック式が実行されたときに、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-569">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * seq&lt;System.Linq.Expressions.ParameterExpression&gt; * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-570">ブロックの結果の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-570">The result type of the block.</span></span></param>
        <param name="variables"><span data-ttu-id="62a30-571">ブロック内の変数。</span><span class="sxs-lookup"><span data-stu-id="62a30-571">The variables in the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="62a30-572">ブロック内の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-572">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="62a30-573">指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-573">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span></span></summary>
        <returns><span data-ttu-id="62a30-574">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-574">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * seq&lt;System.Linq.Expressions.ParameterExpression&gt; * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-575">ブロックの結果の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-575">The result type of the block.</span></span></param>
        <param name="variables"><span data-ttu-id="62a30-576">ブロック内の変数。</span><span class="sxs-lookup"><span data-stu-id="62a30-576">The variables in the block.</span></span></param>
        <param name="expressions"><span data-ttu-id="62a30-577">ブロック内の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-577">The expressions in the block.</span></span></param>
        <summary><span data-ttu-id="62a30-578">指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-578">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span></span></summary>
        <returns><span data-ttu-id="62a30-579">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-579">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="62a30-580">ブロック内の 1 つ目の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-580">The first expression in the block.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-581">ブロック内の 2 つ目の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-581">The second expression in the block.</span></span></param>
        <param name="arg2"><span data-ttu-id="62a30-582">ブロック内の 3 つ目の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-582">The third expression in the block.</span></span></param>
        <param name="arg3"><span data-ttu-id="62a30-583">ブロック内の 4 つ目の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-583">The fourth expression in the block.</span></span></param>
        <summary><span data-ttu-id="62a30-584">4 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-584">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains four expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="62a30-585">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-585">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-586">ブロック式が実行されたときに、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-586">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3, System::Linq::Expressions::Expression ^ arg4);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1, arg2, arg3, arg4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="62a30-587">ブロック内の 1 つ目の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-587">The first expression in the block.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-588">ブロック内の 2 つ目の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-588">The second expression in the block.</span></span></param>
        <param name="arg2"><span data-ttu-id="62a30-589">ブロック内の 3 つ目の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-589">The third expression in the block.</span></span></param>
        <param name="arg3"><span data-ttu-id="62a30-590">ブロック内の 4 つ目の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-590">The fourth expression in the block.</span></span></param>
        <param name="arg4"><span data-ttu-id="62a30-591">ブロック内の 5 つ目の式。</span><span class="sxs-lookup"><span data-stu-id="62a30-591">The fifth expression in the block.</span></span></param>
        <summary><span data-ttu-id="62a30-592">5 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-592">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains five expressions and has no variables.</span></span></summary>
        <returns><span data-ttu-id="62a30-593">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-593">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-594">ブロック式が実行されたときに、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-594">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Break">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-595">break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-595">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Break (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-596"><see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-596">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <summary><span data-ttu-id="62a30-597">break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-597">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span></span></summary>
        <returns><span data-ttu-id="62a30-598">Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="target" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-598">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-599">次の例を含む式を作成する方法を示します、<xref:System.Linq.Expressions.LoopExpression>を使用するオブジェクト、<xref:System.Linq.Expressions.Expression.Break%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-599">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LoopExpression> object that uses the <xref:System.Linq.Expressions.Expression.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Break (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-600"><see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-600">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="62a30-601">ジャンプ時に関連付けられているラベルに渡される値。</span><span class="sxs-lookup"><span data-stu-id="62a30-601">The value that will be passed to the associated label upon jumping.</span></span></param>
        <summary><span data-ttu-id="62a30-602">break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-602">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span></span> <span data-ttu-id="62a30-603">ジャンプ時にラベルに渡す値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-603">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-604">Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="target" /> を含む <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-604">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-605"><see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-605">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-606"><see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-606">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-607">型を指定して、break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-607">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</span></span></summary>
        <returns><span data-ttu-id="62a30-608">Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、および <paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <paramref name="type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-608">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break (target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-609"><see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-609">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="62a30-610">ジャンプ時に関連付けられているラベルに渡される値。</span><span class="sxs-lookup"><span data-stu-id="62a30-610">The value that will be passed to the associated label upon jumping.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-611"><see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-611">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-612">型を指定して、break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-612">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</span></span> <span data-ttu-id="62a30-613">ジャンプ時にラベルに渡す値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-613">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-614">Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-614">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Call">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-615"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-615">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="62a30-616">インスタンス メソッドの呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。<see langword="null" /> (Visual Basic では <see langword="static" />) メソッドに <see langword="Shared" /> を渡します。</span><span class="sxs-lookup"><span data-stu-id="62a30-616">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span></span></param>
        <param name="method"><span data-ttu-id="62a30-617"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-617">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-618">引数を受け取らないメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-618">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes no arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-619"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-619">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-620">呼び出しを表す、 `static` (`Shared` Visual Basic で) メソッドを渡します`null`の`instance`パラメーターがこのメソッドを呼び出すとします。</span><span class="sxs-lookup"><span data-stu-id="62a30-620">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method.</span></span>  
  
 <span data-ttu-id="62a30-621">場合`method`インスタンス メソッドを表す、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`instance`によって表されるメソッドの宣言型に代入する必要があります`method`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-621">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="62a30-622"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A>プロパティ<xref:System.Linq.Expressions.MethodCallExpression>が空です。</span><span class="sxs-lookup"><span data-stu-id="62a30-622">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty.</span></span> <span data-ttu-id="62a30-623"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティがによって表されるメソッドの戻り値の型と等しい`method`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-623">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the return type of the method represented by `method`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-624">次のコード例では、引数なしのメソッドを呼び出す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-624">The following code example shows how to create an expression that calls a method without arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#15)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-625"><paramref name="method" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-625"><paramref name="method" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-626">または</span><span class="sxs-lookup"><span data-stu-id="62a30-626">-or-</span></span> 
 <span data-ttu-id="62a30-627"><paramref name="instance" /> は <see langword="null" /> で、<paramref name="method" /> はインスタンス メソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-627"><paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-628"><paramref name="instance" />.Type は、<paramref name="method" /> の表すメソッドの宣言型に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-628"><paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="62a30-629">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-629">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-630">呼び出しの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> のコレクション。</span><span class="sxs-lookup"><span data-stu-id="62a30-630">A collection of <see cref="T:System.Linq.Expressions.Expression" /> that represents the call arguments.</span></span></param>
        <summary><span data-ttu-id="62a30-631">static (Visual Basic では Shared) メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-631">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method.</span></span></summary>
        <returns><span data-ttu-id="62a30-632"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-632">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="62a30-633"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-633">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arg0"><span data-ttu-id="62a30-634">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-634">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <summary><span data-ttu-id="62a30-635">1 つの引数を受け取る <see cref="T:System.Linq.Expressions.MethodCallExpression" /> (Visual Basic では <see langword="static" />) メソッドへの呼び出しを表す <see langword="Shared" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-635">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that takes one argument.</span></span></summary>
        <returns><span data-ttu-id="62a30-636"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-636">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-637">次の例を呼び出す式を作成する方法、 `static` (`Shared` Visual basic) を 1 つの引数を受け取るメソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-637">The following example demonstrates how to create an expression that calls a `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#16)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-638"><paramref name="method" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="62a30-638"><paramref name="method" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="62a30-639"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see langword="static" /> (Visual Basic では <see langword="Shared" />) メソッドを表す <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-639">A <see cref="T:System.Reflection.MethodInfo" /> that represents a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-640"><see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-640">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-641">引数を持つ <see langword="static" /> (Visual Basic では <see langword="Shared" />) メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-641">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that has arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-642"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-642">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-643">場合`arguments`ない`null`、によって表されるメソッドのパラメーターの数と同じ数の要素があります`method`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-643">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="62a30-644">内の各要素`arguments`必要があります`null`の対応するパラメーターに割り当てることである必要があります`method`、場合によっては、後*を引用符で囲む*します。</span><span class="sxs-lookup"><span data-stu-id="62a30-644">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a30-645">要素は、対応するメソッドのパラメーターが型の場合にのみクォートは<xref:System.Linq.Expressions.Expression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-645">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="62a30-646">要素にラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="62a30-646">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="62a30-647">見つかったノードが、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-647">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="62a30-648"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A>プロパティ<xref:System.Linq.Expressions.MethodCallExpression>空場合`arguments`は`null`。</span><span class="sxs-lookup"><span data-stu-id="62a30-648">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="62a30-649">それ以外の場合と同じ要素が含まれている`arguments`、一部の引用符で囲まれたする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-649">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="62a30-650"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.MethodCallExpression>はによって表されるメソッドの戻り値の型と等しく`method`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-650">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span> <span data-ttu-id="62a30-651"><xref:System.Linq.Expressions.MethodCallExpression.Object%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-651">The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-652"><paramref name="method" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-652"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-653"><paramref name="arguments" /> の要素の数が、<paramref name="method" /> の表すメソッドのパラメーターの数と一致しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-653">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="62a30-654">または</span><span class="sxs-lookup"><span data-stu-id="62a30-654">-or-</span></span> 
<span data-ttu-id="62a30-655"><paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> の表すメソッドの対応するパラメーターに割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-655">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="62a30-656"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> (<see langword="null" /> (Visual Basic では <see langword="static" />) メソッドに <see langword="Shared" /> を渡します)。</span><span class="sxs-lookup"><span data-stu-id="62a30-656">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span></span></param>
        <param name="method"><span data-ttu-id="62a30-657"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-657">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-658"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-658">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-659">引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-659">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-660"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、および <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-660">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-661">呼び出しを表す、 `static` (`Shared` Visual Basic で) メソッドを渡します`null`の`instance`パラメーターが、このメソッドを呼び出すときに呼び出したり<xref:System.Linq.Expressions.Expression.Call%2A>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="62a30-661">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.</span></span>  
  
 <span data-ttu-id="62a30-662">場合`method`インスタンス メソッドを表す、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`instance`によって表されるメソッドの宣言型に代入する必要があります`method`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-662">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="62a30-663">場合`arguments`ない`null`、によって表されるメソッドのパラメーターの数と同じ数の要素があります`method`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-663">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="62a30-664">内の各要素`arguments`必要があります`null`の対応するパラメーターに割り当てることである必要があります`method`、場合によっては、後*を引用符で囲む*します。</span><span class="sxs-lookup"><span data-stu-id="62a30-664">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a30-665">要素は、対応するメソッドのパラメーターが型の場合にのみクォートは<xref:System.Linq.Expressions.Expression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-665">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="62a30-666">要素にラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="62a30-666">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="62a30-667">見つかったノードが、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-667">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="62a30-668"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A>プロパティ<xref:System.Linq.Expressions.MethodCallExpression>空場合`arguments`は`null`。</span><span class="sxs-lookup"><span data-stu-id="62a30-668">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="62a30-669">それ以外の場合と同じ要素が含まれている`arguments`、一部の引用符で囲まれたする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-669">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="62a30-670"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.MethodCallExpression>はによって表されるメソッドの戻り値の型と等しく`method`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-670">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-671"><paramref name="method" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-671"><paramref name="method" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-672">または</span><span class="sxs-lookup"><span data-stu-id="62a30-672">-or-</span></span> 
 <span data-ttu-id="62a30-673"><paramref name="instance" /> は <see langword="null" /> で、<paramref name="method" /> はインスタンス メソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-673"><paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-674"><paramref name="instance" />.Type は、<paramref name="method" /> の表すメソッドの宣言型に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-674"><paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="62a30-675">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-675">-or-</span></span> 
<span data-ttu-id="62a30-676"><paramref name="arguments" /> の要素の数が、<paramref name="method" /> の表すメソッドのパラメーターの数と一致しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-676">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="62a30-677">または</span><span class="sxs-lookup"><span data-stu-id="62a30-677">-or-</span></span> 
<span data-ttu-id="62a30-678"><paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> の表すメソッドの対応するパラメーターに割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-678">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="62a30-679">インスタンス メソッドの呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。<see langword="null" /> (Visual Basic では <see langword="static" />) メソッドに <see langword="Shared" /> を渡します。</span><span class="sxs-lookup"><span data-stu-id="62a30-679">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span></span></param>
        <param name="method"><span data-ttu-id="62a30-680"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-680">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-681"><see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-681">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-682">引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-682">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-683"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、および <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-683">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-684">呼び出しを表す、 `static` (`Shared` Visual Basic で) メソッドを渡します`null`の`instance`パラメーターが、このメソッドを呼び出すときに呼び出したり<xref:System.Linq.Expressions.Expression.Call%2A>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="62a30-684">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.</span></span>  
  
 <span data-ttu-id="62a30-685">場合`method`インスタンス メソッドを表す、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`instance`によって表されるメソッドの宣言型に代入する必要があります`method`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-685">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="62a30-686">場合`arguments`ない`null`、によって表されるメソッドのパラメーターの数と同じ数の要素があります`method`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-686">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="62a30-687">内の各要素`arguments`必要があります`null`の対応するパラメーターに割り当てることである必要があります`method`、場合によっては、後*を引用符で囲む*します。</span><span class="sxs-lookup"><span data-stu-id="62a30-687">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a30-688">要素は、対応するメソッドのパラメーターが型の場合にのみクォートは<xref:System.Linq.Expressions.Expression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-688">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="62a30-689">要素にラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="62a30-689">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="62a30-690">見つかったノードが、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-690">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="62a30-691"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A>プロパティ<xref:System.Linq.Expressions.MethodCallExpression>空場合`arguments`は`null`。</span><span class="sxs-lookup"><span data-stu-id="62a30-691">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="62a30-692">それ以外の場合と同じ要素が含まれている`arguments`、一部の引用符で囲まれたする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-692">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="62a30-693"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.MethodCallExpression>はによって表されるメソッドの戻り値の型と等しく`method`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-693">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-694"><paramref name="method" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-694"><paramref name="method" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-695">または</span><span class="sxs-lookup"><span data-stu-id="62a30-695">-or-</span></span> 
 <span data-ttu-id="62a30-696"><paramref name="instance" /> は <see langword="null" /> で、<paramref name="method" /> はインスタンス メソッドを表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-696"><paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span></span>  
  
<span data-ttu-id="62a30-697">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-697">-or-</span></span> 
 <span data-ttu-id="62a30-698"><paramref name="arguments" /> は <see langword="null" /> ではなく、その要素の 1 つ以上が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-698"><paramref name="arguments" /> is not <see langword="null" /> and one or more of its elements is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-699"><paramref name="instance" />.Type は、<paramref name="method" /> の表すメソッドの宣言型に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-699"><paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="62a30-700">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-700">-or-</span></span> 
<span data-ttu-id="62a30-701"><paramref name="arguments" /> の要素の数が、<paramref name="method" /> の表すメソッドのパラメーターの数と一致しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-701">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="62a30-702">または</span><span class="sxs-lookup"><span data-stu-id="62a30-702">-or-</span></span> 
<span data-ttu-id="62a30-703"><paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> の表すメソッドの対応するパラメーターに割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-703">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="62a30-704"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-704">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arg0"><span data-ttu-id="62a30-705">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-705">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-706">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-706">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <summary><span data-ttu-id="62a30-707">2 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-707">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes two arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-708"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-708">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-709"><paramref name="method" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="62a30-709"><paramref name="method" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="62a30-710">インスタンス呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-710">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call.</span></span> <span data-ttu-id="62a30-711">static (Visual Basic では Shared) メソッドの場合は null を渡します。</span><span class="sxs-lookup"><span data-stu-id="62a30-711">(pass null for a static (Shared in Visual Basic) method).</span></span></param>
        <param name="method"><span data-ttu-id="62a30-712">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-712">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span></span></param>
        <param name="arg0"><span data-ttu-id="62a30-713">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-713">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-714">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-714">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <summary><span data-ttu-id="62a30-715">2 つの引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-715">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes two arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-716"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-716">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-717">次のコード例では、2 つの引数を持つインスタンス メソッドを呼び出す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-717">The following code example shows how to create an expression that calls an instance method that has two arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#17)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, string methodName, Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::String ^ methodName, cli::array &lt;Type ^&gt; ^ typeArguments, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * string * Type[] * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, methodName, typeArguments, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="62a30-718">特定のメソッドの <see cref="T:System.Linq.Expressions.Expression" /> プロパティ値が検索される <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-718">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> property value will be searched for a specific method.</span></span></param>
        <param name="methodName"><span data-ttu-id="62a30-719">メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-719">The name of the method.</span></span></param>
        <param name="typeArguments"><span data-ttu-id="62a30-720">ジェネリック メソッドの型パラメーターを指定する <see cref="T:System.Type" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-720">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method.</span></span> <span data-ttu-id="62a30-721">methodName が非ジェネリック メソッドを指定する場合、この引数は null にします。</span><span class="sxs-lookup"><span data-stu-id="62a30-721">This argument should be null when methodName specifies a non-generic method.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-722">メソッドへの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-722">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represents the arguments to the method.</span></span></param>
        <summary><span data-ttu-id="62a30-723">適切なファクトリ メソッドを呼び出すことにより、インスタンス メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-723">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="62a30-724"><see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<paramref name="instance" /> と等しい <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティ、指定したインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />、および指定した引数に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> を含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-724">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified instance method, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> set to the specified arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-725"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.MethodCallExpression>がで表されるメソッドの戻り値の型と等しい`methodName`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-725">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-726"><paramref name="instance" /> または <paramref name="methodName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-726"><paramref name="instance" /> or <paramref name="methodName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-727">名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致するメソッドが、<paramref name="instance" />.Type またはその基本型で見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a30-727">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</span></span>  
  
<span data-ttu-id="62a30-728">または</span><span class="sxs-lookup"><span data-stu-id="62a30-728">-or-</span></span> 
<span data-ttu-id="62a30-729">名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致する複数のメソッドが、<paramref name="instance" />.Type またはその基本型で見つかりました。</span><span class="sxs-lookup"><span data-stu-id="62a30-729">More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="62a30-730"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-730">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arg0"><span data-ttu-id="62a30-731">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-731">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-732">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-732">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <param name="arg2"><span data-ttu-id="62a30-733">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-733">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span></span></param>
        <summary><span data-ttu-id="62a30-734">3 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-734">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes three arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-735"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-735">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-736"><paramref name="method" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="62a30-736"><paramref name="method" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (Type type, string methodName, Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Type type, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(Type ^ type, System::String ^ methodName, cli::array &lt;Type ^&gt; ^ typeArguments, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : Type * string * Type[] * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (type, methodName, typeArguments, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-737">指定した <see cref="T:System.Type" /> (Visual Basic では <see langword="static" />) メソッドを含む型を指定する <see langword="Shared" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-737">The <see cref="T:System.Type" /> that specifies the type that contains the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method.</span></span></param>
        <param name="methodName"><span data-ttu-id="62a30-738">メソッドの名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-738">The name of the method.</span></span></param>
        <param name="typeArguments"><span data-ttu-id="62a30-739">ジェネリック メソッドの型パラメーターを指定する <see cref="T:System.Type" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-739">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method.</span></span> <span data-ttu-id="62a30-740">methodName が非ジェネリック メソッドを指定する場合、この引数は null にします。</span><span class="sxs-lookup"><span data-stu-id="62a30-740">This argument should be null when methodName specifies a non-generic method.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-741">メソッドへの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-741">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the method.</span></span></param>
        <summary><span data-ttu-id="62a30-742">適切なファクトリ メソッドを呼び出すことにより、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> (Visual Basic では <see langword="static" />) メソッドへの呼び出しを表す <see langword="Shared" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-742">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="62a30-743"><see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、指定した <see langword="static" /> (Visual Basic では <see langword="Shared" />) メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティ、および指定した引数に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-743">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method, and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property set to the specified arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-744"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.MethodCallExpression>がで表されるメソッドの戻り値の型と等しい`methodName`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-744">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.</span></span> <span data-ttu-id="62a30-745"><xref:System.Linq.Expressions.MethodCallExpression.Object%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-745">The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-746"><paramref name="type" /> または <paramref name="methodName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-746"><paramref name="type" /> or <paramref name="methodName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-747">名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致するメソッドが、<paramref name="type" /> またはその基本型で見つかりません。</span><span class="sxs-lookup"><span data-stu-id="62a30-747">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</span></span>  
  
<span data-ttu-id="62a30-748">または</span><span class="sxs-lookup"><span data-stu-id="62a30-748">-or-</span></span> 
<span data-ttu-id="62a30-749">名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致する複数のメソッドが、<paramref name="type" /> またはその基本型で見つかりました。</span><span class="sxs-lookup"><span data-stu-id="62a30-749">More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="62a30-750">インスタンス呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-750">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call.</span></span> <span data-ttu-id="62a30-751">static (Visual Basic では Shared) メソッドの場合は null を渡します。</span><span class="sxs-lookup"><span data-stu-id="62a30-751">(pass null for a static (Shared in Visual Basic) method).</span></span></param>
        <param name="method"><span data-ttu-id="62a30-752">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-752">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span></span></param>
        <param name="arg0"><span data-ttu-id="62a30-753">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-753">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-754">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-754">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <param name="arg2"><span data-ttu-id="62a30-755">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-755">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span></span></param>
        <summary><span data-ttu-id="62a30-756">3 つの引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-756">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes three arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-757"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-757">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="62a30-758"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-758">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arg0"><span data-ttu-id="62a30-759">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-759">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-760">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-760">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <param name="arg2"><span data-ttu-id="62a30-761">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-761">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span></span></param>
        <param name="arg3"><span data-ttu-id="62a30-762">4 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-762">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</span></span></param>
        <summary><span data-ttu-id="62a30-763">4 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-763">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes four arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-764"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-764">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-765"><paramref name="method" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="62a30-765"><paramref name="method" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3, System::Linq::Expressions::Expression ^ arg4);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1, arg2, arg3, arg4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="62a30-766"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-766">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span></span></param>
        <param name="arg0"><span data-ttu-id="62a30-767">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-767">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-768">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-768">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span></span></param>
        <param name="arg2"><span data-ttu-id="62a30-769">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-769">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span></span></param>
        <param name="arg3"><span data-ttu-id="62a30-770">4 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-770">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</span></span></param>
        <param name="arg4"><span data-ttu-id="62a30-771">5 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-771">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fifth argument.</span></span></param>
        <summary><span data-ttu-id="62a30-772">5 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-772">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes five arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-773"><see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-773">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-774"><paramref name="method" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="62a30-774"><paramref name="method" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanReduce">
      <MemberSignature Language="C#" Value="public virtual bool CanReduce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReduce" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.CanReduce" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanReduce As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReduce { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReduce : bool" Usage="System.Linq.Expressions.Expression.CanReduce" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a30-775">ノードをより単純なノードに変形できることを示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-775">Indicates that the node can be reduced to a simpler node.</span></span> <span data-ttu-id="62a30-776">これが true を返す場合、Reduce() を呼び出して単純化された形式を生成できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-776">If this returns true, Reduce() can be called to produce the reduced form.</span></span></summary>
        <value><span data-ttu-id="62a30-777">ノードを単純化することができる場合は true。それ以外の場合は false。</span><span class="sxs-lookup"><span data-stu-id="62a30-777">True if the node can be reduced, otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Catch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-778">catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-778">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Catch (variable As ParameterExpression, body As Expression) As CatchBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="static member Catch : System.Linq.Expressions.ParameterExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (variable, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable"><span data-ttu-id="62a30-779">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-779">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span></span></param>
        <param name="body"><span data-ttu-id="62a30-780">catch ステートメントの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-780">The body of the catch statement.</span></span></param>
        <summary><span data-ttu-id="62a30-781">ハンドラー本体で使用する、キャッチされた <see cref="T:System.Linq.Expressions.CatchBlock" /> オブジェクトへの参照を指定して、catch ステートメントを表す <see cref="T:System.Exception" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-781">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with a reference to the caught <see cref="T:System.Exception" /> object for use in the handler body.</span></span></summary>
        <returns><span data-ttu-id="62a30-782">作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-782">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(Type ^ type, System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="static member Catch : Type * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (type, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-783">この <see cref="P:System.Linq.Expressions.Expression.Type" /> によって処理される <see cref="T:System.Exception" /> の <see cref="T:System.Linq.Expressions.CatchBlock" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-783">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span></span></param>
        <param name="body"><span data-ttu-id="62a30-784">catch ステートメントの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-784">The body of the catch statement.</span></span></param>
        <summary><span data-ttu-id="62a30-785">catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-785">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</span></span></summary>
        <returns><span data-ttu-id="62a30-786">作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-786">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-787"><xref:System.Linq.Expressions.Expression.Type%2A>の<xref:System.Exception>への参照が、キャッチするを指定する、<xref:System.Exception>で使用できるオブジェクト、<xref:System.Linq.Expressions.CatchBlock>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-787">The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> to be caught can be specified but no reference to the <xref:System.Exception> object will be available for use in the <xref:System.Linq.Expressions.CatchBlock>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Catch (variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberSignature Language="F#" Value="static member Catch : System.Linq.Expressions.ParameterExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (variable, body, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable"><span data-ttu-id="62a30-788">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-788">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span></span></param>
        <param name="body"><span data-ttu-id="62a30-789">catch ステートメントの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-789">The body of the catch statement.</span></span></param>
        <param name="filter"><span data-ttu-id="62a30-790"><see cref="T:System.Exception" /> フィルターの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-790">The body of the <see cref="T:System.Exception" /> filter.</span></span></param>
        <summary><span data-ttu-id="62a30-791"><see cref="T:System.Linq.Expressions.CatchBlock" /> フィルターおよびキャッチされた <see cref="T:System.Exception" /> オブジェクトへの参照を指定して、catch ステートメントを表す <see cref="T:System.Exception" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-791">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter and a reference to the caught <see cref="T:System.Exception" /> object.</span></span></summary>
        <returns><span data-ttu-id="62a30-792">作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-792">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(Type ^ type, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberSignature Language="F#" Value="static member Catch : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (type, body, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-793">この <see cref="P:System.Linq.Expressions.Expression.Type" /> によって処理される <see cref="T:System.Exception" /> の <see cref="T:System.Linq.Expressions.CatchBlock" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-793">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span></span></param>
        <param name="body"><span data-ttu-id="62a30-794">catch ステートメントの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-794">The body of the catch statement.</span></span></param>
        <param name="filter"><span data-ttu-id="62a30-795"><see cref="T:System.Exception" /> フィルターの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-795">The body of the <see cref="T:System.Exception" /> filter.</span></span></param>
        <summary><span data-ttu-id="62a30-796">キャッチされた <see cref="T:System.Linq.Expressions.CatchBlock" /> オブジェクトへの参照は指定せずに、<see cref="T:System.Exception" /> フィルターを指定して、catch ステートメントを表す <see cref="T:System.Exception" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-796">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter but no reference to the caught <see cref="T:System.Exception" /> object.</span></span></summary>
        <returns><span data-ttu-id="62a30-797">作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-797">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearDebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo (System.Linq.Expressions.SymbolDocumentInfo document);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression ClearDebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClearDebugInfo (document As SymbolDocumentInfo) As DebugInfoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DebugInfoExpression ^ ClearDebugInfo(System::Linq::Expressions::SymbolDocumentInfo ^ document);" />
      <MemberSignature Language="F#" Value="static member ClearDebugInfo : System.Linq.Expressions.SymbolDocumentInfo -&gt; System.Linq.Expressions.DebugInfoExpression" Usage="System.Linq.Expressions.Expression.ClearDebugInfo document" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
      </Parameters>
      <Docs>
        <param name="document"><span data-ttu-id="62a30-798">ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-798">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</span></span></param>
        <summary><span data-ttu-id="62a30-799">シーケンス ポイントをクリアするための <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-799">Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearing a sequence point.</span></span></summary>
        <returns><span data-ttu-id="62a30-800">シーケンス ポイントをクリアするための <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a30-800">An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearning a sequence point.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Coalesce">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-801">合体演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-801">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Coalesce (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Coalesce(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Coalesce : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Coalesce (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-802"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-802">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-803"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-803">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-804">合体演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-804">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-805"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-805">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-806"><xref:System.Linq.Expressions.BinaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.BinaryExpression>は`null`両方<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>に設定されている`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-806">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span> <span data-ttu-id="62a30-807"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティは、合体演算の結果の型と一致します。</span><span class="sxs-lookup"><span data-stu-id="62a30-807">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the result type of the coalescing operation.</span></span> <span data-ttu-id="62a30-808"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-808">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
#### <a name="result-type"></a><span data-ttu-id="62a30-809">結果のデータ型</span><span class="sxs-lookup"><span data-stu-id="62a30-809">Result Type</span></span>  
 <span data-ttu-id="62a30-810">次の規則は、結果の型を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-810">The following rules determine the result type:</span></span>  
  
-   <span data-ttu-id="62a30-811">場合`left`します。型、null 許容型を表すと`right`します。型は、対応する null 非許容の型に暗黙的に変換、結果型は null 非許容と同等の`left`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-811">If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.</span></span>  
  
-   <span data-ttu-id="62a30-812">の場合`right`します。型が暗黙的に変換できる`left`します。型の結果型は`left`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-812">Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.</span></span>  
  
-   <span data-ttu-id="62a30-813">の場合、null 非許容と同等の`left`します。型が暗黙的に変換できる`right`します。型の結果型は`right`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-813">Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-814"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-814"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-815"><paramref name="left" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、参照型または null 許容値型を表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-815">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-816"><paramref name="left" />.Type と <paramref name="right" />.Type は、互いに変換できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-816"><paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/088b1f0d-c1af-4fe1-b4b8-196fd5ea9132"><span data-ttu-id="62a30-817">??</span><span class="sxs-lookup"><span data-stu-id="62a30-817">??</span></span> <span data-ttu-id="62a30-818">演算子 (C# リファレンス)</span><span class="sxs-lookup"><span data-stu-id="62a30-818">Operator (C# Reference)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Coalesce (left As Expression, right As Expression, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Coalesce(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member Coalesce : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Coalesce (left, right, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-819"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-819">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-820"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-820">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-821"><see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-821">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-822">変換関数を指定して合体演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-822">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation, given a conversion function.</span></span></summary>
        <returns><span data-ttu-id="62a30-823"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-823">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-824"><xref:System.Linq.Expressions.BinaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.BinaryExpression>は`null`両方<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>に設定されている`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-824">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span>  
  
 <span data-ttu-id="62a30-825"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.BinaryExpression>合体演算の結果の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="62a30-825">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is equal to the result type of the coalescing operation.</span></span>  
  
 <span data-ttu-id="62a30-826">次の規則は、結果の型を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-826">The following rules determine the result type:</span></span>  
  
-   <span data-ttu-id="62a30-827">場合`left`します。型、null 許容型を表すと`right`します。型は、対応する null 非許容の型に暗黙的に変換、結果型は null 非許容と同等の`left`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-827">If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.</span></span>  
  
-   <span data-ttu-id="62a30-828">の場合`right`します。型が暗黙的に変換できる`left`します。型の結果型は`left`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-828">Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.</span></span>  
  
-   <span data-ttu-id="62a30-829">の場合、null 非許容と同等の`left`します。型が暗黙的に変換できる`right`します。型の結果型は`right`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-829">Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-830"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-830"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-831"><paramref name="left" />.Type と <paramref name="right" />.Type は、互いに変換できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-831"><paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</span></span>  
  
<span data-ttu-id="62a30-832">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-832">-or-</span></span> 
 <span data-ttu-id="62a30-833"><paramref name="conversion" /> は <see langword="null" /> ではなく、<paramref name="conversion" />.Type は受け取る引数が 1 つだけではないデリゲート型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-833"><paramref name="conversion" /> is not <see langword="null" /> and <paramref name="conversion" />.Type is a delegate type that does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-834"><paramref name="left" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、参照型または null 許容値型を表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-834">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</span></span>  
  
<span data-ttu-id="62a30-835">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-835">-or-</span></span> 
<span data-ttu-id="62a30-836"><paramref name="left" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="conversion" />.Type デリゲート型のパラメーター型に代入できない型を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-836">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> represents a type that is not assignable to the parameter type of the delegate type <paramref name="conversion" />.Type.</span></span>  
  
<span data-ttu-id="62a30-837">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-837">-or-</span></span> 
<span data-ttu-id="62a30-838"><paramref name="right" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="conversion" />.Type デリゲート型の戻り値の型と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-838">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="right" /> is not equal to the return type of the delegate type <paramref name="conversion" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Condition">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-839">条件付きステートメントを表す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-839">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Condition (test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ Condition(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse);" />
      <MemberSignature Language="F#" Value="static member Condition : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.Condition (test, ifTrue, ifFalse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test"><span data-ttu-id="62a30-840"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-840">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span></span></param>
        <param name="ifTrue"><span data-ttu-id="62a30-841"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-841">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span></span></param>
        <param name="ifFalse"><span data-ttu-id="62a30-842"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-842">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-843">条件付きステートメントを表す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-843">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span></span></summary>
        <returns><span data-ttu-id="62a30-844"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-844">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-845"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.ConditionalExpression>と等しい、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`ifTrue`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-845">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConditionalExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `ifTrue`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-846">次のコード例では、条件付きステートメントを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-846">The following code example shows how to create an expression that represents a conditional statement.</span></span> <span data-ttu-id="62a30-847">最初の引数が評価された場合`true`は、2 番目の引数が実行された以外の場合、3 番目の引数を実行します。</span><span class="sxs-lookup"><span data-stu-id="62a30-847">If the first argument evaluates to `true`, the second argument is executed; otherwise, the third argument is executed.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#3)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-848"><paramref name="test" />、<paramref name="ifTrue" />、または <paramref name="ifFalse" /> は、<see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-848"><paramref name="test" /> or <paramref name="ifTrue" /> or <paramref name="ifFalse" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-849"><paramref name="test" />.Type が <see cref="T:System.Boolean" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-849"><paramref name="test" />.Type is not <see cref="T:System.Boolean" />.</span></span>  
  
<span data-ttu-id="62a30-850">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-850">-or-</span></span> 
 <span data-ttu-id="62a30-851"><paramref name="ifTrue" />.Type が、<paramref name="ifFalse" />.Type と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-851"><paramref name="ifTrue" />.Type is not equal to <paramref name="ifFalse" />.Type.</span></span></exception>
        <altmember cref="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <altmember cref="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ Condition(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Condition : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.Condition (test, ifTrue, ifFalse, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="test"><span data-ttu-id="62a30-852"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-852">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span></span></param>
        <param name="ifTrue"><span data-ttu-id="62a30-853"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-853">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span></span></param>
        <param name="ifFalse"><span data-ttu-id="62a30-854"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-854">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-855"><see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-855">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-856">条件付きステートメントを表す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-856">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span></span></summary>
        <returns><span data-ttu-id="62a30-857"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-857">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-858">場合、条件式の結果型を明示的に統合することにより、このメソッドで、種類の`ifTrue`と`ifFalse`式が等しくないです。</span><span class="sxs-lookup"><span data-stu-id="62a30-858">This method allows explicitly unifying the result type of the conditional expression in cases where the types of `ifTrue` and `ifFalse` expressions are not equal.</span></span> <span data-ttu-id="62a30-859">両方の種類`ifTrue`と`ifFalse`必要があります暗黙的に参照結果の型に代入します。</span><span class="sxs-lookup"><span data-stu-id="62a30-859">Types of both `ifTrue` and `ifFalse` must be implicitly reference assignable to the result type.</span></span> <span data-ttu-id="62a30-860">`type`にできる<xref:System.Void>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-860">The `type` is allowed to be <xref:System.Void>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Constant">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-861"><see cref="T:System.Linq.Expressions.ConstantExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-861">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Constant (value As Object) As ConstantExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConstantExpression ^ Constant(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Constant : obj -&gt; System.Linq.Expressions.ConstantExpression" Usage="System.Linq.Expressions.Expression.Constant value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="62a30-862"><see cref="T:System.Object" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-862">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-863">指定した値に設定された <see cref="T:System.Linq.Expressions.ConstantExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-863">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</span></span></summary>
        <returns><span data-ttu-id="62a30-864"><see cref="T:System.Linq.Expressions.ConstantExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> プロパティを含む <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-864">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-865"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.ConstantExpression>がの型と等しい`value`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-865">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConstantExpression> is equal to the type of `value`.</span></span> <span data-ttu-id="62a30-866">場合`value`は`null`、<xref:System.Linq.Expressions.Expression.Type%2A>と等しい<xref:System.Object>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-866">If `value` is `null`, <xref:System.Linq.Expressions.Expression.Type%2A> is equal to <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="62a30-867">表す`null`、使用することも、<xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29>メソッドを使用する型を明示的に指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-867">To represent `null`, you can also use the <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> method, with which you can explicitly specify the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-868">次のコード例では、定数値を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-868">The following code example shows how to create an expression that represents a constant value.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#4)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConstantExpression ^ Constant(System::Object ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Constant : obj * Type -&gt; System.Linq.Expressions.ConstantExpression" Usage="System.Linq.Expressions.Expression.Constant (value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="62a30-869"><see cref="T:System.Object" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-869">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-870"><see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-870">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-871">指定した値に設定された <see cref="T:System.Linq.Expressions.ConstantExpression" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-871">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span></span></summary>
        <returns><span data-ttu-id="62a30-872"><see cref="T:System.Linq.Expressions.ConstantExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-872">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-873">このメソッドは、null 許容型の値を表すに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="62a30-873">This method can be useful for representing values of nullable types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-874">次のコード例は、null 許容型の定数を表す式を作成し、その値に設定する方法を示しています。`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-874">The following code example shows how to create an expression that represents a constant of the nullable type and set its value to `null`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#22)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-875"><paramref name="type" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-875"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-876"><paramref name="value" /> が <see langword="null" /> ではなく、<paramref name="type" /> を <paramref name="value" /> の動的型から代入することができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-876"><paramref name="value" /> is not <see langword="null" /> and <paramref name="type" /> is not assignable from the dynamic type of <paramref name="value" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Continue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-877">continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-877">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Continue (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Continue(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Continue : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Continue target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-878"><see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-878">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <summary><span data-ttu-id="62a30-879">continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-879">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</span></span></summary>
        <returns><span data-ttu-id="62a30-880">Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="target" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-880">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-881">次の例では、使用する、ループの式を作成する方法、<xref:System.Linq.Expressions.Expression.Continue%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-881">The following example demonstrates how to create a loop expression that uses the <xref:System.Linq.Expressions.Expression.Continue%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#46)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Continue(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Continue : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Continue (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-882"><see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-882">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-883"><see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-883">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-884">型を指定して、continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-884">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement with the specified type.</span></span></summary>
        <returns><span data-ttu-id="62a30-885">Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-885">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-886">型変換操作を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-886">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Convert(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Convert (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-887"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-887">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-888"><see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-888">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-889">型変換操作を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-889">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-890"><see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-890">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-891"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-891">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="62a30-892"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> プロパティが `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-892">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="62a30-893">ノードを無効になった場合<xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-893">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="62a30-894">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-894">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-895">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-895">Implementing Method</span></span>  
 <span data-ttu-id="62a30-896">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-896">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-897">いずれか`expression`します。型または`type`ユーザー定義の型を暗黙的または明示的な変換演算子を定義するには、<xref:System.Reflection.MethodInfo>を表す演算子は、メソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-897">If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-898">それ以外の場合:</span><span class="sxs-lookup"><span data-stu-id="62a30-898">Otherwise:</span></span>  
  
    -   <span data-ttu-id="62a30-899">両方`expression`します。型と`type`数値またはブール値の型、または null 許容または null 非許容の列挙型を表すが、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-899">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="62a30-900">いずれか`expression`します。型または`type`は参照型と、明示的なボックス化とボックス化解除、またはからの参照変換が存在する`expression`します。型を`type`、メソッドの実装`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-900">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="62a30-901">かいないか無効になります。</span><span class="sxs-lookup"><span data-stu-id="62a30-901">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-902">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-902">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-903">場合`expression`します。型の実装メソッドの引数の型に割り当てることが、実装メソッドの戻り値の型に割り当てることが`type`ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-903">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="62a30-904">1 つまたは両方の`expression`します。型または`type`は null 許容値型であり、対応する null 非許容値型は、引数の型と実装のメソッドの戻り値の型に等しいそれぞれ、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-904">If one or both of `expression`.Type or `type` is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="62a30-905">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-905">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-906">両方`expression`します。型と`type`は null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-906">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="62a30-907">それ以外の場合、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-907">Otherwise the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-908">次のコード例では、型変換演算を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-908">The following code example shows how to create an expression that represents a type convertion operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#23)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-909"><paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-909"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-910"><paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-910">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Convert(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Linq.Expressions.Expression * Type * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Convert (expression, type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-911"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-911">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-912"><see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-912">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-913"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-913">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-914">実装メソッドが指定される変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-914">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation for which the implementing method is specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-915"><see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />、<see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、および <see cref="P:System.Linq.Expressions.Expression.Type" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-915">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-916"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-916">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="62a30-917"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> プロパティが `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-917">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="62a30-918">ノードを無効になった場合<xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-918">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="62a30-919">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-919">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-920">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-920">Implementing Method</span></span>  
 <span data-ttu-id="62a30-921">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-921">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-922">メソッドがない場合`null`メソッドの実装になります。</span><span class="sxs-lookup"><span data-stu-id="62a30-922">If method is not `null`, it is the implementing method.</span></span> <span data-ttu-id="62a30-923">Void、以外を表す必要があります`static`(`Shared` Visual basic) を 1 つの引数を受け取るメソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-923">It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
-   <span data-ttu-id="62a30-924">それ以外の場合、いずれか`expression`します。型または`type`ユーザー定義の型を暗黙的または明示的な変換演算子を定義するには、<xref:System.Reflection.MethodInfo>を表す演算子は、メソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-924">Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-925">それ以外の場合:</span><span class="sxs-lookup"><span data-stu-id="62a30-925">Otherwise:</span></span>  
  
    -   <span data-ttu-id="62a30-926">両方`expression`します。型と`type`数値またはブール値の型、または null 許容または null 非許容の列挙型を表すが、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-926">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="62a30-927">いずれか`expression`します。型または`type`は参照型と、明示的なボックス化とボックス化解除、またはからの参照変換が存在する`expression`します。型を`type`、メソッドの実装`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-927">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="62a30-928">かいないか無効になります。</span><span class="sxs-lookup"><span data-stu-id="62a30-928">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-929">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-929">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-930">場合`expression`します。型の実装メソッドの引数の型に割り当てることが、実装メソッドの戻り値の型に割り当てることが`type`ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-930">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="62a30-931">いずれかまたは両方場合、の`expression`します。型または`type`null 許容値型と対応する null 非許容値型はそれぞれ引数の型および実装メソッドの戻り値の型と等しく、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-931">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="62a30-932">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-932">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-933">両方`expression`します。型と`type`は null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-933">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="62a30-934">それ以外の場合、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-934">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-935"><paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-935"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-936"><paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-936"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-937"><paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-937">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span></span>  
  
<span data-ttu-id="62a30-938">または</span><span class="sxs-lookup"><span data-stu-id="62a30-938">-or-</span></span> 
 <span data-ttu-id="62a30-939"><paramref name="expression" />.Type は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-939"><paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="62a30-940">または</span><span class="sxs-lookup"><span data-stu-id="62a30-940">-or-</span></span> 
<span data-ttu-id="62a30-941"><paramref name="method" /> によって表されるメソッドの戻り値の型は、<paramref name="type" /> に代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-941">The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.</span></span>  
  
<span data-ttu-id="62a30-942">または</span><span class="sxs-lookup"><span data-stu-id="62a30-942">-or-</span></span> 
 <span data-ttu-id="62a30-943"><paramref name="expression" />.Type または <paramref name="type" /> は null 許容値型で、対応する null 非許容値型は <paramref name="method" /> によって表されるメソッドそれぞれの、引数型または戻り値の型と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-943"><paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="62a30-944"><paramref name="method" /> 記述に一致する複数のメソッドが見つかりました。</span><span class="sxs-lookup"><span data-stu-id="62a30-944">More than one method that matches the <paramref name="method" /> description was found.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-945">変換後の型がオーバーフローした場合に例外をスローする変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-945">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ConvertChecked(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member ConvertChecked : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.ConvertChecked (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-946"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-946">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-947"><see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-947">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-948">変換後の型がオーバーフローした場合に例外をスローする変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-948">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</span></span></summary>
        <returns><span data-ttu-id="62a30-949"><see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-949">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-950"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-950">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="62a30-951"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> プロパティが `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-951">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="62a30-952">ノードを無効になった場合<xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-952">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="62a30-953">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-953">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-954">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-954">Implementing Method</span></span>  
 <span data-ttu-id="62a30-955">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-955">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-956">いずれか`expression`します。型または`type`ユーザー定義の型を暗黙的または明示的な変換演算子を定義するには、<xref:System.Reflection.MethodInfo>を表す演算子は、メソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-956">If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-957">それ以外の場合:</span><span class="sxs-lookup"><span data-stu-id="62a30-957">Otherwise:</span></span>  
  
    -   <span data-ttu-id="62a30-958">両方`expression`します。型と`type`数値またはブール値の型、または null 許容または null 非許容の列挙型を表すが、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-958">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="62a30-959">いずれか`expression`します。型または`type`は参照型と、明示的なボックス化とボックス化解除、またはからの参照変換が存在する`expression`します。型を`type`、メソッドの実装`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-959">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="62a30-960">かいないか無効になります。</span><span class="sxs-lookup"><span data-stu-id="62a30-960">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-961">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-961">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-962">場合`expression`します。型の実装メソッドの引数の型に割り当てることが、実装メソッドの戻り値の型に割り当てることが`type`ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-962">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="62a30-963">いずれかまたは両方場合、の`expression`します。型または`type`null 許容値型と対応する null 非許容値型はそれぞれ引数の型および実装メソッドの戻り値の型と等しく、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-963">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="62a30-964">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-964">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-965">両方`expression`します。型と`type`は null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-965">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="62a30-966">それ以外の場合、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-966">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-967"><paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-967"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-968"><paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-968">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ConvertChecked(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ConvertChecked : System.Linq.Expressions.Expression * Type * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.ConvertChecked (expression, type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-969"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-969">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-970"><see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-970">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-971"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-971">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-972">変換後の型がオーバーフローした場合に例外をスローし、実装メソッドが指定される変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-972">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-973"><see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />、<see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、および <see cref="P:System.Linq.Expressions.Expression.Type" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-973">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-974"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-974">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="62a30-975"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> プロパティが `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-975">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="62a30-976">ノードを無効になった場合<xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-976">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="62a30-977">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-977">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-978">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-978">Implementing Method</span></span>  
 <span data-ttu-id="62a30-979">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-979">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-980">メソッドがない場合`null`メソッドの実装になります。</span><span class="sxs-lookup"><span data-stu-id="62a30-980">If method is not `null`, it is the implementing method.</span></span> <span data-ttu-id="62a30-981">Void、以外を表す必要があります`static`(`Shared` Visual basic) を 1 つの引数を受け取るメソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-981">It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
-   <span data-ttu-id="62a30-982">それ以外の場合、いずれか`expression`します。型または`type`ユーザー定義の型を暗黙的または明示的な変換演算子を定義するには、<xref:System.Reflection.MethodInfo>を表す演算子は、メソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-982">Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-983">それ以外の場合:</span><span class="sxs-lookup"><span data-stu-id="62a30-983">Otherwise:</span></span>  
  
    -   <span data-ttu-id="62a30-984">両方`expression`します。型と`type`数値またはブール値の型、または null 許容または null 非許容の列挙型を表すが、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-984">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="62a30-985">いずれか`expression`します。型または`type`は参照型と、明示的なボックス化とボックス化解除、またはからの参照変換が存在する`expression`します。型を`type`、メソッドの実装`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-985">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="62a30-986">かいないか無効になります。</span><span class="sxs-lookup"><span data-stu-id="62a30-986">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-987">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-987">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-988">場合`expression`します。型の実装メソッドの引数の型に割り当てることが、実装メソッドの戻り値の型に割り当てることが`type`ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-988">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="62a30-989">いずれかまたは両方場合、の`expression`します。型または`type`null 許容値型と対応する null 非許容値型はそれぞれ引数の型および実装メソッドの戻り値の型と等しく、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-989">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="62a30-990">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-990">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-991">両方`expression`します。型と`type`は null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-991">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="62a30-992">それ以外の場合、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-992">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-993"><paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-993"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-994"><paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-994"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-995"><paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-995">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span></span>  
  
<span data-ttu-id="62a30-996">または</span><span class="sxs-lookup"><span data-stu-id="62a30-996">-or-</span></span> 
 <span data-ttu-id="62a30-997"><paramref name="expression" />.Type は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-997"><paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span>  
  
<span data-ttu-id="62a30-998">または</span><span class="sxs-lookup"><span data-stu-id="62a30-998">-or-</span></span> 
<span data-ttu-id="62a30-999"><paramref name="method" /> によって表されるメソッドの戻り値の型は、<paramref name="type" /> に代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-999">The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.</span></span>  
  
<span data-ttu-id="62a30-1000">または</span><span class="sxs-lookup"><span data-stu-id="62a30-1000">-or-</span></span> 
 <span data-ttu-id="62a30-1001"><paramref name="expression" />.Type または <paramref name="type" /> は null 許容値型で、対応する null 非許容値型は <paramref name="method" /> によって表されるメソッドそれぞれの、引数型または戻り値の型と等しくありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1001"><paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="62a30-1002"><paramref name="method" /> 記述に一致する複数のメソッドが見つかりました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1002">More than one method that matches the <paramref name="method" /> description was found.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression DebugInfo (System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression DebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document, int32 startLine, int32 startColumn, int32 endLine, int32 endColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DebugInfo (document As SymbolDocumentInfo, startLine As Integer, startColumn As Integer, endLine As Integer, endColumn As Integer) As DebugInfoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DebugInfoExpression ^ DebugInfo(System::Linq::Expressions::SymbolDocumentInfo ^ document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberSignature Language="F#" Value="static member DebugInfo : System.Linq.Expressions.SymbolDocumentInfo * int * int * int * int -&gt; System.Linq.Expressions.DebugInfoExpression" Usage="System.Linq.Expressions.Expression.DebugInfo (document, startLine, startColumn, endLine, endColumn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
        <Parameter Name="startLine" Type="System.Int32" />
        <Parameter Name="startColumn" Type="System.Int32" />
        <Parameter Name="endLine" Type="System.Int32" />
        <Parameter Name="endColumn" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="document"><span data-ttu-id="62a30-1003">ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1003">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</span></span></param>
        <param name="startLine"><span data-ttu-id="62a30-1004">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 先頭行。</span><span class="sxs-lookup"><span data-stu-id="62a30-1004">The start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span></span> <span data-ttu-id="62a30-1005">1 以上であることが必要です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1005">Must be greater than 0.</span></span></param>
        <param name="startColumn"><span data-ttu-id="62a30-1006">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の先頭列。</span><span class="sxs-lookup"><span data-stu-id="62a30-1006">The start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span></span> <span data-ttu-id="62a30-1007">1 以上であることが必要です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1007">Must be greater than 0.</span></span></param>
        <param name="endLine"><span data-ttu-id="62a30-1008">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の最終行。</span><span class="sxs-lookup"><span data-stu-id="62a30-1008">The end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span></span> <span data-ttu-id="62a30-1009">開始行の値以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-1009">Must be greater or equal than the start line.</span></span></param>
        <param name="endColumn"><span data-ttu-id="62a30-1010">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の最終列。</span><span class="sxs-lookup"><span data-stu-id="62a30-1010">The end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span></span> <span data-ttu-id="62a30-1011">最終行が先頭行と同じである場合、これは開始列の値以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-1011">If the end line is the same as the start line, it must be greater or equal than the start column.</span></span> <span data-ttu-id="62a30-1012">どのような場合でも、0 より大きい値である必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-1012">In any case, must be greater than 0.</span></span></param>
        <summary><span data-ttu-id="62a30-1013">指定したスパンを使用して、<see cref="T:System.Linq.Expressions.DebugInfoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1013">Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> with the specified span.</span></span></summary>
        <returns><span data-ttu-id="62a30-1014"><see cref="T:System.Linq.Expressions.DebugInfoExpression" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a30-1014">An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Decrement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1015">式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1015">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Decrement(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Decrement : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Decrement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-1016">デクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1016">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</span></span></param>
        <summary><span data-ttu-id="62a30-1017">式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1017">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span></span></summary>
        <returns><span data-ttu-id="62a30-1018">デクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1018">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1019">この式は、機能に渡されるオブジェクトの値を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1019">This expression is functional and does not change the value of the object passed to it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1020">次のコード例では、指定された値から 1 を減算する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1020">The following code example shows how to create an expression that substracts 1 from a given value.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#5)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Decrement(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Decrement : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Decrement (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-1021">デクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1021">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1022">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1022">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="62a30-1023">式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1023">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span></span></summary>
        <returns><span data-ttu-id="62a30-1024">デクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1024">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1025">この式は、機能に渡されるオブジェクトの値を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1025">This expression is functional and does not change the value of the object passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Default (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Default(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Default(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DefaultExpression ^ Default(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Default : Type -&gt; System.Linq.Expressions.DefaultExpression" Usage="System.Linq.Expressions.Expression.Default type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-1026"><see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1026">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1027">指定した型に設定された <see cref="T:System.Linq.Expressions.DefaultExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1027">Creates a <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</span></span></summary>
        <returns><span data-ttu-id="62a30-1028"><see cref="T:System.Linq.Expressions.DefaultExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した型に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1028">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-1029">次のコード例では、指定された型の既定値を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1029">The following code example shows how to create an expression that represents a default vaule for a given type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#6)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Divide">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1030">算術除算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1030">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Divide(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Divide (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1031"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1031">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1032"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1032">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property to.</span></span></param>
        <summary><span data-ttu-id="62a30-1033">算術除算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1033">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-1034"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1034">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1035">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1035">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1036"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1036">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1037">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1037">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-1038">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1038">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-1039"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1039">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-1040">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1040">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1041">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1041">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1042">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1042">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-1043">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、除算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1043">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1044">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1044">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1045">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1045">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1046">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1046">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1047">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1047">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1048">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1048">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1049">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1049">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-1050">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1050">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1051">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1051">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-1052">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1052">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1053">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1053">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-1054">ノードの型は、定義済みの除算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1054">The type of the node is the result type of the predefined division operator.</span></span>  
  
-   <span data-ttu-id="62a30-1055">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1055">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-1056">ノードの型は、定義済みの除算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1056">The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1057">次のコード例では、その最初の引数の 2 番目の引数で除算する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1057">The following code example shows how to create an expression that divides divides its first argument by its second argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#7)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1058"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1058"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1059">除算演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1059">The division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Divide(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Divide (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1060"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1060">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1061"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1061">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1062"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1062">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1063">算術除算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1063">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span></span> <span data-ttu-id="62a30-1064">実装メソッドを指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1064">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-1065"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1065">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1066">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1066">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1067"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1067">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1068">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1068">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-1069">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1069">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-1070"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1070">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-1071">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1071">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1072">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1072">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1073">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1073">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-1074">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-1074">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-1075">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、除算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1075">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1076">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1076">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1077">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1077">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1078">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1078">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1079">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1079">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1080">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1080">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1081">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1081">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-1082">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1082">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1083">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1083">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-1084">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1084">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1085">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1085">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-1086">ノードの型は、定義済みの除算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1086">The type of the node is the result type of the predefined division operator.</span></span>  
  
-   <span data-ttu-id="62a30-1087">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1087">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-1088">ノードの型は、定義済みの除算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1088">The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1089"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1089"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1090"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1090"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1091"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には除算演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1091"><paramref name="method" /> is <see langword="null" /> and the division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DivideAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1092">オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1092">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member DivideAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.DivideAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1093"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1093">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1094"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1094">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1095">オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1095">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-1096"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1096">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member DivideAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.DivideAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1097"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1097">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1098"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1098">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1099"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1099">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1100">オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1100">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-1101"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1101">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member DivideAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.DivideAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1102"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1102">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1103"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1103">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1104"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1104">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-1105"><see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1105">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1106">オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1106">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-1107"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1107">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1108">動的な操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1108">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arguments As IEnumerable(Of Expression)) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="62a30-1109">動的操作の実行時バインダー。</span><span class="sxs-lookup"><span data-stu-id="62a30-1109">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="62a30-1110">動的な式の結果の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1110">The result type of the dynamic expression.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-1111">動的操作の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-1111">The arguments to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="62a30-1112">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1112">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-1113"><see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1113">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1114"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>結果のプロパティは、引数の型から推論して、指定された戻り型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1114">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="62a30-1115">動的操作の実行時バインダー。</span><span class="sxs-lookup"><span data-stu-id="62a30-1115">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="62a30-1116">動的な式の結果の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1116">The result type of the dynamic expression.</span></span></param>
        <param name="arg0"><span data-ttu-id="62a30-1117">動的操作の 1 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-1117">The first argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="62a30-1118">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1118">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-1119"><see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1119">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1120"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>結果のプロパティは、引数の型から推論して、指定された戻り型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1120">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, ParamArray arguments As Expression()) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="62a30-1121">動的操作の実行時バインダー。</span><span class="sxs-lookup"><span data-stu-id="62a30-1121">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="62a30-1122">動的な式の結果の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1122">The result type of the dynamic expression.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-1123">動的操作の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-1123">The arguments to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="62a30-1124">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1124">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-1125"><see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1125">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1126"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>結果のプロパティは、引数の型から推論して、指定された戻り型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1126">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="62a30-1127">動的操作の実行時バインダー。</span><span class="sxs-lookup"><span data-stu-id="62a30-1127">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="62a30-1128">動的な式の結果の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1128">The result type of the dynamic expression.</span></span></param>
        <param name="arg0"><span data-ttu-id="62a30-1129">動的操作の 1 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-1129">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-1130">動的操作の 2 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-1130">The second argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="62a30-1131">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1131">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-1132"><see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1132">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1133"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>結果のプロパティは、引数の型から推論して、指定された戻り型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1133">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="62a30-1134">動的操作の実行時バインダー。</span><span class="sxs-lookup"><span data-stu-id="62a30-1134">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="62a30-1135">動的な式の結果の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1135">The result type of the dynamic expression.</span></span></param>
        <param name="arg0"><span data-ttu-id="62a30-1136">動的操作の 1 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-1136">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-1137">動的操作の 2 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-1137">The second argument to the dynamic operation.</span></span></param>
        <param name="arg2"><span data-ttu-id="62a30-1138">動的操作の 3 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-1138">The third argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="62a30-1139">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1139">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-1140"><see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1140">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1141"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>結果のプロパティは、引数の型から推論して、指定された戻り型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1141">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="62a30-1142">動的操作の実行時バインダー。</span><span class="sxs-lookup"><span data-stu-id="62a30-1142">The runtime binder for the dynamic operation.</span></span></param>
        <param name="returnType"><span data-ttu-id="62a30-1143">動的な式の結果の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1143">The result type of the dynamic expression.</span></span></param>
        <param name="arg0"><span data-ttu-id="62a30-1144">動的操作の 1 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-1144">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-1145">動的操作の 2 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-1145">The second argument to the dynamic operation.</span></span></param>
        <param name="arg2"><span data-ttu-id="62a30-1146">動的操作の 3 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-1146">The third argument to the dynamic operation.</span></span></param>
        <param name="arg3"><span data-ttu-id="62a30-1147">動的操作の 4 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-1147">The fourth argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="62a30-1148">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1148">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-1149"><see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1149">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1150"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>結果のプロパティは、引数の型から推論して、指定された戻り型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1150">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ElementInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1151"><see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1151">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementInit (addMethod As MethodInfo, arguments As IEnumerable(Of Expression)) As ElementInit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ElementInit ^ ElementInit(System::Reflection::MethodInfo ^ addMethod, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member ElementInit : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.ElementInit" Usage="System.Linq.Expressions.Expression.ElementInit (addMethod, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="addMethod"><span data-ttu-id="62a30-1152"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1152">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-1153"><see cref="T:System.Collections.Generic.IEnumerable`1" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1153">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1154">2 番目の引数として <see cref="T:System.Linq.Expressions.ElementInit" /> を指定して、<see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1154">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an <see cref="T:System.Collections.Generic.IEnumerable`1" /> as the second argument.</span></span></summary>
        <returns><span data-ttu-id="62a30-1155">指定した値に設定された <see cref="T:System.Linq.Expressions.ElementInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> プロパティを含む <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1155">An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1156">`addMethod`パラメーターは、"Add"(大文字と小文字を区別しない) という名前のインスタンス メソッドを表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-1156">The `addMethod` parameter must represent an instance method named "Add" (case insensitive).</span></span> <span data-ttu-id="62a30-1157">Add メソッドは、要素の数と同じ数のパラメーターをいる必要があります`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1157">The add method must have the same number of parameters as the number of elements in `arguments`.</span></span> <span data-ttu-id="62a30-1158"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ内の各要素の`arguments`、add メソッドの対応するパラメーターの型に代入する必要があります可能性がある後*を引用符で囲む*します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1158">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a30-1159">要素は、対応するメソッドのパラメーターが型の場合にのみクォートは<xref:System.Linq.Expressions.Expression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1159">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="62a30-1160">要素にラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="62a30-1160">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="62a30-1161">見つかったノードが、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1161">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1162">次の例では、使用する方法、<xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29>を作成する方法、<xref:System.Linq.Expressions.ElementInit>呼び出しを表す、<xref:System.Collections.Generic.Dictionary%602.Add%2A>ディクショナリ コレクションの要素を初期化します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1162">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1163"><paramref name="addMethod" /> または <paramref name="arguments" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1163"><paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1164"><paramref name="addMethod" /> が表すメソッドに、"Add" (大文字と小文字を区別しない) の名前が付いていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1164">The method that <paramref name="addMethod" /> represents is not named "Add" (case insensitive).</span></span>  
  
<span data-ttu-id="62a30-1165">または</span><span class="sxs-lookup"><span data-stu-id="62a30-1165">-or-</span></span> 
<span data-ttu-id="62a30-1166"><paramref name="addMethod" /> が表すメソッドは、インスタンス メソッドではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1166">The method that <paramref name="addMethod" /> represents is not an instance method.</span></span>  
  
<span data-ttu-id="62a30-1167">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-1167">-or-</span></span> 
 <span data-ttu-id="62a30-1168"><paramref name="arguments" /> には、<paramref name="addMethod" /> が表すメソッドのパラメーターの数と同じ数の要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1168"><paramref name="arguments" /> does not contain the same number of elements as the number of parameters for the method that <paramref name="addMethod" /> represents.</span></span>  
  
<span data-ttu-id="62a30-1169">または</span><span class="sxs-lookup"><span data-stu-id="62a30-1169">-or-</span></span> 
<span data-ttu-id="62a30-1170"><paramref name="arguments" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが、<paramref name="addMethod" /> の表すメソッドの対応するパラメーターの型に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1170">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementInit (addMethod As MethodInfo, ParamArray arguments As Expression()) As ElementInit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ElementInit ^ ElementInit(System::Reflection::MethodInfo ^ addMethod, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member ElementInit : System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.ElementInit" Usage="System.Linq.Expressions.Expression.ElementInit (addMethod, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="addMethod"><span data-ttu-id="62a30-1171"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1171">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-1172"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-1172">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1173">2 番目の引数として値の配列を指定して、<see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1173">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an array of values as the second argument.</span></span></summary>
        <returns><span data-ttu-id="62a30-1174">指定した値に設定された <see cref="T:System.Linq.Expressions.ElementInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> プロパティを含む <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1174">An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1175">`addMethod`パラメーターは、"Add"(大文字と小文字を区別しない) という名前のインスタンス メソッドを表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-1175">The `addMethod` parameter must represent an instance method named "Add" (case insensitive).</span></span> <span data-ttu-id="62a30-1176">Add メソッドは、要素の数と同じ数のパラメーターをいる必要があります`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1176">The add method must have the same number of parameters as the number of elements in `arguments`.</span></span> <span data-ttu-id="62a30-1177"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ内の各要素の`arguments`、add メソッドの対応するパラメーターの型に代入する必要があります可能性がある後*を引用符で囲む*します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1177">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a30-1178">要素は、対応するメソッドのパラメーターが型の場合にのみクォートは<xref:System.Linq.Expressions.Expression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1178">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="62a30-1179">要素にラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="62a30-1179">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="62a30-1180">見つかったノードが、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1180">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1181">次の例では、使用する方法、<xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29>を作成する方法、<xref:System.Linq.Expressions.ElementInit>呼び出しを表す、<xref:System.Collections.Generic.Dictionary%602.Add%2A>ディクショナリ コレクションの要素を初期化します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1181">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1182"><paramref name="addMethod" /> または <paramref name="arguments" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1182"><paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1183">addMethod が表すメソッドの名前が "Add" (大文字と小文字は区別されません) ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1183">The method that addMethod represents is not named "Add" (case insensitive).</span></span>  
  
<span data-ttu-id="62a30-1184">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-1184">-or-</span></span> 
<span data-ttu-id="62a30-1185">addMethod が表すメソッドが、インスタンス メソッドではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1185">The method that addMethod represents is not an instance method.</span></span>  
  
<span data-ttu-id="62a30-1186">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-1186">-or-</span></span> 
<span data-ttu-id="62a30-1187">arguments に、addMethod が表すメソッドのパラメーターの数と同じ数の要素が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1187">arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.</span></span>  
  
<span data-ttu-id="62a30-1188">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-1188">-or-</span></span> 
<span data-ttu-id="62a30-1189"><paramref name="arguments" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが、<paramref name="addMethod" /> の表すメソッドの対応するパラメーターの型に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1189">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Empty () As DefaultExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DefaultExpression ^ Empty();" />
      <MemberSignature Language="F#" Value="static member Empty : unit -&gt; System.Linq.Expressions.DefaultExpression" Usage="System.Linq.Expressions.Expression.Empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a30-1190"><see cref="T:System.Void" /> 型の空の式を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1190">Creates an empty expression that has <see cref="T:System.Void" /> type.</span></span></summary>
        <returns><span data-ttu-id="62a30-1191"><see cref="T:System.Linq.Expressions.DefaultExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、<see cref="F:System.Linq.Expressions.ExpressionType.Default" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="T:System.Void" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1191">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <see cref="T:System.Void" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1192">式が必要ですが、アクションが必要ない、空の式を使用できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1192">An empty expression can be used where an expression is expected but no action is desired.</span></span> <span data-ttu-id="62a30-1193">たとえば、ブロック式の最後の式として空の式を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1193">For example, you can use an empty expression as the last expression in a block expression.</span></span> <span data-ttu-id="62a30-1194">この場合、ブロックの式の戻り値は void です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1194">In this case, the block expression's return value is void.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1195">次のコード例では、空の式を作成し、ブロック式に追加する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1195">The following code example shows how to create an empty expression and add it to a block expression.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#31)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equal">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1196">等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1196">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equal (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Equal(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Equal : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Equal (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1197"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1197">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1198"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1198">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1199">等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1199">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span></span></summary>
        <returns><span data-ttu-id="62a30-1200"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1200">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1201">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1201">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1202"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1202">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1203">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1203">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="62a30-1204">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1204">Otherwise, it is `false`.</span></span> <span data-ttu-id="62a30-1205"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false`です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1205">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="62a30-1206">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1206">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1207">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1207">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1208">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1208">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-1209">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、等値演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1209">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1210">メソッドの実装は、それ以外の場合、`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1210">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1211">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1211">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1212">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1212">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1213">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1213">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1214">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1214">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1215">次の 2 つの条件が満たされているかどうか、ノードがリフトされたおよびノードの種類は<xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="62a30-1215">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="62a30-1216">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1216">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1217">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1217">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="62a30-1218">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1218">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1219">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1219">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-1220">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1220">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="62a30-1221">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1221">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-1222">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1222">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1223">次のコード例では、2 つの引数の値が等しいかどうかをチェックする式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1223">The following code example shows how to create an expression that checks whether the values of its two arguments are equal.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#8)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1224"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1224"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1225">等値演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1225">The equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equal (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Equal(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Equal : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Equal (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1226"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1226">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1227"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1227">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="62a30-1228"><see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1228"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1229"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1229">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1230">等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1230">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span></span> <span data-ttu-id="62a30-1231">実装メソッドを指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1231">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-1232"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1232">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1233">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1233">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1234"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1234">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1235">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティは等しく`liftToNull`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1235">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="62a30-1236">それ以外の場合、これらはどちらも`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1236">Otherwise, they are both `false`.</span></span> <span data-ttu-id="62a30-1237">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1237">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1238">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1238">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1239">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1239">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-1240">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドはメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-1240">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1241">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、等値演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1241">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1242">メソッドの実装は、それ以外の場合、`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1242">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1243">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1243">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1244">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1244">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1245">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1245">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1246">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1246">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1247">次の 2 つの条件が満たされている場合は、ノードがリフトいます。また、ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1247">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="62a30-1248">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1248">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1249">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1249">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="62a30-1250">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1250">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1251">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1251">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-1252">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1252">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="62a30-1253">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1253">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-1254">ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1254">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1255"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1255"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1256"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1256"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1257"><paramref name="method" /> は <see langword="null" /> で、等値演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1257"><paramref name="method" /> is <see langword="null" /> and the equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExclusiveOr">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1258">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="XOR" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1258">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOr (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOr(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOr : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOr (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1259"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1259">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1260"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1260">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1261">ユーザー定義型の <c>op_ExclusiveOr</c> を使用して、ビットごとの <see langword="XOR" /> 演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1261">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types.</span></span></summary>
        <returns><span data-ttu-id="62a30-1262"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1262">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1263">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1263">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1264"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1264">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1265">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1265">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-1266">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1266">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-1267"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1267">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-1268">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1268">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1269">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1269">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1270">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1270">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-1271">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`オーバー ロードするユーザー定義型を表す、`XOR`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1271">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1272">の場合`left`します。型と`right`します。型は整数またはブール値の型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1272">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1273">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1273">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1274">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1274">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1275">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1275">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1276">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1276">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1277">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1277">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-1278">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1278">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1279">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1279">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-1280">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1280">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1281">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1281">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-1282">ノードの型は、定義済みの結果型`XOR`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-1282">The type of the node is the result type of the predefined `XOR` operator.</span></span>  
  
-   <span data-ttu-id="62a30-1283">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1283">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-1284">ノードの型は、定義済みの結果の型に対応する null 許容型`XOR`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-1284">The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1285">次のコード例では、論理 XOR 演算を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1285">The following code example shows how to create an expression that represents the logical XOR operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#9)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1286"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1286"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1287"><see langword="XOR" /> 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1287">The <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOr (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOr(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOr : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOr (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1288"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1288">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1289"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1289">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1290"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1290">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1291">ユーザー定義型の <c>op_ExclusiveOr</c> を使用して、ビットごとの <see langword="XOR" /> 演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1291">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types.</span></span> <span data-ttu-id="62a30-1292">実装メソッドを指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1292">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-1293"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1293">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1294">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1294">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1295"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1295">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1296">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1296">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-1297">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1297">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-1298"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1298">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-1299">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1299">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1300">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1300">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1301">次の規則は、操作のメソッドを実装する選択を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1301">The following rules determine the chosen implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-1302">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドはメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-1302">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1303">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`オーバー ロードするユーザー定義型を表す、`XOR`演算子、、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1303">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1304">の場合`left`します。型と`right`します。型は整数またはブール値の型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1304">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1305">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1305">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1306">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1306">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1307">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1307">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1308">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1308">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1309">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1309">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-1310">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1310">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1311">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1311">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-1312">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1312">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1313">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1313">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-1314">ノードの型は、定義済みの結果型`XOR`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-1314">The type of the node is the result type of the predefined `XOR` operator.</span></span>  
  
-   <span data-ttu-id="62a30-1315">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1315">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-1316">ノードの型は、定義済みの結果の型に対応する null 許容型`XOR`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-1316">The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1317"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1317"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1318"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1318"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1319"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には <see langword="XOR" /> 演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1319"><paramref name="method" /> is <see langword="null" /> and the <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExclusiveOrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1320">ビットごとの XOR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1320">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOrAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1321"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1321">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1322"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1322">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1323">ユーザー定義型の <c>op_ExclusiveOr</c> を使用して、ビットごとの XOR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1323">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span></span></summary>
        <returns><span data-ttu-id="62a30-1324"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1324">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOrAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1325"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1325">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1326"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1326">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1327"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1327">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1328">ユーザー定義型の <c>op_ExclusiveOr</c> を使用して、ビットごとの XOR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1328">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span></span></summary>
        <returns><span data-ttu-id="62a30-1329"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1329">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOrAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1330"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1330">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1331"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1331">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1332"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1332">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-1333"><see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1333">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1334">ユーザー定義型の <c>op_ExclusiveOr</c> を使用して、ビットごとの XOR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1334">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span></span></summary>
        <returns><span data-ttu-id="62a30-1335"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1335">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Field">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1336">フィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1336">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Reflection.FieldInfo field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, System::Reflection::FieldInfo ^ field);" />
      <MemberSignature Language="F#" Value="static member Field : System.Linq.Expressions.Expression * System.Reflection.FieldInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Field (expression, field)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="field" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-1337"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1337">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span></span> <span data-ttu-id="62a30-1338"><see langword="static" /> (Visual Basic では <see langword="Shared" />) の場合、<paramref name="expression" /> は <see langword="null" /> にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-1338">For <see langword="static" /> (<see langword="Shared" /> in Visual Basic), <paramref name="expression" /> must be <see langword="null" />.</span></span></param>
        <param name="field"><span data-ttu-id="62a30-1339"><see cref="T:System.Reflection.FieldInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1339">The <see cref="T:System.Reflection.FieldInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1340">フィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1340">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span></span></summary>
        <returns><span data-ttu-id="62a30-1341"><see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1341">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1342"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.MemberExpression>と等しい、<xref:System.Reflection.FieldInfo.FieldType%2A>プロパティの`field`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1342">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of `field`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1343"><paramref name="field" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1343"><paramref name="field" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-1344">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-1344">-or-</span></span> 
<span data-ttu-id="62a30-1345"><paramref name="field" /> によって表されるフィールドが <see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、<paramref name="expression" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1345">The field represented by <paramref name="field" /> is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1346"><paramref name="expression" />.Type は、<paramref name="field" /> によって表されるフィールドの宣言型に代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1346"><paramref name="expression" />.Type is not assignable to the declaring type of the field represented by <paramref name="field" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, System::String ^ fieldName);" />
      <MemberSignature Language="F#" Value="static member Field : System.Linq.Expressions.Expression * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Field (expression, fieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-1347"><see cref="T:System.Linq.Expressions.Expression" /> に <see cref="P:System.Linq.Expressions.Expression.Type" /> という名前のフィールドが含まれている <paramref name="fieldName" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1347">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a field named <paramref name="fieldName" />.</span></span> <span data-ttu-id="62a30-1348">静的フィールドの場合は null を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1348">This can be null for static fields.</span></span></param>
        <param name="fieldName"><span data-ttu-id="62a30-1349">アクセスするフィールドの名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-1349">The name of a field to be accessed.</span></span></param>
        <summary><span data-ttu-id="62a30-1350">フィールドの名前を指定してフィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1350">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field given the name of the field.</span></span></summary>
        <returns><span data-ttu-id="62a30-1351"><see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="expression" /> により示されるフィールドを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> に設定された <see cref="T:System.Reflection.FieldInfo" /> プロパティを含む <paramref name="fieldName" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1351">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.FieldInfo" /> that represents the field denoted by <paramref name="fieldName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1352"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.MemberExpression>と等しい、<xref:System.Reflection.FieldInfo.FieldType%2A>のプロパティ、<xref:System.Reflection.FieldInfo>により示されるフィールドを表す`fieldName`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1352">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of the <xref:System.Reflection.FieldInfo> that represents the field denoted by `fieldName`.</span></span>  
  
 <span data-ttu-id="62a30-1353">このメソッドは検索`expression`します。型とその基本型の名前を持つフィールド`fieldName`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1353">This method searches `expression`.Type and its base types for a field that has the name `fieldName`.</span></span> <span data-ttu-id="62a30-1354">パブリック フィールドは、パブリックでないフィールドに対する基本設定を指定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1354">Public fields are given preference over non-public fields.</span></span> <span data-ttu-id="62a30-1355">一致するフィールドが見つかった場合、このメソッドを渡します`expression`と<xref:System.Reflection.FieldInfo>にそのフィールドを表す<xref:System.Linq.Expressions.Expression.Field%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1355">If a matching field is found, this method passes `expression` and the <xref:System.Reflection.FieldInfo> that represents that field to <xref:System.Linq.Expressions.Expression.Field%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1356">次のコード例では、フィールドへのアクセスを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1356">The following code example shows how to create an expression that represents accessing a field.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#37)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1357"><paramref name="expression" /> または <paramref name="fieldName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1357"><paramref name="expression" /> or <paramref name="fieldName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1358"><paramref name="fieldName" />.Type またはその基本型では <paramref name="expression" /> という名前のフィールドが定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1358">No field named <paramref name="fieldName" /> is defined in <paramref name="expression" />.Type or its base types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, Type type, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Type type, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::String ^ fieldName);" />
      <MemberSignature Language="F#" Value="static member Field : System.Linq.Expressions.Expression * Type * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Field (expression, type, fieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-1359">フィールドの格納オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-1359">The containing object of the field.</span></span> <span data-ttu-id="62a30-1360">静的フィールドの場合は null を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1360">This can be null for static fields.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-1361">フィールドを格納している <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1361">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the field.</span></span></param>
        <param name="fieldName"><span data-ttu-id="62a30-1362">アクセスされるフィールド。</span><span class="sxs-lookup"><span data-stu-id="62a30-1362">The field to be accessed.</span></span></param>
        <summary><span data-ttu-id="62a30-1363">フィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1363">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span></span></summary>
        <returns><span data-ttu-id="62a30-1364">作成された <see cref="T:System.Linq.Expressions.MemberExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1364">The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionType">
      <MemberSignature Language="C#" Value="public static Type GetActionType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetActionType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetActionType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetActionType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberSignature Language="F#" Value="static member GetActionType : Type[] -&gt; Type" Usage="System.Linq.Expressions.Expression.GetActionType typeArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs"><span data-ttu-id="62a30-1365"><see langword="System.Action" /> デリゲート型の型引数を指定する最大 16 個の <see cref="T:System.Type" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-1365">An array of up to sixteen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Action" /> delegate type.</span></span></param>
        <summary><span data-ttu-id="62a30-1366">特定の型引数を持つ汎用 <c>System.Action</c> デリゲート型を表す <see cref="T:System.Type" /> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1366">Creates a <see cref="T:System.Type" /> object that represents a generic <c>System.Action</c> delegate type that has specific type arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-1367">指定した型引数を持つ <c>System.Action</c> デリゲートの型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1367">The type of a <c>System.Action</c> delegate that has the specified type arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1368">例として場合の要素`typeArgs`型を表す`T1…Tn`、結果の<xref:System.Type>オブジェクトが構築されたデリゲート型を表す`System.Action<T1,…,Tn>`(C#) または`System.Action(Of T1,…,Tn)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="62a30-1368">As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Action<T1,…,Tn>` in C# or `System.Action(Of T1,…,Tn)` in Visual Basic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1369"><paramref name="typeArgs" /> に、16 個を超える要素が格納されています。</span><span class="sxs-lookup"><span data-stu-id="62a30-1369"><paramref name="typeArgs" /> contains more than sixteen elements.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1370"><paramref name="typeArgs" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1370"><paramref name="typeArgs" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetDelegateType">
      <MemberSignature Language="C#" Value="public static Type GetDelegateType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetDelegateType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDelegateType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetDelegateType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberSignature Language="F#" Value="static member GetDelegateType : Type[] -&gt; Type" Usage="System.Linq.Expressions.Expression.GetDelegateType typeArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs"><span data-ttu-id="62a30-1371">デリゲートの型引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-1371">The type arguments of the delegate.</span></span></param>
        <summary><span data-ttu-id="62a30-1372">特定の型引数を持つ汎用 <c>System.Func</c> または <c>System.Action</c> デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1372">Gets a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> or <c>System.Action</c> delegate type that has specific type arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-1373">デリゲート型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1373">The delegate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1374">最後の型引数は、デリゲートの戻り値の型を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1374">The last type argument determines the return type of the delegate.</span></span> <span data-ttu-id="62a30-1375">十分な大きさ Func またはアクションがない場合、カスタム デリゲート型が生成されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1375">If no Func or Action is large enough, it will generate a custom delegate type.</span></span>  
  
 <span data-ttu-id="62a30-1376">Func と同様には、最後の引数は、戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1376">As with Func, the last argument is the return type.</span></span> <span data-ttu-id="62a30-1377">アクションを生成するために System.Void を設定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1377">It can be set to System.Void to produce an Action.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFuncType">
      <MemberSignature Language="C#" Value="public static Type GetFuncType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetFuncType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFuncType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetFuncType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberSignature Language="F#" Value="static member GetFuncType : Type[] -&gt; Type" Usage="System.Linq.Expressions.Expression.GetFuncType typeArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs"><span data-ttu-id="62a30-1378"><see langword="System.Func" /> デリゲート型の型引数を指定する 1 個から 17 個の <see cref="T:System.Type" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-1378">An array of one to seventeen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Func" /> delegate type.</span></span></param>
        <summary><span data-ttu-id="62a30-1379">特定の型引数を持つ汎用 <c>System.Func</c> デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1379">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> delegate type that has specific type arguments.</span></span> <span data-ttu-id="62a30-1380">最後の型引数で、作成するデリゲートの戻り値の型を指定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1380">The last type argument specifies the return type of the created delegate.</span></span></summary>
        <returns><span data-ttu-id="62a30-1381">指定した型引数を持つ <c>System.Func</c> デリゲートの型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1381">The type of a <c>System.Func</c> delegate that has the specified type arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1382">`typeArgs` 少なくとも 1 つと、最大 17 個の要素を含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-1382">`typeArgs` must contain at least one and at most seventeen elements.</span></span>  
  
 <span data-ttu-id="62a30-1383">例として場合の要素`typeArgs`型を表す`T1…Tn`、結果の<xref:System.Type>オブジェクトが構築されたデリゲート型を表す`System.Func<T1,…,Tn>`(C#) または`System.Func(Of T1,…,Tn)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="62a30-1383">As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Func<T1,…,Tn>` in C# or `System.Func(Of T1,…,Tn)` in Visual Basic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1384"><paramref name="typeArgs" /> には、1 個未満または 17 個を超える要素が格納されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1384"><paramref name="typeArgs" /> contains fewer than one or more than seventeen elements.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1385"><paramref name="typeArgs" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1385"><paramref name="typeArgs" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Goto">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1386">go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1386">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Goto (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-1387"><see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1387">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <summary><span data-ttu-id="62a30-1388">go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1388">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span></span></summary>
        <returns><span data-ttu-id="62a30-1389">Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、指定された値に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <see cref="P:System.Linq.Expressions.GotoExpression.Target" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1389">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-1390">次の例を含む式を作成する方法を示します、<xref:System.Linq.Expressions.GotoExpression>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-1390">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.GotoExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#45)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#45)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Goto (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-1391"><see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1391">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="62a30-1392">ジャンプ時に関連付けられているラベルに渡される値。</span><span class="sxs-lookup"><span data-stu-id="62a30-1392">The value that will be passed to the associated label upon jumping.</span></span></param>
        <summary><span data-ttu-id="62a30-1393">go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1393">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span></span> <span data-ttu-id="62a30-1394">ジャンプ時にラベルに渡す値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1394">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-1395">Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="target" /> を含む <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1395">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-1396"><see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1396">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-1397"><see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1397">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1398">型を指定して、go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1398">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</span></span></summary>
        <returns><span data-ttu-id="62a30-1399">Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、指定された値に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> プロパティ、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1399">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto (target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-1400"><see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1400">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="62a30-1401">ジャンプ時に関連付けられているラベルに渡される値。</span><span class="sxs-lookup"><span data-stu-id="62a30-1401">The value that will be passed to the associated label upon jumping.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-1402"><see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1402">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1403">型を指定して、go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1403">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</span></span> <span data-ttu-id="62a30-1404">ジャンプ時にラベルに渡す値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1404">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-1405">Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1405">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GreaterThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1406">"大なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1406">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1407"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1407">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1408"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1408">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1409">"大なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1409">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="62a30-1410"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1410">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1411">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1411">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1412"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1412">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1413">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1413">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="62a30-1414">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1414">Otherwise, it is `false`.</span></span> <span data-ttu-id="62a30-1415"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1415">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="62a30-1416"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1416">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-1417">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1417">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1418">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1418">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1419">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1419">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-1420">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`「より大きい」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1420">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1421">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1421">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1422">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1422">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1423">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1423">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1424">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1424">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1425">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1425">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1426">次の 2 つの条件が満たされているかどうか、ノードがリフトされたおよびノードの種類は<xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="62a30-1426">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="62a30-1427">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1427">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1428">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1428">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="62a30-1429">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1429">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1430">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1430">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-1431">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1431">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="62a30-1432">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1432">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-1433">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1433">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1434">次のコード例では、2 つの整数を比較する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1434">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#10)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1435"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1435"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1436">"大なり" 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1436">The "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThan (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1437"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1437">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1438"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1438">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="62a30-1439"><see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1439"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1440"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1440">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1441">"大なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1441">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span></span> <span data-ttu-id="62a30-1442">実装メソッドを指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1442">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-1443"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1443">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1444">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1444">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1445"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1445">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1446">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティは等しく`liftToNull`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1446">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="62a30-1447">それ以外の場合、これらはどちらも`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1447">Otherwise, they are both `false`.</span></span> <span data-ttu-id="62a30-1448"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1448">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-1449">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1449">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1450">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1450">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1451">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1451">The following rules determine the implementing method for the operation :</span></span>  
  
-   <span data-ttu-id="62a30-1452">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドはメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-1452">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1453">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`「より大きい」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1453">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1454">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1454">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1455">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1455">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1456">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1456">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1457">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1457">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1458">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1458">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1459">次の 2 つの条件が満たされている場合は、ノードがリフトいます。また、ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1459">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="62a30-1460">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1460">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1461">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1461">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="62a30-1462">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1462">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1463">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1463">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-1464">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1464">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="62a30-1465">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1465">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-1466">ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1466">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1467"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1467"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1468"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1468"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1469"><paramref name="method" /> は <see langword="null" /> で、"大なり" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1469"><paramref name="method" /> is <see langword="null" /> and the "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1470">"以上" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1470">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1471"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1471">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1472"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1472">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1473">"以上" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1473">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="62a30-1474"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1474">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1475">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1475">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1476"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1476">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1477">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1477">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="62a30-1478">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1478">Otherwise, it is `false`.</span></span> <span data-ttu-id="62a30-1479"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1479">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="62a30-1480"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1480">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-1481">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1481">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1482">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1482">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1483">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1483">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-1484">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`「以上」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1484">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1485">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1485">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1486">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1486">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1487">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1487">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1488">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1488">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1489">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1489">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1490">次の 2 つの条件が満たされているかどうか、ノードがリフトされたおよびノードの種類は<xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="62a30-1490">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="62a30-1491">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1491">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1492">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1492">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="62a30-1493">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1493">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1494">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1494">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-1495">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1495">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="62a30-1496">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1496">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-1497">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1497">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1498">次のコード例では、2 つの整数を比較する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1498">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#11)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1499"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1499"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1500">"以上" 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1500">The "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThanOrEqual (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1501"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1501">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1502"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1502">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="62a30-1503"><see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1503"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1504"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1504">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1505">"以上" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1505">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="62a30-1506"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1506">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1507">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1507">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1508"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1508">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1509">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティは等しく`liftToNull`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1509">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="62a30-1510">それ以外の場合、これらはどちらも`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1510">Otherwise, they are both `false`.</span></span> <span data-ttu-id="62a30-1511"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1511">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-1512">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1512">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1513">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1513">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1514">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1514">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-1515">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドはメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-1515">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1516">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`「以上」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1516">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1517">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1517">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1518">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1518">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1519">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1519">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1520">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1520">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1521">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1521">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1522">次の 2 つの条件が満たされている場合は、ノードがリフトいます。また、ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1522">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="62a30-1523">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1523">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1524">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1524">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="62a30-1525">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1525">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1526">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1526">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-1527">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1527">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="62a30-1528">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1528">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-1529">ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1529">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1530"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1530"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1531"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1531"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1532"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には "greater than or equal" 演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1532"><paramref name="method" /> is <see langword="null" /> and the "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IfThen">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThen (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThen(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfThen (test As Expression, ifTrue As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ IfThen(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue);" />
      <MemberSignature Language="F#" Value="static member IfThen : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.IfThen (test, ifTrue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test"><span data-ttu-id="62a30-1533"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1533">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span></span></param>
        <param name="ifTrue"><span data-ttu-id="62a30-1534"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1534">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1535"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> ステートメントを指定して、条件付きブロックを表す <see langword="if" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1535">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with an <see langword="if" /> statement.</span></span></summary>
        <returns><span data-ttu-id="62a30-1536"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1536">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, properties set to the specified values.</span></span> <span data-ttu-id="62a30-1537"><see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> プロパティは既定の式に設定されます。また、このメソッドによって返される結果の <see cref="T:System.Linq.Expressions.ConditionalExpression" /> の型は <see cref="T:System.Void" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1537">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property is set to default expression and the type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-1538">次のコード例では、条件付きブロックを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1538">The following code example shows how to create an expression that represents a conditional block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#32)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfThenElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThenElse (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThenElse(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfThenElse (test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ IfThenElse(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse);" />
      <MemberSignature Language="F#" Value="static member IfThenElse : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.IfThenElse (test, ifTrue, ifFalse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test"><span data-ttu-id="62a30-1539"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1539">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span></span></param>
        <param name="ifTrue"><span data-ttu-id="62a30-1540"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1540">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span></span></param>
        <param name="ifFalse"><span data-ttu-id="62a30-1541"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1541">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1542"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> ステートメントと <see langword="if" /> ステートメントを指定して、条件付きブロックを表す <see langword="else" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1542">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with <see langword="if" /> and <see langword="else" /> statements.</span></span></summary>
        <returns><span data-ttu-id="62a30-1543"><see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1543">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span></span> <span data-ttu-id="62a30-1544">このメソッドによって返される結果の <see cref="T:System.Linq.Expressions.ConditionalExpression" /> の型は <see cref="T:System.Void" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1544">The type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-1545">次のコード例では、条件付きブロックを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1545">The following code example shows how to create an expression that represents a conditional block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#33)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Increment">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1546">式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1546">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Increment(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Increment : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Increment expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-1547">インクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1547">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</span></span></param>
        <summary><span data-ttu-id="62a30-1548">式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1548">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</span></span></summary>
        <returns><span data-ttu-id="62a30-1549">インクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1549">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1550">この式は、機能に渡されるオブジェクトの値を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1550">This expression is functional and does not change the value of the object that is passed to it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1551">次のコード例では、インクリメント演算を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1551">The following code example shows how to create an expression that represents an increment operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#24)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Increment(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Increment : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Increment (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-1552">インクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1552">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1553">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1553">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="62a30-1554">式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1554">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression by 1.</span></span></summary>
        <returns><span data-ttu-id="62a30-1555">インクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1555">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1556">この式は、機能に渡されるオブジェクトの値を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1556">This expression is functional and does not change the value of the object that is passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1557"><see cref="T:System.Linq.Expressions.InvocationExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1557">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::InvocationExpression ^ Invoke(System::Linq::Expressions::Expression ^ expression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.InvocationExpression" Usage="System.Linq.Expressions.Expression.Invoke (expression, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-1558">適用するデリゲートまたはラムダ式を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1558">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied to.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-1559">デリゲートまたはラムダ式が適用される引数を表す <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクトを格納している <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1559">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</span></span></param>
        <summary><span data-ttu-id="62a30-1560">引数式のリストにデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1560">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</span></span></summary>
        <returns><span data-ttu-id="62a30-1561">指定された引数に、指定されたデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1561">An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1562"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.InvocationExpression>で表されるデリゲートの戻り値の型を表す`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1562">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.</span></span>  
  
 <span data-ttu-id="62a30-1563"><xref:System.Linq.Expressions.InvocationExpression.Arguments%2A>プロパティ<xref:System.Linq.Expressions.InvocationExpression>空場合`arguments`は`null`。</span><span class="sxs-lookup"><span data-stu-id="62a30-1563">The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="62a30-1564">それ以外の場合と同じ要素が含まれている`arguments`これらの一部を除く<xref:System.Linq.Expressions.Expression>オブジェクトは、*引用符で囲まれた*します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1564">Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a30-1565">によって表されるデリゲートの対応するパラメーターの場合にのみ、要素を引用が`expression`の種類は<xref:System.Linq.Expressions.Expression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1565">An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="62a30-1566">要素にラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="62a30-1566">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="62a30-1567">見つかったノードが、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1567">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1568">次の例では、使用する方法、<xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29>を作成する方法、<xref:System.Linq.Expressions.InvocationExpression>指定された引数でラムダ式の呼び出しを表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1568">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1569"><paramref name="expression" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1569"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1570"><paramref name="expression" />.Type はデリゲート型または <see cref="T:System.Linq.Expressions.Expression`1" /> を表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1570"><paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.</span></span>  
  
<span data-ttu-id="62a30-1571">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-1571">-or-</span></span> 
<span data-ttu-id="62a30-1572"><paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="expression" /> によって表されるデリゲートの対応するパラメーターの型に代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1572">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1573"><paramref name="arguments" /> に、<paramref name="expression" /> により表されるデリゲートのパラメーターのリストと同じ数の要素が格納されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1573"><paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::InvocationExpression ^ Invoke(System::Linq::Expressions::Expression ^ expression, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.InvocationExpression" Usage="System.Linq.Expressions.Expression.Invoke (expression, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-1574">適用するデリゲートまたはラムダ式を表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1574">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-1575">デリゲートまたはラムダ式が適用される引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-1575">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</span></span></param>
        <summary><span data-ttu-id="62a30-1576">引数式のリストにデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1576">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</span></span></summary>
        <returns><span data-ttu-id="62a30-1577">指定された引数に、指定されたデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1577">An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1578"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.InvocationExpression>で表されるデリゲートの戻り値の型を表す`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1578">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.</span></span>  
  
 <span data-ttu-id="62a30-1579"><xref:System.Linq.Expressions.InvocationExpression.Arguments%2A>プロパティ<xref:System.Linq.Expressions.InvocationExpression>空場合`arguments`は`null`。</span><span class="sxs-lookup"><span data-stu-id="62a30-1579">The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="62a30-1580">それ以外の場合と同じ要素が含まれている`arguments`これらの一部を除く<xref:System.Linq.Expressions.Expression>オブジェクトは、*引用符で囲まれた*します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1580">Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a30-1581">によって表されるデリゲートの対応するパラメーターの場合にのみ、要素を引用が`expression`の種類は<xref:System.Linq.Expressions.Expression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1581">An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="62a30-1582">要素にラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="62a30-1582">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="62a30-1583">見つかったノードが、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1583">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1584">次の例では、使用する方法、<xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29>を作成する方法、<xref:System.Linq.Expressions.InvocationExpression>指定された引数でラムダ式の呼び出しを表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1584">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1585"><paramref name="expression" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1585"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1586"><paramref name="expression" />.Type はデリゲート型または <see cref="T:System.Linq.Expressions.Expression`1" /> を表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1586"><paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.</span></span>  
  
<span data-ttu-id="62a30-1587">または</span><span class="sxs-lookup"><span data-stu-id="62a30-1587">-or-</span></span> 
<span data-ttu-id="62a30-1588"><paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="expression" /> によって表されるデリゲートの対応するパラメーターの型に代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1588">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1589"><paramref name="arguments" /> に、<paramref name="expression" /> により表されるデリゲートのパラメーターのリストと同じ数の要素が格納されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1589"><paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsFalse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1590">式が false に評価されるかどうかを返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1590">Returns whether the expression evaluates to false.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsFalse(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member IsFalse : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsFalse expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-1591">評価する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1591">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span></span></param>
        <summary><span data-ttu-id="62a30-1592">式が false に評価されるかどうかを返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1592">Returns whether the expression evaluates to false.</span></span></summary>
        <returns><span data-ttu-id="62a30-1593"><see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a30-1593">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsFalse(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member IsFalse : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsFalse (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-1594">評価する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1594">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1595">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1595">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="62a30-1596">式が false に評価されるかどうかを返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1596">Returns whether the expression evaluates to false.</span></span></summary>
        <returns><span data-ttu-id="62a30-1597"><see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a30-1597">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsTrue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1598">式が true に評価されるかどうかを返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1598">Returns whether the expression evaluates to true.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsTrue(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member IsTrue : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsTrue expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-1599">評価する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1599">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span></span></param>
        <summary><span data-ttu-id="62a30-1600">式が true に評価されるかどうかを返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1600">Returns whether the expression evaluates to true.</span></span></summary>
        <returns><span data-ttu-id="62a30-1601"><see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a30-1601">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsTrue(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member IsTrue : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsTrue (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-1602">評価する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1602">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1603">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1603">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="62a30-1604">式が true に評価されるかどうかを返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1604">Returns whether the expression evaluates to true.</span></span></summary>
        <returns><span data-ttu-id="62a30-1605"><see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a30-1605">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Label">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1606">ラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1606">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label () As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label();" />
      <MemberSignature Language="F#" Value="static member Label : unit -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a30-1607">void 型で名前なしのラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1607">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and no name.</span></span></summary>
        <returns><span data-ttu-id="62a30-1608">新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1608">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-1609">次の例を含む式を作成する方法を示します、<xref:System.Linq.Expressions.LabelTarget>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-1609">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LabelTarget> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (target As LabelTarget) As LabelExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelExpression ^ Label(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Label : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LabelExpression" Usage="System.Linq.Expressions.Expression.Label target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-1610">この <see cref="T:System.Linq.Expressions.LabelTarget" /> が関連付けられる <see cref="T:System.Linq.Expressions.LabelExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1610">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</span></span></param>
        <summary><span data-ttu-id="62a30-1611">既定値のないラベルを表す <see cref="T:System.Linq.Expressions.LabelExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1611">Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label without a default value.</span></span></summary>
        <returns><span data-ttu-id="62a30-1612">既定値のない <see cref="T:System.Linq.Expressions.LabelExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1612">A <see cref="T:System.Linq.Expressions.LabelExpression" /> without a default value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (name As String) As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Label : string -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="62a30-1613">ラベルの名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-1613">The name of the label.</span></span></param>
        <summary><span data-ttu-id="62a30-1614">指定された名前を持つ void 型のラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1614">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and the given name.</span></span></summary>
        <returns><span data-ttu-id="62a30-1615">新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1615">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Label : Type -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-1616">ラベルにジャンプするときに渡す値の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1616">The type of value that is passed when jumping to the label.</span></span></param>
        <summary><span data-ttu-id="62a30-1617">型を指定して、ラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1617">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type.</span></span></summary>
        <returns><span data-ttu-id="62a30-1618">新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1618">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-1619">次の例では、使用する方法、<xref:System.Linq.Expressions.LabelTarget>ループ式内のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-1619">The following example demonstrates how to use a <xref:System.Linq.Expressions.LabelTarget> object in a loop expression.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (target As LabelTarget, defaultValue As Expression) As LabelExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelExpression ^ Label(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ defaultValue);" />
      <MemberSignature Language="F#" Value="static member Label : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.LabelExpression" Usage="System.Linq.Expressions.Expression.Label (target, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="defaultValue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-1620">この <see cref="T:System.Linq.Expressions.LabelTarget" /> が関連付けられる <see cref="T:System.Linq.Expressions.LabelExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1620">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</span></span></param>
        <param name="defaultValue"><span data-ttu-id="62a30-1621">通常の制御フローを経てラベルに到達した場合のこの <see cref="T:System.Linq.Expressions.LabelExpression" /> の値。</span><span class="sxs-lookup"><span data-stu-id="62a30-1621">The value of this <see cref="T:System.Linq.Expressions.LabelExpression" /> when the label is reached through regular control flow.</span></span></param>
        <summary><span data-ttu-id="62a30-1622">指定された既定値を持つラベルを表す <see cref="T:System.Linq.Expressions.LabelExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1622">Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label with the given default value.</span></span></summary>
        <returns><span data-ttu-id="62a30-1623">指定された既定値を持つ <see cref="T:System.Linq.Expressions.LabelExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1623">A <see cref="T:System.Linq.Expressions.LabelExpression" /> with the given default value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Label : Type * string -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-1624">ラベルにジャンプするときに渡す値の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1624">The type of value that is passed when jumping to the label.</span></span></param>
        <param name="name"><span data-ttu-id="62a30-1625">ラベルの名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-1625">The name of the label.</span></span></param>
        <summary><span data-ttu-id="62a30-1626">指定した型および名前を使用して、ラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1626">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type and name.</span></span></summary>
        <returns><span data-ttu-id="62a30-1627">新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1627">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Lambda">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1628">ラムダ式を表す式ツリーを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1628">Creates an expression tree that represents a lambda expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="62a30-1629"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1629">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1630"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1630">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1631">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1631">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="62a30-1632">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1632">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="62a30-1633"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1633">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1634"><see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-1634">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1635">最初にデリゲート型を構築することにより <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1635">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="62a30-1636"><see cref="T:System.Linq.Expressions.LambdaExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1636">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1637">`parameters`パラメーターは、16 個を超える要素を持つ必要ありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1637">The `parameters` parameter must not have more than sixteen elements.</span></span>  
  
 <span data-ttu-id="62a30-1638">要素`parameters`の参照をパラメーターの式と等しくする必要があります`body`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1638">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="62a30-1639">このメソッドのいずれかから、適切なデリゲート型を構築します、`System.Func`汎用デリゲート。</span><span class="sxs-lookup"><span data-stu-id="62a30-1639">This method constructs an appropriate delegate type from one of the `System.Func` generic delegates.</span></span> <span data-ttu-id="62a30-1640">次のいずれかにデリゲート型に渡します、<xref:System.Linq.Expressions.ExpressionType.Lambda>作成するファクトリ メソッドを<xref:System.Linq.Expressions.LambdaExpression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1640">It then passes the delegate type to one of the <xref:System.Linq.Expressions.ExpressionType.Lambda> factory methods to create a <xref:System.Linq.Expressions.LambdaExpression>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1641"><paramref name="body" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1641"><paramref name="body" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-1642">または</span><span class="sxs-lookup"><span data-stu-id="62a30-1642">-or-</span></span> 
<span data-ttu-id="62a30-1643"><paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1643">One or more elements of <paramref name="parameters" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1644"><paramref name="parameters" /> に、16 個を超える要素が格納されています。</span><span class="sxs-lookup"><span data-stu-id="62a30-1644"><paramref name="parameters" /> contains more than sixteen elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="62a30-1645"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1645">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="62a30-1646">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1646">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1647"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1647">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1648">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1648">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="62a30-1649">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1649">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="62a30-1650"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1650">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="62a30-1651">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1651">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1652"><see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトを格納する配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-1652">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1653">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1653">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="62a30-1654">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1654">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="62a30-1655"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1655">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="62a30-1656">ラムダの名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-1656">The name for the lambda.</span></span> <span data-ttu-id="62a30-1657">デバッグ情報を出力するために使用します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1657">Used for emitting debug information.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1658"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1658">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1659">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1659">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="62a30-1660">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1660">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="62a30-1661">ラムダのデリゲート シグネチャを表す <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1661">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="62a30-1662"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1662">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1663"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1663">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1664">最初にデリゲート型を構築することにより <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1664">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span></span> <span data-ttu-id="62a30-1665">これは、コンパイル時にデリゲート型が不明な場合に使用できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1665">It can be used when the delegate type is not known at compile time.</span></span></summary>
        <returns><span data-ttu-id="62a30-1666"><see cref="P:System.Linq.Expressions.Expression.NodeType" /> と等しい <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティを含むラムダ式を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-1666">An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1667">この関数から返されるオブジェクトが型<xref:System.Linq.Expressions.Expression%601>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1667">The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>.</span></span> <span data-ttu-id="62a30-1668"><xref:System.Linq.Expressions.LambdaExpression>をラムダ式の具象型がコンパイル時に不明なので、返されたオブジェクトを表す型を使用します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1668">The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</span></span>  
  
 <span data-ttu-id="62a30-1669">によって表されるデリゲート型のパラメーターの数`delegateType`の長さでなければなりません。`parameters`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1669">The number of parameters for the delegate type represented by`delegateType` must equal the length of `parameters`.</span></span>  
  
 <span data-ttu-id="62a30-1670">要素`parameters`の参照をパラメーターの式と等しくする必要があります`body`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1670">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="62a30-1671"><xref:System.Linq.Expressions.Expression.Type%2A>結果として得られるオブジェクトのプロパティは等しく`delegateType`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1671">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`.</span></span> <span data-ttu-id="62a30-1672">場合`parameters`は`null`、<xref:System.Linq.Expressions.LambdaExpression.Parameters%2A>結果として得られるオブジェクトのプロパティが空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="62a30-1672">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1673">次の例では、渡された引数に 1 を加算したラムダ式を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1673">The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#42)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1674"><paramref name="delegateType" /> または <paramref name="body" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1674"><paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-1675">または</span><span class="sxs-lookup"><span data-stu-id="62a30-1675">-or-</span></span> 
<span data-ttu-id="62a30-1676"><paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1676">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1677"><paramref name="delegateType" /> がデリゲート型を表していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1677"><paramref name="delegateType" /> does not represent a delegate type.</span></span>  
  
<span data-ttu-id="62a30-1678">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-1678">-or-</span></span> 
 <span data-ttu-id="62a30-1679"><paramref name="body" />.Type は、<paramref name="delegateType" /> によって表されるデリゲート型の戻り値の型に代入できない型を表しています。</span><span class="sxs-lookup"><span data-stu-id="62a30-1679"><paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.</span></span>  
  
<span data-ttu-id="62a30-1680">または</span><span class="sxs-lookup"><span data-stu-id="62a30-1680">-or-</span></span> 
 <span data-ttu-id="62a30-1681"><paramref name="parameters" /> に、<paramref name="delegateType" /> により表されるデリゲート型のパラメーターのリストと同じ数の要素が格納されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1681"><paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.</span></span>  
  
<span data-ttu-id="62a30-1682">または</span><span class="sxs-lookup"><span data-stu-id="62a30-1682">-or-</span></span> 
<span data-ttu-id="62a30-1683"><paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="delegateType" /> によって表されるデリゲート型の対応するパラメーター型から代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1683">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="62a30-1684">ラムダのデリゲート シグネチャを表す <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1684">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="62a30-1685"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1685">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1686"><see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-1686">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1687">最初にデリゲート型を構築することにより <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1687">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span></span> <span data-ttu-id="62a30-1688">これは、コンパイル時にデリゲート型が不明な場合に使用できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1688">It can be used when the delegate type is not known at compile time.</span></span></summary>
        <returns><span data-ttu-id="62a30-1689"><see cref="P:System.Linq.Expressions.Expression.NodeType" /> と等しい <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティを含むラムダ式を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-1689">An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1690">この関数から返されるオブジェクトが型<xref:System.Linq.Expressions.Expression%601>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1690">The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>.</span></span> <span data-ttu-id="62a30-1691"><xref:System.Linq.Expressions.LambdaExpression>をラムダ式の具象型がコンパイル時に不明なので、返されたオブジェクトを表す型を使用します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1691">The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</span></span>  
  
 <span data-ttu-id="62a30-1692">によって表されるデリゲート型のパラメーターの数`delegateType`の長さでなければなりません。`parameters`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1692">The number of parameters for the delegate type represented by `delegateType` must equal the length of `parameters`.</span></span>  
  
 <span data-ttu-id="62a30-1693">要素`parameters`の参照をパラメーターの式と等しくする必要があります`body`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1693">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="62a30-1694"><xref:System.Linq.Expressions.Expression.Type%2A>結果として得られるオブジェクトのプロパティは等しく`delegateType`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1694">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`.</span></span> <span data-ttu-id="62a30-1695">場合`parameters`は`null`、<xref:System.Linq.Expressions.LambdaExpression.Parameters%2A>結果として得られるオブジェクトのプロパティが空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="62a30-1695">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1696"><paramref name="delegateType" /> または <paramref name="body" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1696"><paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-1697">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-1697">-or-</span></span> 
<span data-ttu-id="62a30-1698"><paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1698">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1699"><paramref name="delegateType" /> がデリゲート型を表していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1699"><paramref name="delegateType" /> does not represent a delegate type.</span></span>  
  
<span data-ttu-id="62a30-1700">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-1700">-or-</span></span> 
 <span data-ttu-id="62a30-1701"><paramref name="body" />.Type は、<paramref name="delegateType" /> によって表されるデリゲート型の戻り値の型に代入できない型を表しています。</span><span class="sxs-lookup"><span data-stu-id="62a30-1701"><paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.</span></span>  
  
<span data-ttu-id="62a30-1702">または</span><span class="sxs-lookup"><span data-stu-id="62a30-1702">-or-</span></span> 
 <span data-ttu-id="62a30-1703"><paramref name="parameters" /> に、<paramref name="delegateType" /> により表されるデリゲート型のパラメーターのリストと同じ数の要素が格納されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1703"><paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.</span></span>  
  
<span data-ttu-id="62a30-1704">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-1704">-or-</span></span> 
<span data-ttu-id="62a30-1705"><paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="delegateType" /> によって表されるデリゲート型の対応するパラメーター型から代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1705">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, name, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="62a30-1706"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1706">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="62a30-1707">ラムダの名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-1707">The name for the lambda.</span></span> <span data-ttu-id="62a30-1708">デバッグ情報を出力するために使用します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1708">Used for emitting debug information.</span></span></param>
        <param name="tailCall"><span data-ttu-id="62a30-1709">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1709">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1710"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1710">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1711">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1711">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="62a30-1712">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1712">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="62a30-1713">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1713">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="62a30-1714"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1714">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="62a30-1715">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1715">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1716"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1716">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1717">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1717">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="62a30-1718">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1718">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * bool * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="62a30-1719">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1719">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="62a30-1720"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1720">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="62a30-1721">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1721">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1722"><see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトを格納する配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-1722">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1723">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1723">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="62a30-1724">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1724">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * string * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="62a30-1725">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1725">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="62a30-1726"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1726">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="62a30-1727">ラムダの名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-1727">The name for the lambda.</span></span> <span data-ttu-id="62a30-1728">デバッグ情報を出力するために使用します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1728">Used for emitting debug information.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1729"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1729">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1730">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1730">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="62a30-1731">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1731">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * string * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, name, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="62a30-1732">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1732">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span></span></param>
        <param name="body"><span data-ttu-id="62a30-1733"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1733">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="62a30-1734">ラムダの名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-1734">The name for the lambda.</span></span> <span data-ttu-id="62a30-1735">デバッグ情報を出力するために使用します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1735">Used for emitting debug information.</span></span></param>
        <param name="tailCall"><span data-ttu-id="62a30-1736">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1736">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1737"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1737">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1738">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1738">Creates a LambdaExpression by first constructing a delegate type.</span></span></summary>
        <returns><span data-ttu-id="62a30-1739">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1739">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="62a30-1740">デリゲート型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1740">A delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="62a30-1741"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1741">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1742"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1742">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1743">デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1743">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span></span></summary>
        <returns><span data-ttu-id="62a30-1744"><see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1744">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1745">デリゲート型のパラメーターの数`TDelegate`内の要素の数と同じにする必要があります`parameters`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1745">The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.</span></span>  
  
 <span data-ttu-id="62a30-1746">要素`parameters`の参照をパラメーターの式と等しくする必要があります`body`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1746">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="62a30-1747"><xref:System.Linq.Expressions.Expression.Type%2A>結果として得られるオブジェクトのプロパティが型を表す`TDelegate`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1747">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`.</span></span> <span data-ttu-id="62a30-1748">場合`parameters`は`null`、<xref:System.Linq.Expressions.LambdaExpression.Parameters%2A>結果として得られるオブジェクトのプロパティが空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="62a30-1748">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1749"><paramref name="body" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1749"><paramref name="body" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-1750">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-1750">-or-</span></span> 
<span data-ttu-id="62a30-1751"><paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1751">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1752"><paramref name="TDelegate" /> がデリゲート型でありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1752"><paramref name="TDelegate" /> is not a delegate type.</span></span>  
  
<span data-ttu-id="62a30-1753">または</span><span class="sxs-lookup"><span data-stu-id="62a30-1753">-or-</span></span> 
 <span data-ttu-id="62a30-1754"><paramref name="body" />.Type は、<paramref name="TDelegate" /> の戻り値の型に代入できない型を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1754"><paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.</span></span>  
  
<span data-ttu-id="62a30-1755">または</span><span class="sxs-lookup"><span data-stu-id="62a30-1755">-or-</span></span> 
 <span data-ttu-id="62a30-1756"><paramref name="parameters" /> に、<paramref name="TDelegate" /> のパラメーターのリストと同じ数の要素が格納されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1756"><paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.</span></span>  
  
<span data-ttu-id="62a30-1757">または</span><span class="sxs-lookup"><span data-stu-id="62a30-1757">-or-</span></span> 
<span data-ttu-id="62a30-1758"><paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="TDelegate" /> の対応するパラメーター型から代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1758">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="62a30-1759">デリゲート型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1759">A delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="62a30-1760"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1760">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1761"><see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-1761">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1762">デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1762">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span></span></summary>
        <returns><span data-ttu-id="62a30-1763"><see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1763">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1764">デリゲート型のパラメーターの数`TDelegate`内の要素の数と同じにする必要があります`parameters`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1764">The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.</span></span>  
  
 <span data-ttu-id="62a30-1765">要素`parameters`の参照をパラメーターの式と等しくする必要があります`body`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1765">The elements of `parameters` must be reference equal to the parameter expressions in`body`.</span></span>  
  
 <span data-ttu-id="62a30-1766"><xref:System.Linq.Expressions.Expression.Type%2A>結果として得られるオブジェクトのプロパティが型を表す`TDelegate`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1766">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`.</span></span> <span data-ttu-id="62a30-1767">場合`parameters`は`null`、<xref:System.Linq.Expressions.LambdaExpression.Parameters%2A>結果として得られるオブジェクトのプロパティが空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="62a30-1767">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1768"><paramref name="body" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1768"><paramref name="body" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-1769">または</span><span class="sxs-lookup"><span data-stu-id="62a30-1769">-or-</span></span> 
<span data-ttu-id="62a30-1770"><paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1770">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1771"><paramref name="TDelegate" /> がデリゲート型でありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1771"><paramref name="TDelegate" /> is not a delegate type.</span></span>  
  
<span data-ttu-id="62a30-1772">または</span><span class="sxs-lookup"><span data-stu-id="62a30-1772">-or-</span></span> 
 <span data-ttu-id="62a30-1773"><paramref name="body" />.Type は、<paramref name="TDelegate" /> の戻り値の型に代入できない型を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1773"><paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.</span></span>  
  
<span data-ttu-id="62a30-1774">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-1774">-or-</span></span> 
 <span data-ttu-id="62a30-1775"><paramref name="parameters" /> に、<paramref name="TDelegate" /> のパラメーターのリストと同じ数の要素が格納されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1775"><paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.</span></span>  
  
<span data-ttu-id="62a30-1776">または</span><span class="sxs-lookup"><span data-stu-id="62a30-1776">-or-</span></span> 
<span data-ttu-id="62a30-1777"><paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="TDelegate" /> の対応するパラメーター型から代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1777">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="62a30-1778">デリゲート型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1778">The delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="62a30-1779"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1779">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="62a30-1780">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1780">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1781"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1781">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1782">デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1782">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span></span></summary>
        <returns><span data-ttu-id="62a30-1783"><see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1783">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="62a30-1784">デリゲート型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1784">The delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="62a30-1785"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1785">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="tailCall"><span data-ttu-id="62a30-1786">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1786">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1787"><see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトを格納する配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-1787">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1788">デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1788">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span></span></summary>
        <returns><span data-ttu-id="62a30-1789"><see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1789">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="62a30-1790">デリゲート型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1790">The delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="62a30-1791"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1791">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="62a30-1792">ラムダの名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-1792">The name of the lambda.</span></span> <span data-ttu-id="62a30-1793">デバッグ情報を生成するために使用します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1793">Used for generating debugging information.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1794"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1794">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1795">デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1795">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span></span></summary>
        <returns><span data-ttu-id="62a30-1796"><see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1796">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, name, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate"><span data-ttu-id="62a30-1797">デリゲート型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1797">The delegate type.</span></span></typeparam>
        <param name="body"><span data-ttu-id="62a30-1798"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1798">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span></span></param>
        <param name="name"><span data-ttu-id="62a30-1799">ラムダの名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-1799">The name of the lambda.</span></span> <span data-ttu-id="62a30-1800">デバッグ情報を生成するために使用します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1800">Used for generating debugging info.</span></span></param>
        <param name="tailCall"><span data-ttu-id="62a30-1801">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1801">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span></span></param>
        <param name="parameters"><span data-ttu-id="62a30-1802"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1802">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-1803">デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1803">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span></span></summary>
        <returns><span data-ttu-id="62a30-1804"><see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1804">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LeftShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1805">ビットごとの左シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1805">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShift (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LeftShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShift (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1806"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1806">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1807"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1807">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1808">ビットごとの左シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1808">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-1809"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1809">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1810">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1810">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1811"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1811">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1812">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1812">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-1813">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1813">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-1814"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1814">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-1815">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1815">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1816">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1816">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1817">次の規則は、操作の選択したメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1817">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-1818">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、左シフト演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1818">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1819">の場合`left`します。型が整数型 (1 つの<xref:System.Byte>、 <xref:System.SByte>、 <xref:System.Int16>、 <xref:System.UInt16>、 <xref:System.Int32>、 <xref:System.UInt32>、 <xref:System.Int64>、 <xref:System.UInt64>、または対応する null 許容型) と`right`します。種類は<xref:System.Int32>、メソッドの実装`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1819">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1820">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1820">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1821">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1821">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1822">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1822">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1823">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1823">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1824">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1824">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-1825">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1825">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1826">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1826">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-1827">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1827">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1828">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1828">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-1829">ノードの型は、定義済みの左シフト演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1829">The type of the node is the result type of the predefined left-shift operator.</span></span>  
  
-   <span data-ttu-id="62a30-1830">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1830">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-1831">ノードの型は、定義済みの左シフト演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1831">The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1832"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1832"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1833">左シフト演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1833">The left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShift (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LeftShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShift (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1834"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1834">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1835"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1835">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1836"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1836">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1837">ビットごとの左シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1837">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-1838"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1838">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1839">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1839">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1840"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1840">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1841">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1841">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-1842">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1842">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-1843"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1843">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-1844">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1844">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1845">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1845">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1846">次の規則は、操作の選択したメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1846">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-1847">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-1847">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-1848">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、左シフト演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1848">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1849">の場合`left`します。型が整数型 (1 つの<xref:System.Byte>、 <xref:System.SByte>、 <xref:System.Int16>、 <xref:System.UInt16>、 <xref:System.Int32>、 <xref:System.UInt32>、 <xref:System.Int64>、 <xref:System.UInt64>、または対応する null 許容型) と`right`します。種類は<xref:System.Int32>、メソッドの実装`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1849">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1850">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1850">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1851">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1851">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1852">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1852">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1853">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1853">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1854">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-1854">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-1855">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1855">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1856">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1856">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-1857">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1857">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1858">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1858">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-1859">ノードの型は、定義済みの左シフト演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1859">The type of the node is the result type of the predefined left-shift operator.</span></span>  
  
-   <span data-ttu-id="62a30-1860">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1860">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-1861">ノードの型は、定義済みの左シフト演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1861">The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1862"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1862"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1863"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1863"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1864"><paramref name="method" /> は <see langword="null" /> で、左シフト演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1864"><paramref name="method" /> is <see langword="null" /> and the left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LeftShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1865">ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1865">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShiftAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1866"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1866">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1867"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1867">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1868">ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1868">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-1869"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1869">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShiftAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1870"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1870">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1871"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1871">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1872"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1872">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1873">ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1873">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-1874"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1874">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShiftAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1875"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1875">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1876"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1876">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1877"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1877">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-1878"><see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1878">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1879">ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1879">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-1880"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1880">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LessThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1881">"小なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1881">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1882"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1882">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1883"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1883">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1884">"小なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1884">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="62a30-1885"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1885">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1886">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1886">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1887"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1887">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1888">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1888">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="62a30-1889">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1889">Otherwise, it is `false`.</span></span> <span data-ttu-id="62a30-1890"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1890">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="62a30-1891"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1891">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-1892">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1892">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1893">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1893">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1894">操作のメソッドの実装は、次の規則に基づいて選択されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-1894">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="62a30-1895">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`「より小さい」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1895">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1896">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1896">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1897">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1897">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1898">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1898">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1899">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1899">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1900">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1900">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1901">次の 2 つの条件が満たされているかどうか、ノードがリフトされたおよびノードの種類は<xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="62a30-1901">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="62a30-1902">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1902">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1903">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1903">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="62a30-1904">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1904">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1905">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1905">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-1906">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1906">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="62a30-1907">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1907">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-1908">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1908">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1909">次のコード例では、2 つの整数を比較する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1909">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#25)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1910"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1910"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1911">"小なり" 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1911">The "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThan (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1912"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1912">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1913"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1913">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="62a30-1914"><see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1914"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1915"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1915">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1916">"小なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1916">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="62a30-1917"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1917">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1918">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1918">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1919"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1919">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1920">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティは等しく`liftToNull`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1920">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="62a30-1921">それ以外の場合、これらはどちらも`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1921">Otherwise, they are both `false`.</span></span> <span data-ttu-id="62a30-1922"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1922">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-1923">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1923">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1924">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1924">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1925">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1925">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-1926">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドはメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-1926">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1927">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`「より小さい」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1927">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1928">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1928">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1929">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1929">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1930">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1930">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1931">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1931">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1932">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1932">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1933">次の 2 つの条件が満たされている場合は、ノードがリフトいます。また、ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1933">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="62a30-1934">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1934">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1935">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1935">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="62a30-1936">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1936">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1937">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1937">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-1938">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1938">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="62a30-1939">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1939">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-1940">ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1940">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1941"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1941"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-1942"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1942"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1943"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には "less than" 演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1943"><paramref name="method" /> is <see langword="null" /> and the "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-1944">"以下" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1944">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1945"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1945">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1946"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1946">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1947">"以下" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1947">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="62a30-1948"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1948">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1949">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1949">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1950"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1950">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1951">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1951">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="62a30-1952">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1952">Otherwise, it is `false`.</span></span> <span data-ttu-id="62a30-1953"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1953">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="62a30-1954"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1954">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-1955">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1955">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1956">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1956">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1957">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1957">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-1958">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`「と等しいかそれより小さい」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1958">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1959">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1959">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1960">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1960">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1961">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1961">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1962">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1962">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1963">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1963">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1964">次の 2 つの条件が満たされているかどうか、ノードがリフトされたおよびノードの種類は<xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="62a30-1964">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="62a30-1965">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1965">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1966">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1966">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="62a30-1967">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1967">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1968">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1968">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-1969">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1969">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="62a30-1970">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-1970">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-1971">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1971">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-1972">次のコード例では、2 つの整数を比較する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1972">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#26)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-1973"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1973"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-1974">"以下" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1974">The "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThanOrEqual (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-1975"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1975">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-1976"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1976">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="62a30-1977"><see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1977"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-1978"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1978">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-1979">"以下" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1979">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than or equal" numeric comparison.</span></span></summary>
        <returns><span data-ttu-id="62a30-1980"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-1980">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-1981">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1981">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-1982"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1982">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-1983">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティは等しく`liftToNull`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1983">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="62a30-1984">それ以外の場合、これらはどちらも`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1984">Otherwise, they are both `false`.</span></span> <span data-ttu-id="62a30-1985"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1985">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-1986">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-1986">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-1987">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1987">Implementing Method</span></span>  
 <span data-ttu-id="62a30-1988">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1988">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-1989">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドはメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-1989">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1990">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`「と等しいかそれより小さい」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1990">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1991">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1991">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-1992">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-1992">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-1993">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1993">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-1994">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-1994">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-1995">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-1995">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-1996">次の 2 つの条件が満たされている場合は、ノードがリフトいます。また、ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1996">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="62a30-1997">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-1997">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-1998">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-1998">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="62a30-1999">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-1999">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2000">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2000">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2001">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2001">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="62a30-2002">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-2002">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-2003">ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2003">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2004"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2004"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2005"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2005"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2006"><paramref name="method" /> は <see langword="null" /> で、"以下" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2006"><paramref name="method" /> is <see langword="null" /> and the "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ListBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2007"><see cref="T:System.Linq.Expressions.MemberListBinding" /> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2007">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (member As MemberInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MemberInfo ^ member, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MemberInfo * seq&lt;System.Linq.Expressions.ElementInit&gt; -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (member, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="62a30-2008"><see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定するフィールドまたはプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2008">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="62a30-2009"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2009">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2010">メンバーがフィールドまたはプロパティである <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2010">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</span></span></summary>
        <returns><span data-ttu-id="62a30-2011"><see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2011">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2012"><paramref name="member" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2012"><paramref name="member" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2013">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2013">-or-</span></span> 
<span data-ttu-id="62a30-2014"><paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2014">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2015"><paramref name="member" /> は、フィールドまたはプロパティを表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2015"><paramref name="member" /> does not represent a field or property.</span></span>  
  
<span data-ttu-id="62a30-2016">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2016">-or-</span></span> 
<span data-ttu-id="62a30-2017"><paramref name="member" /> が表すフィールドまたはプロパティの <see cref="P:System.Reflection.FieldInfo.FieldType" /> または <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2017">The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (member As MemberInfo, ParamArray initializers As ElementInit()) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MemberInfo ^ member, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MemberInfo * System.Linq.Expressions.ElementInit[] -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (member, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="62a30-2018"><see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定するフィールドまたはプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2018">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="62a30-2019"><see cref="T:System.Linq.Expressions.ElementInit" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-2019">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2020">メンバーがフィールドまたはプロパティである <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2020">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</span></span></summary>
        <returns><span data-ttu-id="62a30-2021"><see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2021">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2022"><paramref name="member" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2022"><paramref name="member" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2023">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2023">-or-</span></span> 
<span data-ttu-id="62a30-2024"><paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2024">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2025"><paramref name="member" /> は、フィールドまたはプロパティを表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2025"><paramref name="member" /> does not represent a field or property.</span></span>  
  
<span data-ttu-id="62a30-2026">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2026">-or-</span></span> 
<span data-ttu-id="62a30-2027"><paramref name="member" /> が表すフィールドまたはプロパティの <see cref="P:System.Reflection.FieldInfo.FieldType" /> または <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2027">The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (propertyAccessor As MethodInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MethodInfo ^ propertyAccessor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.ElementInit&gt; -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (propertyAccessor, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor"><span data-ttu-id="62a30-2028">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2028">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <param name="initializers"><span data-ttu-id="62a30-2029"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2029">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2030">指定したプロパティ アクセサー メソッドに基づいて <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2030">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> based on a specified property accessor method.</span></span></summary>
        <returns><span data-ttu-id="62a30-2031"><see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.MemberInfo" /> プロパティ、および <paramref name="propertyAccessor" /> の要素が設定された <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> を持つ <paramref name="initializers" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2031">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2032"><paramref name="propertyAccessor" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2032"><paramref name="propertyAccessor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2033">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2033">-or-</span></span> 
<span data-ttu-id="62a30-2034"><paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2034">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2035"><paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2035"><paramref name="propertyAccessor" /> does not represent a property accessor method.</span></span>  
  
<span data-ttu-id="62a30-2036">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2036">-or-</span></span> 
<span data-ttu-id="62a30-2037"><paramref name="propertyAccessor" /> により表されるメソッドがアクセスするプロパティの <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2037">The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (propertyAccessor As MethodInfo, ParamArray initializers As ElementInit()) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MethodInfo ^ propertyAccessor, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MethodInfo * System.Linq.Expressions.ElementInit[] -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (propertyAccessor, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor"><span data-ttu-id="62a30-2038">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2038">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <param name="initializers"><span data-ttu-id="62a30-2039"><see cref="T:System.Linq.Expressions.ElementInit" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-2039">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2040">指定したプロパティ アクセサー メソッドに基づいて <see cref="T:System.Linq.Expressions.MemberListBinding" /> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2040">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object based on a specified property accessor method.</span></span></summary>
        <returns><span data-ttu-id="62a30-2041"><see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.MemberInfo" /> プロパティ、および <paramref name="propertyAccessor" /> の要素が設定された <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> を持つ <paramref name="initializers" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2041">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2042"><paramref name="propertyAccessor" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2042"><paramref name="propertyAccessor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2043">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2043">-or-</span></span> 
<span data-ttu-id="62a30-2044"><paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2044">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2045"><paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2045"><paramref name="propertyAccessor" /> does not represent a property accessor method.</span></span>  
  
<span data-ttu-id="62a30-2046">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2046">-or-</span></span> 
<span data-ttu-id="62a30-2047"><paramref name="propertyAccessor" /> により表されるメソッドがアクセスするプロパティの <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2047">The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ListInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2048"><see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2048">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * seq&lt;System.Linq.Expressions.ElementInit&gt; -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="62a30-2049"><see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2049">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="62a30-2050"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2050">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2051">指定した <see cref="T:System.Linq.Expressions.ListInitExpression" /> オブジェクトを使用してコレクションを初期化する <see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2051">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</span></span></summary>
        <returns><span data-ttu-id="62a30-2052"><see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2052">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2053"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`newExpression`を実装する型を表す必要があります<xref:System.Collections.IEnumerable>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2053">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="62a30-2054"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.ListInitExpression>と等しい`newExpression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2054">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-2055">次の例を使用する方法を示します、<xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29>を作成する方法、<xref:System.Linq.Expressions.ListInitExpression>キー/値ペアの 2 つの新しいディクショナリのインスタンスの初期化を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2055">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2056"><paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2056"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2057">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2057">-or-</span></span> 
<span data-ttu-id="62a30-2058"><paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2058">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2059"><paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2059"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="62a30-2060"><see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2060">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="62a30-2061"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2061">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2062">"Add" という名前のメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2062">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</span></span></summary>
        <returns><span data-ttu-id="62a30-2063"><see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2063">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2064"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`newExpression`を実装する型を表す必要があります<xref:System.Collections.IEnumerable>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2064">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="62a30-2065">このオーバー ロードを使用するには<xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>、`newExpression`します。型またはその基本型は、"Add"(大文字と小文字を区別しない) という名前を正確に 1 つの引数を受け取る 1 つのメソッドを宣言する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2065">In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="62a30-2066">引数の型は、によって表される型から割り当て可能である必要があります、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティの最初の要素の`initializers`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2066">The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.</span></span>  
  
 <span data-ttu-id="62a30-2067"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 、返されたプロパティ<xref:System.Linq.Expressions.ListInitExpression>型の 1 つの要素を含む<xref:System.Linq.Expressions.ElementInit>の各要素に対して`initializers`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2067">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="62a30-2068"><xref:System.Linq.Expressions.ElementInit.Arguments%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>はシングルトン コレクションの対応する要素が含まれる`initializers`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2068">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="62a30-2069"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>で検出された追加のメソッドを表す`newExpression`します。型またはその基本型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2069">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.</span></span>  
  
 <span data-ttu-id="62a30-2070"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.ListInitExpression>と等しい`newExpression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2070">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2071"><paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2071"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2072">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2072">-or-</span></span> 
<span data-ttu-id="62a30-2073"><paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2073">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2074"><paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2074"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2075"><paramref name="newExpression" />.Type またはその基本型で、"Add" (大文字と小文字を区別しない) という名前のインスタンス メソッドは宣言されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2075">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.</span></span>  
  
<span data-ttu-id="62a30-2076">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2076">-or-</span></span> 
<span data-ttu-id="62a30-2077"><paramref name="newExpression" />.Type またはその基本型の Add メソッドは、ちょうど 1 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2077">The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.</span></span>  
  
<span data-ttu-id="62a30-2078">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2078">-or-</span></span> 
<span data-ttu-id="62a30-2079"><paramref name="initializers" /> の最初の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが表す型は、<paramref name="newExpression" />.Type またはその基本型の Add メソッドの引数の型に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2079">The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.</span></span>  
  
<span data-ttu-id="62a30-2080">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2080">-or-</span></span> 
<span data-ttu-id="62a30-2081">"Add" (大文字と小文字を区別しない) という名前の、複数の引数と互換性のあるメソッドが、<paramref name="newExpression" />.Type および/またはその基本型に存在します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2081">More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Linq.Expressions.ElementInit[] -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="62a30-2082"><see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2082">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="62a30-2083"><see cref="T:System.Linq.Expressions.ElementInit" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-2083">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2084">指定した <see cref="T:System.Linq.Expressions.ListInitExpression" /> オブジェクトを使用してコレクションを初期化する <see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2084">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</span></span></summary>
        <returns><span data-ttu-id="62a30-2085"><see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2085">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2086"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`newExpression`を実装する型を表す必要があります<xref:System.Collections.IEnumerable>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2086">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="62a30-2087"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.ListInitExpression>と等しい`newExpression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2087">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-2088">次の例を使用する方法を示します、<xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29>を作成する方法、<xref:System.Linq.Expressions.ListInitExpression>キー/値ペアの 2 つの新しいディクショナリのインスタンスの初期化を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2088">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2089"><paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2089"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2090">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2090">-or-</span></span> 
<span data-ttu-id="62a30-2091"><paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2091">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2092"><paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2092"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="62a30-2093"><see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2093">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="initializers"><span data-ttu-id="62a30-2094"><see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-2094">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2095">"Add" という名前のメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2095">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</span></span></summary>
        <returns><span data-ttu-id="62a30-2096"><see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2096">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2097"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`newExpression`を実装する型を表す必要があります<xref:System.Collections.IEnumerable>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2097">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="62a30-2098">このオーバー ロードを使用するには<xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>、`newExpression`します。型またはその基本型は、"Add"(大文字と小文字を区別しない) という名前を正確に 1 つの引数を受け取る 1 つのメソッドを宣言する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2098">In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="62a30-2099">引数の型は、によって表される型から割り当て可能である必要があります、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティの最初の要素の`initializers`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2099">The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.</span></span>  
  
 <span data-ttu-id="62a30-2100"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 、返されたプロパティ<xref:System.Linq.Expressions.ListInitExpression>型の 1 つの要素を含む<xref:System.Linq.Expressions.ElementInit>の各要素に対して`initializers`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2100">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="62a30-2101"><xref:System.Linq.Expressions.ElementInit.Arguments%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>はシングルトン コレクションの対応する要素が含まれる`initializers`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2101">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="62a30-2102"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>で検出された追加のメソッドを表す`newExpression`します。型またはその基本型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2102">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.</span></span>  
  
 <span data-ttu-id="62a30-2103"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.ListInitExpression>と等しい`newExpression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2103">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2104"><paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2104"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2105">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2105">-or-</span></span> 
<span data-ttu-id="62a30-2106"><paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2106">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2107"><paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2107"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2108"><paramref name="newExpression" />.Type またはその基本型で、"Add" (大文字と小文字を区別しない) という名前のインスタンス メソッドは宣言されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2108">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.</span></span>  
  
<span data-ttu-id="62a30-2109">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2109">-or-</span></span> 
<span data-ttu-id="62a30-2110"><paramref name="newExpression" />.Type またはその基本型の Add メソッドは、ちょうど 1 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2110">The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.</span></span>  
  
<span data-ttu-id="62a30-2111">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2111">-or-</span></span> 
<span data-ttu-id="62a30-2112"><paramref name="initializers" /> の最初の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが表す型は、<paramref name="newExpression" />.Type またはその基本型の Add メソッドの引数の型に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2112">The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.</span></span>  
  
<span data-ttu-id="62a30-2113">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2113">-or-</span></span> 
<span data-ttu-id="62a30-2114">"Add" (大文字と小文字を区別しない) という名前の、複数の引数と互換性のあるメソッドが、<paramref name="newExpression" />.Type および/またはその基本型に存在します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2114">More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Reflection::MethodInfo ^ addMethod, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, addMethod, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="62a30-2115"><see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2115">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="addMethod"><span data-ttu-id="62a30-2116">コレクションに要素を追加する、"Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2116">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method named "Add" (case insensitive), that adds an element to a collection.</span></span></param>
        <param name="initializers"><span data-ttu-id="62a30-2117"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2117">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2118">指定したメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2118">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</span></span></summary>
        <returns><span data-ttu-id="62a30-2119"><see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2119">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2120"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`newExpression`を実装する型を表す必要があります<xref:System.Collections.IEnumerable>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2120">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="62a30-2121">場合`addMethod`は`null`、`newExpression`します。型またはその基本型は、"Add"(大文字と小文字を区別しない) という名前を正確に 1 つの引数を受け取る 1 つのメソッドを宣言する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2121">If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="62a30-2122">場合`addMethod`ない`null`、"Add"(大文字と小文字を区別しない) という名前を正確に 1 つのパラメーターを持つインスタンス メソッドを表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2122">If `addMethod` is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</span></span> <span data-ttu-id="62a30-2123">によって表される型、<xref:System.Linq.Expressions.Expression.Type%2A>の各要素のプロパティ`initializers`add メソッドの引数の型に代入する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2123">The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.</span></span>  
  
 <span data-ttu-id="62a30-2124"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 、返されたプロパティ<xref:System.Linq.Expressions.ListInitExpression>型の 1 つの要素を含む<xref:System.Linq.Expressions.ElementInit>の各要素に対して`initializers`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2124">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="62a30-2125"><xref:System.Linq.Expressions.ElementInit.Arguments%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>はシングルトン コレクションの対応する要素が含まれる`initializers`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2125">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="62a30-2126"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>と等しい`addMethod`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2126">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.</span></span>  
  
 <span data-ttu-id="62a30-2127"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.ListInitExpression>と等しい`newExpression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2127">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2128"><paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2128"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2129">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2129">-or-</span></span> 
<span data-ttu-id="62a30-2130"><paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2130">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2131"><paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2131"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span>  
  
<span data-ttu-id="62a30-2132">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2132">-or-</span></span> 
 <span data-ttu-id="62a30-2133"><paramref name="addMethod" /> は <see langword="null" /> ではなく、受け取る引数が 1 つだけの "Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドを表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2133"><paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</span></span>  
  
<span data-ttu-id="62a30-2134">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2134">-or-</span></span> 
 <span data-ttu-id="62a30-2135"><paramref name="addMethod" /> は <see langword="null" /> ではなく、<paramref name="initializers" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティによって表される型を <paramref name="addMethod" /> が表すメソッドの引数型に代入することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2135"><paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2136"><paramref name="addMethod" /> は <see langword="null" /> で、1 つの型互換の引数を受け取る "Add" という名前のインスタンス メソッドが <paramref name="newExpression" />.Type またはその基本型に存在しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2136"><paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Reflection::MethodInfo ^ addMethod, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, addMethod, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="62a30-2137"><see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2137">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="addMethod"><span data-ttu-id="62a30-2138">1 つの引数を受け取り、コレクションに要素を追加するインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2138">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that takes one argument, that adds an element to a collection.</span></span></param>
        <param name="initializers"><span data-ttu-id="62a30-2139"><see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-2139">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2140">指定したメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2140">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</span></span></summary>
        <returns><span data-ttu-id="62a30-2141"><see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2141">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2142"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`newExpression`を実装する型を表す必要があります<xref:System.Collections.IEnumerable>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2142">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="62a30-2143">場合`addMethod`は`null`、`newExpression`します。型またはその基本型は、"Add"(大文字と小文字を区別しない) という名前を正確に 1 つの引数を受け取る 1 つのメソッドを宣言する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2143">If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="62a30-2144">場合`addMethod`ない`null`、"Add"(大文字と小文字を区別しない) という名前を正確に 1 つのパラメーターを持つインスタンス メソッドを表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2144">If `addMethod` is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</span></span> <span data-ttu-id="62a30-2145">によって表される型、<xref:System.Linq.Expressions.Expression.Type%2A>の各要素のプロパティ`initializers`add メソッドの引数の型に代入する必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2145">The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.</span></span>  
  
 <span data-ttu-id="62a30-2146"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 、返されたプロパティ<xref:System.Linq.Expressions.ListInitExpression>型の 1 つの要素を含む<xref:System.Linq.Expressions.ElementInit>の各要素に対して`initializers`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2146">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="62a30-2147"><xref:System.Linq.Expressions.ElementInit.Arguments%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>はシングルトン コレクションの対応する要素が含まれる`initializers`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2147">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="62a30-2148"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>と等しい`addMethod`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2148">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.</span></span>  
  
 <span data-ttu-id="62a30-2149"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.ListInitExpression>と等しい`newExpression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2149">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2150"><paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2150"><paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2151">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2151">-or-</span></span> 
<span data-ttu-id="62a30-2152"><paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2152">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2153"><paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2153"><paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span></span>  
  
<span data-ttu-id="62a30-2154">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2154">-or-</span></span> 
 <span data-ttu-id="62a30-2155"><paramref name="addMethod" /> は <see langword="null" /> ではなく、受け取る引数が 1 つだけの "Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドを表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2155"><paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</span></span>  
  
<span data-ttu-id="62a30-2156">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2156">-or-</span></span> 
 <span data-ttu-id="62a30-2157"><paramref name="addMethod" /> は <see langword="null" /> ではなく、<paramref name="initializers" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティによって表される型を <paramref name="addMethod" /> が表すメソッドの引数型に代入することはできません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2157"><paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2158"><paramref name="addMethod" /> は <see langword="null" /> で、1 つの型互換の引数を受け取る "Add" という名前のインスタンス メソッドが <paramref name="newExpression" />.Type またはその基本型に存在しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2158"><paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Loop">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2159"><see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2159">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="static member Loop : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.LoopExpression" Usage="System.Linq.Expressions.Expression.Loop body" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="62a30-2160">ループの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-2160">The body of the loop.</span></span></param>
        <summary><span data-ttu-id="62a30-2161">指定した本体を使用して、<see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2161">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</span></span></summary>
        <returns><span data-ttu-id="62a30-2162">作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2162">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression, break As LabelTarget) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::LabelTarget ^ break);" />
      <MemberSignature Language="F#" Value="static member Loop : System.Linq.Expressions.Expression * System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LoopExpression" Usage="System.Linq.Expressions.Expression.Loop (body, break)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="62a30-2163">ループの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-2163">The body of the loop.</span></span></param>
        <param name="break"><span data-ttu-id="62a30-2164">ループの本体によって使用される break の移動先。</span><span class="sxs-lookup"><span data-stu-id="62a30-2164">The break target used by the loop body.</span></span></param>
        <summary><span data-ttu-id="62a30-2165">指定した本体および break の移動先を使用して、<see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2165">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body and break target.</span></span></summary>
        <returns><span data-ttu-id="62a30-2166">作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2166">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-2167">次の例を含むブロック式を作成する方法、<xref:System.Linq.Expressions.LoopExpression>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-2167">The following example demonstrates how to create a block expression that contains a <xref:System.Linq.Expressions.LoopExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break, class System.Linq.Expressions.LabelTarget continue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression, break As LabelTarget, continue As LabelTarget) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::LabelTarget ^ break, System::Linq::Expressions::LabelTarget ^ continue);" />
      <MemberSignature Language="F#" Value="static member Loop : System.Linq.Expressions.Expression * System.Linq.Expressions.LabelTarget * System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LoopExpression" Usage="System.Linq.Expressions.Expression.Loop (body, break, continue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="continue" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="62a30-2168">ループの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-2168">The body of the loop.</span></span></param>
        <param name="break"><span data-ttu-id="62a30-2169">ループの本体によって使用される break の移動先。</span><span class="sxs-lookup"><span data-stu-id="62a30-2169">The break target used by the loop body.</span></span></param>
        <param name="continue"><span data-ttu-id="62a30-2170">ループの本体によって使用される continue の移動先。</span><span class="sxs-lookup"><span data-stu-id="62a30-2170">The continue target used by the loop body.</span></span></param>
        <summary><span data-ttu-id="62a30-2171">指定した本体を使用して、<see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2171">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</span></span></summary>
        <returns><span data-ttu-id="62a30-2172">作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2172">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeBinary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2173">適切なファクトリ メソッドを呼び出すことにより、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2173">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> by calling the appropriate factory method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MakeBinary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MakeBinary (binaryType, left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binaryType"><span data-ttu-id="62a30-2174">二項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2174">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span></span></param>
        <param name="left"><span data-ttu-id="62a30-2175">左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2175">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2176">右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2176">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span></span></param>
        <summary><span data-ttu-id="62a30-2177">適切なファクトリ メソッドを呼び出すことにより、左オペランドと右オペランドを指定して、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2177">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left and right operands, by calling an appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="62a30-2178">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2178">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2179">`binaryType`パラメーターを指定する<xref:System.Linq.Expressions.BinaryExpression>ファクトリ メソッドがこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2179">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method calls.</span></span> <span data-ttu-id="62a30-2180">たとえば場合、`binaryType`は<xref:System.Linq.Expressions.ExpressionType.Subtract>、このメソッドは<xref:System.Linq.Expressions.Expression.Subtract%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2180">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-2181">次の例では、使用する方法、<xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29>を作成する方法、<xref:System.Linq.Expressions.BinaryExpression>から別の 1 つの数値の減算を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2181">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29> method to create a <xref:System.Linq.Expressions.BinaryExpression> that represents the subtraction of one number from another.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#8)]
 [!code-vb[System.Linq.Expressions.Expression#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2182"><paramref name="binaryType" /> は、二項式ノードには対応していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2182"><paramref name="binaryType" /> does not correspond to a binary expression node.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2183"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2183"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MakeBinary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MakeBinary (binaryType, left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="binaryType"><span data-ttu-id="62a30-2184">二項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2184">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span></span></param>
        <param name="left"><span data-ttu-id="62a30-2185">左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2185">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2186">右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2186">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="62a30-2187"><see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2187"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2188">実装メソッドを指定する <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2188">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</span></span></param>
        <summary><span data-ttu-id="62a30-2189">適切なファクトリ メソッドを呼び出すことにより、左オペランド、右オペランド、および実装メソッドを指定して、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2189">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand and implementing method, by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="62a30-2190">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2190">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2191">`binaryType`パラメーターを指定する<xref:System.Linq.Expressions.BinaryExpression>このメソッドの呼び出しはファクトリ メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-2191">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call.</span></span> <span data-ttu-id="62a30-2192">たとえば場合、`binaryType`は<xref:System.Linq.Expressions.ExpressionType.Subtract>、このメソッドは<xref:System.Linq.Expressions.Expression.Subtract%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2192">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span> <span data-ttu-id="62a30-2193">`liftToNull`と`method`適切なファクトリ メソッドに対応するパラメーターがない場合、パラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2193">The `liftToNull` and `method` parameters are ignored if the appropriate factory method does not have a corresponding parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2194"><paramref name="binaryType" /> は、二項式ノードには対応していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2194"><paramref name="binaryType" /> does not correspond to a binary expression node.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2195"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2195"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member MakeBinary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MakeBinary (binaryType, left, right, liftToNull, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="binaryType"><span data-ttu-id="62a30-2196">二項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2196">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span></span></param>
        <param name="left"><span data-ttu-id="62a30-2197">左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2197">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2198">右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2198">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="62a30-2199"><see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2199"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2200">実装メソッドを指定する <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2200">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-2201">型変換関数を表す <see cref="T:System.Linq.Expressions.LambdaExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2201">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.</span></span> <span data-ttu-id="62a30-2202">このパラメーターは、<paramref name="binaryType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> または複合割り当てである場合にのみ使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2202">This parameter is used only if <paramref name="binaryType" /> is <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> or compound assignment.</span></span></param>
        <summary><span data-ttu-id="62a30-2203">適切なファクトリ メソッドを呼び出すことにより、左オペランド、右オペランド、実装メソッド、および型変換関数を指定して、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2203">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="62a30-2204">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2204">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2205">`binaryType`パラメーターを指定する<xref:System.Linq.Expressions.BinaryExpression>このメソッドの呼び出しはファクトリ メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-2205">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call.</span></span> <span data-ttu-id="62a30-2206">たとえば場合、`binaryType`は<xref:System.Linq.Expressions.ExpressionType.Subtract>、このメソッドは<xref:System.Linq.Expressions.Expression.Subtract%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2206">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span> <span data-ttu-id="62a30-2207">`liftToNull`、`method`と`conversion`適切なファクトリ メソッドに対応するパラメーターがない場合、パラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2207">The `liftToNull`, `method` and `conversion` parameters are ignored if the appropriate factory method does not have a corresponding parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2208"><paramref name="binaryType" /> は、二項式ノードには対応していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2208"><paramref name="binaryType" /> does not correspond to a binary expression node.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2209"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2209"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeCatchBlock">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock MakeCatchBlock (Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock MakeCatchBlock(class System.Type type, class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ MakeCatchBlock(Type ^ type, System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberSignature Language="F#" Value="static member MakeCatchBlock : Type * System.Linq.Expressions.ParameterExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.MakeCatchBlock (type, variable, body, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-2210">この <see cref="P:System.Linq.Expressions.Expression.Type" /> によって処理される <see cref="T:System.Exception" /> の <see cref="T:System.Linq.Expressions.CatchBlock" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2210">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span></span></param>
        <param name="variable"><span data-ttu-id="62a30-2211">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2211">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span></span></param>
        <param name="body"><span data-ttu-id="62a30-2212">catch ステートメントの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-2212">The body of the catch statement.</span></span></param>
        <param name="filter"><span data-ttu-id="62a30-2213"><see cref="T:System.Exception" /> フィルターの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-2213">The body of the <see cref="T:System.Exception" /> filter.</span></span></param>
        <summary><span data-ttu-id="62a30-2214">指定された要素を使用して、catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2214">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with the specified elements.</span></span></summary>
        <returns><span data-ttu-id="62a30-2215">作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2215">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2216">`type` null 以外である必要がありますの型と一致して`variable`(かどうかに指定した場合)。</span><span class="sxs-lookup"><span data-stu-id="62a30-2216">`type` must be non-null and match the type of `variable` (if it is supplied).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeDynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2217">動的な操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2217">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arguments As IEnumerable(Of Expression)) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="62a30-2218"><see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2218">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="62a30-2219">動的操作のランタイム バインダー。</span><span class="sxs-lookup"><span data-stu-id="62a30-2219">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-2220">動的操作の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-2220">The arguments to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="62a30-2221">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2221">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-2222"><see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2222">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="62a30-2223"><see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2223">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="62a30-2224">動的操作の実行時バインダー。</span><span class="sxs-lookup"><span data-stu-id="62a30-2224">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arg0"><span data-ttu-id="62a30-2225">動的操作の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-2225">The argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="62a30-2226">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2226">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and one argument.</span></span></summary>
        <returns><span data-ttu-id="62a30-2227"><see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2227">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, ParamArray arguments As Expression()) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="62a30-2228"><see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2228">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="62a30-2229">動的操作のランタイム バインダー。</span><span class="sxs-lookup"><span data-stu-id="62a30-2229">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-2230">動的操作の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-2230">The arguments to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="62a30-2231">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2231">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-2232"><see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2232">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="62a30-2233"><see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2233">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="62a30-2234">動的操作の実行時バインダー。</span><span class="sxs-lookup"><span data-stu-id="62a30-2234">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arg0"><span data-ttu-id="62a30-2235">動的操作の 1 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-2235">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-2236">動的操作の 2 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-2236">The second argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="62a30-2237">指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> および 2 つの引数によってバインドされる動的操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2237">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and two arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-2238"><see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2238">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="62a30-2239"><see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2239">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="62a30-2240">動的操作の実行時バインダー。</span><span class="sxs-lookup"><span data-stu-id="62a30-2240">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arg0"><span data-ttu-id="62a30-2241">動的操作の 1 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-2241">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-2242">動的操作の 2 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-2242">The second argument to the dynamic operation.</span></span></param>
        <param name="arg2"><span data-ttu-id="62a30-2243">動的操作の 3 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-2243">The third argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="62a30-2244">指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> および 3 つの引数によってバインドされる動的操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2244">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and three arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-2245"><see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2245">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="62a30-2246"><see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2246">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span></span></param>
        <param name="binder"><span data-ttu-id="62a30-2247">動的操作の実行時バインダー。</span><span class="sxs-lookup"><span data-stu-id="62a30-2247">The runtime binder for the dynamic operation.</span></span></param>
        <param name="arg0"><span data-ttu-id="62a30-2248">動的操作の 1 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-2248">The first argument to the dynamic operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="62a30-2249">動的操作の 2 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-2249">The second argument to the dynamic operation.</span></span></param>
        <param name="arg2"><span data-ttu-id="62a30-2250">動的操作の 3 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-2250">The third argument to the dynamic operation.</span></span></param>
        <param name="arg3"><span data-ttu-id="62a30-2251">動的操作の 4 番目の引数。</span><span class="sxs-lookup"><span data-stu-id="62a30-2251">The fourth argument to the dynamic operation.</span></span></param>
        <summary><span data-ttu-id="62a30-2252">指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> および 4 つの引数によってバインドされる動的操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2252">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and four arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-2253"><see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2253">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGoto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression MakeGoto (System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression MakeGoto(valuetype System.Linq.Expressions.GotoExpressionKind kind, class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ MakeGoto(System::Linq::Expressions::GotoExpressionKind kind, System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member MakeGoto : System.Linq.Expressions.GotoExpressionKind * System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.MakeGoto (kind, target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="System.Linq.Expressions.GotoExpressionKind" />
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="kind"><span data-ttu-id="62a30-2254"><see cref="T:System.Linq.Expressions.GotoExpression" /> の <see cref="T:System.Linq.Expressions.GotoExpressionKind" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2254">The <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</span></span></param>
        <param name="target"><span data-ttu-id="62a30-2255"><see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2255">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="62a30-2256">ジャンプ時に関連付けられているラベルに渡される値。</span><span class="sxs-lookup"><span data-stu-id="62a30-2256">The value that will be passed to the associated label upon jumping.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-2257"><see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2257">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2258">指定した <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプを表す <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2258">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a jump of the specified <see cref="T:System.Linq.Expressions.GotoExpressionKind" />.</span></span> <span data-ttu-id="62a30-2259">ジャンプ時にラベルに渡す値も指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2259">The value passed to the label upon jumping can also be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-2260"><see cref="T:System.Linq.Expressions.GotoExpression" /> と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2260">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to <paramref name="kind" />, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression MakeIndex (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression MakeIndex(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeIndex (instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ MakeIndex(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member MakeIndex : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.MakeIndex (instance, indexer, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="62a30-2261">プロパティが属するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-2261">The object to which the property belongs.</span></span> <span data-ttu-id="62a30-2262">プロパティが <see langword="static" /> (Visual Basic では <see langword="shared" />) の場合は、null にします。</span><span class="sxs-lookup"><span data-stu-id="62a30-2262">It should be null if the property is <see langword="static" /> (<see langword="shared" /> in Visual Basic).</span></span></param>
        <param name="indexer"><span data-ttu-id="62a30-2263">インデックス化するプロパティを表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2263">An <see cref="T:System.Linq.Expressions.Expression" /> representing the property to index.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-2264">プロパティのインデックス化に使用する引数を含む <c>IEnumerable&lt;Expression&gt;</c> (Visual Basic では <c>IEnumerable (Of Expression)</c>)。</span><span class="sxs-lookup"><span data-stu-id="62a30-2264">An <c>IEnumerable&lt;Expression&gt;</c> (<c>IEnumerable (Of Expression)</c> in Visual Basic) that contains the arguments that will be used to index the property.</span></span></param>
        <summary><span data-ttu-id="62a30-2265">オブジェクトのインデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2265">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> that represents accessing an indexed property in an object.</span></span></summary>
        <returns><span data-ttu-id="62a30-2266">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2266">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeMemberAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression MakeMemberAccess (System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression MakeMemberAccess(class System.Linq.Expressions.Expression expression, class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ MakeMemberAccess(System::Linq::Expressions::Expression ^ expression, System::Reflection::MemberInfo ^ member);" />
      <MemberSignature Language="F#" Value="static member MakeMemberAccess : System.Linq.Expressions.Expression * System.Reflection.MemberInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.MakeMemberAccess (expression, member)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-2267">メンバーが属するオブジェクトを表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2267">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the object that the member belongs to.</span></span> <span data-ttu-id="62a30-2268">静的メンバーの場合は null を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2268">This can be null for static members.</span></span></param>
        <param name="member"><span data-ttu-id="62a30-2269">アクセス先のフィールドまたはプロパティを記述する <see cref="T:System.Reflection.MemberInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2269">The <see cref="T:System.Reflection.MemberInfo" /> that describes the field or property to be accessed.</span></span></param>
        <summary><span data-ttu-id="62a30-2270">フィールドまたはプロパティのいずれかへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2270">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing either a field or a property.</span></span></summary>
        <returns><span data-ttu-id="62a30-2271">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.MemberExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2271">The <see cref="T:System.Linq.Expressions.MemberExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2272">このメソッドは、作成に使用できる、<xref:System.Linq.Expressions.MemberExpression>フィールドまたはプロパティの種類に応じてのいずれかへのアクセスを表す`member`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2272">This method can be used to create a <xref:System.Linq.Expressions.MemberExpression> that represents accessing either a field or a property, depending on the type of `member`.</span></span> <span data-ttu-id="62a30-2273">場合`member`の種類は<xref:System.Reflection.FieldInfo>、このメソッドを呼び出す<xref:System.Linq.Expressions.Expression.Field%2A>を作成する、<xref:System.Linq.Expressions.MemberExpression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2273">If `member` is of type <xref:System.Reflection.FieldInfo>, this method calls <xref:System.Linq.Expressions.Expression.Field%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.</span></span> <span data-ttu-id="62a30-2274">場合`member`の種類は<xref:System.Reflection.PropertyInfo>、このメソッドを呼び出す<xref:System.Linq.Expressions.Expression.Property%2A>を作成する、<xref:System.Linq.Expressions.MemberExpression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2274">If `member` is of type <xref:System.Reflection.PropertyInfo>, this method calls <xref:System.Linq.Expressions.Expression.Property%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2275"><paramref name="member" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2275"><paramref name="member" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2276"><paramref name="member" /> は、フィールドまたはプロパティを表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2276"><paramref name="member" /> does not represent a field or property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeTry">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression MakeTry (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt; handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression MakeTry(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.Expression fault, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.CatchBlock&gt; handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ MakeTry(Type ^ type, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally, System::Linq::Expressions::Expression ^ fault, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberSignature Language="F#" Value="static member MakeTry : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.CatchBlock&gt; -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.MakeTry (type, body, finally, fault, handlers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt;" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-2277">try 式の結果の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2277">The result type of the try expression.</span></span> <span data-ttu-id="62a30-2278">null の場合は、本体およびすべてのハンドラーの型が同一である必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2278">If null, bodh and all handlers must have identical type.</span></span></param>
        <param name="body"><span data-ttu-id="62a30-2279">try ブロックの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-2279">The body of the try block.</span></span></param>
        <param name="finally"><span data-ttu-id="62a30-2280">finally ブロックの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-2280">The body of the finally block.</span></span> <span data-ttu-id="62a30-2281">try ブロックに関連付けられている finally ブロックがない場合は、null を渡します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2281">Pass null if the try block has no finally block associated with it.</span></span></param>
        <param name="fault"><span data-ttu-id="62a30-2282">fault ブロックの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-2282">The body of the fault block.</span></span> <span data-ttu-id="62a30-2283">try ブロックに関連付けられている fault ブロックがない場合は、null を渡します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2283">Pass null if the try block has no fault block associated with it.</span></span></param>
        <param name="handlers"><span data-ttu-id="62a30-2284">try ブロックに関連付ける catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> のコレクション。</span><span class="sxs-lookup"><span data-stu-id="62a30-2284">A collection of <see cref="T:System.Linq.Expressions.CatchBlock" />s representing the catch statements to be associated with the try block.</span></span></param>
        <summary><span data-ttu-id="62a30-2285">指定された要素を使用して、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2285">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with the specified elements.</span></span></summary>
        <returns><span data-ttu-id="62a30-2286">作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2286">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeUnary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2287">適切なファクトリ メソッドを呼び出すことにより、<see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2287">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> by calling the appropriate factory method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ MakeUnary(System::Linq::Expressions::ExpressionType unaryType, System::Linq::Expressions::Expression ^ operand, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member MakeUnary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.MakeUnary (unaryType, operand, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="unaryType"><span data-ttu-id="62a30-2288">単項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2288">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</span></span></param>
        <param name="operand"><span data-ttu-id="62a30-2289">オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2289">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-2290">変換後の型を指定する <see cref="T:System.Type" /> (該当しない場合は <see langword="null" /> を渡します)。</span><span class="sxs-lookup"><span data-stu-id="62a30-2290">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</span></span></param>
        <summary><span data-ttu-id="62a30-2291">適切なファクトリ メソッドを呼び出すことにより、オペランドを指定して、<see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2291">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand, by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="62a30-2292">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2292">The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2293">`unaryType`パラメーターを指定する<xref:System.Linq.Expressions.UnaryExpression>ファクトリ メソッドがこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2293">The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls.</span></span> <span data-ttu-id="62a30-2294">たとえば場合、`unaryType`と等しい<xref:System.Linq.Expressions.ExpressionType.Convert>、このメソッドは<xref:System.Linq.Expressions.Expression.Convert%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2294">For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>.</span></span> <span data-ttu-id="62a30-2295">`type`が、ファクトリ メソッドが呼び出されるには適用されない場合、パラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2295">The `type`parameter is ignored if it does not apply to the factory method that is called.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2296"><paramref name="operand" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2296"><paramref name="operand" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2297"><paramref name="unaryType" /> は、単項式ノードには対応していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2297"><paramref name="unaryType" /> does not correspond to a unary expression node.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ MakeUnary(System::Linq::Expressions::ExpressionType unaryType, System::Linq::Expressions::Expression ^ operand, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MakeUnary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * Type * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.MakeUnary (unaryType, operand, type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="unaryType"><span data-ttu-id="62a30-2298">単項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2298">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</span></span></param>
        <param name="operand"><span data-ttu-id="62a30-2299">オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2299">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-2300">変換後の型を指定する <see cref="T:System.Type" /> (該当しない場合は <see langword="null" /> を渡します)。</span><span class="sxs-lookup"><span data-stu-id="62a30-2300">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2301">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2301">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="62a30-2302">適切なファクトリ メソッドを呼び出すことにより、オペランドおよび実装メソッドを指定して、<see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2302">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand and implementing method, by calling the appropriate factory method.</span></span></summary>
        <returns><span data-ttu-id="62a30-2303">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2303">The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2304">`unaryType`パラメーターを指定する<xref:System.Linq.Expressions.UnaryExpression>ファクトリ メソッドがこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2304">The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls.</span></span> <span data-ttu-id="62a30-2305">たとえば場合、`unaryType`と等しい<xref:System.Linq.Expressions.ExpressionType.Convert>、このメソッドは<xref:System.Linq.Expressions.Expression.Convert%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2305">For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>.</span></span> <span data-ttu-id="62a30-2306">`type`と`method`ファクトリ メソッドが呼び出されるには適用しない場合、パラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2306">The `type` and `method` parameters are ignored if they do not apply to the factory method that is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2307"><paramref name="operand" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2307"><paramref name="operand" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2308"><paramref name="unaryType" /> は、単項式ノードには対応していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2308"><paramref name="unaryType" /> does not correspond to a unary expression node.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2309">メンバーのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2309">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (member As MemberInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MemberInfo ^ member, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MemberInfo * seq&lt;System.Linq.Expressions.MemberBinding&gt; -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (member, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="62a30-2310"><see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2310">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span></span></param>
        <param name="bindings"><span data-ttu-id="62a30-2311"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2311">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2312">フィールドまたはプロパティのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2312">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</span></span></summary>
        <returns><span data-ttu-id="62a30-2313"><see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2313">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2314">`member`パラメーターは、フィールドまたはプロパティを表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2314">The `member` parameter must represent a field or property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2315"><paramref name="member" /> または <paramref name="bindings" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2315"><paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2316"><paramref name="member" /> は、フィールドまたはプロパティを表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2316"><paramref name="member" /> does not represent a field or property.</span></span>  
  
<span data-ttu-id="62a30-2317">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2317">-or-</span></span> 
<span data-ttu-id="62a30-2318"><paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="member" /> が表すフィールドまたはプロパティの型のメンバーを表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2318">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (member As MemberInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MemberInfo ^ member, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MemberInfo * System.Linq.Expressions.MemberBinding[] -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (member, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="62a30-2319"><see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2319">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span></span></param>
        <param name="bindings"><span data-ttu-id="62a30-2320"><see cref="T:System.Linq.Expressions.MemberBinding" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-2320">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2321">フィールドまたはプロパティのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2321">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</span></span></summary>
        <returns><span data-ttu-id="62a30-2322"><see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2322">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2323">`member`パラメーターは、フィールドまたはプロパティを表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2323">The `member` parameter must represent a field or property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2324"><paramref name="member" /> または <paramref name="bindings" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2324"><paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2325"><paramref name="member" /> は、フィールドまたはプロパティを表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2325"><paramref name="member" /> does not represent a field or property.</span></span>  
  
<span data-ttu-id="62a30-2326">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2326">-or-</span></span> 
<span data-ttu-id="62a30-2327"><paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="member" /> が表すフィールドまたはプロパティの型のメンバーを表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2327">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (propertyAccessor As MethodInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MethodInfo ^ propertyAccessor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.MemberBinding&gt; -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (propertyAccessor, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor"><span data-ttu-id="62a30-2328">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2328">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <param name="bindings"><span data-ttu-id="62a30-2329"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2329">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2330">プロパティ アクセサー メソッドを使用してアクセスされるメンバーのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2330">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</span></span></summary>
        <returns><span data-ttu-id="62a30-2331"><see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティ、および指定した値に設定された <paramref name="propertyAccessor" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2331">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2332"><paramref name="propertyAccessor" /> または <paramref name="bindings" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2332"><paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2333"><paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2333"><paramref name="propertyAccessor" /> does not represent a property accessor method.</span></span>  
  
<span data-ttu-id="62a30-2334">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2334">-or-</span></span> 
<span data-ttu-id="62a30-2335"><paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="propertyAccessor" /> が表すメソッドによりアクセスされるプロパティの型のメンバーを表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2335">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (propertyAccessor As MethodInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MethodInfo ^ propertyAccessor, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MethodInfo * System.Linq.Expressions.MemberBinding[] -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (propertyAccessor, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor"><span data-ttu-id="62a30-2336">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2336">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <param name="bindings"><span data-ttu-id="62a30-2337"><see cref="T:System.Linq.Expressions.MemberBinding" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-2337">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2338">プロパティ アクセサー メソッドを使用してアクセスされるメンバーのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2338">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</span></span></summary>
        <returns><span data-ttu-id="62a30-2339"><see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティ、および指定した値に設定された <paramref name="propertyAccessor" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2339">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2340"><paramref name="propertyAccessor" /> または <paramref name="bindings" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2340"><paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2341"><paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2341"><paramref name="propertyAccessor" /> does not represent a property accessor method.</span></span>  
  
<span data-ttu-id="62a30-2342">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2342">-or-</span></span> 
<span data-ttu-id="62a30-2343"><paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="propertyAccessor" /> が表すメソッドによりアクセスされるプロパティの型のメンバーを表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2343">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2344">新しいオブジェクトを作成し、そのオブジェクトのプロパティを初期化する式を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2344">Represents an expression that creates a new object and initializes a property of the object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberInitExpression ^ MemberInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberInit : System.Linq.Expressions.NewExpression * seq&lt;System.Linq.Expressions.MemberBinding&gt; -&gt; System.Linq.Expressions.MemberInitExpression" Usage="System.Linq.Expressions.Expression.MemberInit (newExpression, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="62a30-2345"><see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2345">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="bindings"><span data-ttu-id="62a30-2346"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2346">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2347">新しいオブジェクトを作成し、そのオブジェクトのプロパティを初期化する式を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2347">Represents an expression that creates a new object and initializes a property of the object.</span></span></summary>
        <returns><span data-ttu-id="62a30-2348"><see cref="T:System.Linq.Expressions.MemberInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2348">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2349"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.MemberInitExpression>と等しい、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`newExpression`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2349">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-2350">次の例では、新しいオブジェクトを作成し、オブジェクトのプロパティを初期化する式を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2350">The following example demonstrates an expression that creates a new object and initializes a property of the object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#40)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2351"><paramref name="newExpression" /> または <paramref name="bindings" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2351"><paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2352"><paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="newExpression" />.Type が表す型のメンバーを表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2352">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberInitExpression ^ MemberInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberInit : System.Linq.Expressions.NewExpression * System.Linq.Expressions.MemberBinding[] -&gt; System.Linq.Expressions.MemberInitExpression" Usage="System.Linq.Expressions.Expression.MemberInit (newExpression, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression"><span data-ttu-id="62a30-2353"><see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2353">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</span></span></param>
        <param name="bindings"><span data-ttu-id="62a30-2354"><see cref="T:System.Linq.Expressions.MemberBinding" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-2354">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2355"><see cref="T:System.Linq.Expressions.MemberInitExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2355">Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-2356"><see cref="T:System.Linq.Expressions.MemberInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2356">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2357"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.MemberInitExpression>と等しい、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`newExpression`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2357">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-2358">次の例を使用する方法を示します、<xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29>を作成する方法、<xref:System.Linq.Expressions.MemberInitExpression>新しいオブジェクトの 2 つのメンバーの初期化を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2358">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29> method to create a <xref:System.Linq.Expressions.MemberInitExpression> that represents the initialization of two members of a new object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#9)]
 [!code-vb[System.Linq.Expressions.Expression#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2359"><paramref name="newExpression" /> または <paramref name="bindings" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2359"><paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2360"><paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="newExpression" />.Type が表す型のメンバーを表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2360">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Modulo">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2361">算術剰余演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2361">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Modulo (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Modulo(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Modulo : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Modulo (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2362"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2362">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2363"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2363">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2364">算術剰余演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2364">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-2365"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2365">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2366">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2366">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-2367"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2367">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-2368">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2368">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-2369">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2369">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-2370"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2370">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-2371">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-2371">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-2372">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2372">Implementing Method</span></span>  
 <span data-ttu-id="62a30-2373">次の規則は、操作の選択したメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2373">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-2374">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、剰余演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2374">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2375">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2375">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-2376">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-2376">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-2377">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2377">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2378">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2378">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-2379">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2379">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2380">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2380">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-2381">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2381">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-2382">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2382">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-2383">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2383">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2384">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2384">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2385">ノードの型は、定義済みの剰余演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2385">The type of the node is the result type of the predefined modulus operator.</span></span>  
  
-   <span data-ttu-id="62a30-2386">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-2386">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-2387">ノードの型は、定義済みの剰余演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2387">The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2388"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2388"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2389">剰余演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2389">The modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Modulo (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Modulo(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Modulo : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Modulo (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2390"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2390">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2391"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2391">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2392"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2392">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2393">算術剰余演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2393">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-2394"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2394">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2395">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2395">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-2396"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2396">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-2397">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2397">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-2398">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2398">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-2399"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2399">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-2400">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-2400">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-2401">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2401">Implementing Method</span></span>  
 <span data-ttu-id="62a30-2402">操作のメソッドの実装は、次の規則に基づいて選択されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2402">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="62a30-2403">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-2403">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-2404">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、剰余演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2404">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2405">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2405">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-2406">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-2406">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-2407">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2407">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2408">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2408">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-2409">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2409">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2410">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2410">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-2411">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2411">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-2412">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2412">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-2413">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2413">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2414">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2414">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2415">ノードの型は、定義済みの剰余演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2415">The type of the node is the result type of the predefined modulus operator.</span></span>  
  
-   <span data-ttu-id="62a30-2416">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-2416">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-2417">ノードの型は、定義済みの剰余演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2417">The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2418"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2418"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2419"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2419"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2420"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には剰余演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2420"><paramref name="method" /> is <see langword="null" /> and the modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ModuloAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2421">剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2421">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ModuloAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ModuloAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2422"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2422">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2423"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2423">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2424">剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2424">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-2425"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2425">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ModuloAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ModuloAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2426"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2426">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2427"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2427">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2428"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2428">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2429">剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2429">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-2430"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2430">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member ModuloAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ModuloAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2431"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2431">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2432"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2432">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2433"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2433">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-2434"><see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2434">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2435">剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2435">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-2436"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2436">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2437">オーバーフロー チェックを行わない算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2437">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Multiply(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2438"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2438">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2439"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2439">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2440">オーバーフロー チェックを行わない算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2440">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-2441"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2441">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2442">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2442">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-2443"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2443">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-2444">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2444">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-2445">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2445">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-2446"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2446">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-2447">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-2447">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-2448">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2448">Implementing Method</span></span>  
 <span data-ttu-id="62a30-2449">次の規則は、操作の選択したメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2449">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-2450">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、乗算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2450">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2451">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2451">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-2452">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-2452">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-2453">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2453">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2454">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2454">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-2455">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2455">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2456">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2456">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-2457">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2457">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-2458">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2458">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-2459">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2459">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2460">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2460">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2461">ノードの型は、定義済みの乗算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2461">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="62a30-2462">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-2462">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-2463">ノードの型は、定義済みの乗算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2463">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-2464">次のコード例では、2 つの値を乗算する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2464">The following code example shows how to create an expression that multiplies two values.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#27)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2465"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2465"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2466">乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2466">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Multiply(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Multiply (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2467"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2467">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2468"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2468">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2469"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2469">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2470">オーバーフロー チェックを行わない算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2470">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-2471"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2471">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2472">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2472">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-2473"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2473">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-2474">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2474">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-2475">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2475">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-2476"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2476">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-2477">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-2477">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-2478">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2478">Implementing Method</span></span>  
 <span data-ttu-id="62a30-2479">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2479">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-2480">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-2480">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-2481">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`乗算演算子のオーバー ロードするユーザー定義型を表します、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2481">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2482">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2482">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-2483">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-2483">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-2484">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2484">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2485">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2485">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-2486">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2486">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2487">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2487">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-2488">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2488">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-2489">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2489">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-2490">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2490">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2491">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2491">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2492">ノードの型は、定義済みの乗算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2492">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="62a30-2493">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-2493">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-2494">ノードの型は、定義済みの乗算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2494">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2495"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2495"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2496"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2496"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2497"><paramref name="method" /> は <see langword="null" /> で、乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2497"><paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2498">オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2498">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2499"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2499">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2500"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2500">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2501">オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2501">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-2502"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2502">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2503"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2503">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2504"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2504">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2505"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2505">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2506">オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2506">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-2507"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2507">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2508"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2508">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2509"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2509">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2510"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2510">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-2511"><see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2511">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2512">オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2512">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-2513"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2513">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2514">オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2514">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssignChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2515"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2515">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2516"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2516">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2517">オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2517">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-2518"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2518">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssignChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2519"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2519">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2520"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2520">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2521"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2521">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2522">オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2522">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-2523"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2523">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssignChecked (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2524"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2524">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2525"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2525">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2526"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2526">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-2527"><see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2527">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2528">オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2528">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-2529"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2529">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2530">オーバーフロー チェックを行う算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2530">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MultiplyChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2531"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2531">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2532"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2532">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2533">オーバーフロー チェックを行う算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2533">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-2534"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2534">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2535">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2535">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-2536"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2536">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-2537">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2537">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-2538">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2538">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-2539"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2539">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-2540">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-2540">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-2541">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2541">Implementing Method</span></span>  
 <span data-ttu-id="62a30-2542">次の規則は、操作の選択したメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2542">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-2543">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、乗算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2543">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2544">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2544">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-2545">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-2545">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-2546">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2546">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2547">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2547">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-2548">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2548">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2549">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2549">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-2550">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2550">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-2551">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2551">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-2552">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2552">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2553">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2553">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2554">ノードの型は、定義済みの乗算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2554">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="62a30-2555">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-2555">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-2556">ノードの型は、定義済みの乗算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2556">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2557"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2557"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2558">乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2558">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MultiplyChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2559"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2559">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2560"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2560">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2561"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2561">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2562">オーバーフロー チェックを行う算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2562">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-2563"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2563">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2564">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2564">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-2565"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2565">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-2566">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2566">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-2567">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2567">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-2568"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2568">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-2569">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-2569">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-2570">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2570">Implementing Method</span></span>  
 <span data-ttu-id="62a30-2571">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2571">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-2572">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-2572">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-2573">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`乗算演算子のオーバー ロードするユーザー定義型を表します、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2573">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2574">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2574">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-2575">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-2575">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-2576">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2576">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2577">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2577">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-2578">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2578">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2579">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2579">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-2580">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2580">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-2581">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2581">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-2582">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2582">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2583">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2583">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2584">ノードの型は、定義済みの乗算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2584">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="62a30-2585">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-2585">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-2586">ノードの型は、定義済みの乗算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2586">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2587"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2587"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2588"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2588"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2589"><paramref name="method" /> は <see langword="null" /> で、乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2589"><paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Negate">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2590">算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2590">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Negate(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Negate expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-2591"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2591">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2592">算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2592">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-2593"><see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2593">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2594"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2594">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="62a30-2595"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2595">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-2596">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2596">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-2597">それ以外の場合、false です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2597">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-2598">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2598">Implementing Method</span></span>  
 <span data-ttu-id="62a30-2599">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2599">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-2600">場合`expression`します。型は、単項マイナス演算子を定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子は、メソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-2600">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2601">の場合`expression`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2601">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-2602">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-2602">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-2603">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2603">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2604">場合`expression`します。型の実装メソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2604">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-2605">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2605">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2606">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2606">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-2607">`expression`.型が null 許容値型と、対応する null 非許容値型は、実装メソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2607">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-2608">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2608">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-2609">メソッドの実装がある場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2609">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="62a30-2610">場合`expression`します。型が null 非許容には、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2610">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2611">それ以外の場合、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-2611">Otherwise, the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-2612">次の例では、算術否定演算を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2612">The following example demonstrates how to create an expression that represents an arithmetic negation operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#50)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2613"><paramref name="expression" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2613"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2614">単項マイナス演算子は、<paramref name="expression" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2614">The unary minus operator is not defined for <paramref name="expression" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Negate(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Negate (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-2615"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2615">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2616"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2616">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2617">算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2617">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-2618"><see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2618">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2619"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2619">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="62a30-2620"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2620">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-2621">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2621">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-2622">それ以外の場合、false です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2622">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-2623">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2623">Implementing Method</span></span>  
 <span data-ttu-id="62a30-2624">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2624">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-2625">場合`method`は`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) を 1 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-2625">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-2626">場合`expression`します。型は、単項マイナス演算子を定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子は、メソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-2626">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2627">の場合`expression`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2627">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-2628">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-2628">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-2629">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2629">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2630">場合`expression`します。型の実装メソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2630">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-2631">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2631">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2632">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2632">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-2633">`expression`.型が null 許容値型と、対応する null 非許容値型は、実装メソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2633">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-2634">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2634">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-2635">メソッドの実装がある場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2635">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="62a30-2636">場合`expression`します。型が null 非許容には、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2636">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2637">それ以外の場合、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-2637">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2638"><paramref name="expression" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2638"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2639"><paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2639"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2640"><paramref name="method" /> は <see langword="null" /> で、単項マイナス演算子は <paramref name="expression" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2640"><paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.</span></span>  
  
<span data-ttu-id="62a30-2641">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2641">-or-</span></span> 
 <span data-ttu-id="62a30-2642"><paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2642"><paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NegateChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2643">オーバーフロー チェックを行う算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2643">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ NegateChecked(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member NegateChecked : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.NegateChecked expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-2644"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2644">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2645">オーバーフロー チェックを行う算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2645">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-2646"><see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2646">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2647"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2647">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="62a30-2648"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2648">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-2649">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2649">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-2650">それ以外の場合、false です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2650">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-2651">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2651">Implementing Method</span></span>  
 <span data-ttu-id="62a30-2652">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2652">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-2653">場合`expression`します。型は、単項マイナス演算子を定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子は、メソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-2653">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2654">の場合`expression`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2654">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-2655">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-2655">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-2656">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2656">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2657">場合`expression`します。型の実装メソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2657">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-2658">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2658">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2659">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2659">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-2660">`expression`.型が null 許容値型と、対応する null 非許容値型は、実装メソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2660">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-2661">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2661">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-2662">メソッドの実装がある場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2662">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="62a30-2663">場合`expression`します。型が null 非許容には、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2663">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2664">それ以外の場合、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-2664">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2665"><paramref name="expression" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2665"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2666">単項マイナス演算子は、<paramref name="expression" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2666">The unary minus operator is not defined for <paramref name="expression" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ NegateChecked(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member NegateChecked : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.NegateChecked (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-2667"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2667">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2668"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2668">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2669">オーバーフロー チェックを行う算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2669">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span></span> <span data-ttu-id="62a30-2670">実装メソッドを指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2670">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-2671"><see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2671">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2672"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2672">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="62a30-2673"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2673">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-2674">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2674">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-2675">それ以外の場合、false です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2675">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-2676">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2676">Implementing Method</span></span>  
 <span data-ttu-id="62a30-2677">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2677">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-2678">場合`method`は`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) を 1 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-2678">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-2679">場合`expression`します。型は、単項マイナス演算子を定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子は、メソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-2679">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2680">の場合`expression`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2680">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-2681">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-2681">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-2682">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2682">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2683">場合`expression`します。型の実装メソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2683">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-2684">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2684">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2685">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2685">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-2686">`expression`.型が null 許容値型と、対応する null 非許容値型は、実装メソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2686">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-2687">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2687">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-2688">メソッドの実装がある場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2688">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="62a30-2689">場合`expression`します。型が null 非許容には、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2689">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2690">それ以外の場合、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-2690">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2691"><paramref name="expression" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2691"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2692"><paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2692"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2693"><paramref name="method" /> は <see langword="null" /> で、単項マイナス演算子は <paramref name="expression" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2693"><paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.</span></span>  
  
<span data-ttu-id="62a30-2694">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2694">-or-</span></span> 
 <span data-ttu-id="62a30-2695"><paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2695"><paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="New">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2696"><see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2696">Creates a <see cref="T:System.Linq.Expressions.NewExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New constructor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
      </Parameters>
      <Docs>
        <param name="constructor"><span data-ttu-id="62a30-2697"><see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2697">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2698">引数を受け取らない指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2698">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor that takes no arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-2699"><see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2699">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2700"><xref:System.Linq.Expressions.NewExpression.Arguments%2A>と<xref:System.Linq.Expressions.NewExpression.Members%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2700">The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections.</span></span> <span data-ttu-id="62a30-2701"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティによって表されるコンス トラクターの宣言する型を表します`constructor`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2701">The <xref:System.Linq.Expressions.Expression.Type%2A> property represents the declaring type of the constructor represented by `constructor`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2702"><paramref name="constructor" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2702"><paramref name="constructor" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2703"><paramref name="constructor" /> が表すコンストラクターには、少なくとも 1 つのパラメーターがあります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2703">The constructor that <paramref name="constructor" /> represents has at least one parameter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member New : Type -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-2704">引数を受け取らないコンストラクターを持つ <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2704">A <see cref="T:System.Type" /> that has a constructor that takes no arguments.</span></span></param>
        <summary><span data-ttu-id="62a30-2705">指定した型のパラメーターなしのコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2705">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the parameterless constructor of the specified type.</span></span></summary>
        <returns><span data-ttu-id="62a30-2706"><see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定された型のパラメーターなしのコンストラクターを表す <see cref="F:System.Linq.Expressions.ExpressionType.New" /> に設定された <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="T:System.Reflection.ConstructorInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2706">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the <see cref="T:System.Reflection.ConstructorInfo" /> that represents the constructor without parameters for the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2707">`type`パラメーターは、パラメーターなしのコンス トラクターを持つ型を表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2707">The `type` parameter must represent a type that has a constructor without parameters.</span></span>  
  
 <span data-ttu-id="62a30-2708"><xref:System.Linq.Expressions.NewExpression.Arguments%2A>と<xref:System.Linq.Expressions.NewExpression.Members%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2708">The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections.</span></span> <span data-ttu-id="62a30-2709"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティは等しく`type`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2709">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-2710">次の例を使用する方法を示します、<xref:System.Linq.Expressions.Expression.New%28System.Type%29>を作成する方法、<xref:System.Linq.Expressions.NewExpression>を表すパラメーターなしのコンス トラクターを呼び出すことによって、dictionary オブジェクトの新しいインスタンスを構築します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2710">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.New%28System.Type%29> method to create a <xref:System.Linq.Expressions.NewExpression> that represents constructing a new instance of a dictionary object by calling the constructor without parameters.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#10)]
 [!code-vb[System.Linq.Expressions.Expression#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2711"><paramref name="type" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2711"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2712"><paramref name="type" /> が表す型には、パラメーターなしのコンストラクターがありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2712">The type that <paramref name="type" /> represents does not have a constructor without parameters.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression)) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor"><span data-ttu-id="62a30-2713"><see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2713">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-2714"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2714">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2715">指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2715">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-2716"><see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" /> プロパティおよび <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2716">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2717">`arguments`パラメーターによって表されるコンス トラクターのパラメーターの数と同じ数の要素を含める必要があります`constructor`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2717">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="62a30-2718">場合`arguments`は`null`、空の場合と見なされます、<xref:System.Linq.Expressions.NewExpression.Arguments%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2718">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="62a30-2719"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.NewExpression>によって表されるコンス トラクターの宣言する型を表す`constructor`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2719">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="62a30-2720"><xref:System.Linq.Expressions.NewExpression.Members%2A>プロパティが空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="62a30-2720">The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2721"><paramref name="constructor" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2721"><paramref name="constructor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2722">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2722">-or-</span></span> 
<span data-ttu-id="62a30-2723"><paramref name="arguments" /> の要素は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2723">An element of <paramref name="arguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2724"><paramref name="arguments" /> パラメーターに、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と同じ数の要素が格納されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2724">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="62a30-2725">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2725">-or-</span></span> 
<span data-ttu-id="62a30-2726"><paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを、<paramref name="constructor" /> を表すコンストラクターの対応するパラメーターの型に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2726">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, ParamArray arguments As Expression()) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor"><span data-ttu-id="62a30-2727"><see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2727">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-2728"><see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-2728">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2729">指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2729">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-2730"><see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" /> プロパティおよび <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2730">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2731">`arguments`パラメーターによって表されるコンス トラクターのパラメーターの数と同じ数の要素を含める必要があります`constructor`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2731">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="62a30-2732">場合`arguments`は`null`、空の場合と見なされます、<xref:System.Linq.Expressions.NewExpression.Arguments%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2732">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="62a30-2733"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.NewExpression>によって表されるコンス トラクターの宣言する型を表す`constructor`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2733">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="62a30-2734"><xref:System.Linq.Expressions.NewExpression.Members%2A>プロパティが空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="62a30-2734">The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2735"><paramref name="constructor" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2735"><paramref name="constructor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2736">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2736">-or-</span></span> 
<span data-ttu-id="62a30-2737"><paramref name="arguments" /> の要素は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2737">An element of <paramref name="arguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2738"><paramref name="arguments" /> の長さが、<paramref name="constructor" /> を表すコンストラクターのパラメーターの数と一致しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2738">The length of <paramref name="arguments" /> does match the number of parameters for the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="62a30-2739">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2739">-or-</span></span> 
<span data-ttu-id="62a30-2740"><paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを、<paramref name="constructor" /> を表すコンストラクターの対応するパラメーターの型に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2740">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.MemberInfo&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), members As IEnumerable(Of MemberInfo)) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments, System::Collections::Generic::IEnumerable&lt;System::Reflection::MemberInfo ^&gt; ^ members);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * seq&lt;System.Linq.Expressions.Expression&gt; * seq&lt;System.Reflection.MemberInfo&gt; -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor"><span data-ttu-id="62a30-2741"><see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2741">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-2742"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2742">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span></span></param>
        <param name="members"><span data-ttu-id="62a30-2743"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Reflection.MemberInfo" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Members" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2743">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2744">指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2744">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span></span> <span data-ttu-id="62a30-2745">コンストラクターが初期化したフィールドにアクセスするメンバーが指定されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2745">The members that access the constructor initialized fields are specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-2746"><see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" />、<see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、および <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Members" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2746">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2747">`arguments`パラメーターによって表されるコンス トラクターのパラメーターの数と同じ数の要素を含める必要があります`constructor`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2747">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="62a30-2748">場合`arguments`は`null`、空の場合と見なされます、<xref:System.Linq.Expressions.NewExpression.Arguments%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2748">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="62a30-2749">場合`members`は`null`、<xref:System.Linq.Expressions.NewExpression.Members%2A>プロパティ<xref:System.Linq.Expressions.NewExpression>は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2749">If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span> <span data-ttu-id="62a30-2750">場合`members`ない`null`、同じ数の要素の必要があります`arguments`の各要素を指定する必要がありますいない`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2750">If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`.</span></span> <span data-ttu-id="62a30-2751">各要素`members`必要があります、 <xref:System.Reflection.PropertyInfo>、<xref:System.Reflection.FieldInfo>または<xref:System.Reflection.MethodInfo>によって表されるコンス トラクターの宣言型のインスタンス メンバーを表す`constructor`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2751">Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="62a30-2752">プロパティには、プロパティを表す場合、`get`アクセサー。</span><span class="sxs-lookup"><span data-stu-id="62a30-2752">If it represents a property, the property must have a `get` accessor.</span></span> <span data-ttu-id="62a30-2753">対応する要素の`arguments`の各要素に対して`members`必要があります、<xref:System.Linq.Expressions.Expression.Type%2A>メンバーの型に割り当て可能な型を表すプロパティを`members`要素を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2753">The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.</span></span>  
  
 <span data-ttu-id="62a30-2754"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.NewExpression>コンス トラクターの宣言する型を表すを`constructor`を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2754">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2755"><paramref name="constructor" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2755"><paramref name="constructor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2756">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2756">-or-</span></span> 
<span data-ttu-id="62a30-2757"><paramref name="arguments" /> の要素は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2757">An element of <paramref name="arguments" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2758">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2758">-or-</span></span> 
<span data-ttu-id="62a30-2759"><paramref name="members" /> の要素は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2759">An element of <paramref name="members" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2760"><paramref name="arguments" /> パラメーターに、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と同じ数の要素が格納されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2760">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="62a30-2761">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2761">-or-</span></span> 
<span data-ttu-id="62a30-2762"><paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを、<paramref name="constructor" /> を表すコンストラクターの対応するパラメーターの型に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2762">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="62a30-2763">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2763">-or-</span></span> 
<span data-ttu-id="62a30-2764"><paramref name="members" /> パラメーターに、<paramref name="arguments" /> と同じ数の要素がありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2764">The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.</span></span>  
  
<span data-ttu-id="62a30-2765">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2765">-or-</span></span> 
<span data-ttu-id="62a30-2766"><paramref name="arguments" /> の要素に、<paramref name="members" /> の対応する要素により表されるメンバーの型に代入可能な型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティがあります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2766">An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, params System.Reflection.MemberInfo[] members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Reflection.MemberInfo[] members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), ParamArray members As MemberInfo()) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments, ... cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ members);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * seq&lt;System.Linq.Expressions.Expression&gt; * System.Reflection.MemberInfo[] -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Reflection.MemberInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor"><span data-ttu-id="62a30-2767"><see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2767">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-2768"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2768">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span></span></param>
        <param name="members"><span data-ttu-id="62a30-2769"><see cref="T:System.Reflection.MemberInfo" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewExpression.Members" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-2769">An array of <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2770">指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2770">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span></span> <span data-ttu-id="62a30-2771">コンストラクターが初期化したフィールドにアクセスするメンバーが配列として指定されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2771">The members that access the constructor initialized fields are specified as an array.</span></span></summary>
        <returns><span data-ttu-id="62a30-2772"><see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" />、<see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、および <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Members" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2772">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2773">`arguments`パラメーターによって表されるコンス トラクターのパラメーターの数と同じ数の要素を含める必要があります`constructor`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2773">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="62a30-2774">場合`arguments`は`null`、空の場合と見なされます、<xref:System.Linq.Expressions.NewExpression.Arguments%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2774">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="62a30-2775">場合`members`は`null`、<xref:System.Linq.Expressions.NewExpression.Members%2A>プロパティ<xref:System.Linq.Expressions.NewExpression>は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2775">If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span> <span data-ttu-id="62a30-2776">場合`members`ない`null`、同じ数の要素の必要があります`arguments`の各要素を指定する必要がありますいない`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2776">If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`.</span></span> <span data-ttu-id="62a30-2777">各要素`members`必要があります、 <xref:System.Reflection.PropertyInfo>、<xref:System.Reflection.FieldInfo>または<xref:System.Reflection.MethodInfo>によって表されるコンス トラクターの宣言型のインスタンス メンバーを表す`constructor`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2777">Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="62a30-2778">プロパティを表す場合、プロパティは、関連するフィールドの値を取得できる必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2778">If it represents a property, the property must be able to retrieve the value of the associated field.</span></span> <span data-ttu-id="62a30-2779">対応する要素の`arguments`の各要素に対して`members`必要があります、<xref:System.Linq.Expressions.Expression.Type%2A>メンバーの型に割り当て可能な型を表すプロパティを`members`要素を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2779">The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.</span></span>  
  
 <span data-ttu-id="62a30-2780"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.NewExpression>コンス トラクターの宣言する型を表すを`constructor`を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2780">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2781"><paramref name="constructor" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2781"><paramref name="constructor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2782">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2782">-or-</span></span> 
<span data-ttu-id="62a30-2783"><paramref name="arguments" /> の要素は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2783">An element of <paramref name="arguments" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2784">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2784">-or-</span></span> 
<span data-ttu-id="62a30-2785"><paramref name="members" /> の要素は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2785">An element of <paramref name="members" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2786"><paramref name="arguments" /> パラメーターに、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と同じ数の要素が格納されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2786">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="62a30-2787">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2787">-or-</span></span> 
<span data-ttu-id="62a30-2788"><paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを、<paramref name="constructor" /> を表すコンストラクターの対応するパラメーターの型に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2788">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span></span>  
  
<span data-ttu-id="62a30-2789">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2789">-or-</span></span> 
<span data-ttu-id="62a30-2790"><paramref name="members" /> パラメーターに、<paramref name="arguments" /> と同じ数の要素がありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2790">The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.</span></span>  
  
<span data-ttu-id="62a30-2791">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2791">-or-</span></span> 
<span data-ttu-id="62a30-2792"><paramref name="arguments" /> の要素に、<paramref name="members" /> の対応する要素により表されるメンバーの型に代入可能な型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティがあります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2792">An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NewArrayBounds">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2793">指定したランクを持つ配列の作成を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2793">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayBounds(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ bounds);" />
      <MemberSignature Language="F#" Value="static member NewArrayBounds : Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayBounds (type, bounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-2794">配列の要素の型を表す <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2794">A <see cref="T:System.Type" /> that represents the element type of the array.</span></span></param>
        <param name="bounds"><span data-ttu-id="62a30-2795"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2795">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2796">指定したランクを持つ配列の作成を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2796">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span></span></summary>
        <returns><span data-ttu-id="62a30-2797"><see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2797">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2798"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.NewArrayExpression>ランクがの長さと等しい、配列型を表す`bounds`要素型があると`type`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2798">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.</span></span>  
  
 <span data-ttu-id="62a30-2799"><xref:System.Linq.Expressions.Expression.Type%2A>の各要素のプロパティ`bounds`整数型を表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2799">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-2800">次の例では、使用する方法、<xref:System.Linq.Expressions.Expression.NewArrayBounds%2A>文字列配列の作成を表す式ツリーを作成するメソッドが 2 のランク。</span><span class="sxs-lookup"><span data-stu-id="62a30-2800">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2801"><paramref name="type" /> または <paramref name="bounds" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2801"><paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2802">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2802">-or-</span></span> 
<span data-ttu-id="62a30-2803"><paramref name="bounds" /> の要素は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2803">An element of <paramref name="bounds" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2804"><paramref name="bounds" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、整数型を表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2804">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, params System.Linq.Expressions.Expression[] bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Linq.Expressions.Expression[] bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayBounds(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ bounds);" />
      <MemberSignature Language="F#" Value="static member NewArrayBounds : Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayBounds (type, bounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-2805">配列の要素の型を表す <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2805">A <see cref="T:System.Type" /> that represents the element type of the array.</span></span></param>
        <param name="bounds"><span data-ttu-id="62a30-2806"><see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-2806">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2807">指定したランクを持つ配列の作成を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2807">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span></span></summary>
        <returns><span data-ttu-id="62a30-2808"><see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2808">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2809"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.NewArrayExpression>ランクがの長さと等しい、配列型を表す`bounds`要素型があると`type`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2809">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.</span></span>  
  
 <span data-ttu-id="62a30-2810"><xref:System.Linq.Expressions.Expression.Type%2A>の各要素のプロパティ`bounds`整数型を表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-2810">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-2811">次の例では、使用する方法、<xref:System.Linq.Expressions.Expression.NewArrayBounds%2A>文字列配列の作成を表す式ツリーを作成するメソッドが 2 のランク。</span><span class="sxs-lookup"><span data-stu-id="62a30-2811">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2812"><paramref name="type" /> または <paramref name="bounds" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2812"><paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2813">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2813">-or-</span></span> 
<span data-ttu-id="62a30-2814"><paramref name="bounds" /> の要素は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2814">An element of <paramref name="bounds" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2815"><paramref name="bounds" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、整数型を表しません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2815">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NewArrayInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2816">1 次元配列の作成と、要素のリストからの初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2816">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayInit(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member NewArrayInit : Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayInit (type, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-2817">配列の要素の型を表す <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2817">A <see cref="T:System.Type" /> that represents the element type of the array.</span></span></param>
        <param name="initializers"><span data-ttu-id="62a30-2818"><see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2818">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2819">1 次元配列の作成と、要素のリストからの初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2819">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span></span></summary>
        <returns><span data-ttu-id="62a30-2820"><see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2820">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2821"><xref:System.Linq.Expressions.Expression.Type%2A>の各要素のプロパティ`initializers`によって表される型に割り当て可能な型を表す必要があります`type`、場合によってはその後*引用符で囲まれた*します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2821">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a30-2822">要素は引用符で囲む場合にのみ`type`は<xref:System.Linq.Expressions.Expression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2822">An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="62a30-2823">要素にラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="62a30-2823">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="62a30-2824">見つかったノードが、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`initializers`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2824">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.</span></span>  
  
 <span data-ttu-id="62a30-2825"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.NewArrayExpression>表します型の配列のランクは 1 と要素型がある`type`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2825">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-2826">次の例では、使用する方法、 <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> 1 次元の文字列配列の作成を表す式ツリーを作成するメソッドは文字列式のリストで初期化されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2826">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2827"><paramref name="type" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2827"><paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2828">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2828">-or-</span></span> 
<span data-ttu-id="62a30-2829"><paramref name="initializers" /> の要素は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2829">An element of <paramref name="initializers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2830"><paramref name="initializers" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="type" /> が表す型に代入できない型を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2830">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type that <paramref name="type" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayInit(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member NewArrayInit : Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayInit (type, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-2831">配列の要素の型を表す <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2831">A <see cref="T:System.Type" /> that represents the element type of the array.</span></span></param>
        <param name="initializers"><span data-ttu-id="62a30-2832"><see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-2832">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-2833">1 次元配列の作成と、要素のリストからの初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2833">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span></span></summary>
        <returns><span data-ttu-id="62a30-2834"><see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2834">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2835"><xref:System.Linq.Expressions.Expression.Type%2A>の各要素のプロパティ`initializers`によって表される型に割り当て可能な型を表す必要があります`type`、場合によってはその後*引用符で囲まれた*します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2835">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62a30-2836">要素は引用符で囲む場合にのみ`type`は<xref:System.Linq.Expressions.Expression>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2836">An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="62a30-2837">要素にラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="62a30-2837">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="62a30-2838">見つかったノードが、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`initializers`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2838">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.</span></span>  
  
 <span data-ttu-id="62a30-2839"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.NewArrayExpression>表します型の配列のランクは 1 と要素型がある`type`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2839">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-2840">次の例では、使用する方法、 <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> 1 次元の文字列配列の作成を表す式ツリーを作成するメソッドは文字列式のリストで初期化されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2840">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2841"><paramref name="type" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2841"><paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-2842">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-2842">-or-</span></span> 
<span data-ttu-id="62a30-2843"><paramref name="initializers" /> の要素は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2843">An element of <paramref name="initializers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2844"><paramref name="initializers" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="type" /> 型に代入可能な型を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2844">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type <paramref name="type" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Linq::Expressions::ExpressionType NodeType { System::Linq::Expressions::ExpressionType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="System.Linq.Expressions.Expression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a30-2845">この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2845">Gets the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
        <value><span data-ttu-id="62a30-2846"><see cref="T:System.Linq.Expressions.ExpressionType" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="62a30-2846">One of the <see cref="T:System.Linq.Expressions.ExpressionType" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2847"><xref:System.Linq.Expressions.Expression.NodeType%2A>プロパティのより特化された説明を提供する、<xref:System.Linq.Expressions.Expression>よりその派生型だけです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2847">The <xref:System.Linq.Expressions.Expression.NodeType%2A> property provides a more specialized description of an <xref:System.Linq.Expressions.Expression> than just its derived type.</span></span> <span data-ttu-id="62a30-2848">たとえば、<xref:System.Linq.Expressions.BinaryExpression>バイナリ式、除算演算や「より大きい」操作などのさまざまな種類を表すために使用できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2848">For example, a <xref:System.Linq.Expressions.BinaryExpression> can be used to represent many different kinds of binary expressions, such as a division operation or a "greater than" operation.</span></span> <span data-ttu-id="62a30-2849"><xref:System.Linq.Expressions.Expression.NodeType%2A>プロパティを記述してこれらの二項式として<xref:System.Linq.Expressions.ExpressionType.Divide>と<xref:System.Linq.Expressions.ExpressionType.GreaterThan>、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="62a30-2849">The <xref:System.Linq.Expressions.Expression.NodeType%2A> property would describe these binary expressions as <xref:System.Linq.Expressions.ExpressionType.Divide> and <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, respectively.</span></span>  
  
 <span data-ttu-id="62a30-2850">式の静的な CLR 型を<xref:System.Linq.Expressions.Expression>によって表されるオブジェクトが表す、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="62a30-2850">The static CLR type of the expression that the <xref:System.Linq.Expressions.Expression> object represents is represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Not">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2851">ビットごとの補数演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2851">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Not(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Not : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Not expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-2852"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2852">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2853">ビットごとの補数演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2853">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-2854"><see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2854">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2855"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2855">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="62a30-2856"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2856">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-2857">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2857">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-2858">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2858">Otherwise, they are `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-2859">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2859">Implementing Method</span></span>  
 <span data-ttu-id="62a30-2860">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2860">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-2861">場合`expression`します。型は、単項 not 演算子を定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子は、メソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-2861">If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2862">の場合`expression`します。型が数値またはブール型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2862">Otherwise, if `expression`.Type is a numeric or Boolean type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-2863">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-2863">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-2864">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2864">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2865">場合`expression`します。型の実装メソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2865">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-2866">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2866">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2867">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2867">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-2868">`expression`.型が null 許容値型と、対応する null 非許容の型は、実装メソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2868">`expression`.Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-2869">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2869">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-2870">メソッドの実装がある場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2870">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="62a30-2871">場合`expression`します。型が null 非許容には、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2871">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2872">それ以外の場合、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-2872">Otherwise, the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-2873">次の例は、論理を表す式を作成する方法を示します操作ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2873">The following example demonstrates how to create an expression that represents a logical NOT operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#51)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2874"><paramref name="expression" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2874"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2875">単項 NOT 演算子は、<paramref name="expression" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2875">The unary not operator is not defined for <paramref name="expression" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Not(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Not : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Not (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-2876"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2876">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2877"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2877">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2878">ビットごとの補数演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2878">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span></span> <span data-ttu-id="62a30-2879">実装メソッドを指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2879">The implementing method can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-2880"><see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2880">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2881"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-2881">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="62a30-2882"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2882">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-2883">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2883">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-2884">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2884">Otherwise, they are `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-2885">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2885">Implementing Method</span></span>  
 <span data-ttu-id="62a30-2886">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2886">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-2887">場合`method`は`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) を 1 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-2887">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-2888">場合`expression`します。型は、単項 not 演算子を定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子は、メソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-2888">If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2889">の場合`expression`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2889">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-2890">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-2890">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-2891">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2891">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2892">場合`expression`します。型の実装メソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2892">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-2893">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2893">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2894">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2894">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-2895">`expression`.型が null 許容値型と、対応する null 非許容値型は、実装メソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2895">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-2896">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2896">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-2897">メソッドの実装がある場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2897">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="62a30-2898">場合`expression`します。型が null 非許容には、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2898">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2899">それ以外の場合、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-2899">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2900"><paramref name="expression" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2900"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2901"><paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2901"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2902"><paramref name="method" /> は <see langword="null" /> で、単項 NOT 演算子は <paramref name="expression" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2902"><paramref name="method" /> is <see langword="null" /> and the unary not operator is not defined for <paramref name="expression" />.Type.</span></span>  
  
<span data-ttu-id="62a30-2903">または</span><span class="sxs-lookup"><span data-stu-id="62a30-2903">-or-</span></span> 
 <span data-ttu-id="62a30-2904"><paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2904"><paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NotEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2905">非等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2905">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ NotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member NotEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.NotEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2906"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2906">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2907"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2907">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2908">非等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2908">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span></span></summary>
        <returns><span data-ttu-id="62a30-2909"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2909">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2910">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2910">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-2911"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2911">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-2912">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2912">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="62a30-2913">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2913">Otherwise, it is `false`.</span></span> <span data-ttu-id="62a30-2914"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2914">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="62a30-2915"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2915">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-2916">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-2916">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-2917">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2917">Implementing Method</span></span>  
 <span data-ttu-id="62a30-2918">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2918">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-2919">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、非等値演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2919">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2920">メソッドの実装は、それ以外の場合、`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2920">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-2921">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-2921">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-2922">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2922">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2923">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2923">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-2924">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2924">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2925">次の 2 つの条件が満たされているかどうか、ノードがリフトされたおよびノードの種類は<xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="62a30-2925">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="62a30-2926">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2926">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-2927">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2927">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="62a30-2928">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2928">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2929">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2929">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2930">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2930">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="62a30-2931">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-2931">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-2932">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2932">The type of the node is <xref:System.Boolean>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2933"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2933"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2934">非等値演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2934">The inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ NotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member NotEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.NotEqual (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2935"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2935">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2936"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2936">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="liftToNull"><span data-ttu-id="62a30-2937"><see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2937"><see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2938"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2938">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2939">非等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2939">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span></span></summary>
        <returns><span data-ttu-id="62a30-2940"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2940">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2941">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2941">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-2942"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2942">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-2943">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティは等しく`liftToNull`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2943">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="62a30-2944">それ以外の場合、これらはどちらも`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2944">Otherwise, they are both `false`.</span></span> <span data-ttu-id="62a30-2945"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2945">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-2946">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-2946">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-2947">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2947">Implementing Method</span></span>  
 <span data-ttu-id="62a30-2948">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2948">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-2949">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドはメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-2949">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2950">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、非等値演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2950">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2951">メソッドの実装は、それ以外の場合、`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2951">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-2952">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-2952">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-2953">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2953">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2954">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2954">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-2955">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2955">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2956">次の 2 つの条件が満たされている場合は、ノードがリフトいます。また、ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2956">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="62a30-2957">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2957">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-2958">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2958">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="62a30-2959">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2959">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2960">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2960">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2961">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2961">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="62a30-2962">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-2962">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-2963">ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2963">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-2964"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2964"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-2965"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2965"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-2966"><paramref name="method" /> は <see langword="null" /> で、非等値演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2966"><paramref name="method" /> is <see langword="null" /> and the inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OnesComplement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2967">1 の補数を表す式を返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2967">Returns the expression representing the ones complement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ OnesComplement(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member OnesComplement : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.OnesComplement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-2968"><see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2968">An <see cref="T:System.Linq.Expressions.Expression" />.</span></span></param>
        <summary><span data-ttu-id="62a30-2969">1 の補数を表す式を返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2969">Returns the expression representing the ones complement.</span></span></summary>
        <returns><span data-ttu-id="62a30-2970"><see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a30-2970">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ OnesComplement(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member OnesComplement : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.OnesComplement (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-2971"><see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2971">An <see cref="T:System.Linq.Expressions.Expression" />.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-2972">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2972">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="62a30-2973">1 の補数を表す式を返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2973">Returns the expression representing the ones complement.</span></span></summary>
        <returns><span data-ttu-id="62a30-2974"><see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a30-2974">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Or">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-2975">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="OR" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2975">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Or (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Or(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Or : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Or (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-2976"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2976">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-2977"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2977">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-2978">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="OR" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2978">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-2979"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-2979">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-2980">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2980">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-2981"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2981">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-2982">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2982">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-2983">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2983">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-2984"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2984">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-2985">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-2985">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-2986">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2986">Implementing Method</span></span>  
 <span data-ttu-id="62a30-2987">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2987">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-2988">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表します`OR`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2988">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2989">の場合`left`します。型と`right`します。型は整数またはブール値の型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-2989">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-2990">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-2990">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-2991">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2991">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2992">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2992">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-2993">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2993">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-2994">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-2994">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-2995">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-2995">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-2996">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-2996">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-2997">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-2997">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-2998">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-2998">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-2999">ノードの型は、結果の型、定義済みのビットごと`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-2999">The type of the node is the result type of the predefined bitwise `OR` operator.</span></span>  
  
-   <span data-ttu-id="62a30-3000">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-3000">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-3001">ノードの型は、結果の型、定義済みのビットごとに対応する null 許容型`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-3001">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-3002">次のコード例では、論理 OR 演算を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3002">The following code example shows how to create an expression that represents a logical OR operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#28)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3003"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3003"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-3004">ビットごとの <see langword="OR" /> 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3004">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Or (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Or(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Or : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Or (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3005"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3005">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3006"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3006">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3007"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3007">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3008">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="OR" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3008">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-3009"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Or" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3009">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3010">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3010">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-3011"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3011">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-3012">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3012">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-3013">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3013">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-3014"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3014">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-3015">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-3015">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-3016">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3016">Implementing Method</span></span>  
 <span data-ttu-id="62a30-3017">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3017">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-3018">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドはメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-3018">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3019">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表します`OR`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3019">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3020">の場合`left`します。型と`right`します。型は整数またはブール値の型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3020">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-3021">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-3021">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-3022">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3022">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3023">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3023">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-3024">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3024">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3025">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3025">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-3026">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-3026">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-3027">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3027">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-3028">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3028">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3029">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3029">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-3030">ノードの型は、結果の型、定義済みのビットごと`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-3030">The type of the node is the result type of the predefined bitwise `OR` operator.</span></span>  
  
-   <span data-ttu-id="62a30-3031">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-3031">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-3032">ノードの型は、結果の型、定義済みのビットごとに対応する null 許容型`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-3032">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3033"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3033"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-3034"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3034"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-3035"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type にはビット処理 <see langword="OR" /> 演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3035"><paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3036">ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3036">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member OrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3037"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3037">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3038"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3038">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3039">ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3039">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-3040"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3040">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member OrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3041"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3041">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3042"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3042">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3043"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3043">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3044">ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3044">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-3045"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3045">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member OrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3046"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3046">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3047"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3047">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3048"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3048">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-3049"><see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3049">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3050">ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3050">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-3051"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3051">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrElse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3052">1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="OR" /> 演算を表す <see langword="false" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3052">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operator evaluates to <see langword="false" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElse (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrElse(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member OrElse : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrElse (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3053"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3053">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3054"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3054">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3055">1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="OR" /> 演算を表す <see langword="false" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3055">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-3056"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3056">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3057">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3057">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-3058"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3058">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-3059">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3059">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-3060">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3060">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-3061"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3061">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-3062">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-3062">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-3063">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3063">Implementing Method</span></span>  
 <span data-ttu-id="62a30-3064">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3064">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-3065">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表します`OR`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3065">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="62a30-3066">条件付き`OR`c# または Visual Basic の演算子をオーバー ロードできません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3066">The conditional `OR` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="62a30-3067">ただし、条件付き`OR`演算子はビット演算を使用して評価`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-3067">However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator.</span></span> <span data-ttu-id="62a30-3068">そのため、ユーザー定義のオーバー ロードをビットごとの`OR`演算子は、このノード型のメソッドの実装を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-3068">Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="62a30-3069">の場合`left`します。型と`right`します。型がブール型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3069">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-3070">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-3070">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-3071">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3071">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3072">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3072">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-3073">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3073">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3074">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3074">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-3075">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-3075">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-3076">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3076">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-3077">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3077">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3078">`left`.型と`right`します。種類は、同じブール型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3078">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="62a30-3079">場合`left`します。型と`right`します。型が null 非許容には、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3079">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-3080">ノードの型は、定義済みの条件式の結果型`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-3080">The type of the node is the result type of the predefined conditional `OR` operator.</span></span>  
  
-   <span data-ttu-id="62a30-3081">場合`left`します。型と`right`します。型が null 許容には、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-3081">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-3082">ノードの型は、定義済みの条件式の結果型に対応する null 許容型`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-3082">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-3083">次のコード例は、論理積を表す式を作成する方法を示しています。`OR`操作に最初のオペランドが評価された場合にのみ 2 番目のオペランドを評価する`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3083">The following code example shows how to create an expression that represents a logical `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#29)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3084"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3084"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-3085">ビットごとの <see langword="OR" /> 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3085">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="62a30-3086">または</span><span class="sxs-lookup"><span data-stu-id="62a30-3086">-or-</span></span> 
 <span data-ttu-id="62a30-3087"><paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3087"><paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElse (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrElse(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member OrElse : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrElse (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3088"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3088">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3089"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3089">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3090"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3090">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3091">1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="OR" /> 演算を表す <see langword="false" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3091">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-3092"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3092">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3093">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3093">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-3094"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3094">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-3095">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3095">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-3096">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3096">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-3097"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3097">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-3098">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-3098">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-3099">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3099">Implementing Method</span></span>  
 <span data-ttu-id="62a30-3100">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3100">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-3101">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-3101">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-3102">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表します`OR`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3102">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="62a30-3103">条件付き`OR`c# または Visual Basic の演算子をオーバー ロードできません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3103">The conditional `OR` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="62a30-3104">ただし、条件付き`OR`演算子はビット演算を使用して評価`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-3104">However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator.</span></span> <span data-ttu-id="62a30-3105">そのため、ユーザー定義のオーバー ロードをビットごとの`OR`演算子は、このノード型のメソッドの実装を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-3105">Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="62a30-3106">の場合`left`します。型と`right`します。型がブール型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3106">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-3107">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-3107">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-3108">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3108">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3109">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3109">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-3110">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3110">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3111">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3111">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-3112">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-3112">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-3113">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3113">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-3114">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3114">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3115">`left`.型と`right`します。種類は、同じブール型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3115">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="62a30-3116">場合`left`します。型と`right`します。型が null 非許容には、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3116">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-3117">ノードの型は、定義済みの条件式の結果型`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-3117">The type of the node is the result type of the predefined conditional `OR` operator.</span></span>  
  
-   <span data-ttu-id="62a30-3118">場合`left`します。型と`right`します。型が null 許容には、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-3118">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-3119">ノードの型は、定義済みの条件式の結果型に対応する null 許容型`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="62a30-3119">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3120"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3120"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-3121"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3121"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-3122"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type にはビット処理 <see langword="OR" /> 演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3122"><paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="62a30-3123">または</span><span class="sxs-lookup"><span data-stu-id="62a30-3123">-or-</span></span> 
 <span data-ttu-id="62a30-3124"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3124"><paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parameter">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3125">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3125">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Parameter(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Parameter : Type -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Parameter type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-3126">パラメーターまたは変数の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3126">The type of the parameter or variable.</span></span></param>
        <summary><span data-ttu-id="62a30-3127">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3127">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
        <returns><span data-ttu-id="62a30-3128">指定した名前および型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</span><span class="sxs-lookup"><span data-stu-id="62a30-3128">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-3129">次の例では、作成する方法、<xref:System.Linq.Expressions.MethodCallExpression>オブジェクトの値を出力する<xref:System.Linq.Expressions.ParameterExpression>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-3129">The following example demonstrates how to create a <xref:System.Linq.Expressions.MethodCallExpression> object that prints the value of a <xref:System.Linq.Expressions.ParameterExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#49)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#49)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Parameter(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Parameter : Type * string -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Parameter (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-3130">パラメーターまたは変数の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3130">The type of the parameter or variable.</span></span></param>
        <param name="name"><span data-ttu-id="62a30-3131">デバッグまたは印刷の目的でのみ使用されるパラメーターまたは変数の名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-3131">The name of the parameter or variable, used for debugging or printing purpose only.</span></span></param>
        <summary><span data-ttu-id="62a30-3132">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3132">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
        <returns><span data-ttu-id="62a30-3133"><see cref="T:System.Linq.Expressions.ParameterExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> プロパティおよび <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="P:System.Linq.Expressions.ParameterExpression.Name" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3133">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> and <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3134"><paramref name="type" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3134"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3135">式の代入と、それに続く元の式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3135">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostDecrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PostDecrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostDecrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3136">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3136">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <summary><span data-ttu-id="62a30-3137">式の代入と、それに続く元の式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3137">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span></span></summary>
        <returns><span data-ttu-id="62a30-3138">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3138">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostDecrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PostDecrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostDecrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3139">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3139">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3140">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3140">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="62a30-3141">式の代入と、それに続く元の式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3141">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span></span></summary>
        <returns><span data-ttu-id="62a30-3142">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3142">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3143">式の代入と、それに続く元の式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3143">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostIncrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PostIncrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostIncrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3144">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3144">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <summary><span data-ttu-id="62a30-3145">式の代入と、それに続く元の式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3145">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span></span></summary>
        <returns><span data-ttu-id="62a30-3146">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3146">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostIncrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PostIncrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostIncrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3147">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3147">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3148">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3148">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="62a30-3149">式の代入と、それに続く元の式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3149">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span></span></summary>
        <returns><span data-ttu-id="62a30-3150">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3150">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Power">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3151">数値の累乗を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3151">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Power (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Power(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Power : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Power (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3152"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3152">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3153"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3153">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3154">数値の累乗を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3154">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span></span></summary>
        <returns><span data-ttu-id="62a30-3155"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3155">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3156">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3156">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-3157"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3157">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-3158">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3158">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-3159">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3159">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-3160"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3160">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-3161">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-3161">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-3162">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3162">Implementing Method</span></span>  
 <span data-ttu-id="62a30-3163">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3163">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-3164">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、指数演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3164">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3165">の場合`left`します。型と`right`します。型は、どちらも<xref:System.Double>、メソッドの実装<xref:System.Math.Pow%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3165">Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-3166">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-3166">Node Type and Lifted versus Non-Lifted</span></span>  
  
-   <span data-ttu-id="62a30-3167">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3167">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-3168">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3168">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3169">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3169">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-3170">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-3170">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-3171">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3171">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3172"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3172"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-3173">指数演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3173">The exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="62a30-3174">または</span><span class="sxs-lookup"><span data-stu-id="62a30-3174">-or-</span></span> 
 <span data-ttu-id="62a30-3175"><paramref name="left" />.Type や <paramref name="right" />.Type は <see cref="T:System.Double" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3175"><paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Power (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Power(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Power : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Power (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3176"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3176">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3177"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3177">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3178"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3178">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3179">数値の累乗を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3179">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span></span></summary>
        <returns><span data-ttu-id="62a30-3180"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Power" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3180">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3181">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3181">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-3182"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3182">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-3183">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3183">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-3184">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3184">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-3185"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3185">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-3186">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-3186">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-3187">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3187">Implementing Method</span></span>  
 <span data-ttu-id="62a30-3188">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3188">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-3189">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドはメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-3189">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3190">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、指数演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3190">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3191">の場合`left`します。型と`right`します。型は、どちらも<xref:System.Double>、メソッドの実装<xref:System.Math.Pow%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3191">Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-3192">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-3192">Node Type and Lifted versus Non-Lifted</span></span>  
  
-   <span data-ttu-id="62a30-3193">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3193">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-3194">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3194">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3195">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3195">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-3196">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-3196">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-3197">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3197">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3198"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3198"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-3199"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3199"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-3200"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には累乗演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3200"><paramref name="method" /> is <see langword="null" /> and the exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span>  
  
<span data-ttu-id="62a30-3201">または</span><span class="sxs-lookup"><span data-stu-id="62a30-3201">-or-</span></span> 
 <span data-ttu-id="62a30-3202"><paramref name="method" /> は <see langword="null" /> であり、<paramref name="left" />.Type および/または <paramref name="right" />.Type は <see cref="T:System.Double" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3202"><paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PowerAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3203">式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3203">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member PowerAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.PowerAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3204"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3204">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3205"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3205">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3206">式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3206">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="62a30-3207"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3207">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PowerAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.PowerAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3208"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3208">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3209"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3209">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3210"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3210">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3211">式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3211">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="62a30-3212"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3212">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member PowerAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.PowerAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3213"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3213">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3214"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3214">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3215"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3215">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-3216"><see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3216">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3217">式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3217">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="62a30-3218"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3218">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PreDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3219">式の値を 1 つデクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3219">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreDecrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PreDecrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreDecrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3220">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3220">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <summary><span data-ttu-id="62a30-3221">式の値を 1 つデクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3221">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="62a30-3222">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3222">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreDecrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PreDecrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreDecrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3223">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3223">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3224">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3224">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="62a30-3225">式の値を 1 つデクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3225">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="62a30-3226">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3226">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PreIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3227">式の値を 1 つインクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3227">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreIncrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PreIncrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreIncrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3228">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3228">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <summary><span data-ttu-id="62a30-3229">式の値を 1 つインクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3229">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="62a30-3230">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3230">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreIncrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PreIncrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreIncrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3231">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3231">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3232">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3232">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></param>
        <summary><span data-ttu-id="62a30-3233">式の値を 1 つインクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3233">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span></span></summary>
        <returns><span data-ttu-id="62a30-3234">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3234">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Property">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3235">プロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3235">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo propertyAccessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ propertyAccessor);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, propertyAccessor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3236"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3236">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span></span> <span data-ttu-id="62a30-3237">静的プロパティの場合は null を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-3237">This can be null for static properties.</span></span></param>
        <param name="propertyAccessor"><span data-ttu-id="62a30-3238">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3238">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span></span></param>
        <summary><span data-ttu-id="62a30-3239">プロパティ アクセサー メソッドを使用することによるプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3239">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property by using a property accessor method.</span></span></summary>
        <returns><span data-ttu-id="62a30-3240"><see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、<paramref name="expression" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティを含む <paramref name="propertyAccessor" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3240">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3241"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.MemberExpression>と等しい、<xref:System.Reflection.PropertyInfo.PropertyType%2A>プロパティの<xref:System.Linq.Expressions.MemberExpression.Member%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3241">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span></span>  
  
 <span data-ttu-id="62a30-3242">によって表されるメソッドの場合`propertyAccessor`は`static`(`Shared` Visual basic)、`expression`できる`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3242">If the method represented by `propertyAccessor` is `static` (`Shared` in Visual Basic), `expression` can be `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3243"><paramref name="propertyAccessor" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3243"><paramref name="propertyAccessor" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-3244">または</span><span class="sxs-lookup"><span data-stu-id="62a30-3244">-or-</span></span> 
<span data-ttu-id="62a30-3245"><paramref name="propertyAccessor" /> が表すメソッドは <see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、<paramref name="expression" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3245">The method that <paramref name="propertyAccessor" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-3246"><paramref name="expression" />.Type は、<paramref name="propertyAccessor" /> の表すメソッドの宣言型に割り当てることができません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3246"><paramref name="expression" />.Type is not assignable to the declaring type of the method represented by <paramref name="propertyAccessor" />.</span></span>  
  
<span data-ttu-id="62a30-3247">または</span><span class="sxs-lookup"><span data-stu-id="62a30-3247">-or-</span></span> 
<span data-ttu-id="62a30-3248"><paramref name="propertyAccessor" /> が表すメソッドは、プロパティ アクセサー メソッドではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3248">The method that <paramref name="propertyAccessor" /> represents is not a property accessor method.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.PropertyInfo property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::Reflection::PropertyInfo ^ property);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="property" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3249"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3249">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span></span> <span data-ttu-id="62a30-3250">静的プロパティの場合は null を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-3250">This can be null for static properties.</span></span></param>
        <param name="property"><span data-ttu-id="62a30-3251"><see cref="T:System.Reflection.PropertyInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3251">The <see cref="T:System.Reflection.PropertyInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3252">プロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3252">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span></span></summary>
        <returns><span data-ttu-id="62a30-3253"><see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3253">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3254"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.MemberExpression>と等しい、<xref:System.Reflection.PropertyInfo.PropertyType%2A>プロパティの<xref:System.Linq.Expressions.MemberExpression.Member%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3254">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span></span>  
  
 <span data-ttu-id="62a30-3255">プロパティを表す場合`property`は`static`(`Shared` Visual Basic で)、`expression`できます`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3255">If the property represented by `property` is `static` (`Shared` in Visual Basic), `expression` can be `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3256"><paramref name="property" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3256"><paramref name="property" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="62a30-3257">または</span><span class="sxs-lookup"><span data-stu-id="62a30-3257">-or-</span></span> 
<span data-ttu-id="62a30-3258"><paramref name="property" /> が表すプロパティは <see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、<paramref name="expression" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3258">The property that <paramref name="property" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-3259"><paramref name="expression" />.Type は、<paramref name="property" /> が表すプロパティの宣言型に代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3259"><paramref name="expression" />.Type is not assignable to the declaring type of the property that <paramref name="property" /> represents.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3260"><see cref="T:System.Linq.Expressions.Expression" /> に <see cref="P:System.Linq.Expressions.Expression.Type" /> という名前のプロパティが含まれている <paramref name="propertyName" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3260">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property named <paramref name="propertyName" />.</span></span> <span data-ttu-id="62a30-3261">静的プロパティの場合は <see langword="null" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-3261">This can be <see langword="null" /> for static properties.</span></span></param>
        <param name="propertyName"><span data-ttu-id="62a30-3262">アクセスするプロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-3262">The name of a property to be accessed.</span></span></param>
        <summary><span data-ttu-id="62a30-3263">プロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3263">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span></span></summary>
        <returns><span data-ttu-id="62a30-3264"><see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="expression" /> により示されるプロパティを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティを含む <paramref name="propertyName" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3264">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property denoted by <paramref name="propertyName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3265"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.MemberExpression>と等しい、<xref:System.Reflection.PropertyInfo.PropertyType%2A>のプロパティ、<xref:System.Reflection.PropertyInfo>により示されるプロパティを表す`propertyName`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3265">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the <xref:System.Reflection.PropertyInfo> that represents the property denoted by `propertyName`.</span></span>  
  
 <span data-ttu-id="62a30-3266">このメソッドは検索`expression`します。型とその基本型の名前を持つプロパティ`propertyName`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3266">This method searches `expression`.Type and its base types for a property that has the name `propertyName`.</span></span> <span data-ttu-id="62a30-3267">非パブリック プロパティを優先順位のパブリック プロパティが指定されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-3267">Public properties are given preference over non-public properties.</span></span> <span data-ttu-id="62a30-3268">一致するプロパティが見つかった場合、このメソッドに渡します`expression`と<xref:System.Reflection.PropertyInfo>にそのプロパティを表す<xref:System.Linq.Expressions.Expression.Property%2A>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3268">If a matching property is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> that represents that property to <xref:System.Linq.Expressions.Expression.Property%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-3269">次の例では、プロパティへのアクセスを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3269">The following example shows how to create an expression that represents accessing a property.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#38)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3270"><paramref name="expression" /> または <paramref name="propertyName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3270"><paramref name="expression" /> or <paramref name="propertyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-3271"><paramref name="propertyName" />.Type またはその基本型では <paramref name="expression" /> という名前のプロパティが定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3271">No property named <paramref name="propertyName" /> is defined in <paramref name="expression" />.Type or its base types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.Property (instance, indexer, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="62a30-3272">プロパティが属するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-3272">The object to which the property belongs.</span></span> <span data-ttu-id="62a30-3273">プロパティが static (Visual Basic では Shared) の場合は、null にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-3273">If the property is static/shared, it must be null.</span></span></param>
        <param name="indexer"><span data-ttu-id="62a30-3274">インデックス化するプロパティを表す <see cref="T:System.Reflection.PropertyInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3274">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-3275">プロパティのインデックス化に使用する <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクトの <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3275">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span></span></param>
        <summary><span data-ttu-id="62a30-3276">インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3276">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span></span></summary>
        <returns><span data-ttu-id="62a30-3277">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3277">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, indexer As PropertyInfo, ParamArray arguments As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.Property (instance, indexer, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="62a30-3278">プロパティが属するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-3278">The object to which the property belongs.</span></span> <span data-ttu-id="62a30-3279">プロパティが static (Visual Basic では Shared) の場合は、null にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-3279">If the property is static/shared, it must be null.</span></span></param>
        <param name="indexer"><span data-ttu-id="62a30-3280">インデックス化するプロパティを表す <see cref="T:System.Reflection.PropertyInfo" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3280">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-3281">プロパティのインデックス化に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-3281">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span></span></param>
        <summary><span data-ttu-id="62a30-3282">インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3282">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span></span></summary>
        <returns><span data-ttu-id="62a30-3283">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3283">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, string propertyName, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, string propertyName, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, propertyName As String, ParamArray arguments As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::String ^ propertyName, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * string * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.Property (instance, propertyName, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="62a30-3284">プロパティが属するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-3284">The object to which the property belongs.</span></span> <span data-ttu-id="62a30-3285">プロパティが static (Visual Basic では Shared) の場合は、null にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-3285">If the property is static/shared, it must be null.</span></span></param>
        <param name="propertyName"><span data-ttu-id="62a30-3286">インデクサーの名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-3286">The name of the indexer.</span></span></param>
        <param name="arguments"><span data-ttu-id="62a30-3287">プロパティのインデックス化に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-3287">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span></span></param>
        <summary><span data-ttu-id="62a30-3288">インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3288">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span></span></summary>
        <returns><span data-ttu-id="62a30-3289">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3289">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, Type type, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Type type, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * Type * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, type, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3290">プロパティの格納オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-3290">The containing object of the property.</span></span> <span data-ttu-id="62a30-3291">静的プロパティの場合は null を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-3291">This can be null for static properties.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-3292">プロパティを格納する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3292">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the property.</span></span></param>
        <param name="propertyName"><span data-ttu-id="62a30-3293">アクセスするプロパティ。</span><span class="sxs-lookup"><span data-stu-id="62a30-3293">The property to be accessed.</span></span></param>
        <summary><span data-ttu-id="62a30-3294">プロパティにアクセスする <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3294">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> accessing a property.</span></span></summary>
        <returns><span data-ttu-id="62a30-3295">作成された <see cref="T:System.Linq.Expressions.MemberExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3295">The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyOrField">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression PropertyOrField (System.Linq.Expressions.Expression expression, string propertyOrFieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression PropertyOrField(class System.Linq.Expressions.Expression expression, string propertyOrFieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ PropertyOrField(System::Linq::Expressions::Expression ^ expression, System::String ^ propertyOrFieldName);" />
      <MemberSignature Language="F#" Value="static member PropertyOrField : System.Linq.Expressions.Expression * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.PropertyOrField (expression, propertyOrFieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyOrFieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3296"><see cref="T:System.Linq.Expressions.Expression" /> に <see cref="P:System.Linq.Expressions.Expression.Type" /> という名前のプロパティまたはフィールドが含まれている <paramref name="propertyOrFieldName" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3296">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property or field named <paramref name="propertyOrFieldName" />.</span></span> <span data-ttu-id="62a30-3297">静的メンバーの場合は null を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-3297">This can be null for static members.</span></span></param>
        <param name="propertyOrFieldName"><span data-ttu-id="62a30-3298">アクセスするプロパティまたはフィールドの名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-3298">The name of a property or field to be accessed.</span></span></param>
        <summary><span data-ttu-id="62a30-3299">プロパティまたはフィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3299">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property or field.</span></span></summary>
        <returns><span data-ttu-id="62a30-3300"><see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="expression" /> によって示されるプロパティまたはフィールドを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> または <see cref="T:System.Reflection.PropertyInfo" /> に設定された <see cref="T:System.Reflection.FieldInfo" /> プロパティを含む <paramref name="propertyOrFieldName" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3300">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> that represents the property or field denoted by <paramref name="propertyOrFieldName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3301"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.MemberExpression>と等しい、<xref:System.Reflection.PropertyInfo.PropertyType%2A>または<xref:System.Reflection.FieldInfo.FieldType%2A>のプロパティ、<xref:System.Reflection.PropertyInfo>または<xref:System.Reflection.FieldInfo>をそれぞれプロパティにより示されるフィールドを表す`propertyOrFieldName`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3301">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> or <xref:System.Reflection.FieldInfo.FieldType%2A> properties of the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo>, respectively, that represents the property or field denoted by `propertyOrFieldName`.</span></span>  
  
 <span data-ttu-id="62a30-3302">このメソッドは検索`expression`します。型とその基本型のプロパティまたはフィールドの名前を持つ`propertyOrFieldName`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3302">This method searches `expression`.Type and its base types for a property or field that has the name `propertyOrFieldName`.</span></span> <span data-ttu-id="62a30-3303">パブリック プロパティおよびフィールドより優先非パブリック プロパティとフィールド。</span><span class="sxs-lookup"><span data-stu-id="62a30-3303">Public properties and fields are given preference over non-public properties and fields.</span></span> <span data-ttu-id="62a30-3304">また、プロパティ、フィールドに対する優先をして指定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3304">Also, properties are given preference over fields.</span></span> <span data-ttu-id="62a30-3305">このメソッドに渡す場合は、対応するプロパティまたはフィールドが見つかると、`expression`と<xref:System.Reflection.PropertyInfo>または<xref:System.Reflection.FieldInfo>そのプロパティまたはフィールドを表す<xref:System.Linq.Expressions.Expression.Property%2A>または<xref:System.Linq.Expressions.Expression.Field%2A>、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="62a30-3305">If a matching property or field is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo> that represents that property or field to <xref:System.Linq.Expressions.Expression.Property%2A> or <xref:System.Linq.Expressions.Expression.Field%2A>, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-3306">次の例では、プロパティまたはフィールドへのアクセスを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3306">The following example shows how to create an expression that represents accessing a property or field.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#39)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#39)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3307"><paramref name="expression" /> または <paramref name="propertyOrFieldName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3307"><paramref name="expression" /> or <paramref name="propertyOrFieldName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-3308"><paramref name="propertyOrFieldName" />.Type またはその基本型では <paramref name="expression" /> という名前のプロパティまたはフィールドが定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3308">No property or field named <paramref name="propertyOrFieldName" /> is defined in <paramref name="expression" />.Type or its base types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Quote">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Quote (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Quote(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Quote(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Quote : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Quote expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3309"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3309">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3310"><see cref="T:System.Linq.Expressions.UnaryExpression" /> 型の定数値を持つ式を表す <see cref="T:System.Linq.Expressions.Expression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3310">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-3311"><see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3311">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3312"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>構築型を表して<xref:System.Linq.Expressions.Expression%601>型引数によって表される型が、`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3312">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents the constructed type <xref:System.Linq.Expressions.Expression%601>, where the type argument is the type represented by `expression`.Type.</span></span> <span data-ttu-id="62a30-3313"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3313">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`.</span></span> <span data-ttu-id="62a30-3314">両方<xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A>は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3314">Both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3315"><paramref name="expression" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3315"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Reduce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Reduce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Reduce" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Reduce () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Linq::Expressions::Expression ^ Reduce();" />
      <MemberSignature Language="F#" Value="abstract member Reduce : unit -&gt; System.Linq.Expressions.Expression&#xA;override this.Reduce : unit -&gt; System.Linq.Expressions.Expression" Usage="expression.Reduce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a30-3316">このノードをより単純な式に変形します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3316">Reduces this node to a simpler expression.</span></span> <span data-ttu-id="62a30-3317">CanReduce が true を返す場合、これは有効な式を返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3317">If CanReduce returns true, this should return a valid expression.</span></span> <span data-ttu-id="62a30-3318">このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-3318">This method can return another node which itself must be reduced.</span></span></summary>
        <returns><span data-ttu-id="62a30-3319">単純化された式。</span><span class="sxs-lookup"><span data-stu-id="62a30-3319">The reduced expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceAndCheck">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceAndCheck ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceAndCheck() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
      <MemberSignature Language="VB.NET" Value="Public Function ReduceAndCheck () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ ReduceAndCheck();" />
      <MemberSignature Language="F#" Value="member this.ReduceAndCheck : unit -&gt; System.Linq.Expressions.Expression" Usage="expression.ReduceAndCheck " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a30-3320">このノードをより単純な式に変形します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3320">Reduces this node to a simpler expression.</span></span> <span data-ttu-id="62a30-3321">CanReduce が true を返す場合、これは有効な式を返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3321">If CanReduce returns true, this should return a valid expression.</span></span> <span data-ttu-id="62a30-3322">このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-3322">This method can return another node which itself must be reduced.</span></span></summary>
        <returns><span data-ttu-id="62a30-3323">単純化された式。</span><span class="sxs-lookup"><span data-stu-id="62a30-3323">The reduced expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3324">Reduce とは異なり、このメソッドでは、縮小ノードが特定の不変条件を満たすことを確認します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3324">Unlike Reduce, this method checks that the reduced node satisfies certain invariants.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceExtensions">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Function ReduceExtensions () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ ReduceExtensions();" />
      <MemberSignature Language="F#" Value="member this.ReduceExtensions : unit -&gt; System.Linq.Expressions.Expression" Usage="expression.ReduceExtensions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a30-3325">式を既知のノード型 (拡張ノードではない型) に単純化し、それが既に既知の型である場合は単に式を返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3325">Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</span></span></summary>
        <returns><span data-ttu-id="62a30-3326">単純化された式。</span><span class="sxs-lookup"><span data-stu-id="62a30-3326">The reduced expression.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ReferenceEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ReferenceEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ReferenceEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3327"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3327">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3328"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3328">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3329">参照が等値であるかどうかの比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3329">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference equality comparison.</span></span></summary>
        <returns><span data-ttu-id="62a30-3330"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3330">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceNotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceNotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceNotEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ReferenceNotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ReferenceNotEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ReferenceNotEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3331"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3331">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3332"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3332">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3333">参照が等値でないかどうかの比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3333">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference inequality comparison.</span></span></summary>
        <returns><span data-ttu-id="62a30-3334"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3334">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Rethrow">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3335">例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3335">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Rethrow () As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Rethrow();" />
      <MemberSignature Language="F#" Value="static member Rethrow : unit -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Rethrow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a30-3336">例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3336">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span></span></summary>
        <returns><span data-ttu-id="62a30-3337">例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3337">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Rethrow(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Rethrow : Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Rethrow type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-3338">式の新しい <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3338">The new <see cref="T:System.Type" /> of the expression.</span></span></param>
        <summary><span data-ttu-id="62a30-3339">型を指定して、例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3339">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception with a given type.</span></span></summary>
        <returns><span data-ttu-id="62a30-3340">例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3340">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Return">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3341">return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3341">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Return (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-3342"><see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3342">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <summary><span data-ttu-id="62a30-3343">return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3343">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span></span></summary>
        <returns><span data-ttu-id="62a30-3344">Return と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="target" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3344">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Return (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-3345"><see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3345">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="62a30-3346">ジャンプ時に関連付けられているラベルに渡される値。</span><span class="sxs-lookup"><span data-stu-id="62a30-3346">The value that will be passed to the associated label upon jumping.</span></span></param>
        <summary><span data-ttu-id="62a30-3347">return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3347">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span></span> <span data-ttu-id="62a30-3348">ジャンプ時にラベルに渡す値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-3348">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-3349">Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="target" /> を含む <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3349">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-3350">次の例を含む式を作成する方法を示します、<xref:System.Linq.Expressions.Expression.Return%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-3350">The following example demonstrates how to create an expression that contains the <xref:System.Linq.Expressions.Expression.Return%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-3351"><see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3351">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-3352"><see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3352">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3353">型を指定して、return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3353">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</span></span></summary>
        <returns><span data-ttu-id="62a30-3354">Return と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3354">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return (target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="62a30-3355"><see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3355">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span></span></param>
        <param name="value"><span data-ttu-id="62a30-3356">ジャンプ時に関連付けられているラベルに渡される値。</span><span class="sxs-lookup"><span data-stu-id="62a30-3356">The value that will be passed to the associated label upon jumping.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-3357"><see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3357">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3358">型を指定して、return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3358">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</span></span> <span data-ttu-id="62a30-3359">ジャンプ時にラベルに渡す値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="62a30-3359">The value passed to the label upon jumping can be specified.</span></span></summary>
        <returns><span data-ttu-id="62a30-3360">Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3360">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RightShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3361">ビットごとの右シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3361">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShift (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member RightShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShift (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3362"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3362">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3363"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3363">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3364">ビットごとの右シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3364">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-3365"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3365">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3366">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3366">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-3367"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3367">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-3368">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3368">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-3369">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3369">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-3370"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3370">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-3371">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-3371">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-3372">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3372">Implementing Method</span></span>  
 <span data-ttu-id="62a30-3373">次の規則は、操作の選択したメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3373">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-3374">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、右シフト演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3374">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3375">の場合`left`します。型が整数型 (1 つの<xref:System.Byte>、 <xref:System.SByte>、 <xref:System.Int16>、 <xref:System.UInt16>、 <xref:System.Int32>、 <xref:System.UInt32>、 <xref:System.Int64>、 <xref:System.UInt64>、または対応する null 許容型) と`right`します。種類は<xref:System.Int32>、メソッドの実装`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3375">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-3376">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-3376">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-3377">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3377">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3378">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3378">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-3379">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3379">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3380">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3380">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-3381">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-3381">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-3382">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3382">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-3383">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3383">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3384">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3384">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-3385">ノードの型は、定義済みの右シフト演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3385">The type of the node is the result type of the predefined right-shift operator.</span></span>  
  
-   <span data-ttu-id="62a30-3386">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-3386">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-3387">ノードの型は、定義済みの右シフト演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3387">The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3388"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3388"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-3389">右シフト演算子は <paramref name="left" />.Type と <paramref name="right" />.Type には定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3389">The right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShift (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member RightShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShift (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3390"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3390">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3391"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3391">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3392"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3392">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3393">ビットごとの右シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3393">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-3394"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3394">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3395">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3395">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-3396"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3396">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-3397">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3397">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-3398">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3398">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-3399"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3399">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-3400">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-3400">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-3401">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3401">Implementing Method</span></span>  
 <span data-ttu-id="62a30-3402">次の規則は、操作の選択したメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3402">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-3403">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-3403">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-3404">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、右シフト演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3404">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3405">の場合`left`します。型が整数型 (1 つの<xref:System.Byte>、 <xref:System.SByte>、 <xref:System.Int16>、 <xref:System.UInt16>、 <xref:System.Int32>、 <xref:System.UInt32>、 <xref:System.Int64>、 <xref:System.UInt64>、または対応する null 許容型) と`right`します。種類は<xref:System.Int32>、メソッドの実装`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3405">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-3406">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-3406">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-3407">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3407">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3408">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3408">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-3409">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3409">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3410">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3410">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-3411">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-3411">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-3412">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3412">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-3413">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3413">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3414">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3414">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-3415">ノードの型は、定義済みの右シフト演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3415">The type of the node is the result type of the predefined right-shift operator.</span></span>  
  
-   <span data-ttu-id="62a30-3416">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-3416">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-3417">ノードの型は、定義済みの右シフト演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3417">The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3418"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3418"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-3419"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3419"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-3420"><paramref name="method" /> は <see langword="null" /> で、右シフト演算子は <paramref name="left" />.Type と <paramref name="right" />.Type には定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3420"><paramref name="method" /> is <see langword="null" /> and the right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RightShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3421">ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3421">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member RightShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShiftAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3422"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3422">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3423"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3423">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3424">ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3424">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-3425"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3425">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member RightShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShiftAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3426"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3426">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3427"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3427">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3428"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3428">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3429">ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3429">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-3430"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3430">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member RightShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShiftAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3431"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3431">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3432"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3432">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3433"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3433">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-3434"><see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3434">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3435">ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3435">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-3436"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3436">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RuntimeVariables">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3437"><see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3437">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RuntimeVariables (variables As IEnumerable(Of ParameterExpression)) As RuntimeVariablesExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::RuntimeVariablesExpression ^ RuntimeVariables(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables);" />
      <MemberSignature Language="F#" Value="static member RuntimeVariables : seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.RuntimeVariablesExpression" Usage="System.Linq.Expressions.Expression.RuntimeVariables variables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables"><span data-ttu-id="62a30-3438"><see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="62a30-3438">A collection of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-3439"><see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3439">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-3440"><see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> プロパティを含む <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a30-3440">An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (params System.Linq.Expressions.ParameterExpression[] variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Linq.Expressions.ParameterExpression[] variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RuntimeVariables (ParamArray variables As ParameterExpression()) As RuntimeVariablesExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::RuntimeVariablesExpression ^ RuntimeVariables(... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables);" />
      <MemberSignature Language="F#" Value="static member RuntimeVariables : System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.RuntimeVariablesExpression" Usage="System.Linq.Expressions.Expression.RuntimeVariables variables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables"><span data-ttu-id="62a30-3441"><see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-3441">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</span></span></param>
        <summary><span data-ttu-id="62a30-3442"><see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3442">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-3443"><see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> プロパティを含む <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a30-3443">An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3444">オーバーフロー チェックを行わない算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3444">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Subtract(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3445"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3445">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3446"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3446">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3447">オーバーフロー チェックを行わない算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3447">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-3448"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3448">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3449">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3449">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-3450"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3450">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-3451">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3451">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-3452">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3452">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-3453"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3453">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-3454">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-3454">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-3455">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3455">Implementing Method</span></span>  
 <span data-ttu-id="62a30-3456">次の規則は、操作の選択したメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3456">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-3457">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、減算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3457">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3458">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3458">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-3459">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-3459">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-3460">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3460">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3461">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3461">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-3462">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3462">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3463">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3463">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-3464">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-3464">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-3465">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3465">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-3466">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3466">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3467">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3467">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-3468">ノードの型は、定義済みの減算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3468">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="62a30-3469">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-3469">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-3470">ノードの型は、定義済みの減算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3470">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-3471">次のコード例では、最初の引数から引数を減算する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3471">The following code example shows how to create an expression that subtracts the argument from the first argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#30)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3472"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3472"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-3473">減算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3473">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Subtract(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Subtract (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3474"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3474">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3475"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3475">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3476"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3476">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3477">オーバーフロー チェックを行わない算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3477">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-3478"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3478">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3479">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3479">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-3480"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3480">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-3481">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3481">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-3482">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3482">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-3483"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3483">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-3484">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-3484">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-3485">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3485">Implementing Method</span></span>  
 <span data-ttu-id="62a30-3486">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3486">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-3487">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-3487">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-3488">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、減算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3488">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3489">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3489">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-3490">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-3490">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-3491">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3491">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3492">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3492">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-3493">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3493">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3494">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3494">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-3495">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-3495">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-3496">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3496">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-3497">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3497">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3498">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3498">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-3499">ノードの型は、定義済みの減算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3499">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="62a30-3500">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-3500">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-3501">ノードの型は、定義済みの減算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3501">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3502"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3502"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-3503"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3503"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-3504"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には減算演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3504"><paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3505">オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3505">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member SubtractAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3506"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3506">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3507"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3507">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3508">オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3508">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-3509"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3509">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member SubtractAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3510"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3510">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3511"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3511">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3512"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3512">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3513">オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3513">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-3514"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3514">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member SubtractAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3515"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3515">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3516"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3516">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3517"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3517">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-3518"><see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3518">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3519">オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3519">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-3520"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3520">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3521">オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3521">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member SubtractAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssignChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3522"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3522">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3523"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3523">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3524">オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3524">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-3525"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3525">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member SubtractAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssignChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3526"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3526">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3527"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3527">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3528"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3528">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3529">オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3529">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-3530"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3530">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member SubtractAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssignChecked (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3531"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3531">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3532"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3532">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3533"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3533">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <param name="conversion"><span data-ttu-id="62a30-3534"><see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3534">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3535">オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3535">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-3536"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3536">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3537">オーバーフロー チェックを行う算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3537">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member SubtractChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3538"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3538">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3539"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3539">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3540">オーバーフロー チェックを行う算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3540">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-3541"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3541">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3542">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3542">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-3543"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3543">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-3544">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3544">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-3545">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3545">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-3546"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3546">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-3547">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-3547">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-3548">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3548">Implementing Method</span></span>  
 <span data-ttu-id="62a30-3549">次の規則は、操作の選択したメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3549">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-3550">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、減算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3550">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3551">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3551">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-3552">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-3552">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-3553">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3553">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3554">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3554">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-3555">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3555">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3556">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3556">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-3557">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-3557">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-3558">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3558">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-3559">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3559">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3560">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3560">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-3561">ノードの型は、定義済みの減算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3561">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="62a30-3562">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-3562">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-3563">ノードの型は、定義済みの減算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3563">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3564"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3564"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-3565">減算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3565">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member SubtractChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="62a30-3566"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3566">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span></span></param>
        <param name="right"><span data-ttu-id="62a30-3567"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3567">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3568"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3568">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3569">オーバーフロー チェックを行う算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3569">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span></span></summary>
        <returns><span data-ttu-id="62a30-3570"><see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3570">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3571">その結果、<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3571">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="62a30-3572"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3572">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-3573">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3573">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-3574">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3574">Otherwise, they are `false`.</span></span> <span data-ttu-id="62a30-3575"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3575">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="62a30-3576">次の情報は、メソッドの実装をノードの種類を説明し、ノードがリフトされたかどうか。</span><span class="sxs-lookup"><span data-stu-id="62a30-3576">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-3577">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3577">Implementing Method</span></span>  
 <span data-ttu-id="62a30-3578">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3578">The following rules determine the implementing method for the operation :</span></span>  
  
-   <span data-ttu-id="62a30-3579">場合`method`でない`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) 2 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-3579">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-3580">の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、減算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3580">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3581">の場合`left`します。型と`right`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3581">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-3582">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-3582">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-3583">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3583">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3584">場合`left`します。型と`right`します。型のメソッドの実装の対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3584">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-3585">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3585">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3586">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3586">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-3587">`left`.型と`right`します。種類は、両方が値型を少なくとも 1 つが null 許容型と対応する null 非許容の型がメソッドの実装の対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="62a30-3587">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-3588">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3588">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-3589">メソッドの実装がある場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3589">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3590">場合`left`します。型と`right`します。種類は、両方の null 非許容、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3590">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-3591">ノードの型は、定義済みの減算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3591">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="62a30-3592">場合`left`します。型と`right`します。種類は、両方の null 値許容、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-3592">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="62a30-3593">ノードの型は、定義済みの減算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3593">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3594"><paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3594"><paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-3595"><paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3595"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-3596"><paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には減算演算子が定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3596"><paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Switch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3597"><see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3597">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue"><span data-ttu-id="62a30-3598">各ケースに対してテストする値。</span><span class="sxs-lookup"><span data-stu-id="62a30-3598">The value to be tested against each case.</span></span></param>
        <param name="cases"><span data-ttu-id="62a30-3599">この switch 式に対するケースのセット。</span><span class="sxs-lookup"><span data-stu-id="62a30-3599">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="62a30-3600">既定のケースのない <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3600">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement without a default case.</span></span></summary>
        <returns><span data-ttu-id="62a30-3601">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3601">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3602">すべて<xref:System.Linq.Expressions.SwitchCase>内のオブジェクトを<xref:System.Linq.Expressions.SwitchExpression>オブジェクトしない限り、同じ型である必要があります、<xref:System.Linq.Expressions.SwitchExpression>タイプ`void`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3602">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="62a30-3603">各<xref:System.Linq.Expressions.SwitchCase>オブジェクトが暗黙的な`break`ステートメントで、暗黙的なフォール スルー 1 つの case ラベルから間がないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3603">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
 <span data-ttu-id="62a30-3604">場合`switchValue`いずれかと一致しない場合にの例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3604">If `switchValue` does not match any of the cases, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-3605">次の例では、既定のケースのないスイッチ ステートメントを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3605">The following example demonstrates how to create an expression that represents a swtich statement without a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#34)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, defaultBody, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue"><span data-ttu-id="62a30-3606">各ケースに対してテストする値。</span><span class="sxs-lookup"><span data-stu-id="62a30-3606">The value to be tested against each case.</span></span></param>
        <param name="defaultBody"><span data-ttu-id="62a30-3607"><paramref name="switchValue" /> がいずれのケースとも一致しない場合の switch の結果。</span><span class="sxs-lookup"><span data-stu-id="62a30-3607">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</span></span></param>
        <param name="cases"><span data-ttu-id="62a30-3608">この switch 式に対するケースのセット。</span><span class="sxs-lookup"><span data-stu-id="62a30-3608">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="62a30-3609">既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3609">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span></span></summary>
        <returns><span data-ttu-id="62a30-3610">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3610">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3611">すべて<xref:System.Linq.Expressions.SwitchCase>内のオブジェクトを<xref:System.Linq.Expressions.SwitchExpression>オブジェクトしない限り、同じ型である必要があります、<xref:System.Linq.Expressions.SwitchExpression>タイプ`void`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3611">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="62a30-3612">各<xref:System.Linq.Expressions.SwitchCase>オブジェクトが暗黙的な`break`ステートメントで、暗黙的なフォール スルー 1 つの case ラベルから間がないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3612">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
 <span data-ttu-id="62a30-3613">場合`switchValue`によって表される既定のケースの場合のいずれかと一致しない`defaultBody`を実行します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3613">If `switchValue` does not match any of the cases, the default case represented by `defaultBody` is run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-3614">次の例では、既定のケースがスイッチ ステートメントを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3614">The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, cases As IEnumerable(Of SwitchCase)) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.SwitchCase&gt; -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="switchValue"><span data-ttu-id="62a30-3615">各ケースに対してテストする値。</span><span class="sxs-lookup"><span data-stu-id="62a30-3615">The value to be tested against each case.</span></span></param>
        <param name="defaultBody"><span data-ttu-id="62a30-3616"><paramref name="switchValue" /> がいずれのケースとも一致しない場合の switch の結果。</span><span class="sxs-lookup"><span data-stu-id="62a30-3616">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</span></span></param>
        <param name="comparison"><span data-ttu-id="62a30-3617">使用する等値比較メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-3617">The equality comparison method to use.</span></span></param>
        <param name="cases"><span data-ttu-id="62a30-3618">この switch 式に対するケースのセット。</span><span class="sxs-lookup"><span data-stu-id="62a30-3618">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="62a30-3619">既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3619">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span></span></summary>
        <returns><span data-ttu-id="62a30-3620">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3620">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue"><span data-ttu-id="62a30-3621">各ケースに対してテストする値。</span><span class="sxs-lookup"><span data-stu-id="62a30-3621">The value to be tested against each case.</span></span></param>
        <param name="defaultBody"><span data-ttu-id="62a30-3622"><paramref name="switchValue" /> がいずれのケースとも一致しない場合の switch の結果。</span><span class="sxs-lookup"><span data-stu-id="62a30-3622">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</span></span></param>
        <param name="comparison"><span data-ttu-id="62a30-3623">使用する等値比較メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-3623">The equality comparison method to use.</span></span></param>
        <param name="cases"><span data-ttu-id="62a30-3624">この switch 式に対するケースのセット。</span><span class="sxs-lookup"><span data-stu-id="62a30-3624">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="62a30-3625">既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3625">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span></span></summary>
        <returns><span data-ttu-id="62a30-3626">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3626">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(Type ^ type, System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.SwitchCase&gt; -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (type, switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-3627">switch の結果の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3627">The result type of the switch.</span></span></param>
        <param name="switchValue"><span data-ttu-id="62a30-3628">各ケースに対してテストする値。</span><span class="sxs-lookup"><span data-stu-id="62a30-3628">The value to be tested against each case.</span></span></param>
        <param name="defaultBody"><span data-ttu-id="62a30-3629"><paramref name="switchValue" /> がいずれのケースとも一致しない場合の switch の結果。</span><span class="sxs-lookup"><span data-stu-id="62a30-3629">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</span></span></param>
        <param name="comparison"><span data-ttu-id="62a30-3630">使用する等値比較メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-3630">The equality comparison method to use.</span></span></param>
        <param name="cases"><span data-ttu-id="62a30-3631">この switch 式に対するケースのセット。</span><span class="sxs-lookup"><span data-stu-id="62a30-3631">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="62a30-3632">既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3632">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span></span></summary>
        <returns><span data-ttu-id="62a30-3633">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3633">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(Type ^ type, System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (type, switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-3634">switch の結果の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3634">The result type of the switch.</span></span></param>
        <param name="switchValue"><span data-ttu-id="62a30-3635">各ケースに対してテストする値。</span><span class="sxs-lookup"><span data-stu-id="62a30-3635">The value to be tested against each case.</span></span></param>
        <param name="defaultBody"><span data-ttu-id="62a30-3636"><paramref name="switchValue" /> がいずれのケースとも一致しない場合の switch の結果。</span><span class="sxs-lookup"><span data-stu-id="62a30-3636">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</span></span></param>
        <param name="comparison"><span data-ttu-id="62a30-3637">使用する等値比較メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-3637">The equality comparison method to use.</span></span></param>
        <param name="cases"><span data-ttu-id="62a30-3638">この switch 式に対するケースのセット。</span><span class="sxs-lookup"><span data-stu-id="62a30-3638">The set of cases for this switch expression.</span></span></param>
        <summary><span data-ttu-id="62a30-3639">既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3639">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span></span></summary>
        <returns><span data-ttu-id="62a30-3640">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3640">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SwitchCase">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3641"><see cref="T:System.Linq.Expressions.SwitchCase" /> オブジェクトで使用される <see cref="T:System.Linq.Expressions.SwitchExpression" /> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3641">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchCase (body As Expression, testValues As IEnumerable(Of Expression)) As SwitchCase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchCase ^ SwitchCase(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ testValues);" />
      <MemberSignature Language="F#" Value="static member SwitchCase : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.SwitchCase" Usage="System.Linq.Expressions.Expression.SwitchCase (body, testValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="62a30-3642">case の本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-3642">The body of the case.</span></span></param>
        <param name="testValues"><span data-ttu-id="62a30-3643">case のテスト値。</span><span class="sxs-lookup"><span data-stu-id="62a30-3643">The test values of the case.</span></span></param>
        <summary><span data-ttu-id="62a30-3644"><see cref="T:System.Linq.Expressions.SwitchCase" /> オブジェクトで使用される <see cref="T:System.Linq.Expressions.SwitchExpression" /> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3644">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</span></span></summary>
        <returns><span data-ttu-id="62a30-3645">作成された <see cref="T:System.Linq.Expressions.SwitchCase" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3645">The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3646">すべて<xref:System.Linq.Expressions.SwitchCase>内のオブジェクトを<xref:System.Linq.Expressions.SwitchExpression>オブジェクトしない限り、同じ型である必要があります、<xref:System.Linq.Expressions.SwitchExpression>タイプ`void`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3646">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="62a30-3647">各<xref:System.Linq.Expressions.SwitchCase>オブジェクトが暗黙的な`break`ステートメントで、暗黙的なフォール スルー 1 つの case ラベルから間がないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3647">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-3648">次の例では、既定のケースがスイッチ ステートメントを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3648">The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, params System.Linq.Expressions.Expression[] testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression[] testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchCase (body As Expression, ParamArray testValues As Expression()) As SwitchCase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchCase ^ SwitchCase(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ testValues);" />
      <MemberSignature Language="F#" Value="static member SwitchCase : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.SwitchCase" Usage="System.Linq.Expressions.Expression.SwitchCase (body, testValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="62a30-3649">case の本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-3649">The body of the case.</span></span></param>
        <param name="testValues"><span data-ttu-id="62a30-3650">case のテスト値。</span><span class="sxs-lookup"><span data-stu-id="62a30-3650">The test values of the case.</span></span></param>
        <summary><span data-ttu-id="62a30-3651"><see cref="T:System.Linq.Expressions.SwitchCase" /> で使用する <see cref="T:System.Linq.Expressions.SwitchExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3651">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> for use in a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-3652">作成された <see cref="T:System.Linq.Expressions.SwitchCase" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3652">The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SymbolDocument">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3653"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3653">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="62a30-3654"><see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3654">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3655"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3655">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-3656">指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3656">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> property set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string * Guid -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument (fileName, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="62a30-3657"><see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3657">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span></span></param>
        <param name="language"><span data-ttu-id="62a30-3658"><see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3658">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3659"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3659">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-3660">指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> プロパティおよび <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3660">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> properties set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid, languageVendor As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language, Guid languageVendor);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string * Guid * Guid -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument (fileName, language, languageVendor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="62a30-3661"><see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3661">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span></span></param>
        <param name="language"><span data-ttu-id="62a30-3662"><see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3662">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span></span></param>
        <param name="languageVendor"><span data-ttu-id="62a30-3663"><see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3663">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3664"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3664">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-3665">指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、および <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3665">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> properties set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor, valuetype System.Guid documentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid, languageVendor As Guid, documentType As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string * Guid * Guid * Guid -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument (fileName, language, languageVendor, documentType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
        <Parameter Name="documentType" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="62a30-3666"><see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3666">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span></span></param>
        <param name="language"><span data-ttu-id="62a30-3667"><see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3667">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span></span></param>
        <param name="languageVendor"><span data-ttu-id="62a30-3668"><see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3668">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</span></span></param>
        <param name="documentType"><span data-ttu-id="62a30-3669"><see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3669">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3670"><see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3670">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-3671">指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />、および <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3671">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> properties set to the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Throw">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3672">例外のスローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3672">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Throw (value As Expression) As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Throw(System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Throw : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Throw value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="62a30-3673"><see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3673">An <see cref="T:System.Linq.Expressions.Expression" />.</span></span></param>
        <summary><span data-ttu-id="62a30-3674">例外のスローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3674">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</span></span></summary>
        <returns><span data-ttu-id="62a30-3675">例外を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3675">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-3676">次の例では、作成する方法、<xref:System.Linq.Expressions.TryExpression>を使用するオブジェクト、<xref:System.Linq.Expressions.Expression.Throw%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="62a30-3676">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that uses the <xref:System.Linq.Expressions.Expression.Throw%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Throw(System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Throw : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Throw (value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="62a30-3677"><see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3677">An <see cref="T:System.Linq.Expressions.Expression" />.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-3678">式の新しい <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3678">The new <see cref="T:System.Type" /> of the expression.</span></span></param>
        <summary><span data-ttu-id="62a30-3679">型を指定して、例外のスローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3679">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception with a given type.</span></span></summary>
        <returns><span data-ttu-id="62a30-3680">例外を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3680">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="expression.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62a30-3681"><see cref="T:System.Linq.Expressions.Expression" /> のテキスト表現を返します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3681">Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-3682"><see cref="T:System.Linq.Expressions.Expression" /> のテキスト表現。</span><span class="sxs-lookup"><span data-stu-id="62a30-3682">A textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatch (System.Linq.Expressions.Expression body, params System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatch(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCatch (body As Expression, ParamArray handlers As CatchBlock()) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryCatch(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberSignature Language="F#" Value="static member TryCatch : System.Linq.Expressions.Expression * System.Linq.Expressions.CatchBlock[] -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryCatch (body, handlers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="62a30-3683">try ブロックの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-3683">The body of the try block.</span></span></param>
        <param name="handlers"><span data-ttu-id="62a30-3684">try ブロックに関連付ける catch ステートメントを表す 0 個以上の <see cref="T:System.Linq.Expressions.CatchBlock" /> 式の配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-3684">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</span></span></param>
        <summary><span data-ttu-id="62a30-3685">任意の数の catch ステートメントを指定し、fault ブロックと finally ブロックを指定せずに、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3685">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and neither a fault nor finally block.</span></span></summary>
        <returns><span data-ttu-id="62a30-3686">作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3686">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-3687">次の例では、作成する方法、 <xref:System.Linq.Expressions.TryExpression> catch ステートメントを含むオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="62a30-3687">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatchFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatchFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, params System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatchFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCatchFinally (body As Expression, finally As Expression, ParamArray handlers As CatchBlock()) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryCatchFinally(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally, ... cli::array &lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberSignature Language="F#" Value="static member TryCatchFinally : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.CatchBlock[] -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryCatchFinally (body, finally, handlers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="62a30-3688">try ブロックの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-3688">The body of the try block.</span></span></param>
        <param name="finally"><span data-ttu-id="62a30-3689">finally ブロックの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-3689">The body of the finally block.</span></span></param>
        <param name="handlers"><span data-ttu-id="62a30-3690">try ブロックに関連付ける catch ステートメントを表す 0 個以上の <see cref="T:System.Linq.Expressions.CatchBlock" /> 式の配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-3690">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</span></span></param>
        <summary><span data-ttu-id="62a30-3691">任意の数の catch ステートメントおよび 1 つの finally ブロックを指定して、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3691">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and a finally block.</span></span></summary>
        <returns><span data-ttu-id="62a30-3692">作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3692">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="62a30-3693">次の例は、作成する方法を示します、 <xref:System.Linq.Expressions.TryExpression> catch ステートメントを含むオブジェクトと、finally ステートメントを使用します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3693">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement and a finally statement.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#48)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFault">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFault (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFault(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression fault) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFault (body As Expression, fault As Expression) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryFault(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ fault);" />
      <MemberSignature Language="F#" Value="static member TryFault : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryFault (body, fault)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="62a30-3694">try ブロックの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-3694">The body of the try block.</span></span></param>
        <param name="fault"><span data-ttu-id="62a30-3695">fault ブロックの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-3695">The body of the fault block.</span></span></param>
        <summary><span data-ttu-id="62a30-3696">fault ブロックを指定し、catch ステートメントを指定せずに、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3696">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a fault block and no catch statements.</span></span></summary>
        <returns><span data-ttu-id="62a30-3697">作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3697">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFinally (body As Expression, finally As Expression) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryFinally(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally);" />
      <MemberSignature Language="F#" Value="static member TryFinally : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryFinally (body, finally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="62a30-3698">try ブロックの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-3698">The body of the try block.</span></span></param>
        <param name="finally"><span data-ttu-id="62a30-3699">finally ブロックの本体。</span><span class="sxs-lookup"><span data-stu-id="62a30-3699">The body of the finally block.</span></span></param>
        <summary><span data-ttu-id="62a30-3700">finally ブロックを指定し、catch ステートメントを指定せずに、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3700">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a finally block and no catch statements.</span></span></summary>
        <returns><span data-ttu-id="62a30-3701">作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3701">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetActionType">
      <MemberSignature Language="C#" Value="public static bool TryGetActionType (Type[] typeArgs, out Type actionType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetActionType(class System.Type[] typeArgs, [out] class System.Type&amp; actionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetActionType (typeArgs As Type(), ByRef actionType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetActionType(cli::array &lt;Type ^&gt; ^ typeArgs, [Runtime::InteropServices::Out] Type ^ % actionType);" />
      <MemberSignature Language="F#" Value="static member TryGetActionType : Type[] *  -&gt; bool" Usage="System.Linq.Expressions.Expression.TryGetActionType (typeArgs, actionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="actionType" Type="System.Type" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs"><span data-ttu-id="62a30-3702">System.Action デリゲート型の型引数を指定する Type オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-3702">An array of Type objects that specify the type arguments for the System.Action delegate type.</span></span></param>
        <param name="actionType"><span data-ttu-id="62a30-3703">このメソッドが返されるときに、特定の型引数を持つ汎用 System.Action デリゲート型を格納します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3703">When this method returns, contains the generic System.Action delegate type that has specific type arguments.</span></span> <span data-ttu-id="62a30-3704"><paramref name="typeArgs" /> に一致する汎用 System.Action デリゲートがない場合は、null を格納します。このパラメーターは初期化されていない状態で渡されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-3704">Contains null if there is no generic System.Action delegate that matches the <paramref name="typeArgs" />.This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="62a30-3705">特定の型引数を持つ汎用 System.Action デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3705">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Action delegate type that has specific type arguments.</span></span></summary>
        <returns><span data-ttu-id="62a30-3706">特定の <paramref name="typeArgs" /> について汎用 System.Action デリゲート型が作成された場合は true。それ以外の場合は false。</span><span class="sxs-lookup"><span data-stu-id="62a30-3706">true if generic System.Action delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetFuncType">
      <MemberSignature Language="C#" Value="public static bool TryGetFuncType (Type[] typeArgs, out Type funcType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetFuncType(class System.Type[] typeArgs, [out] class System.Type&amp; funcType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetFuncType (typeArgs As Type(), ByRef funcType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetFuncType(cli::array &lt;Type ^&gt; ^ typeArgs, [Runtime::InteropServices::Out] Type ^ % funcType);" />
      <MemberSignature Language="F#" Value="static member TryGetFuncType : Type[] *  -&gt; bool" Usage="System.Linq.Expressions.Expression.TryGetFuncType (typeArgs, funcType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="funcType" Type="System.Type" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs"><span data-ttu-id="62a30-3707">System.Func デリゲート型の型引数を指定する Type オブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="62a30-3707">An array of Type objects that specify the type arguments for the System.Func delegate type.</span></span></param>
        <param name="funcType"><span data-ttu-id="62a30-3708">このメソッドが返されるときに、特定の型引数を持つ汎用 System.Func デリゲート型を格納します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3708">When this method returns, contains the generic System.Func delegate type that has specific type arguments.</span></span> <span data-ttu-id="62a30-3709"><paramref name="typeArgs" /> に一致する汎用 System.Func デリゲートがない場合は、null を格納します。このパラメーターは初期化されていない状態で渡されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-3709">Contains null if there is no generic System.Func delegate that matches the <paramref name="typeArgs" />.This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="62a30-3710">特定の型引数を持つ汎用 System.Func デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3710">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func delegate type that has specific type arguments.</span></span> <span data-ttu-id="62a30-3711">最後の型引数で、作成するデリゲートの戻り値の型を指定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3711">The last type argument specifies the return type of the created delegate.</span></span></summary>
        <returns><span data-ttu-id="62a30-3712">特定の <paramref name="typeArgs" /> について汎用 System.Func デリゲート型が作成された場合は true。それ以外の場合は false。</span><span class="sxs-lookup"><span data-stu-id="62a30-3712">true if generic System.Func delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public virtual Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ Type { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="System.Linq.Expressions.Expression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="62a30-3713">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3713">Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</span></span></summary>
        <value><span data-ttu-id="62a30-3714">式の静的な型を表す <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3714">The <see cref="T:System.Type" /> that represents the static type of the expression.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3715"><xref:System.Linq.Expressions.Expression.NodeType%2A>は、式ツリー ノードの種類に対し、<xref:System.Linq.Expressions.Expression.Type%2A>ノードが表す式の共通言語ランタイム (CLR) の静的な型を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3715">The <xref:System.Linq.Expressions.Expression.NodeType%2A> is the type of the expression tree node, whereas the <xref:System.Linq.Expressions.Expression.Type%2A> represents the static common language runtime (CLR) type of the expression that the node represents.</span></span> <span data-ttu-id="62a30-3716">たとえば、別のノード型を持つ 2 つのノードが持つことができます、同じ<xref:System.Linq.Expressions.Expression.Type%2A>の次のコード例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="62a30-3716">For example, two nodes with different node types can have the same <xref:System.Linq.Expressions.Expression.Type%2A>, as shown in the following code example.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#36)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression TypeAs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression TypeAs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ TypeAs(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member TypeAs : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.TypeAs (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3717"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3717">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-3718"><see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3718">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3719">変換が失敗した場合に <see cref="T:System.Linq.Expressions.UnaryExpression" /> が提供される明示的な参照変換またはボックス化変換を表す <see langword="null" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3719">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit reference or boxing conversion where <see langword="null" /> is supplied if the conversion fails.</span></span></summary>
        <returns><span data-ttu-id="62a30-3720"><see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3720">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3721"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3721">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is `null`.</span></span> <span data-ttu-id="62a30-3722"><xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A>プロパティが両方とも`false`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3722">The <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> properties are both `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-3723">次の例では、使用する方法、<xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29>を作成する方法、 <xref:System.Linq.Expressions.UnaryExpression> null 許容の整数型に null 非許容の整数型の式の参照変換を表します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3723">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.UnaryExpression> that represents the reference conversion of a non-nullable integer expression to the nullable integer type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#11)]
 [!code-vb[System.Linq.Expressions.Expression#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3724"><paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3724"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TypeEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeEqual (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeEqual(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TypeBinaryExpression ^ TypeEqual(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member TypeEqual : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.TypeBinaryExpression" Usage="System.Linq.Expressions.Expression.TypeEqual (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3725"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3725">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="T:System.Linq.Expressions.Expression" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-3726"><see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3726">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3727">実行時の型 ID を比較する <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3727">Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> that compares run-time type identity.</span></span></summary>
        <returns><span data-ttu-id="62a30-3728"><see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> プロパティおよび <see cref="T:System.Linq.Expressions.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3728">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> and for which the <see cref="T:System.Linq.Expressions.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeIs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeIs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeIs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TypeBinaryExpression ^ TypeIs(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member TypeIs : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.TypeBinaryExpression" Usage="System.Linq.Expressions.Expression.TypeIs (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3729"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3729">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property equal to.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-3730"><see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3730">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3731"><see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3731">Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</span></span></summary>
        <returns><span data-ttu-id="62a30-3732"><see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> プロパティおよび <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3732">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> and for which the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3733"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>表します<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3733">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62a30-3734">次の例では、使用する方法、<xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29>を作成する方法、<xref:System.Linq.Expressions.TypeBinaryExpression>に対して文字列値の型のテストを表す、<xref:System.Int32>型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3734">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.TypeBinaryExpression> that represents a type test of a string value against the <xref:System.Int32> type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#12)]
 [!code-vb[System.Linq.Expressions.Expression#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3735"><paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3735"><paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnaryPlus">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3736">単項プラス演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3736">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ UnaryPlus(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member UnaryPlus : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.UnaryPlus expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3737"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3737">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3738">単項プラス演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3738">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-3739"><see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3739">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3740"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-3740">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="62a30-3741"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3741">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-3742">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3742">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-3743">それ以外の場合、false です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3743">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-3744">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3744">Implementing Method</span></span>  
 <span data-ttu-id="62a30-3745">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3745">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-3746">場合`expression`します。型は、単項プラス演算子を定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子は、メソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-3746">If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3747">の場合`expression`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3747">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-3748">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-3748">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-3749">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3749">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3750">場合`expression`します。型の実装メソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3750">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-3751">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3751">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3752">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3752">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-3753">`expression`.型が null 許容値型と、対応する null 非許容値型は、実装メソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3753">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-3754">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3754">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-3755">メソッドの実装がある場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3755">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="62a30-3756">場合`expression`します。型が null 非許容には、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3756">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-3757">それ以外の場合、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-3757">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3758"><paramref name="expression" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3758"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-3759">単項プラス演算子は <paramref name="expression" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3759">The unary plus operator is not defined for <paramref name="expression" />.Type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ UnaryPlus(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member UnaryPlus : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.UnaryPlus (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3760"><see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3760">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span></span></param>
        <param name="method"><span data-ttu-id="62a30-3761"><see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3761">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span></span></param>
        <summary><span data-ttu-id="62a30-3762">単項プラス演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3762">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span></span></summary>
        <returns><span data-ttu-id="62a30-3763"><see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3763">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3764"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>プロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-3764">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="62a30-3765"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3765">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="62a30-3766">ノードがリフトされた場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3766">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="62a30-3767">それ以外の場合、false です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3767">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="62a30-3768">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3768">Implementing Method</span></span>  
 <span data-ttu-id="62a30-3769">次の規則は、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3769">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="62a30-3770">場合`method`は`null`あり、void、以外を表します`static`(`Shared` Visual Basic で) を 1 つの引数を受け取るメソッドは、ノードのメソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-3770">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="62a30-3771">場合`expression`します。型は、単項プラス演算子を定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子は、メソッドの実装。</span><span class="sxs-lookup"><span data-stu-id="62a30-3771">If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3772">の場合`expression`します。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3772">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="62a30-3773">ノードの種類かいないか無効になると</span><span class="sxs-lookup"><span data-stu-id="62a30-3773">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="62a30-3774">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="62a30-3774">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="62a30-3775">場合`expression`します。型の実装メソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3775">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="62a30-3776">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3776">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="62a30-3777">次の 2 つの条件が満たされている場合は、ノードがリフトし、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3777">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="62a30-3778">`expression`.型が null 許容値型と、対応する null 非許容値型は、実装メソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3778">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="62a30-3779">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3779">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="62a30-3780">メソッドの実装がある場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3780">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="62a30-3781">場合`expression`します。型が null 非許容には、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3781">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="62a30-3782">それ以外の場合、ノードがリフトされました。</span><span class="sxs-lookup"><span data-stu-id="62a30-3782">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="62a30-3783"><paramref name="expression" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="62a30-3783"><paramref name="expression" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="62a30-3784"><paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3784"><paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="62a30-3785"><paramref name="method" /> は <see langword="null" /> で、単項プラス演算子は <paramref name="expression" />.Type に対して定義されていません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3785"><paramref name="method" /> is <see langword="null" /> and the unary plus operator is not defined for <paramref name="expression" />.Type.</span></span>  
  
<span data-ttu-id="62a30-3786">- または -</span><span class="sxs-lookup"><span data-stu-id="62a30-3786">-or-</span></span> 
 <span data-ttu-id="62a30-3787"><paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</span><span class="sxs-lookup"><span data-stu-id="62a30-3787"><paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Unbox (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Unbox(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Unbox(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Unbox : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Unbox (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="62a30-3788">ボックス化解除する <see cref="T:System.Linq.Expressions.Expression" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3788">An <see cref="T:System.Linq.Expressions.Expression" /> to unbox.</span></span></param>
        <param name="type"><span data-ttu-id="62a30-3789">式の新しい <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="62a30-3789">The new <see cref="T:System.Type" /> of the expression.</span></span></param>
        <summary><span data-ttu-id="62a30-3790">明示的なボックス化解除を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3790">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit unboxing.</span></span></summary>
        <returns><span data-ttu-id="62a30-3791"><see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a30-3791">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Variable">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="62a30-3792">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3792">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Variable(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Variable : Type -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Variable type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-3793">パラメーターまたは変数の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3793">The type of the parameter or variable.</span></span></param>
        <summary><span data-ttu-id="62a30-3794">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3794">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
        <returns><span data-ttu-id="62a30-3795">指定した名前および型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</span><span class="sxs-lookup"><span data-stu-id="62a30-3795">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Variable(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Variable : Type * string -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Variable (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="62a30-3796">パラメーターまたは変数の型。</span><span class="sxs-lookup"><span data-stu-id="62a30-3796">The type of the parameter or variable.</span></span></param>
        <param name="name"><span data-ttu-id="62a30-3797">パラメーターまたは変数の名前。</span><span class="sxs-lookup"><span data-stu-id="62a30-3797">The name of the parameter or variable.</span></span> <span data-ttu-id="62a30-3798">この名前はデバッグまたは印刷の目的でのみ使用されます。</span><span class="sxs-lookup"><span data-stu-id="62a30-3798">This name is used for debugging or printing purpose only.</span></span></param>
        <summary><span data-ttu-id="62a30-3799">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3799">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span></span></summary>
        <returns><span data-ttu-id="62a30-3800">指定した名前および型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</span><span class="sxs-lookup"><span data-stu-id="62a30-3800">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitChildren(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="abstract member VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="expression.VisitChildren visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor"><span data-ttu-id="62a30-3801"><see cref="T:System.Func`2" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="62a30-3801">An instance of <see cref="T:System.Func`2" />.</span></span></param>
        <summary><span data-ttu-id="62a30-3802">ノードを単純化し、単純化された式の visitor デリゲートを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="62a30-3802">Reduces the node and then calls the visitor delegate on the reduced expression.</span></span> <span data-ttu-id="62a30-3803">ノードを単純化できない場合、このメソッドは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="62a30-3803">The method throws an exception if the node is not reducible.</span></span></summary>
        <returns><span data-ttu-id="62a30-3804">走査中の式、またはツリー内で走査中の式と置き換える式。</span><span class="sxs-lookup"><span data-stu-id="62a30-3804">The expression being visited, or an expression which should replace it in the tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62a30-3805">ノードの子をウォークするロジックを提供するのには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="62a30-3805">Override this method to provide logic to walk the node's children.</span></span> <span data-ttu-id="62a30-3806">一般的な実装では、訪問者を呼び出します。その子にアクセスしのいずれかに変更、変更された子をそれ自体の新しいコピーを返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="62a30-3806">A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>